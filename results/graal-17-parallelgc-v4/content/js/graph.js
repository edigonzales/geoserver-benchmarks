/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 3665.0, "series": [{"data": [[0.0, 29.0], [0.1, 37.0], [0.2, 40.0], [0.3, 41.0], [0.4, 43.0], [0.5, 44.0], [0.6, 45.0], [0.7, 46.0], [0.8, 47.0], [0.9, 48.0], [1.0, 49.0], [1.1, 50.0], [1.2, 50.0], [1.3, 51.0], [1.4, 52.0], [1.5, 52.0], [1.6, 53.0], [1.7, 54.0], [1.8, 54.0], [1.9, 55.0], [2.0, 55.0], [2.1, 56.0], [2.2, 57.0], [2.3, 57.0], [2.4, 58.0], [2.5, 58.0], [2.6, 59.0], [2.7, 59.0], [2.8, 59.0], [2.9, 60.0], [3.0, 60.0], [3.1, 61.0], [3.2, 61.0], [3.3, 62.0], [3.4, 62.0], [3.5, 62.0], [3.6, 63.0], [3.7, 63.0], [3.8, 64.0], [3.9, 64.0], [4.0, 64.0], [4.1, 65.0], [4.2, 65.0], [4.3, 66.0], [4.4, 66.0], [4.5, 66.0], [4.6, 67.0], [4.7, 67.0], [4.8, 68.0], [4.9, 68.0], [5.0, 68.0], [5.1, 69.0], [5.2, 69.0], [5.3, 69.0], [5.4, 70.0], [5.5, 70.0], [5.6, 71.0], [5.7, 71.0], [5.8, 71.0], [5.9, 72.0], [6.0, 72.0], [6.1, 72.0], [6.2, 73.0], [6.3, 73.0], [6.4, 73.0], [6.5, 74.0], [6.6, 74.0], [6.7, 74.0], [6.8, 75.0], [6.9, 75.0], [7.0, 76.0], [7.1, 76.0], [7.2, 76.0], [7.3, 76.0], [7.4, 77.0], [7.5, 77.0], [7.6, 78.0], [7.7, 78.0], [7.8, 78.0], [7.9, 79.0], [8.0, 79.0], [8.1, 79.0], [8.2, 79.0], [8.3, 80.0], [8.4, 80.0], [8.5, 80.0], [8.6, 81.0], [8.7, 81.0], [8.8, 81.0], [8.9, 82.0], [9.0, 82.0], [9.1, 82.0], [9.2, 83.0], [9.3, 83.0], [9.4, 83.0], [9.5, 84.0], [9.6, 84.0], [9.7, 84.0], [9.8, 85.0], [9.9, 85.0], [10.0, 85.0], [10.1, 86.0], [10.2, 86.0], [10.3, 86.0], [10.4, 87.0], [10.5, 87.0], [10.6, 87.0], [10.7, 88.0], [10.8, 88.0], [10.9, 88.0], [11.0, 88.0], [11.1, 89.0], [11.2, 89.0], [11.3, 89.0], [11.4, 90.0], [11.5, 90.0], [11.6, 90.0], [11.7, 91.0], [11.8, 91.0], [11.9, 91.0], [12.0, 92.0], [12.1, 92.0], [12.2, 92.0], [12.3, 93.0], [12.4, 93.0], [12.5, 93.0], [12.6, 94.0], [12.7, 94.0], [12.8, 94.0], [12.9, 95.0], [13.0, 95.0], [13.1, 95.0], [13.2, 96.0], [13.3, 96.0], [13.4, 96.0], [13.5, 96.0], [13.6, 97.0], [13.7, 97.0], [13.8, 97.0], [13.9, 98.0], [14.0, 98.0], [14.1, 98.0], [14.2, 99.0], [14.3, 99.0], [14.4, 99.0], [14.5, 100.0], [14.6, 100.0], [14.7, 100.0], [14.8, 101.0], [14.9, 101.0], [15.0, 101.0], [15.1, 102.0], [15.2, 102.0], [15.3, 102.0], [15.4, 103.0], [15.5, 103.0], [15.6, 103.0], [15.7, 104.0], [15.8, 104.0], [15.9, 104.0], [16.0, 105.0], [16.1, 105.0], [16.2, 105.0], [16.3, 105.0], [16.4, 106.0], [16.5, 106.0], [16.6, 107.0], [16.7, 107.0], [16.8, 107.0], [16.9, 108.0], [17.0, 108.0], [17.1, 108.0], [17.2, 109.0], [17.3, 109.0], [17.4, 109.0], [17.5, 110.0], [17.6, 110.0], [17.7, 110.0], [17.8, 111.0], [17.9, 111.0], [18.0, 111.0], [18.1, 112.0], [18.2, 112.0], [18.3, 113.0], [18.4, 113.0], [18.5, 113.0], [18.6, 114.0], [18.7, 114.0], [18.8, 114.0], [18.9, 115.0], [19.0, 115.0], [19.1, 115.0], [19.2, 116.0], [19.3, 116.0], [19.4, 116.0], [19.5, 117.0], [19.6, 117.0], [19.7, 117.0], [19.8, 118.0], [19.9, 118.0], [20.0, 119.0], [20.1, 119.0], [20.2, 119.0], [20.3, 120.0], [20.4, 120.0], [20.5, 121.0], [20.6, 121.0], [20.7, 121.0], [20.8, 122.0], [20.9, 122.0], [21.0, 123.0], [21.1, 123.0], [21.2, 123.0], [21.3, 124.0], [21.4, 124.0], [21.5, 124.0], [21.6, 125.0], [21.7, 125.0], [21.8, 125.0], [21.9, 126.0], [22.0, 126.0], [22.1, 127.0], [22.2, 127.0], [22.3, 127.0], [22.4, 128.0], [22.5, 128.0], [22.6, 129.0], [22.7, 129.0], [22.8, 129.0], [22.9, 130.0], [23.0, 130.0], [23.1, 131.0], [23.2, 131.0], [23.3, 131.0], [23.4, 132.0], [23.5, 132.0], [23.6, 133.0], [23.7, 133.0], [23.8, 134.0], [23.9, 134.0], [24.0, 134.0], [24.1, 135.0], [24.2, 135.0], [24.3, 136.0], [24.4, 136.0], [24.5, 137.0], [24.6, 137.0], [24.7, 137.0], [24.8, 138.0], [24.9, 138.0], [25.0, 139.0], [25.1, 139.0], [25.2, 140.0], [25.3, 140.0], [25.4, 140.0], [25.5, 141.0], [25.6, 141.0], [25.7, 142.0], [25.8, 142.0], [25.9, 142.0], [26.0, 143.0], [26.1, 143.0], [26.2, 144.0], [26.3, 144.0], [26.4, 145.0], [26.5, 145.0], [26.6, 146.0], [26.7, 146.0], [26.8, 146.0], [26.9, 147.0], [27.0, 147.0], [27.1, 148.0], [27.2, 149.0], [27.3, 149.0], [27.4, 150.0], [27.5, 150.0], [27.6, 151.0], [27.7, 151.0], [27.8, 152.0], [27.9, 152.0], [28.0, 153.0], [28.1, 153.0], [28.2, 154.0], [28.3, 154.0], [28.4, 155.0], [28.5, 155.0], [28.6, 156.0], [28.7, 156.0], [28.8, 157.0], [28.9, 157.0], [29.0, 158.0], [29.1, 159.0], [29.2, 159.0], [29.3, 160.0], [29.4, 160.0], [29.5, 161.0], [29.6, 161.0], [29.7, 162.0], [29.8, 162.0], [29.9, 163.0], [30.0, 163.0], [30.1, 164.0], [30.2, 164.0], [30.3, 165.0], [30.4, 166.0], [30.5, 166.0], [30.6, 167.0], [30.7, 167.0], [30.8, 168.0], [30.9, 169.0], [31.0, 169.0], [31.1, 170.0], [31.2, 171.0], [31.3, 171.0], [31.4, 172.0], [31.5, 173.0], [31.6, 173.0], [31.7, 174.0], [31.8, 175.0], [31.9, 175.0], [32.0, 176.0], [32.1, 177.0], [32.2, 177.0], [32.3, 178.0], [32.4, 178.0], [32.5, 179.0], [32.6, 180.0], [32.7, 180.0], [32.8, 181.0], [32.9, 182.0], [33.0, 182.0], [33.1, 183.0], [33.2, 184.0], [33.3, 184.0], [33.4, 185.0], [33.5, 186.0], [33.6, 187.0], [33.7, 187.0], [33.8, 188.0], [33.9, 189.0], [34.0, 190.0], [34.1, 191.0], [34.2, 192.0], [34.3, 192.0], [34.4, 193.0], [34.5, 194.0], [34.6, 195.0], [34.7, 196.0], [34.8, 197.0], [34.9, 197.0], [35.0, 198.0], [35.1, 199.0], [35.2, 200.0], [35.3, 201.0], [35.4, 202.0], [35.5, 203.0], [35.6, 203.0], [35.7, 204.0], [35.8, 205.0], [35.9, 206.0], [36.0, 207.0], [36.1, 208.0], [36.2, 209.0], [36.3, 210.0], [36.4, 211.0], [36.5, 212.0], [36.6, 213.0], [36.7, 214.0], [36.8, 215.0], [36.9, 216.0], [37.0, 217.0], [37.1, 218.0], [37.2, 219.0], [37.3, 220.0], [37.4, 221.0], [37.5, 222.0], [37.6, 224.0], [37.7, 225.0], [37.8, 226.0], [37.9, 227.0], [38.0, 229.0], [38.1, 230.0], [38.2, 231.0], [38.3, 232.0], [38.4, 233.0], [38.5, 235.0], [38.6, 236.0], [38.7, 238.0], [38.8, 239.0], [38.9, 240.0], [39.0, 242.0], [39.1, 243.0], [39.2, 245.0], [39.3, 246.0], [39.4, 248.0], [39.5, 249.0], [39.6, 250.0], [39.7, 252.0], [39.8, 253.0], [39.9, 255.0], [40.0, 257.0], [40.1, 258.0], [40.2, 260.0], [40.3, 261.0], [40.4, 263.0], [40.5, 265.0], [40.6, 267.0], [40.7, 268.0], [40.8, 270.0], [40.9, 272.0], [41.0, 274.0], [41.1, 275.0], [41.2, 277.0], [41.3, 279.0], [41.4, 280.0], [41.5, 282.0], [41.6, 285.0], [41.7, 286.0], [41.8, 288.0], [41.9, 290.0], [42.0, 292.0], [42.1, 294.0], [42.2, 296.0], [42.3, 298.0], [42.4, 300.0], [42.5, 302.0], [42.6, 304.0], [42.7, 306.0], [42.8, 309.0], [42.9, 311.0], [43.0, 313.0], [43.1, 315.0], [43.2, 317.0], [43.3, 319.0], [43.4, 321.0], [43.5, 323.0], [43.6, 325.0], [43.7, 327.0], [43.8, 330.0], [43.9, 332.0], [44.0, 335.0], [44.1, 337.0], [44.2, 339.0], [44.3, 342.0], [44.4, 344.0], [44.5, 346.0], [44.6, 349.0], [44.7, 351.0], [44.8, 354.0], [44.9, 356.0], [45.0, 358.0], [45.1, 360.0], [45.2, 363.0], [45.3, 365.0], [45.4, 367.0], [45.5, 370.0], [45.6, 372.0], [45.7, 375.0], [45.8, 377.0], [45.9, 380.0], [46.0, 382.0], [46.1, 385.0], [46.2, 387.0], [46.3, 390.0], [46.4, 393.0], [46.5, 395.0], [46.6, 398.0], [46.7, 400.0], [46.8, 403.0], [46.9, 405.0], [47.0, 407.0], [47.1, 409.0], [47.2, 412.0], [47.3, 414.0], [47.4, 417.0], [47.5, 419.0], [47.6, 421.0], [47.7, 423.0], [47.8, 426.0], [47.9, 428.0], [48.0, 431.0], [48.1, 433.0], [48.2, 435.0], [48.3, 437.0], [48.4, 439.0], [48.5, 442.0], [48.6, 444.0], [48.7, 446.0], [48.8, 449.0], [48.9, 451.0], [49.0, 453.0], [49.1, 455.0], [49.2, 457.0], [49.3, 459.0], [49.4, 462.0], [49.5, 464.0], [49.6, 466.0], [49.7, 468.0], [49.8, 470.0], [49.9, 473.0], [50.0, 475.0], [50.1, 477.0], [50.2, 479.0], [50.3, 481.0], [50.4, 484.0], [50.5, 486.0], [50.6, 488.0], [50.7, 490.0], [50.8, 492.0], [50.9, 494.0], [51.0, 496.0], [51.1, 498.0], [51.2, 500.0], [51.3, 502.0], [51.4, 504.0], [51.5, 506.0], [51.6, 508.0], [51.7, 510.0], [51.8, 512.0], [51.9, 514.0], [52.0, 516.0], [52.1, 518.0], [52.2, 520.0], [52.3, 522.0], [52.4, 524.0], [52.5, 526.0], [52.6, 528.0], [52.7, 530.0], [52.8, 532.0], [52.9, 534.0], [53.0, 536.0], [53.1, 538.0], [53.2, 540.0], [53.3, 541.0], [53.4, 543.0], [53.5, 545.0], [53.6, 547.0], [53.7, 549.0], [53.8, 551.0], [53.9, 553.0], [54.0, 555.0], [54.1, 557.0], [54.2, 559.0], [54.3, 561.0], [54.4, 562.0], [54.5, 564.0], [54.6, 566.0], [54.7, 567.0], [54.8, 569.0], [54.9, 571.0], [55.0, 573.0], [55.1, 575.0], [55.2, 577.0], [55.3, 579.0], [55.4, 581.0], [55.5, 582.0], [55.6, 584.0], [55.7, 586.0], [55.8, 588.0], [55.9, 590.0], [56.0, 592.0], [56.1, 593.0], [56.2, 595.0], [56.3, 597.0], [56.4, 599.0], [56.5, 600.0], [56.6, 602.0], [56.7, 604.0], [56.8, 606.0], [56.9, 608.0], [57.0, 610.0], [57.1, 611.0], [57.2, 613.0], [57.3, 615.0], [57.4, 617.0], [57.5, 618.0], [57.6, 620.0], [57.7, 622.0], [57.8, 623.0], [57.9, 625.0], [58.0, 627.0], [58.1, 629.0], [58.2, 630.0], [58.3, 632.0], [58.4, 634.0], [58.5, 636.0], [58.6, 638.0], [58.7, 639.0], [58.8, 641.0], [58.9, 643.0], [59.0, 645.0], [59.1, 646.0], [59.2, 648.0], [59.3, 650.0], [59.4, 651.0], [59.5, 653.0], [59.6, 655.0], [59.7, 657.0], [59.8, 659.0], [59.9, 660.0], [60.0, 662.0], [60.1, 664.0], [60.2, 666.0], [60.3, 668.0], [60.4, 669.0], [60.5, 671.0], [60.6, 673.0], [60.7, 674.0], [60.8, 676.0], [60.9, 678.0], [61.0, 680.0], [61.1, 682.0], [61.2, 684.0], [61.3, 685.0], [61.4, 687.0], [61.5, 689.0], [61.6, 690.0], [61.7, 692.0], [61.8, 694.0], [61.9, 695.0], [62.0, 697.0], [62.1, 699.0], [62.2, 701.0], [62.3, 702.0], [62.4, 704.0], [62.5, 706.0], [62.6, 708.0], [62.7, 709.0], [62.8, 711.0], [62.9, 713.0], [63.0, 715.0], [63.1, 716.0], [63.2, 718.0], [63.3, 720.0], [63.4, 722.0], [63.5, 724.0], [63.6, 725.0], [63.7, 727.0], [63.8, 729.0], [63.9, 731.0], [64.0, 732.0], [64.1, 734.0], [64.2, 736.0], [64.3, 738.0], [64.4, 739.0], [64.5, 741.0], [64.6, 743.0], [64.7, 744.0], [64.8, 746.0], [64.9, 748.0], [65.0, 749.0], [65.1, 751.0], [65.2, 753.0], [65.3, 754.0], [65.4, 756.0], [65.5, 758.0], [65.6, 760.0], [65.7, 761.0], [65.8, 763.0], [65.9, 765.0], [66.0, 766.0], [66.1, 768.0], [66.2, 770.0], [66.3, 771.0], [66.4, 773.0], [66.5, 775.0], [66.6, 777.0], [66.7, 778.0], [66.8, 780.0], [66.9, 782.0], [67.0, 784.0], [67.1, 785.0], [67.2, 787.0], [67.3, 789.0], [67.4, 791.0], [67.5, 793.0], [67.6, 795.0], [67.7, 796.0], [67.8, 798.0], [67.9, 800.0], [68.0, 802.0], [68.1, 804.0], [68.2, 806.0], [68.3, 808.0], [68.4, 809.0], [68.5, 811.0], [68.6, 813.0], [68.7, 815.0], [68.8, 816.0], [68.9, 818.0], [69.0, 820.0], [69.1, 822.0], [69.2, 823.0], [69.3, 825.0], [69.4, 827.0], [69.5, 829.0], [69.6, 831.0], [69.7, 832.0], [69.8, 834.0], [69.9, 836.0], [70.0, 838.0], [70.1, 840.0], [70.2, 842.0], [70.3, 844.0], [70.4, 845.0], [70.5, 847.0], [70.6, 849.0], [70.7, 851.0], [70.8, 853.0], [70.9, 855.0], [71.0, 856.0], [71.1, 858.0], [71.2, 860.0], [71.3, 862.0], [71.4, 864.0], [71.5, 866.0], [71.6, 868.0], [71.7, 869.0], [71.8, 871.0], [71.9, 873.0], [72.0, 875.0], [72.1, 877.0], [72.2, 878.0], [72.3, 880.0], [72.4, 882.0], [72.5, 884.0], [72.6, 886.0], [72.7, 888.0], [72.8, 889.0], [72.9, 891.0], [73.0, 894.0], [73.1, 896.0], [73.2, 897.0], [73.3, 899.0], [73.4, 901.0], [73.5, 903.0], [73.6, 905.0], [73.7, 907.0], [73.8, 909.0], [73.9, 911.0], [74.0, 913.0], [74.1, 915.0], [74.2, 917.0], [74.3, 919.0], [74.4, 921.0], [74.5, 923.0], [74.6, 925.0], [74.7, 927.0], [74.8, 929.0], [74.9, 931.0], [75.0, 933.0], [75.1, 935.0], [75.2, 937.0], [75.3, 939.0], [75.4, 941.0], [75.5, 943.0], [75.6, 945.0], [75.7, 947.0], [75.8, 949.0], [75.9, 951.0], [76.0, 953.0], [76.1, 956.0], [76.2, 958.0], [76.3, 960.0], [76.4, 962.0], [76.5, 964.0], [76.6, 966.0], [76.7, 968.0], [76.8, 970.0], [76.9, 972.0], [77.0, 974.0], [77.1, 976.0], [77.2, 978.0], [77.3, 981.0], [77.4, 983.0], [77.5, 985.0], [77.6, 987.0], [77.7, 990.0], [77.8, 991.0], [77.9, 993.0], [78.0, 996.0], [78.1, 998.0], [78.2, 1000.0], [78.3, 1002.0], [78.4, 1005.0], [78.5, 1006.0], [78.6, 1008.0], [78.7, 1011.0], [78.8, 1013.0], [78.9, 1015.0], [79.0, 1017.0], [79.1, 1019.0], [79.2, 1021.0], [79.3, 1024.0], [79.4, 1026.0], [79.5, 1028.0], [79.6, 1031.0], [79.7, 1033.0], [79.8, 1035.0], [79.9, 1038.0], [80.0, 1040.0], [80.1, 1042.0], [80.2, 1045.0], [80.3, 1047.0], [80.4, 1050.0], [80.5, 1052.0], [80.6, 1054.0], [80.7, 1057.0], [80.8, 1059.0], [80.9, 1062.0], [81.0, 1065.0], [81.1, 1068.0], [81.2, 1071.0], [81.3, 1074.0], [81.4, 1076.0], [81.5, 1079.0], [81.6, 1081.0], [81.7, 1084.0], [81.8, 1086.0], [81.9, 1088.0], [82.0, 1091.0], [82.1, 1093.0], [82.2, 1095.0], [82.3, 1098.0], [82.4, 1100.0], [82.5, 1103.0], [82.6, 1105.0], [82.7, 1108.0], [82.8, 1110.0], [82.9, 1113.0], [83.0, 1116.0], [83.1, 1119.0], [83.2, 1121.0], [83.3, 1124.0], [83.4, 1126.0], [83.5, 1129.0], [83.6, 1131.0], [83.7, 1134.0], [83.8, 1137.0], [83.9, 1140.0], [84.0, 1142.0], [84.1, 1145.0], [84.2, 1148.0], [84.3, 1151.0], [84.4, 1154.0], [84.5, 1157.0], [84.6, 1159.0], [84.7, 1162.0], [84.8, 1164.0], [84.9, 1168.0], [85.0, 1171.0], [85.1, 1174.0], [85.2, 1177.0], [85.3, 1181.0], [85.4, 1184.0], [85.5, 1187.0], [85.6, 1190.0], [85.7, 1193.0], [85.8, 1197.0], [85.9, 1199.0], [86.0, 1202.0], [86.1, 1205.0], [86.2, 1208.0], [86.3, 1211.0], [86.4, 1214.0], [86.5, 1218.0], [86.6, 1221.0], [86.7, 1225.0], [86.8, 1228.0], [86.9, 1231.0], [87.0, 1235.0], [87.1, 1238.0], [87.2, 1241.0], [87.3, 1244.0], [87.4, 1247.0], [87.5, 1251.0], [87.6, 1254.0], [87.7, 1258.0], [87.8, 1261.0], [87.9, 1264.0], [88.0, 1269.0], [88.1, 1272.0], [88.2, 1276.0], [88.3, 1280.0], [88.4, 1284.0], [88.5, 1287.0], [88.6, 1290.0], [88.7, 1294.0], [88.8, 1298.0], [88.9, 1301.0], [89.0, 1305.0], [89.1, 1309.0], [89.2, 1313.0], [89.3, 1317.0], [89.4, 1321.0], [89.5, 1325.0], [89.6, 1330.0], [89.7, 1333.0], [89.8, 1337.0], [89.9, 1341.0], [90.0, 1345.0], [90.1, 1349.0], [90.2, 1353.0], [90.3, 1357.0], [90.4, 1362.0], [90.5, 1366.0], [90.6, 1371.0], [90.7, 1376.0], [90.8, 1379.0], [90.9, 1383.0], [91.0, 1388.0], [91.1, 1393.0], [91.2, 1397.0], [91.3, 1402.0], [91.4, 1407.0], [91.5, 1412.0], [91.6, 1416.0], [91.7, 1420.0], [91.8, 1425.0], [91.9, 1430.0], [92.0, 1435.0], [92.1, 1439.0], [92.2, 1445.0], [92.3, 1451.0], [92.4, 1456.0], [92.5, 1461.0], [92.6, 1466.0], [92.7, 1471.0], [92.8, 1476.0], [92.9, 1482.0], [93.0, 1487.0], [93.1, 1492.0], [93.2, 1498.0], [93.3, 1504.0], [93.4, 1511.0], [93.5, 1516.0], [93.6, 1523.0], [93.7, 1530.0], [93.8, 1535.0], [93.9, 1540.0], [94.0, 1547.0], [94.1, 1553.0], [94.2, 1559.0], [94.3, 1566.0], [94.4, 1573.0], [94.5, 1580.0], [94.6, 1586.0], [94.7, 1593.0], [94.8, 1601.0], [94.9, 1609.0], [95.0, 1615.0], [95.1, 1622.0], [95.2, 1629.0], [95.3, 1637.0], [95.4, 1645.0], [95.5, 1653.0], [95.6, 1662.0], [95.7, 1670.0], [95.8, 1680.0], [95.9, 1688.0], [96.0, 1697.0], [96.1, 1705.0], [96.2, 1714.0], [96.3, 1724.0], [96.4, 1733.0], [96.5, 1745.0], [96.6, 1755.0], [96.7, 1763.0], [96.8, 1776.0], [96.9, 1788.0], [97.0, 1799.0], [97.1, 1811.0], [97.2, 1824.0], [97.3, 1838.0], [97.4, 1852.0], [97.5, 1866.0], [97.6, 1882.0], [97.7, 1894.0], [97.8, 1908.0], [97.9, 1923.0], [98.0, 1939.0], [98.1, 1957.0], [98.2, 1976.0], [98.3, 1994.0], [98.4, 2010.0], [98.5, 2030.0], [98.6, 2050.0], [98.7, 2070.0], [98.8, 2095.0], [98.9, 2123.0], [99.0, 2158.0], [99.1, 2187.0], [99.2, 2225.0], [99.3, 2257.0], [99.4, 2306.0], [99.5, 2362.0], [99.6, 2422.0], [99.7, 2497.0], [99.8, 2598.0], [99.9, 2776.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24283.0, "series": [{"data": [[0.0, 16913.0], [600.0, 6671.0], [700.0, 6694.0], [800.0, 6393.0], [900.0, 5687.0], [1000.0, 4942.0], [1100.0, 4132.0], [1200.0, 3441.0], [1300.0, 2817.0], [1400.0, 2305.0], [1500.0, 1830.0], [100.0, 24283.0], [1600.0, 1470.0], [1700.0, 1140.0], [1800.0, 867.0], [1900.0, 695.0], [2000.0, 565.0], [2100.0, 369.0], [2200.0, 298.0], [2300.0, 221.0], [2400.0, 152.0], [2500.0, 114.0], [2600.0, 74.0], [2700.0, 55.0], [2800.0, 45.0], [2900.0, 16.0], [3000.0, 13.0], [3100.0, 14.0], [200.0, 8453.0], [3200.0, 5.0], [3300.0, 2.0], [3400.0, 6.0], [3500.0, 2.0], [3600.0, 1.0], [300.0, 5063.0], [400.0, 5270.0], [500.0, 6182.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7933.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 60039.0, "series": [{"data": [[0.0, 60039.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 49228.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7933.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72866792E12, "maxY": 16.0, "series": [{"data": [[1.72867188E12, 12.0], [1.7286735E12, 12.0], [1.72867218E12, 12.0], [1.72867248E12, 12.0], [1.7286723E12, 12.0], [1.7286726E12, 12.0], [1.7286729E12, 12.0], [1.7286732E12, 12.0], [1.72867206E12, 12.0], [1.72867236E12, 12.0], [1.72867266E12, 12.0], [1.72867296E12, 12.0], [1.72867278E12, 12.0], [1.72867308E12, 12.0], [1.72867176E12, 11.843949044585989], [1.72867338E12, 12.0], [1.72867368E12, 5.019531249999997], [1.72867254E12, 12.0], [1.72867284E12, 12.0], [1.72867314E12, 12.0], [1.72867344E12, 12.0], [1.72867326E12, 12.0], [1.72867356E12, 12.0], [1.72867194E12, 12.0], [1.72867224E12, 12.0], [1.72867302E12, 12.0], [1.72867332E12, 12.0], [1.72867362E12, 11.611913357400717], [1.728672E12, 12.0], [1.72867182E12, 12.0], [1.72867212E12, 12.0], [1.72867242E12, 12.0], [1.72867272E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72866816E12, 1.9859813084112148], [1.72866804E12, 2.0], [1.7286681E12, 2.0], [1.72866792E12, 1.9824561403508771], [1.72866798E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72866834E12, 4.0], [1.72866864E12, 4.0], [1.72866966E12, 4.0], [1.72866906E12, 4.0], [1.72866936E12, 4.0], [1.72866846E12, 4.0], [1.72866876E12, 4.0], [1.72866882E12, 4.0], [1.72866912E12, 4.0], [1.72866822E12, 4.0], [1.72866852E12, 4.0], [1.72866954E12, 4.0], [1.72866894E12, 4.0], [1.72866984E12, 1.0], [1.72866924E12, 4.0], [1.7286693E12, 4.0], [1.7286696E12, 4.0], [1.7286687E12, 4.0], [1.728669E12, 4.0], [1.7286684E12, 4.0], [1.72866942E12, 4.0], [1.72866972E12, 4.0], [1.72866978E12, 3.4477611940298494], [1.72866816E12, 3.9858490566037745], [1.72866918E12, 4.0], [1.72866948E12, 4.0], [1.72866858E12, 4.0], [1.72866888E12, 4.0], [1.72866828E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.7286738E12, 16.0], [1.7286753E12, 8.6135531135531], [1.728675E12, 16.0], [1.7286747E12, 16.0], [1.72867488E12, 16.0], [1.72867458E12, 16.0], [1.72867428E12, 16.0], [1.72867398E12, 16.0], [1.72867512E12, 16.0], [1.72867482E12, 16.0], [1.72867452E12, 16.0], [1.72867422E12, 16.0], [1.7286744E12, 16.0], [1.7286741E12, 16.0], [1.72867368E12, 15.90140845070423], [1.72867464E12, 16.0], [1.72867434E12, 16.0], [1.72867404E12, 16.0], [1.72867386E12, 16.0], [1.72867524E12, 15.265957446808528], [1.72867494E12, 16.0], [1.72867416E12, 16.0], [1.72867392E12, 16.0], [1.72867518E12, 16.0], [1.72867374E12, 16.0], [1.72867506E12, 16.0], [1.72867476E12, 16.0], [1.72867446E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.72866996E12, 8.0], [1.72867158E12, 8.0], [1.72867056E12, 8.0], [1.72867026E12, 8.0], [1.72867068E12, 8.0], [1.72867038E12, 8.0], [1.72867128E12, 8.0], [1.72867098E12, 8.0], [1.72867044E12, 8.0], [1.72867014E12, 8.0], [1.72867104E12, 8.0], [1.72867074E12, 8.0], [1.72867116E12, 8.0], [1.72867086E12, 8.0], [1.72867176E12, 2.564393939393939], [1.72866984E12, 7.982649842271295], [1.72867146E12, 8.0], [1.72867092E12, 8.0], [1.72867062E12, 8.0], [1.72867152E12, 8.0], [1.72867122E12, 8.0], [1.72867164E12, 8.0], [1.72867134E12, 8.0], [1.72867032E12, 8.0], [1.72867002E12, 8.0], [1.7286714E12, 8.0], [1.7286711E12, 8.0], [1.72867008E12, 8.0], [1.7286717E12, 7.27334083239595], [1.7286702E12, 8.0], [1.7286699E12, 8.0], [1.7286708E12, 8.0], [1.7286705E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7286753E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 385.3171806167406, "minX": 1.0, "maxY": 936.0967741935483, "series": [{"data": [[2.0, 385.3171806167406], [8.0, 477.48671723743627], [9.0, 503.6872246696033], [10.0, 508.7352941176471], [11.0, 582.4210526315785], [3.0, 411.12655086848594], [12.0, 629.5752562842313], [13.0, 771.7352941176471], [14.0, 659.2548596112299], [15.0, 936.0967741935483], [1.0, 439.7927927927928], [4.0, 407.4884868421068], [16.0, 807.9341230391824], [5.0, 421.79279279279285], [6.0, 429.0497925311204], [7.0, 417.79069767441877]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.72228668941985, 601.1712201365123]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72866792E12, "maxY": 6.25538275E7, "series": [{"data": [[1.7286735E12, 5.8420298016666666E7], [1.72866804E12, 1.5284100016666668E7], [1.72867026E12, 4.9053014266666666E7], [1.72867248E12, 5.8669710416666664E7], [1.7286747E12, 6.25538275E7], [1.72866906E12, 2.83469022E7], [1.7286723E12, 5.6955858733333334E7], [1.72867488E12, 6.043172525E7], [1.72867128E12, 5.004048338333333E7], [1.72867044E12, 5.005993811666667E7], [1.72866822E12, 2.9403133333333332E7], [1.72867266E12, 5.718059211666667E7], [1.72867452E12, 6.00339589E7], [1.72866924E12, 2.9716911733333334E7], [1.72867146E12, 5.0422851483333334E7], [1.72867368E12, 3.98775908E7], [1.7286696E12, 2.9354744016666666E7], [1.72867062E12, 5.09354817E7], [1.72867284E12, 5.9046933983333334E7], [1.72867404E12, 6.195014261666667E7], [1.72867164E12, 5.107917563333333E7], [1.7286684E12, 3.0515004716666665E7], [1.72866942E12, 3.1462410883333333E7], [1.72867386E12, 6.052890906666667E7], [1.72867524E12, 5.891044943333333E7], [1.72866978E12, 2.2936233883333333E7], [1.72867302E12, 5.938972643333333E7], [1.728672E12, 5.903449228333333E7], [1.72866858E12, 2.9872477166666668E7], [1.72867182E12, 5.9132034733333334E7], [1.72867506E12, 6.016333528333333E7], [1.7286708E12, 5.0642016E7], [1.72866834E12, 2.95437524E7], [1.72867158E12, 5.13360024E7], [1.7286738E12, 6.179550935E7], [1.72867056E12, 5.057038788333333E7], [1.728675E12, 6.133381855E7], [1.72866936E12, 3.0323540883333333E7], [1.72867038E12, 5.11754983E7], [1.7286726E12, 5.751548886666667E7], [1.72867398E12, 5.9337481166666664E7], [1.72867482E12, 6.0188650166666664E7], [1.72867296E12, 5.729236636666667E7], [1.72866852E12, 3.0449167066666666E7], [1.72867074E12, 5.087805845E7], [1.72866954E12, 3.0167910533333335E7], [1.72867278E12, 5.640611675E7], [1.72867176E12, 2.8182922316666666E7], [1.72867092E12, 5.048159603333333E7], [1.72867434E12, 6.15951246E7], [1.72867314E12, 5.634393625E7], [1.7286687E12, 3.0428469116666667E7], [1.72867194E12, 5.821528606666667E7], [1.72866972E12, 2.8613089183333334E7], [1.72867416E12, 5.994866378333333E7], [1.7286711E12, 5.063828031666667E7], [1.72867332E12, 5.9335868516666666E7], [1.72867008E12, 4.9537353266666666E7], [1.72867518E12, 6.0135186166666664E7], [1.72866888E12, 3.0804149033333335E7], [1.7286699E12, 4.8668560766666666E7], [1.72867212E12, 5.922942465E7], [1.72867188E12, 5.691185961666667E7], [1.7286753E12, 2.7769791283333335E7], [1.72866864E12, 3.0935686333333332E7], [1.72866966E12, 3.0560479766666666E7], [1.72867068E12, 5.1208034483333334E7], [1.72866846E12, 3.1465307433333334E7], [1.7286729E12, 5.87567567E7], [1.72867428E12, 6.07751922E7], [1.72866882E12, 2.9752413516666666E7], [1.72867512E12, 6.109179181666667E7], [1.72867206E12, 5.90855009E7], [1.72867104E12, 5.234155555E7], [1.72867086E12, 5.114174878333333E7], [1.72867308E12, 5.585336568333333E7], [1.7286741E12, 6.14774438E7], [1.72866984E12, 3.659927238333333E7], [1.72867464E12, 6.121295453333333E7], [1.728669E12, 2.914546955E7], [1.72867122E12, 5.158787963333333E7], [1.72867344E12, 5.807543035E7], [1.72867326E12, 5.6892108166666664E7], [1.72867002E12, 5.31171084E7], [1.72867224E12, 5.8980024166666664E7], [1.7286714E12, 5.193232875E7], [1.72866816E12, 1.9092524883333333E7], [1.72866918E12, 3.1101777533333335E7], [1.72867362E12, 5.7884667016666666E7], [1.7286702E12, 5.159029765E7], [1.72866798E12, 1.63556443E7], [1.72867242E12, 5.8311402416666664E7], [1.72867446E12, 6.058471096666667E7], [1.72866996E12, 5.111813613333333E7], [1.72867218E12, 5.846913775E7], [1.72867458E12, 5.989884968333333E7], [1.72867098E12, 4.947132325E7], [1.7286732E12, 5.842554781666667E7], [1.72866876E12, 3.0554284616666667E7], [1.72866912E12, 3.06693717E7], [1.72867014E12, 5.1260796766666666E7], [1.72867236E12, 5.7797725233333334E7], [1.72867422E12, 6.112848675E7], [1.72867116E12, 4.987488681666667E7], [1.7286744E12, 5.977078318333333E7], [1.72866792E12, 3316586.4833333334], [1.72866894E12, 3.02002404E7], [1.72867338E12, 5.7142193583333336E7], [1.7286693E12, 2.9474076166666668E7], [1.72867254E12, 5.8894195083333336E7], [1.72867152E12, 5.186994675E7], [1.7286681E12, 1.579064235E7], [1.72867134E12, 5.307848725E7], [1.72867356E12, 5.766383321666667E7], [1.72867032E12, 4.918442388333333E7], [1.72867494E12, 5.919110895E7], [1.72866948E12, 2.9794861033333335E7], [1.7286717E12, 4.8268704766666666E7], [1.72867392E12, 5.911128131666667E7], [1.72867374E12, 5.8876589233333334E7], [1.72867476E12, 6.122561531666667E7], [1.72866828E12, 3.0512450966666665E7], [1.7286705E12, 5.184889356666667E7], [1.72867272E12, 5.76740874E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7286735E12, 0.0], [1.72866804E12, 0.0], [1.72867026E12, 0.0], [1.72867248E12, 0.0], [1.7286747E12, 0.0], [1.72866906E12, 0.0], [1.7286723E12, 0.0], [1.72867488E12, 0.0], [1.72867128E12, 0.0], [1.72867044E12, 0.0], [1.72866822E12, 0.0], [1.72867266E12, 0.0], [1.72867452E12, 0.0], [1.72866924E12, 0.0], [1.72867146E12, 0.0], [1.72867368E12, 0.0], [1.7286696E12, 0.0], [1.72867062E12, 0.0], [1.72867284E12, 0.0], [1.72867404E12, 0.0], [1.72867164E12, 0.0], [1.7286684E12, 0.0], [1.72866942E12, 0.0], [1.72867386E12, 0.0], [1.72867524E12, 0.0], [1.72866978E12, 0.0], [1.72867302E12, 0.0], [1.728672E12, 0.0], [1.72866858E12, 0.0], [1.72867182E12, 0.0], [1.72867506E12, 0.0], [1.7286708E12, 0.0], [1.72866834E12, 0.0], [1.72867158E12, 0.0], [1.7286738E12, 0.0], [1.72867056E12, 0.0], [1.728675E12, 0.0], [1.72866936E12, 0.0], [1.72867038E12, 0.0], [1.7286726E12, 0.0], [1.72867398E12, 0.0], [1.72867482E12, 0.0], [1.72867296E12, 0.0], [1.72866852E12, 0.0], [1.72867074E12, 0.0], [1.72866954E12, 0.0], [1.72867278E12, 0.0], [1.72867176E12, 0.0], [1.72867092E12, 0.0], [1.72867434E12, 0.0], [1.72867314E12, 0.0], [1.7286687E12, 0.0], [1.72867194E12, 0.0], [1.72866972E12, 0.0], [1.72867416E12, 0.0], [1.7286711E12, 0.0], [1.72867332E12, 0.0], [1.72867008E12, 0.0], [1.72867518E12, 0.0], [1.72866888E12, 0.0], [1.7286699E12, 0.0], [1.72867212E12, 0.0], [1.72867188E12, 0.0], [1.7286753E12, 0.0], [1.72866864E12, 0.0], [1.72866966E12, 0.0], [1.72867068E12, 0.0], [1.72866846E12, 0.0], [1.7286729E12, 0.0], [1.72867428E12, 0.0], [1.72866882E12, 0.0], [1.72867512E12, 0.0], [1.72867206E12, 0.0], [1.72867104E12, 0.0], [1.72867086E12, 0.0], [1.72867308E12, 0.0], [1.7286741E12, 0.0], [1.72866984E12, 0.0], [1.72867464E12, 0.0], [1.728669E12, 0.0], [1.72867122E12, 0.0], [1.72867344E12, 0.0], [1.72867326E12, 0.0], [1.72867002E12, 0.0], [1.72867224E12, 0.0], [1.7286714E12, 0.0], [1.72866816E12, 0.0], [1.72866918E12, 0.0], [1.72867362E12, 0.0], [1.7286702E12, 0.0], [1.72866798E12, 0.0], [1.72867242E12, 0.0], [1.72867446E12, 0.0], [1.72866996E12, 0.0], [1.72867218E12, 0.0], [1.72867458E12, 0.0], [1.72867098E12, 0.0], [1.7286732E12, 0.0], [1.72866876E12, 0.0], [1.72866912E12, 0.0], [1.72867014E12, 0.0], [1.72867236E12, 0.0], [1.72867422E12, 0.0], [1.72867116E12, 0.0], [1.7286744E12, 0.0], [1.72866792E12, 0.0], [1.72866894E12, 0.0], [1.72867338E12, 0.0], [1.7286693E12, 0.0], [1.72867254E12, 0.0], [1.72867152E12, 0.0], [1.7286681E12, 0.0], [1.72867134E12, 0.0], [1.72867356E12, 0.0], [1.72867032E12, 0.0], [1.72867494E12, 0.0], [1.72866948E12, 0.0], [1.7286717E12, 0.0], [1.72867392E12, 0.0], [1.72867374E12, 0.0], [1.72867476E12, 0.0], [1.72866828E12, 0.0], [1.7286705E12, 0.0], [1.72867272E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7286753E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 368.0428134556573, "minX": 1.72866792E12, "maxY": 871.3447653429603, "series": [{"data": [[1.7286735E12, 658.3327239488119], [1.72866804E12, 387.90967741935503], [1.72867026E12, 480.3226773226779], [1.72867248E12, 608.2228813559312], [1.7286747E12, 871.3447653429603], [1.72866906E12, 407.35324232081933], [1.7286723E12, 602.1005025125633], [1.72867488E12, 788.780866721178], [1.72867128E12, 464.8650485436892], [1.72867044E12, 481.496496496497], [1.72866822E12, 401.5142857142858], [1.72867266E12, 602.4256926952153], [1.72867452E12, 800.2790309106094], [1.72866924E12, 407.67911714770787], [1.72867146E12, 474.8466864490599], [1.72867368E12, 655.2378640776709], [1.7286696E12, 421.9718309859153], [1.72867062E12, 451.53658536585385], [1.72867284E12, 629.6006974716656], [1.72867404E12, 816.2180579216348], [1.72867164E12, 481.0621242484969], [1.7286684E12, 426.6269982238009], [1.72866942E12, 412.4391080617493], [1.72867386E12, 780.8991869918707], [1.72867524E12, 747.6440261865803], [1.72866978E12, 392.12366737739853], [1.72867302E12, 621.8324697754747], [1.728672E12, 648.1636528028931], [1.72866858E12, 427.42857142857133], [1.72867182E12, 599.4028239202667], [1.72867506E12, 781.2369706840382], [1.7286708E12, 503.40880503144655], [1.72866834E12, 393.42036124794697], [1.72867158E12, 485.41683569979733], [1.7286738E12, 817.1227621483365], [1.72867056E12, 484.0302419354838], [1.728675E12, 810.1928934010165], [1.72866936E12, 396.4809286898839], [1.72867038E12, 499.0072840790841], [1.7286726E12, 641.5146666666659], [1.72867398E12, 799.0590191188701], [1.72867482E12, 822.0350727117201], [1.72867296E12, 623.3258426966281], [1.72866852E12, 399.6683333333334], [1.72867074E12, 476.1902874132805], [1.72866954E12, 405.2474576271186], [1.72867278E12, 627.452567449956], [1.72867176E12, 508.0242214532867], [1.72867092E12, 457.73593898951344], [1.72867434E12, 828.2922413793104], [1.72867314E12, 602.670854271357], [1.7286687E12, 415.22357019064145], [1.72867194E12, 629.5639686684061], [1.72866972E12, 382.2146263910969], [1.72867416E12, 808.9890387858352], [1.7286711E12, 465.5783836416745], [1.72867332E12, 624.709090909091], [1.72867008E12, 477.9131736526944], [1.72867518E12, 827.8936535162944], [1.72866888E12, 413.56131260794484], [1.7286699E12, 475.3564356435647], [1.72867212E12, 682.5052034058657], [1.72867188E12, 616.1472602739722], [1.7286753E12, 537.7014652014655], [1.72866864E12, 448.59479553903424], [1.72866966E12, 404.77441077441097], [1.72867068E12, 479.43486973947836], [1.72866846E12, 410.1643835616437], [1.7286729E12, 616.0815450643771], [1.72867428E12, 818.4283276450511], [1.72866882E12, 413.8608247422683], [1.72867512E12, 847.856007067138], [1.72867206E12, 632.4780316344459], [1.72867104E12, 479.77666999002975], [1.72867086E12, 485.50152284263953], [1.72867308E12, 630.0718038528894], [1.7286741E12, 829.360034453059], [1.72866984E12, 490.9485294117645], [1.72867464E12, 803.2447611064537], [1.728669E12, 385.98073836276035], [1.72867122E12, 468.11621093750034], [1.72867344E12, 608.1174978867282], [1.72867326E12, 632.9014951627083], [1.72867002E12, 469.37573385518584], [1.72867224E12, 651.5831062670303], [1.7286714E12, 486.9837232960329], [1.72866816E12, 370.44366197183103], [1.72866918E12, 412.89708404802764], [1.72867362E12, 629.9250902527084], [1.7286702E12, 456.4003813155388], [1.72866798E12, 368.0428134556573], [1.72867242E12, 623.7417962003443], [1.72867446E12, 785.1308258381031], [1.72866996E12, 472.18092428711867], [1.72867218E12, 618.3382099827887], [1.72867458E12, 823.4446351931331], [1.72867098E12, 478.585244267199], [1.7286732E12, 659.8513761467896], [1.72866876E12, 405.0118243243244], [1.72866912E12, 403.2164429530204], [1.72867014E12, 485.09657947686117], [1.72867236E12, 639.0336581045169], [1.72867422E12, 808.1152228763651], [1.72867116E12, 469.29434697855703], [1.7286744E12, 790.746293245469], [1.72866792E12, 437.24561403508767], [1.72866894E12, 394.5379537953797], [1.72867338E12, 623.8039895923677], [1.7286693E12, 387.072580645161], [1.72867254E12, 668.1215213358084], [1.72867152E12, 478.4587064676619], [1.7286681E12, 407.7123287671233], [1.72867134E12, 492.1237218813902], [1.72867356E12, 634.9409171075833], [1.72867032E12, 459.7969201154954], [1.72867494E12, 793.478081058725], [1.72866948E12, 435.3079710144925], [1.7286717E12, 480.96175478065226], [1.72867392E12, 780.8817292006527], [1.72867374E12, 788.8617283950609], [1.72867476E12, 817.4125214408231], [1.72866828E12, 420.45804195804186], [1.7286705E12, 482.8346774193542], [1.72867272E12, 640.2179715302498]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7286753E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 233.12232415902145, "minX": 1.72866792E12, "maxY": 580.9720216606504, "series": [{"data": [[1.7286735E12, 439.0063985374768], [1.72866804E12, 252.29032258064515], [1.72867026E12, 320.0569430569434], [1.72867248E12, 404.7152542372878], [1.7286747E12, 580.9720216606504], [1.72866906E12, 270.4658703071671], [1.7286723E12, 400.8400335008368], [1.72867488E12, 526.0956663941132], [1.72867128E12, 307.48058252427177], [1.72867044E12, 320.3893893893887], [1.72866822E12, 261.90084033613476], [1.72867266E12, 400.836272040302], [1.72867452E12, 536.822055137844], [1.72866924E12, 267.85059422750413], [1.72867146E12, 316.11374876360077], [1.72867368E12, 438.514563106796], [1.7286696E12, 277.30105633802816], [1.72867062E12, 298.7279549718573], [1.72867284E12, 417.36442894507366], [1.72867404E12, 542.7700170357759], [1.72867164E12, 318.45791583166374], [1.7286684E12, 277.93250444049784], [1.72866942E12, 264.88679245283015], [1.72867386E12, 521.8813008130085], [1.72867524E12, 499.7618657937804], [1.72866978E12, 255.12579957356076], [1.72867302E12, 408.8186528497407], [1.728672E12, 429.54159132007254], [1.72866858E12, 278.10535714285703], [1.72867182E12, 396.78156146179356], [1.72867506E12, 524.3004885993483], [1.7286708E12, 334.5293501048215], [1.72866834E12, 257.33990147783265], [1.72867158E12, 321.45436105476676], [1.7286738E12, 543.0988917306057], [1.72867056E12, 321.86290322580635], [1.728675E12, 541.9204737732664], [1.72866936E12, 256.35820895522374], [1.72867038E12, 331.3569198751295], [1.7286726E12, 428.8213333333332], [1.72867398E12, 536.4945968412306], [1.72867482E12, 550.1993156544038], [1.72867296E12, 417.8418323249785], [1.72866852E12, 259.1033333333331], [1.72867074E12, 317.2467789890988], [1.72866954E12, 263.33728813559304], [1.72867278E12, 421.5195822454311], [1.72867176E12, 334.19550173010407], [1.72867092E12, 303.60057197330764], [1.72867434E12, 551.6853448275862], [1.72867314E12, 404.6482412060302], [1.7286687E12, 268.7487001733101], [1.72867194E12, 420.7989556135777], [1.72866972E12, 250.37996820349753], [1.72867416E12, 544.6500843170325], [1.7286711E12, 307.88412852969805], [1.72867332E12, 413.7922077922079], [1.72867008E12, 318.65768463073846], [1.72867518E12, 557.1106346483707], [1.72866888E12, 266.72193436960293], [1.7286699E12, 319.5435643564356], [1.72867212E12, 452.79564806054873], [1.72867188E12, 413.0556506849317], [1.7286753E12, 358.5586080586079], [1.72866864E12, 292.77137546468435], [1.72866966E12, 261.28451178451184], [1.72867068E12, 316.15531062124256], [1.72866846E12, 263.67636986301346], [1.7286729E12, 409.08755364806916], [1.72867428E12, 547.9923208191134], [1.72866882E12, 271.36941580756], [1.72867512E12, 567.3012367491172], [1.72867206E12, 419.6344463971881], [1.72867104E12, 315.31006979062835], [1.72867086E12, 321.2680203045686], [1.72867308E12, 420.44220665499194], [1.7286741E12, 554.6640826873381], [1.72866984E12, 325.28676470588226], [1.72867464E12, 534.792120704107], [1.728669E12, 253.776886035313], [1.72867122E12, 311.1767578124999], [1.72867344E12, 403.4488588334738], [1.72867326E12, 424.26033421284075], [1.72867002E12, 306.39138943248486], [1.72867224E12, 432.25976385104474], [1.7286714E12, 320.0681586978637], [1.72866816E12, 243.98591549295782], [1.72866918E12, 267.9982847341337], [1.72867362E12, 417.59115523465704], [1.7286702E12, 299.5290753098186], [1.72866798E12, 233.12232415902145], [1.72867242E12, 416.33333333333303], [1.72867446E12, 523.7375306623047], [1.72866996E12, 313.47000983284164], [1.72867218E12, 410.43029259896787], [1.72867458E12, 552.8952789699566], [1.72867098E12, 318.75772681954106], [1.7286732E12, 439.7587155963303], [1.72866876E12, 262.3479729729728], [1.72866912E12, 261.3758389261746], [1.72867014E12, 321.36317907444686], [1.72867236E12, 427.00088573959226], [1.72867422E12, 538.506307821699], [1.72867116E12, 312.191033138402], [1.7286744E12, 528.5609555189446], [1.72866792E12, 282.1228070175437], [1.72866894E12, 254.26072607260718], [1.72867338E12, 416.9210754553339], [1.7286693E12, 253.5129032258064], [1.72867254E12, 442.2894248608535], [1.72867152E12, 315.54925373134364], [1.7286681E12, 265.0787671232879], [1.72867134E12, 322.3179959100208], [1.72867356E12, 425.6649029982359], [1.72867032E12, 306.8758421559191], [1.72867494E12, 535.5583126550871], [1.72866948E12, 284.70289855072474], [1.7286717E12, 315.005624296963], [1.72867392E12, 525.0505709624795], [1.72867374E12, 533.3934156378598], [1.72867476E12, 545.7161234991422], [1.72866828E12, 273.4283216783211], [1.7286705E12, 318.96975806451644], [1.72867272E12, 426.94572953736656]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7286753E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72866792E12, "maxY": 4.9E-324, "series": [{"data": [[1.7286735E12, 0.0], [1.72866804E12, 0.0], [1.72867026E12, 0.0], [1.72867248E12, 0.0], [1.7286747E12, 0.0], [1.72866906E12, 0.0], [1.7286723E12, 0.0], [1.72867488E12, 0.0], [1.72867128E12, 0.0], [1.72867044E12, 0.0], [1.72866822E12, 0.0], [1.72867266E12, 0.0], [1.72867452E12, 0.0], [1.72866924E12, 0.0], [1.72867146E12, 0.0], [1.72867368E12, 0.0], [1.7286696E12, 0.0], [1.72867062E12, 0.0], [1.72867284E12, 0.0], [1.72867404E12, 0.0], [1.72867164E12, 0.0], [1.7286684E12, 0.0], [1.72866942E12, 0.0], [1.72867386E12, 0.0], [1.72867524E12, 0.0], [1.72866978E12, 0.0], [1.72867302E12, 0.0], [1.728672E12, 0.0], [1.72866858E12, 0.0], [1.72867182E12, 0.0], [1.72867506E12, 0.0], [1.7286708E12, 0.0], [1.72866834E12, 0.0], [1.72867158E12, 0.0], [1.7286738E12, 0.0], [1.72867056E12, 0.0], [1.728675E12, 0.0], [1.72866936E12, 0.0], [1.72867038E12, 0.0], [1.7286726E12, 0.0], [1.72867398E12, 0.0], [1.72867482E12, 0.0], [1.72867296E12, 0.0], [1.72866852E12, 0.0], [1.72867074E12, 0.0], [1.72866954E12, 0.0], [1.72867278E12, 0.0], [1.72867176E12, 0.0], [1.72867092E12, 0.0], [1.72867434E12, 0.0], [1.72867314E12, 0.0], [1.7286687E12, 0.0], [1.72867194E12, 0.0], [1.72866972E12, 0.0], [1.72867416E12, 0.0], [1.7286711E12, 0.0], [1.72867332E12, 0.0], [1.72867008E12, 0.0], [1.72867518E12, 0.0], [1.72866888E12, 0.0], [1.7286699E12, 0.0], [1.72867212E12, 0.0], [1.72867188E12, 0.0], [1.7286753E12, 0.0], [1.72866864E12, 0.0], [1.72866966E12, 0.0], [1.72867068E12, 0.0], [1.72866846E12, 0.0], [1.7286729E12, 0.0], [1.72867428E12, 0.0], [1.72866882E12, 0.0], [1.72867512E12, 0.0], [1.72867206E12, 0.0], [1.72867104E12, 0.0], [1.72867086E12, 0.0], [1.72867308E12, 0.0], [1.7286741E12, 0.0], [1.72866984E12, 0.0], [1.72867464E12, 0.0], [1.728669E12, 0.0], [1.72867122E12, 0.0], [1.72867344E12, 0.0], [1.72867326E12, 0.0], [1.72867002E12, 0.0], [1.72867224E12, 0.0], [1.7286714E12, 0.0], [1.72866816E12, 0.0], [1.72866918E12, 0.0], [1.72867362E12, 0.0], [1.7286702E12, 0.0], [1.72866798E12, 0.0], [1.72867242E12, 0.0], [1.72867446E12, 0.0], [1.72866996E12, 0.0], [1.72867218E12, 0.0], [1.72867458E12, 0.0], [1.72867098E12, 0.0], [1.7286732E12, 0.0], [1.72866876E12, 0.0], [1.72866912E12, 0.0], [1.72867014E12, 0.0], [1.72867236E12, 0.0], [1.72867422E12, 0.0], [1.72867116E12, 0.0], [1.7286744E12, 0.0], [1.72866792E12, 0.0], [1.72866894E12, 0.0], [1.72867338E12, 0.0], [1.7286693E12, 0.0], [1.72867254E12, 0.0], [1.72867152E12, 0.0], [1.7286681E12, 0.0], [1.72867134E12, 0.0], [1.72867356E12, 0.0], [1.72867032E12, 0.0], [1.72867494E12, 0.0], [1.72866948E12, 0.0], [1.7286717E12, 0.0], [1.72867392E12, 0.0], [1.72867374E12, 0.0], [1.72867476E12, 0.0], [1.72866828E12, 0.0], [1.7286705E12, 0.0], [1.72867272E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7286753E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.72866792E12, "maxY": 3665.0, "series": [{"data": [[1.7286735E12, 2479.0], [1.72866804E12, 1619.0], [1.72867026E12, 2052.0], [1.72867248E12, 2413.0], [1.7286747E12, 3154.0], [1.72866906E12, 1394.0], [1.7286723E12, 2598.0], [1.72867488E12, 3183.0], [1.72867128E12, 1961.0], [1.72867044E12, 1939.0], [1.72866822E12, 1396.0], [1.72867266E12, 2526.0], [1.72867452E12, 2891.0], [1.72866924E12, 1452.0], [1.72867146E12, 1870.0], [1.72867368E12, 3136.0], [1.7286696E12, 1761.0], [1.72867062E12, 1889.0], [1.72867284E12, 2500.0], [1.72867404E12, 3148.0], [1.72867164E12, 1834.0], [1.7286684E12, 1517.0], [1.72866942E12, 1738.0], [1.72867386E12, 2892.0], [1.72867524E12, 3085.0], [1.72866978E12, 1432.0], [1.72867302E12, 2570.0], [1.728672E12, 2347.0], [1.72866858E12, 1715.0], [1.72867182E12, 2471.0], [1.72867506E12, 3026.0], [1.7286708E12, 1843.0], [1.72866834E12, 1465.0], [1.72867158E12, 2031.0], [1.7286738E12, 3125.0], [1.72867056E12, 1881.0], [1.728675E12, 2869.0], [1.72866936E12, 1433.0], [1.72867038E12, 1773.0], [1.7286726E12, 2587.0], [1.72867398E12, 3220.0], [1.72867482E12, 3534.0], [1.72867296E12, 2586.0], [1.72866852E12, 1559.0], [1.72867074E12, 2049.0], [1.72866954E12, 1600.0], [1.72867278E12, 2722.0], [1.72867176E12, 2216.0], [1.72867092E12, 1857.0], [1.72867434E12, 3665.0], [1.72867314E12, 2672.0], [1.7286687E12, 1456.0], [1.72867194E12, 2381.0], [1.72866972E12, 1615.0], [1.72867416E12, 3261.0], [1.7286711E12, 1813.0], [1.72867332E12, 2300.0], [1.72867008E12, 1806.0], [1.72867518E12, 3357.0], [1.72866888E12, 1673.0], [1.7286699E12, 2233.0], [1.72867212E12, 2537.0], [1.72867188E12, 2263.0], [1.7286753E12, 2231.0], [1.72866864E12, 1343.0], [1.72866966E12, 1456.0], [1.72867068E12, 1907.0], [1.72866846E12, 1667.0], [1.7286729E12, 2440.0], [1.72867428E12, 3194.0], [1.72866882E12, 1715.0], [1.72867512E12, 3462.0], [1.72867206E12, 2613.0], [1.72867104E12, 1823.0], [1.72867086E12, 1802.0], [1.72867308E12, 2628.0], [1.7286741E12, 3581.0], [1.72866984E12, 1806.0], [1.72867464E12, 3428.0], [1.728669E12, 1556.0], [1.72867122E12, 1779.0], [1.72867344E12, 2460.0], [1.72867326E12, 2382.0], [1.72867002E12, 1860.0], [1.72867224E12, 2625.0], [1.7286714E12, 1913.0], [1.72866816E12, 1493.0], [1.72866918E12, 1444.0], [1.72867362E12, 2465.0], [1.7286702E12, 1795.0], [1.72866798E12, 1374.0], [1.72867242E12, 2360.0], [1.72867446E12, 3477.0], [1.72866996E12, 1789.0], [1.72867218E12, 2739.0], [1.72867458E12, 2872.0], [1.72867098E12, 1931.0], [1.7286732E12, 2499.0], [1.72866876E12, 1746.0], [1.72866912E12, 1697.0], [1.72867014E12, 1880.0], [1.72867236E12, 2445.0], [1.72867422E12, 3463.0], [1.72867116E12, 1823.0], [1.7286744E12, 3099.0], [1.72866792E12, 1544.0], [1.72866894E12, 1592.0], [1.72867338E12, 2604.0], [1.7286693E12, 1393.0], [1.72867254E12, 2751.0], [1.72867152E12, 2014.0], [1.7286681E12, 1336.0], [1.72867134E12, 1927.0], [1.72867356E12, 2601.0], [1.72867032E12, 2075.0], [1.72867494E12, 3188.0], [1.72866948E12, 1582.0], [1.7286717E12, 2136.0], [1.72867392E12, 2970.0], [1.72867374E12, 3008.0], [1.72867476E12, 3338.0], [1.72866828E12, 1494.0], [1.7286705E12, 1752.0], [1.72867272E12, 2317.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7286735E12, 1385.0], [1.72866804E12, 855.7], [1.72867026E12, 1006.4000000000002], [1.72867248E12, 1328.9], [1.7286747E12, 1844.3000000000002], [1.72866906E12, 881.3000000000001], [1.7286723E12, 1352.5], [1.72867488E12, 1725.6000000000001], [1.72867128E12, 990.5999999999999], [1.72867044E12, 1017.0], [1.72866822E12, 871.3999999999999], [1.72867266E12, 1350.8], [1.72867452E12, 1723.4], [1.72866924E12, 881.0], [1.72867146E12, 1018.0000000000003], [1.72867368E12, 1490.0], [1.7286696E12, 863.7000000000002], [1.72867062E12, 1002.3000000000001], [1.72867284E12, 1389.0], [1.72867404E12, 1718.5], [1.72867164E12, 1008.1], [1.7286684E12, 869.4000000000001], [1.72866942E12, 875.8000000000001], [1.72867386E12, 1645.8000000000002], [1.72867524E12, 1660.5000000000002], [1.72866978E12, 856.0], [1.72867302E12, 1410.0], [1.728672E12, 1371.6000000000001], [1.72866858E12, 906.9000000000001], [1.72867182E12, 1370.5], [1.72867506E12, 1700.2000000000003], [1.7286708E12, 1058.0], [1.72866834E12, 868.0], [1.72867158E12, 1042.3000000000002], [1.7286738E12, 1766.200000000001], [1.72867056E12, 1038.7], [1.728675E12, 1765.1000000000001], [1.72866936E12, 871.2000000000003], [1.72867038E12, 1041.6000000000004], [1.7286726E12, 1368.4], [1.72867398E12, 1727.6000000000001], [1.72867482E12, 1710.0], [1.72867296E12, 1335.2], [1.72866852E12, 890.5999999999999], [1.72867074E12, 1004.0], [1.72866954E12, 893.4999999999999], [1.72867278E12, 1314.0], [1.72867176E12, 1113.1], [1.72867092E12, 971.0], [1.72867434E12, 1767.7000000000003], [1.72867314E12, 1315.5], [1.7286687E12, 913.8000000000002], [1.72867194E12, 1387.0], [1.72866972E12, 855.0], [1.72867416E12, 1714.4999999999998], [1.7286711E12, 1007.2], [1.72867332E12, 1379.8000000000006], [1.72867008E12, 1051.7], [1.72867518E12, 1738.6], [1.72866888E12, 859.0], [1.7286699E12, 1023.5999999999999], [1.72867212E12, 1421.0], [1.72867188E12, 1361.1000000000001], [1.7286753E12, 1183.0], [1.72866864E12, 926.0], [1.72866966E12, 877.5], [1.72867068E12, 1013.1], [1.72866846E12, 898.0], [1.7286729E12, 1345.4], [1.72867428E12, 1715.7], [1.72866882E12, 890.4000000000001], [1.72867512E12, 1803.5000000000002], [1.72867206E12, 1410.2000000000003], [1.72867104E12, 1031.0], [1.72867086E12, 1051.4], [1.72867308E12, 1376.1000000000001], [1.7286741E12, 1785.6], [1.72866984E12, 1049.9], [1.72867464E12, 1745.4000000000005], [1.728669E12, 839.0], [1.72867122E12, 1014.5], [1.72867344E12, 1340.0], [1.72867326E12, 1314.8000000000002], [1.72867002E12, 1023.4000000000001], [1.72867224E12, 1353.8000000000002], [1.7286714E12, 1042.6], [1.72866816E12, 810.4000000000001], [1.72866918E12, 919.4000000000002], [1.72867362E12, 1378.6000000000001], [1.7286702E12, 1006.0], [1.72866798E12, 813.3999999999999], [1.72867242E12, 1399.5000000000007], [1.72867446E12, 1705.6000000000001], [1.72866996E12, 1031.6000000000001], [1.72867218E12, 1369.8000000000002], [1.72867458E12, 1716.6000000000004], [1.72867098E12, 1033.0], [1.7286732E12, 1387.8], [1.72866876E12, 894.6000000000004], [1.72866912E12, 890.3000000000001], [1.72867014E12, 1023.0], [1.72867236E12, 1384.0], [1.72867422E12, 1729.0], [1.72867116E12, 997.6000000000001], [1.7286744E12, 1770.5], [1.72866792E12, 1031.6000000000001], [1.72866894E12, 876.8000000000004], [1.72867338E12, 1378.2000000000003], [1.7286693E12, 839.8], [1.72867254E12, 1468.1], [1.72867152E12, 1021.5999999999999], [1.7286681E12, 868.0999999999999], [1.72867134E12, 1045.3000000000002], [1.72867356E12, 1390.0], [1.72867032E12, 993.0], [1.72867494E12, 1715.0], [1.72866948E12, 932.0999999999999], [1.7286717E12, 1024.0], [1.72867392E12, 1727.0], [1.72867374E12, 1681.4], [1.72867476E12, 1771.3], [1.72866828E12, 898.4000000000001], [1.7286705E12, 1053.8000000000002], [1.72867272E12, 1423.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7286735E12, 2192.949999999999], [1.72866804E12, 1202.3699999999994], [1.72867026E12, 1468.6600000000003], [1.72867248E12, 2025.38], [1.7286747E12, 2505.0], [1.72866906E12, 1281.5099999999998], [1.7286723E12, 2118.3999999999996], [1.72867488E12, 2603.5999999999995], [1.72867128E12, 1489.4899999999989], [1.72867044E12, 1470.0], [1.72866822E12, 1190.12], [1.72867266E12, 1980.9199999999928], [1.72867452E12, 2385.239999999999], [1.72866924E12, 1291.6000000000001], [1.72867146E12, 1505.0], [1.72867368E12, 2390.25], [1.7286696E12, 1267.8099999999972], [1.72867062E12, 1429.619999999999], [1.72867284E12, 1972.56], [1.72867404E12, 2524.5], [1.72867164E12, 1501.4199999999996], [1.7286684E12, 1332.2000000000003], [1.72866942E12, 1229.3599999999992], [1.72867386E12, 2536.76], [1.72867524E12, 2485.499999999999], [1.72866978E12, 1239.2000000000007], [1.72867302E12, 2107.100000000001], [1.728672E12, 1995.4400000000005], [1.72866858E12, 1380.4599999999998], [1.72867182E12, 2036.8500000000001], [1.72867506E12, 2572.9700000000003], [1.7286708E12, 1489.2500000000002], [1.72866834E12, 1274.5999999999995], [1.72867158E12, 1560.17], [1.7286738E12, 2618.3599999999997], [1.72867056E12, 1476.2799999999997], [1.728675E12, 2465.6800000000003], [1.72866936E12, 1283.5600000000013], [1.72867038E12, 1495.98], [1.7286726E12, 2024.5000000000002], [1.72867398E12, 2556.120000000001], [1.72867482E12, 2587.499999999999], [1.72867296E12, 2020.6800000000003], [1.72866852E12, 1264.7200000000003], [1.72867074E12, 1578.2999999999988], [1.72866954E12, 1272.0800000000004], [1.72867278E12, 2105.0], [1.72867176E12, 1897.63], [1.72867092E12, 1421.5], [1.72867434E12, 2424.8500000000013], [1.72867314E12, 1962.9499999999982], [1.7286687E12, 1224.6200000000006], [1.72867194E12, 1935.5], [1.72866972E12, 1254.2000000000007], [1.72867416E12, 2571.169999999999], [1.7286711E12, 1475.480000000001], [1.72867332E12, 2015.1600000000008], [1.72867008E12, 1532.97], [1.72867518E12, 2514.519999999997], [1.72866888E12, 1339.2], [1.7286699E12, 1653.9799999999989], [1.72867212E12, 1975.5600000000013], [1.72867188E12, 1895.6399999999976], [1.7286753E12, 1715.2299999999975], [1.72866864E12, 1223.71], [1.72866966E12, 1339.1], [1.72867068E12, 1529.03], [1.72866846E12, 1324.1999999999998], [1.7286729E12, 2008.0], [1.72867428E12, 2484.81], [1.72866882E12, 1395.0], [1.72867512E12, 2510.130000000003], [1.72867206E12, 2054.979999999998], [1.72867104E12, 1523.800000000001], [1.72867086E12, 1565.56], [1.72867308E12, 1958.9499999999978], [1.7286741E12, 2540.8999999999996], [1.72866984E12, 1577.19], [1.72867464E12, 2631.899999999999], [1.728669E12, 1205.52], [1.72867122E12, 1481.5], [1.72867344E12, 1939.1200000000006], [1.72867326E12, 2041.5599999999959], [1.72867002E12, 1498.8699999999994], [1.72867224E12, 2170.2400000000016], [1.7286714E12, 1577.7199999999993], [1.72866816E12, 1178.6800000000003], [1.72866918E12, 1317.1599999999999], [1.72867362E12, 2034.9400000000028], [1.7286702E12, 1500.5], [1.72866798E12, 1262.2799999999993], [1.72867242E12, 1958.0], [1.72867446E12, 2442.12], [1.72866996E12, 1459.7599999999989], [1.72867218E12, 1907.329999999999], [1.72867458E12, 2562.0399999999954], [1.72867098E12, 1453.0], [1.7286732E12, 2086.3499999999985], [1.72866876E12, 1260.0300000000016], [1.72866912E12, 1292.06], [1.72867014E12, 1509.099999999999], [1.72867236E12, 1995.5000000000011], [1.72867422E12, 2657.6999999999975], [1.72867116E12, 1536.0300000000002], [1.7286744E12, 2601.2999999999984], [1.72866792E12, 1544.0], [1.72866894E12, 1487.989999999998], [1.72867338E12, 2056.6000000000004], [1.7286693E12, 1290.1599999999999], [1.72867254E12, 2014.0500000000002], [1.72867152E12, 1528.6799999999987], [1.7286681E12, 1305.77], [1.72867134E12, 1498.3500000000013], [1.72867356E12, 1984.450000000003], [1.72867032E12, 1477.599999999998], [1.72867494E12, 2479.6000000000013], [1.72866948E12, 1335.920000000001], [1.7286717E12, 1452.1], [1.72867392E12, 2445.3300000000004], [1.72867374E12, 2446.2399999999952], [1.72867476E12, 2404.579999999998], [1.72866828E12, 1277.5099999999998], [1.7286705E12, 1554.2099999999998], [1.72867272E12, 1983.75]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7286735E12, 1647.75], [1.72866804E12, 1016.45], [1.72867026E12, 1162.6999999999998], [1.72867248E12, 1543.5000000000005], [1.7286747E12, 2049.8499999999995], [1.72866906E12, 992.5499999999998], [1.7286723E12, 1597.5], [1.72867488E12, 1973.1999999999994], [1.72867128E12, 1147.2499999999995], [1.72867044E12, 1178.0], [1.72866822E12, 990.1999999999999], [1.72867266E12, 1562.0], [1.72867452E12, 1992.1], [1.72866924E12, 997.0], [1.72867146E12, 1191.1999999999994], [1.72867368E12, 1763.25], [1.7286696E12, 1015.1999999999989], [1.72867062E12, 1140.8999999999999], [1.72867284E12, 1600.9999999999995], [1.72867404E12, 2001.5], [1.72867164E12, 1169.1], [1.7286684E12, 1048.5999999999995], [1.72866942E12, 1017.7999999999997], [1.72867386E12, 1940.2500000000002], [1.72867524E12, 1977.9499999999994], [1.72866978E12, 992.0], [1.72867302E12, 1592.999999999999], [1.728672E12, 1588.5999999999995], [1.72866858E12, 1049.0], [1.72867182E12, 1597.5], [1.72867506E12, 1981.55], [1.7286708E12, 1233.0], [1.72866834E12, 994.0], [1.72867158E12, 1200.3], [1.7286738E12, 2073.499999999999], [1.72867056E12, 1208.2999999999984], [1.728675E12, 1998.9499999999994], [1.72866936E12, 1007.8], [1.72867038E12, 1193.9], [1.7286726E12, 1600.9000000000003], [1.72867398E12, 1976.8], [1.72867482E12, 1977.0], [1.72867296E12, 1581.1999999999998], [1.72866852E12, 1008.9499999999999], [1.72867074E12, 1166.0], [1.72866954E12, 1076.2499999999995], [1.72867278E12, 1556.0], [1.72867176E12, 1378.4499999999996], [1.72867092E12, 1130.0], [1.72867434E12, 1956.8000000000002], [1.72867314E12, 1489.25], [1.7286687E12, 1017.1], [1.72867194E12, 1581.5], [1.72866972E12, 1013.5], [1.72867416E12, 1999.8999999999992], [1.7286711E12, 1146.6], [1.72867332E12, 1611.2], [1.72867008E12, 1210.3999999999996], [1.72867518E12, 2026.0], [1.72866888E12, 1020.0], [1.7286699E12, 1185.8999999999999], [1.72867212E12, 1640.4999999999995], [1.72867188E12, 1540.6499999999999], [1.7286753E12, 1351.2999999999995], [1.72866864E12, 1042.3499999999997], [1.72866966E12, 1054.25], [1.72867068E12, 1187.3499999999997], [1.72866846E12, 982.0], [1.7286729E12, 1565.4], [1.72867428E12, 1989.0999999999995], [1.72866882E12, 1007.1000000000001], [1.72867512E12, 2086.7], [1.72867206E12, 1602.7499999999993], [1.72867104E12, 1230.9999999999998], [1.72867086E12, 1202.7999999999997], [1.72867308E12, 1562.5499999999997], [1.7286741E12, 2075.699999999997], [1.72866984E12, 1244.349999999999], [1.72867464E12, 1979.8999999999999], [1.728669E12, 980.3999999999999], [1.72867122E12, 1172.75], [1.72867344E12, 1574.3999999999996], [1.72867326E12, 1538.1999999999998], [1.72867002E12, 1191.85], [1.72867224E12, 1560.4999999999993], [1.7286714E12, 1212.8], [1.72866816E12, 974.3999999999996], [1.72866918E12, 1054.7999999999997], [1.72867362E12, 1599.1999999999998], [1.7286702E12, 1195.5], [1.72866798E12, 976.3999999999988], [1.72867242E12, 1626.1], [1.72867446E12, 2015.9999999999998], [1.72866996E12, 1173.5999999999995], [1.72867218E12, 1537.6999999999998], [1.72867458E12, 2025.6000000000004], [1.72867098E12, 1201.1999999999994], [1.7286732E12, 1641.1500000000003], [1.72866876E12, 1011.0], [1.72866912E12, 1014.3], [1.72867014E12, 1204.0], [1.72867236E12, 1588.0], [1.72867422E12, 2001.5], [1.72867116E12, 1244.4499999999998], [1.7286744E12, 2039.0], [1.72866792E12, 1225.5999999999995], [1.72866894E12, 1011.8999999999999], [1.72867338E12, 1583.2999999999995], [1.7286693E12, 1011.7499999999997], [1.72867254E12, 1655.3999999999996], [1.72867152E12, 1159.5999999999995], [1.7286681E12, 987.4499999999998], [1.72867134E12, 1213.2499999999998], [1.72867356E12, 1611.0], [1.72867032E12, 1119.0], [1.72867494E12, 1970.5], [1.72866948E12, 1036.4], [1.7286717E12, 1179.0], [1.72867392E12, 2026.9499999999996], [1.72867374E12, 1936.0000000000005], [1.72867476E12, 2013.6499999999999], [1.72866828E12, 1009.8000000000002], [1.7286705E12, 1253.7999999999993], [1.72867272E12, 1618.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7286735E12, 40.0], [1.72866804E12, 34.0], [1.72867026E12, 35.0], [1.72867248E12, 37.0], [1.7286747E12, 63.0], [1.72866906E12, 37.0], [1.7286723E12, 38.0], [1.72867488E12, 60.0], [1.72867128E12, 32.0], [1.72867044E12, 42.0], [1.72866822E12, 34.0], [1.72867266E12, 35.0], [1.72867452E12, 54.0], [1.72866924E12, 35.0], [1.72867146E12, 35.0], [1.72867368E12, 40.0], [1.7286696E12, 31.0], [1.72867062E12, 39.0], [1.72867284E12, 41.0], [1.72867404E12, 57.0], [1.72867164E12, 35.0], [1.7286684E12, 36.0], [1.72866942E12, 33.0], [1.72867386E12, 66.0], [1.72867524E12, 52.0], [1.72866978E12, 38.0], [1.72867302E12, 35.0], [1.728672E12, 43.0], [1.72866858E12, 35.0], [1.72867182E12, 38.0], [1.72867506E12, 63.0], [1.7286708E12, 38.0], [1.72866834E12, 35.0], [1.72867158E12, 32.0], [1.7286738E12, 61.0], [1.72867056E12, 34.0], [1.728675E12, 62.0], [1.72866936E12, 35.0], [1.72867038E12, 33.0], [1.7286726E12, 37.0], [1.72867398E12, 60.0], [1.72867482E12, 59.0], [1.72867296E12, 44.0], [1.72866852E12, 35.0], [1.72867074E12, 33.0], [1.72866954E12, 36.0], [1.72867278E12, 45.0], [1.72867176E12, 37.0], [1.72867092E12, 30.0], [1.72867434E12, 75.0], [1.72867314E12, 41.0], [1.7286687E12, 35.0], [1.72867194E12, 44.0], [1.72866972E12, 34.0], [1.72867416E12, 59.0], [1.7286711E12, 37.0], [1.72867332E12, 41.0], [1.72867008E12, 39.0], [1.72867518E12, 57.0], [1.72866888E12, 34.0], [1.7286699E12, 36.0], [1.72867212E12, 45.0], [1.72867188E12, 33.0], [1.7286753E12, 39.0], [1.72866864E12, 31.0], [1.72866966E12, 32.0], [1.72867068E12, 34.0], [1.72866846E12, 35.0], [1.7286729E12, 36.0], [1.72867428E12, 54.0], [1.72866882E12, 35.0], [1.72867512E12, 60.0], [1.72867206E12, 37.0], [1.72867104E12, 34.0], [1.72867086E12, 35.0], [1.72867308E12, 42.0], [1.7286741E12, 62.0], [1.72866984E12, 40.0], [1.72867464E12, 58.0], [1.728669E12, 36.0], [1.72867122E12, 36.0], [1.72867344E12, 40.0], [1.72867326E12, 44.0], [1.72867002E12, 33.0], [1.72867224E12, 41.0], [1.7286714E12, 34.0], [1.72866816E12, 34.0], [1.72866918E12, 35.0], [1.72867362E12, 41.0], [1.7286702E12, 36.0], [1.72866798E12, 36.0], [1.72867242E12, 40.0], [1.72867446E12, 68.0], [1.72866996E12, 38.0], [1.72867218E12, 41.0], [1.72867458E12, 63.0], [1.72867098E12, 36.0], [1.7286732E12, 35.0], [1.72866876E12, 37.0], [1.72866912E12, 29.0], [1.72867014E12, 36.0], [1.72867236E12, 42.0], [1.72867422E12, 59.0], [1.72867116E12, 38.0], [1.7286744E12, 66.0], [1.72866792E12, 42.0], [1.72866894E12, 38.0], [1.72867338E12, 48.0], [1.7286693E12, 35.0], [1.72867254E12, 41.0], [1.72867152E12, 35.0], [1.7286681E12, 38.0], [1.72867134E12, 40.0], [1.72867356E12, 38.0], [1.72867032E12, 35.0], [1.72867494E12, 65.0], [1.72866948E12, 33.0], [1.7286717E12, 37.0], [1.72867392E12, 66.0], [1.72867374E12, 58.0], [1.72867476E12, 71.0], [1.72866828E12, 37.0], [1.7286705E12, 37.0], [1.72867272E12, 45.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7286735E12, 597.0], [1.72866804E12, 324.5], [1.72867026E12, 442.0], [1.72867248E12, 517.0], [1.7286747E12, 828.0], [1.72866906E12, 357.5], [1.7286723E12, 479.5], [1.72867488E12, 680.0], [1.72867128E12, 408.0], [1.72867044E12, 436.0], [1.72866822E12, 368.0], [1.72867266E12, 462.0], [1.72867452E12, 715.0], [1.72866924E12, 377.0], [1.72867146E12, 412.0], [1.72867368E12, 477.0], [1.7286696E12, 403.0], [1.72867062E12, 359.5], [1.72867284E12, 540.0], [1.72867404E12, 725.5], [1.72867164E12, 433.0], [1.7286684E12, 397.0], [1.72866942E12, 373.0], [1.72867386E12, 661.5], [1.72867524E12, 579.5], [1.72866978E12, 347.0], [1.72867302E12, 504.5], [1.728672E12, 594.0], [1.72866858E12, 396.5], [1.72867182E12, 427.5], [1.72867506E12, 662.5], [1.7286708E12, 479.5], [1.72866834E12, 342.0], [1.72867158E12, 437.0], [1.7286738E12, 673.0], [1.72867056E12, 428.5], [1.728675E12, 709.5], [1.72866936E12, 335.0], [1.72867038E12, 464.0], [1.7286726E12, 584.0], [1.72867398E12, 712.0], [1.72867482E12, 742.0], [1.72867296E12, 561.0], [1.72866852E12, 333.5], [1.72867074E12, 416.0], [1.72866954E12, 341.5], [1.72867278E12, 556.0], [1.72867176E12, 384.5], [1.72867092E12, 380.0], [1.72867434E12, 752.5], [1.72867314E12, 523.5], [1.7286687E12, 381.0], [1.72867194E12, 578.0], [1.72866972E12, 290.0], [1.72867416E12, 695.0], [1.7286711E12, 409.0], [1.72867332E12, 492.0], [1.72867008E12, 413.5], [1.72867518E12, 760.5], [1.72866888E12, 372.0], [1.7286699E12, 412.0], [1.72867212E12, 655.0], [1.72867188E12, 542.5], [1.7286753E12, 464.0], [1.72866864E12, 441.0], [1.72866966E12, 338.5], [1.72867068E12, 422.0], [1.72866846E12, 357.5], [1.7286729E12, 476.0], [1.72867428E12, 751.5], [1.72866882E12, 374.5], [1.72867512E12, 770.5], [1.72867206E12, 549.5], [1.72867104E12, 406.0], [1.72867086E12, 430.0], [1.72867308E12, 540.5], [1.7286741E12, 740.0], [1.72866984E12, 446.5], [1.72867464E12, 684.0], [1.728669E12, 326.0], [1.72867122E12, 408.5], [1.72867344E12, 495.0], [1.72867326E12, 578.0], [1.72867002E12, 380.0], [1.72867224E12, 597.0], [1.7286714E12, 422.0], [1.72866816E12, 286.5], [1.72866918E12, 349.0], [1.72867362E12, 569.5], [1.7286702E12, 338.0], [1.72866798E12, 257.0], [1.72867242E12, 523.0], [1.72867446E12, 645.0], [1.72866996E12, 404.0], [1.72867218E12, 547.0], [1.72867458E12, 769.0], [1.72867098E12, 410.0], [1.7286732E12, 615.0], [1.72866876E12, 369.5], [1.72866912E12, 364.5], [1.72867014E12, 450.5], [1.72867236E12, 576.0], [1.72867422E12, 705.0], [1.72867116E12, 399.0], [1.7286744E12, 649.5], [1.72866792E12, 334.0], [1.72866894E12, 334.0], [1.72867338E12, 517.0], [1.7286693E12, 311.0], [1.72867254E12, 602.0], [1.72867152E12, 424.0], [1.7286681E12, 388.0], [1.72867134E12, 438.5], [1.72867356E12, 581.0], [1.72867032E12, 389.0], [1.72867494E12, 698.0], [1.72866948E12, 413.5], [1.7286717E12, 427.0], [1.72867392E12, 666.0], [1.72867374E12, 673.0], [1.72867476E12, 754.5], [1.72866828E12, 389.5], [1.7286705E12, 402.5], [1.72867272E12, 567.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7286753E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 198.0, "minX": 1.0, "maxY": 775.5, "series": [{"data": [[2.0, 610.0], [32.0, 225.0], [33.0, 226.0], [34.0, 233.5], [35.0, 269.5], [37.0, 209.5], [36.0, 309.5], [3.0, 554.0], [4.0, 496.5], [5.0, 558.0], [6.0, 565.0], [7.0, 511.0], [8.0, 472.5], [9.0, 434.0], [10.0, 419.0], [11.0, 456.0], [12.0, 477.0], [13.0, 519.0], [14.0, 541.5], [15.0, 555.0], [1.0, 775.5], [16.0, 554.0], [17.0, 540.0], [18.0, 531.5], [19.0, 501.0], [20.0, 486.0], [21.0, 431.0], [22.0, 379.5], [23.0, 393.0], [24.0, 349.0], [25.0, 325.0], [26.0, 302.5], [27.0, 271.0], [28.0, 280.0], [29.0, 258.0], [30.0, 254.0], [31.0, 198.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 37.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 123.0, "minX": 1.0, "maxY": 526.0, "series": [{"data": [[2.0, 413.5], [32.0, 144.5], [33.0, 126.5], [34.0, 151.5], [35.0, 143.0], [37.0, 132.5], [36.0, 197.0], [3.0, 369.5], [4.0, 339.0], [5.0, 365.0], [6.0, 365.0], [7.0, 344.0], [8.0, 328.5], [9.0, 310.0], [10.0, 297.0], [11.0, 322.5], [12.0, 333.0], [13.0, 365.0], [14.0, 382.0], [15.0, 394.0], [1.0, 526.0], [16.0, 390.0], [17.0, 385.0], [18.0, 381.5], [19.0, 361.0], [20.0, 350.0], [21.0, 309.0], [22.0, 270.0], [23.0, 277.0], [24.0, 237.5], [25.0, 214.0], [26.0, 197.0], [27.0, 163.5], [28.0, 177.0], [29.0, 157.0], [30.0, 154.5], [31.0, 123.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 37.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9833333333333333, "minX": 1.72866792E12, "maxY": 20.5, "series": [{"data": [[1.7286735E12, 18.233333333333334], [1.72866804E12, 5.166666666666667], [1.72867026E12, 16.683333333333334], [1.72867248E12, 19.666666666666668], [1.7286747E12, 18.466666666666665], [1.72866906E12, 9.766666666666667], [1.7286723E12, 19.9], [1.72867488E12, 20.383333333333333], [1.72867128E12, 17.166666666666668], [1.72867044E12, 16.65], [1.72866822E12, 9.916666666666666], [1.72867266E12, 19.85], [1.72867452E12, 19.95], [1.72866924E12, 9.816666666666666], [1.72867146E12, 16.85], [1.72867368E12, 13.85], [1.7286696E12, 9.466666666666667], [1.72867062E12, 17.766666666666666], [1.72867284E12, 19.116666666666667], [1.72867404E12, 19.566666666666666], [1.72867164E12, 16.633333333333333], [1.7286684E12, 9.383333333333333], [1.72866942E12, 9.716666666666667], [1.72867386E12, 20.5], [1.72867524E12, 20.333333333333332], [1.72866978E12, 7.766666666666667], [1.72867302E12, 19.3], [1.728672E12, 18.433333333333334], [1.72866858E12, 9.333333333333334], [1.72867182E12, 20.066666666666666], [1.72867506E12, 20.466666666666665], [1.7286708E12, 15.9], [1.72866834E12, 10.15], [1.72867158E12, 16.433333333333334], [1.7286738E12, 19.55], [1.72867056E12, 16.533333333333335], [1.728675E12, 19.7], [1.72866936E12, 10.05], [1.72867038E12, 16.016666666666666], [1.7286726E12, 18.75], [1.72867398E12, 20.05], [1.72867482E12, 19.483333333333334], [1.72867296E12, 19.283333333333335], [1.72866852E12, 10.0], [1.72867074E12, 16.816666666666666], [1.72866954E12, 9.833333333333334], [1.72867278E12, 19.15], [1.72867176E12, 9.783333333333333], [1.72867092E12, 17.483333333333334], [1.72867434E12, 19.333333333333332], [1.72867314E12, 19.9], [1.7286687E12, 9.616666666666667], [1.72867194E12, 19.15], [1.72866972E12, 10.483333333333333], [1.72867416E12, 19.766666666666666], [1.7286711E12, 17.116666666666667], [1.72867332E12, 19.25], [1.72867008E12, 16.7], [1.72867518E12, 19.433333333333334], [1.72866888E12, 9.65], [1.7286699E12, 16.833333333333332], [1.72867212E12, 17.616666666666667], [1.72867188E12, 19.466666666666665], [1.7286753E12, 8.866666666666667], [1.72866864E12, 8.966666666666667], [1.72866966E12, 9.9], [1.72867068E12, 16.633333333333333], [1.72866846E12, 9.733333333333333], [1.7286729E12, 19.416666666666668], [1.72867428E12, 19.533333333333335], [1.72866882E12, 9.7], [1.72867512E12, 18.866666666666667], [1.72867206E12, 18.966666666666665], [1.72867104E12, 16.716666666666665], [1.72867086E12, 16.416666666666668], [1.72867308E12, 19.033333333333335], [1.7286741E12, 19.35], [1.72866984E12, 11.45], [1.72867464E12, 19.883333333333333], [1.728669E12, 10.383333333333333], [1.72867122E12, 17.066666666666666], [1.72867344E12, 19.716666666666665], [1.72867326E12, 18.95], [1.72867002E12, 17.033333333333335], [1.72867224E12, 18.35], [1.7286714E12, 16.383333333333333], [1.72866816E12, 7.133333333333334], [1.72866918E12, 9.716666666666667], [1.72867362E12, 18.416666666666668], [1.7286702E12, 17.483333333333334], [1.72866798E12, 5.45], [1.72867242E12, 19.3], [1.72867446E12, 20.383333333333333], [1.72866996E12, 16.95], [1.72867218E12, 19.366666666666667], [1.72867458E12, 19.416666666666668], [1.72867098E12, 16.716666666666665], [1.7286732E12, 18.166666666666668], [1.72866876E12, 9.866666666666667], [1.72866912E12, 9.933333333333334], [1.72867014E12, 16.566666666666666], [1.72867236E12, 18.816666666666666], [1.72867422E12, 19.816666666666666], [1.72867116E12, 17.1], [1.7286744E12, 20.233333333333334], [1.72866792E12, 0.9833333333333333], [1.72866894E12, 10.1], [1.72867338E12, 19.216666666666665], [1.7286693E12, 10.333333333333334], [1.72867254E12, 17.966666666666665], [1.72867152E12, 16.75], [1.7286681E12, 4.866666666666666], [1.72867134E12, 16.3], [1.72867356E12, 18.9], [1.72867032E12, 17.316666666666666], [1.72867494E12, 20.15], [1.72866948E12, 9.2], [1.7286717E12, 14.733333333333333], [1.72867392E12, 20.433333333333334], [1.72867374E12, 20.25], [1.72867476E12, 19.433333333333334], [1.72866828E12, 9.533333333333333], [1.7286705E12, 16.533333333333335], [1.72867272E12, 18.733333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7286753E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.95, "minX": 1.72866792E12, "maxY": 20.5, "series": [{"data": [[1.7286735E12, 18.233333333333334], [1.72866804E12, 5.166666666666667], [1.72867026E12, 16.683333333333334], [1.72867248E12, 19.666666666666668], [1.7286747E12, 18.466666666666665], [1.72866906E12, 9.766666666666667], [1.7286723E12, 19.9], [1.72867488E12, 20.383333333333333], [1.72867128E12, 17.166666666666668], [1.72867044E12, 16.65], [1.72866822E12, 9.916666666666666], [1.72867266E12, 19.85], [1.72867452E12, 19.95], [1.72866924E12, 9.816666666666666], [1.72867146E12, 16.85], [1.72867368E12, 13.733333333333333], [1.7286696E12, 9.466666666666667], [1.72867062E12, 17.766666666666666], [1.72867284E12, 19.116666666666667], [1.72867404E12, 19.566666666666666], [1.72867164E12, 16.633333333333333], [1.7286684E12, 9.383333333333333], [1.72866942E12, 9.716666666666667], [1.72867386E12, 20.5], [1.72867524E12, 20.366666666666667], [1.72866978E12, 7.816666666666666], [1.72867302E12, 19.3], [1.728672E12, 18.433333333333334], [1.72866858E12, 9.333333333333334], [1.72867182E12, 20.066666666666666], [1.72867506E12, 20.466666666666665], [1.7286708E12, 15.9], [1.72866834E12, 10.15], [1.72867158E12, 16.433333333333334], [1.7286738E12, 19.55], [1.72867056E12, 16.533333333333335], [1.728675E12, 19.7], [1.72866936E12, 10.05], [1.72867038E12, 16.016666666666666], [1.7286726E12, 18.75], [1.72867398E12, 20.05], [1.72867482E12, 19.483333333333334], [1.72867296E12, 19.283333333333335], [1.72866852E12, 10.0], [1.72867074E12, 16.816666666666666], [1.72866954E12, 9.833333333333334], [1.72867278E12, 19.15], [1.72867176E12, 9.633333333333333], [1.72867092E12, 17.483333333333334], [1.72867434E12, 19.333333333333332], [1.72867314E12, 19.9], [1.7286687E12, 9.616666666666667], [1.72867194E12, 19.15], [1.72866972E12, 10.483333333333333], [1.72867416E12, 19.766666666666666], [1.7286711E12, 17.116666666666667], [1.72867332E12, 19.25], [1.72867008E12, 16.7], [1.72867518E12, 19.433333333333334], [1.72866888E12, 9.65], [1.7286699E12, 16.833333333333332], [1.72867212E12, 17.616666666666667], [1.72867188E12, 19.466666666666665], [1.7286753E12, 9.1], [1.72866864E12, 8.966666666666667], [1.72866966E12, 9.9], [1.72867068E12, 16.633333333333333], [1.72866846E12, 9.733333333333333], [1.7286729E12, 19.416666666666668], [1.72867428E12, 19.533333333333335], [1.72866882E12, 9.7], [1.72867512E12, 18.866666666666667], [1.72867206E12, 18.966666666666665], [1.72867104E12, 16.716666666666665], [1.72867086E12, 16.416666666666668], [1.72867308E12, 19.033333333333335], [1.7286741E12, 19.35], [1.72866984E12, 11.333333333333334], [1.72867464E12, 19.883333333333333], [1.728669E12, 10.383333333333333], [1.72867122E12, 17.066666666666666], [1.72867344E12, 19.716666666666665], [1.72867326E12, 18.95], [1.72867002E12, 17.033333333333335], [1.72867224E12, 18.35], [1.7286714E12, 16.383333333333333], [1.72866816E12, 7.1], [1.72866918E12, 9.716666666666667], [1.72867362E12, 18.466666666666665], [1.7286702E12, 17.483333333333334], [1.72866798E12, 5.45], [1.72867242E12, 19.3], [1.72867446E12, 20.383333333333333], [1.72866996E12, 16.95], [1.72867218E12, 19.366666666666667], [1.72867458E12, 19.416666666666668], [1.72867098E12, 16.716666666666665], [1.7286732E12, 18.166666666666668], [1.72866876E12, 9.866666666666667], [1.72866912E12, 9.933333333333334], [1.72867014E12, 16.566666666666666], [1.72867236E12, 18.816666666666666], [1.72867422E12, 19.816666666666666], [1.72867116E12, 17.1], [1.7286744E12, 20.233333333333334], [1.72866792E12, 0.95], [1.72866894E12, 10.1], [1.72867338E12, 19.216666666666665], [1.7286693E12, 10.333333333333334], [1.72867254E12, 17.966666666666665], [1.72867152E12, 16.75], [1.7286681E12, 4.866666666666666], [1.72867134E12, 16.3], [1.72867356E12, 18.9], [1.72867032E12, 17.316666666666666], [1.72867494E12, 20.15], [1.72866948E12, 9.2], [1.7286717E12, 14.816666666666666], [1.72867392E12, 20.433333333333334], [1.72867374E12, 20.25], [1.72867476E12, 19.433333333333334], [1.72866828E12, 9.533333333333333], [1.7286705E12, 16.533333333333335], [1.72867272E12, 18.733333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7286753E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.95, "minX": 1.72866792E12, "maxY": 20.5, "series": [{"data": [[1.7286735E12, 18.233333333333334], [1.72866804E12, 5.166666666666667], [1.72867026E12, 16.683333333333334], [1.72867248E12, 19.666666666666668], [1.7286747E12, 18.466666666666665], [1.72866906E12, 9.766666666666667], [1.7286723E12, 19.9], [1.72867488E12, 20.383333333333333], [1.72867128E12, 17.166666666666668], [1.72867044E12, 16.65], [1.72866822E12, 9.916666666666666], [1.72867266E12, 19.85], [1.72867452E12, 19.95], [1.72866924E12, 9.816666666666666], [1.72867146E12, 16.85], [1.72867368E12, 13.733333333333333], [1.7286696E12, 9.466666666666667], [1.72867062E12, 17.766666666666666], [1.72867284E12, 19.116666666666667], [1.72867404E12, 19.566666666666666], [1.72867164E12, 16.633333333333333], [1.7286684E12, 9.383333333333333], [1.72866942E12, 9.716666666666667], [1.72867386E12, 20.5], [1.72867524E12, 20.366666666666667], [1.72866978E12, 7.816666666666666], [1.72867302E12, 19.3], [1.728672E12, 18.433333333333334], [1.72866858E12, 9.333333333333334], [1.72867182E12, 20.066666666666666], [1.72867506E12, 20.466666666666665], [1.7286708E12, 15.9], [1.72866834E12, 10.15], [1.72867158E12, 16.433333333333334], [1.7286738E12, 19.55], [1.72867056E12, 16.533333333333335], [1.728675E12, 19.7], [1.72866936E12, 10.05], [1.72867038E12, 16.016666666666666], [1.7286726E12, 18.75], [1.72867398E12, 20.05], [1.72867482E12, 19.483333333333334], [1.72867296E12, 19.283333333333335], [1.72866852E12, 10.0], [1.72867074E12, 16.816666666666666], [1.72866954E12, 9.833333333333334], [1.72867278E12, 19.15], [1.72867176E12, 9.633333333333333], [1.72867092E12, 17.483333333333334], [1.72867434E12, 19.333333333333332], [1.72867314E12, 19.9], [1.7286687E12, 9.616666666666667], [1.72867194E12, 19.15], [1.72866972E12, 10.483333333333333], [1.72867416E12, 19.766666666666666], [1.7286711E12, 17.116666666666667], [1.72867332E12, 19.25], [1.72867008E12, 16.7], [1.72867518E12, 19.433333333333334], [1.72866888E12, 9.65], [1.7286699E12, 16.833333333333332], [1.72867212E12, 17.616666666666667], [1.72867188E12, 19.466666666666665], [1.7286753E12, 9.1], [1.72866864E12, 8.966666666666667], [1.72866966E12, 9.9], [1.72867068E12, 16.633333333333333], [1.72866846E12, 9.733333333333333], [1.7286729E12, 19.416666666666668], [1.72867428E12, 19.533333333333335], [1.72866882E12, 9.7], [1.72867512E12, 18.866666666666667], [1.72867206E12, 18.966666666666665], [1.72867104E12, 16.716666666666665], [1.72867086E12, 16.416666666666668], [1.72867308E12, 19.033333333333335], [1.7286741E12, 19.35], [1.72866984E12, 11.333333333333334], [1.72867464E12, 19.883333333333333], [1.728669E12, 10.383333333333333], [1.72867122E12, 17.066666666666666], [1.72867344E12, 19.716666666666665], [1.72867326E12, 18.95], [1.72867002E12, 17.033333333333335], [1.72867224E12, 18.35], [1.7286714E12, 16.383333333333333], [1.72866816E12, 7.1], [1.72866918E12, 9.716666666666667], [1.72867362E12, 18.466666666666665], [1.7286702E12, 17.483333333333334], [1.72866798E12, 5.45], [1.72867242E12, 19.3], [1.72867446E12, 20.383333333333333], [1.72866996E12, 16.95], [1.72867218E12, 19.366666666666667], [1.72867458E12, 19.416666666666668], [1.72867098E12, 16.716666666666665], [1.7286732E12, 18.166666666666668], [1.72866876E12, 9.866666666666667], [1.72866912E12, 9.933333333333334], [1.72867014E12, 16.566666666666666], [1.72867236E12, 18.816666666666666], [1.72867422E12, 19.816666666666666], [1.72867116E12, 17.1], [1.7286744E12, 20.233333333333334], [1.72866792E12, 0.95], [1.72866894E12, 10.1], [1.72867338E12, 19.216666666666665], [1.7286693E12, 10.333333333333334], [1.72867254E12, 17.966666666666665], [1.72867152E12, 16.75], [1.7286681E12, 4.866666666666666], [1.72867134E12, 16.3], [1.72867356E12, 18.9], [1.72867032E12, 17.316666666666666], [1.72867494E12, 20.15], [1.72866948E12, 9.2], [1.7286717E12, 14.816666666666666], [1.72867392E12, 20.433333333333334], [1.72867374E12, 20.25], [1.72867476E12, 19.433333333333334], [1.72866828E12, 9.533333333333333], [1.7286705E12, 16.533333333333335], [1.72867272E12, 18.733333333333334]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7286753E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.95, "minX": 1.72866792E12, "maxY": 20.5, "series": [{"data": [[1.7286735E12, 18.233333333333334], [1.72866804E12, 5.166666666666667], [1.72867026E12, 16.683333333333334], [1.72867248E12, 19.666666666666668], [1.7286747E12, 18.466666666666665], [1.72866906E12, 9.766666666666667], [1.7286723E12, 19.9], [1.72867488E12, 20.383333333333333], [1.72867128E12, 17.166666666666668], [1.72867044E12, 16.65], [1.72866822E12, 9.916666666666666], [1.72867266E12, 19.85], [1.72867452E12, 19.95], [1.72866924E12, 9.816666666666666], [1.72867146E12, 16.85], [1.72867368E12, 13.733333333333333], [1.7286696E12, 9.466666666666667], [1.72867062E12, 17.766666666666666], [1.72867284E12, 19.116666666666667], [1.72867404E12, 19.566666666666666], [1.72867164E12, 16.633333333333333], [1.7286684E12, 9.383333333333333], [1.72866942E12, 9.716666666666667], [1.72867386E12, 20.5], [1.72867524E12, 20.366666666666667], [1.72866978E12, 7.816666666666666], [1.72867302E12, 19.3], [1.728672E12, 18.433333333333334], [1.72866858E12, 9.333333333333334], [1.72867182E12, 20.066666666666666], [1.72867506E12, 20.466666666666665], [1.7286708E12, 15.9], [1.72866834E12, 10.15], [1.72867158E12, 16.433333333333334], [1.7286738E12, 19.55], [1.72867056E12, 16.533333333333335], [1.728675E12, 19.7], [1.72866936E12, 10.05], [1.72867038E12, 16.016666666666666], [1.7286726E12, 18.75], [1.72867398E12, 20.05], [1.72867482E12, 19.483333333333334], [1.72867296E12, 19.283333333333335], [1.72866852E12, 10.0], [1.72867074E12, 16.816666666666666], [1.72866954E12, 9.833333333333334], [1.72867278E12, 19.15], [1.72867176E12, 9.633333333333333], [1.72867092E12, 17.483333333333334], [1.72867434E12, 19.333333333333332], [1.72867314E12, 19.9], [1.7286687E12, 9.616666666666667], [1.72867194E12, 19.15], [1.72866972E12, 10.483333333333333], [1.72867416E12, 19.766666666666666], [1.7286711E12, 17.116666666666667], [1.72867332E12, 19.25], [1.72867008E12, 16.7], [1.72867518E12, 19.433333333333334], [1.72866888E12, 9.65], [1.7286699E12, 16.833333333333332], [1.72867212E12, 17.616666666666667], [1.72867188E12, 19.466666666666665], [1.7286753E12, 9.1], [1.72866864E12, 8.966666666666667], [1.72866966E12, 9.9], [1.72867068E12, 16.633333333333333], [1.72866846E12, 9.733333333333333], [1.7286729E12, 19.416666666666668], [1.72867428E12, 19.533333333333335], [1.72866882E12, 9.7], [1.72867512E12, 18.866666666666667], [1.72867206E12, 18.966666666666665], [1.72867104E12, 16.716666666666665], [1.72867086E12, 16.416666666666668], [1.72867308E12, 19.033333333333335], [1.7286741E12, 19.35], [1.72866984E12, 11.333333333333334], [1.72867464E12, 19.883333333333333], [1.728669E12, 10.383333333333333], [1.72867122E12, 17.066666666666666], [1.72867344E12, 19.716666666666665], [1.72867326E12, 18.95], [1.72867002E12, 17.033333333333335], [1.72867224E12, 18.35], [1.7286714E12, 16.383333333333333], [1.72866816E12, 7.1], [1.72866918E12, 9.716666666666667], [1.72867362E12, 18.466666666666665], [1.7286702E12, 17.483333333333334], [1.72866798E12, 5.45], [1.72867242E12, 19.3], [1.72867446E12, 20.383333333333333], [1.72866996E12, 16.95], [1.72867218E12, 19.366666666666667], [1.72867458E12, 19.416666666666668], [1.72867098E12, 16.716666666666665], [1.7286732E12, 18.166666666666668], [1.72866876E12, 9.866666666666667], [1.72866912E12, 9.933333333333334], [1.72867014E12, 16.566666666666666], [1.72867236E12, 18.816666666666666], [1.72867422E12, 19.816666666666666], [1.72867116E12, 17.1], [1.7286744E12, 20.233333333333334], [1.72866792E12, 0.95], [1.72866894E12, 10.1], [1.72867338E12, 19.216666666666665], [1.7286693E12, 10.333333333333334], [1.72867254E12, 17.966666666666665], [1.72867152E12, 16.75], [1.7286681E12, 4.866666666666666], [1.72867134E12, 16.3], [1.72867356E12, 18.9], [1.72867032E12, 17.316666666666666], [1.72867494E12, 20.15], [1.72866948E12, 9.2], [1.7286717E12, 14.816666666666666], [1.72867392E12, 20.433333333333334], [1.72867374E12, 20.25], [1.72867476E12, 19.433333333333334], [1.72866828E12, 9.533333333333333], [1.7286705E12, 16.533333333333335], [1.72867272E12, 18.733333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7286753E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

