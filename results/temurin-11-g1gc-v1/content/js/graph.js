/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 20.0, "minX": 0.0, "maxY": 4017.0, "series": [{"data": [[0.0, 20.0], [0.1, 43.0], [0.2, 46.0], [0.3, 48.0], [0.4, 50.0], [0.5, 52.0], [0.6, 53.0], [0.7, 54.0], [0.8, 55.0], [0.9, 56.0], [1.0, 57.0], [1.1, 58.0], [1.2, 59.0], [1.3, 59.0], [1.4, 60.0], [1.5, 61.0], [1.6, 62.0], [1.7, 62.0], [1.8, 63.0], [1.9, 64.0], [2.0, 65.0], [2.1, 65.0], [2.2, 66.0], [2.3, 67.0], [2.4, 67.0], [2.5, 68.0], [2.6, 68.0], [2.7, 69.0], [2.8, 69.0], [2.9, 70.0], [3.0, 71.0], [3.1, 71.0], [3.2, 72.0], [3.3, 72.0], [3.4, 73.0], [3.5, 73.0], [3.6, 74.0], [3.7, 74.0], [3.8, 75.0], [3.9, 75.0], [4.0, 75.0], [4.1, 76.0], [4.2, 76.0], [4.3, 77.0], [4.4, 77.0], [4.5, 78.0], [4.6, 78.0], [4.7, 79.0], [4.8, 79.0], [4.9, 79.0], [5.0, 80.0], [5.1, 80.0], [5.2, 81.0], [5.3, 81.0], [5.4, 82.0], [5.5, 82.0], [5.6, 82.0], [5.7, 83.0], [5.8, 83.0], [5.9, 84.0], [6.0, 84.0], [6.1, 85.0], [6.2, 85.0], [6.3, 85.0], [6.4, 86.0], [6.5, 86.0], [6.6, 86.0], [6.7, 87.0], [6.8, 87.0], [6.9, 88.0], [7.0, 88.0], [7.1, 88.0], [7.2, 89.0], [7.3, 89.0], [7.4, 90.0], [7.5, 90.0], [7.6, 90.0], [7.7, 91.0], [7.8, 91.0], [7.9, 92.0], [8.0, 92.0], [8.1, 92.0], [8.2, 93.0], [8.3, 93.0], [8.4, 93.0], [8.5, 94.0], [8.6, 94.0], [8.7, 95.0], [8.8, 95.0], [8.9, 95.0], [9.0, 96.0], [9.1, 96.0], [9.2, 96.0], [9.3, 97.0], [9.4, 97.0], [9.5, 98.0], [9.6, 98.0], [9.7, 98.0], [9.8, 99.0], [9.9, 99.0], [10.0, 99.0], [10.1, 100.0], [10.2, 100.0], [10.3, 100.0], [10.4, 101.0], [10.5, 101.0], [10.6, 102.0], [10.7, 102.0], [10.8, 102.0], [10.9, 103.0], [11.0, 103.0], [11.1, 103.0], [11.2, 104.0], [11.3, 104.0], [11.4, 105.0], [11.5, 105.0], [11.6, 105.0], [11.7, 106.0], [11.8, 106.0], [11.9, 106.0], [12.0, 107.0], [12.1, 107.0], [12.2, 108.0], [12.3, 108.0], [12.4, 108.0], [12.5, 109.0], [12.6, 109.0], [12.7, 110.0], [12.8, 110.0], [12.9, 110.0], [13.0, 111.0], [13.1, 111.0], [13.2, 111.0], [13.3, 112.0], [13.4, 112.0], [13.5, 113.0], [13.6, 113.0], [13.7, 113.0], [13.8, 114.0], [13.9, 114.0], [14.0, 115.0], [14.1, 115.0], [14.2, 115.0], [14.3, 116.0], [14.4, 116.0], [14.5, 117.0], [14.6, 117.0], [14.7, 117.0], [14.8, 118.0], [14.9, 118.0], [15.0, 118.0], [15.1, 119.0], [15.2, 119.0], [15.3, 120.0], [15.4, 120.0], [15.5, 120.0], [15.6, 121.0], [15.7, 121.0], [15.8, 121.0], [15.9, 122.0], [16.0, 122.0], [16.1, 123.0], [16.2, 123.0], [16.3, 123.0], [16.4, 124.0], [16.5, 124.0], [16.6, 124.0], [16.7, 125.0], [16.8, 125.0], [16.9, 126.0], [17.0, 126.0], [17.1, 126.0], [17.2, 127.0], [17.3, 127.0], [17.4, 128.0], [17.5, 128.0], [17.6, 128.0], [17.7, 129.0], [17.8, 129.0], [17.9, 130.0], [18.0, 130.0], [18.1, 130.0], [18.2, 131.0], [18.3, 131.0], [18.4, 132.0], [18.5, 132.0], [18.6, 133.0], [18.7, 133.0], [18.8, 133.0], [18.9, 134.0], [19.0, 134.0], [19.1, 135.0], [19.2, 135.0], [19.3, 136.0], [19.4, 136.0], [19.5, 136.0], [19.6, 137.0], [19.7, 137.0], [19.8, 138.0], [19.9, 138.0], [20.0, 139.0], [20.1, 139.0], [20.2, 139.0], [20.3, 140.0], [20.4, 140.0], [20.5, 141.0], [20.6, 141.0], [20.7, 142.0], [20.8, 142.0], [20.9, 143.0], [21.0, 143.0], [21.1, 144.0], [21.2, 144.0], [21.3, 144.0], [21.4, 145.0], [21.5, 145.0], [21.6, 146.0], [21.7, 146.0], [21.8, 146.0], [21.9, 147.0], [22.0, 147.0], [22.1, 148.0], [22.2, 148.0], [22.3, 149.0], [22.4, 149.0], [22.5, 150.0], [22.6, 150.0], [22.7, 150.0], [22.8, 151.0], [22.9, 151.0], [23.0, 152.0], [23.1, 152.0], [23.2, 153.0], [23.3, 153.0], [23.4, 154.0], [23.5, 154.0], [23.6, 154.0], [23.7, 155.0], [23.8, 155.0], [23.9, 156.0], [24.0, 156.0], [24.1, 157.0], [24.2, 157.0], [24.3, 158.0], [24.4, 158.0], [24.5, 159.0], [24.6, 159.0], [24.7, 160.0], [24.8, 160.0], [24.9, 161.0], [25.0, 161.0], [25.1, 162.0], [25.2, 162.0], [25.3, 163.0], [25.4, 163.0], [25.5, 164.0], [25.6, 165.0], [25.7, 165.0], [25.8, 166.0], [25.9, 166.0], [26.0, 167.0], [26.1, 167.0], [26.2, 168.0], [26.3, 168.0], [26.4, 169.0], [26.5, 169.0], [26.6, 170.0], [26.7, 171.0], [26.8, 171.0], [26.9, 172.0], [27.0, 172.0], [27.1, 173.0], [27.2, 173.0], [27.3, 174.0], [27.4, 175.0], [27.5, 175.0], [27.6, 176.0], [27.7, 176.0], [27.8, 177.0], [27.9, 178.0], [28.0, 178.0], [28.1, 179.0], [28.2, 180.0], [28.3, 180.0], [28.4, 181.0], [28.5, 181.0], [28.6, 182.0], [28.7, 183.0], [28.8, 183.0], [28.9, 184.0], [29.0, 184.0], [29.1, 185.0], [29.2, 186.0], [29.3, 186.0], [29.4, 187.0], [29.5, 188.0], [29.6, 188.0], [29.7, 189.0], [29.8, 190.0], [29.9, 190.0], [30.0, 191.0], [30.1, 192.0], [30.2, 192.0], [30.3, 193.0], [30.4, 194.0], [30.5, 194.0], [30.6, 195.0], [30.7, 196.0], [30.8, 196.0], [30.9, 197.0], [31.0, 198.0], [31.1, 199.0], [31.2, 199.0], [31.3, 200.0], [31.4, 201.0], [31.5, 201.0], [31.6, 202.0], [31.7, 203.0], [31.8, 204.0], [31.9, 204.0], [32.0, 205.0], [32.1, 206.0], [32.2, 207.0], [32.3, 207.0], [32.4, 208.0], [32.5, 209.0], [32.6, 210.0], [32.7, 211.0], [32.8, 211.0], [32.9, 212.0], [33.0, 213.0], [33.1, 214.0], [33.2, 214.0], [33.3, 215.0], [33.4, 216.0], [33.5, 217.0], [33.6, 218.0], [33.7, 219.0], [33.8, 220.0], [33.9, 220.0], [34.0, 221.0], [34.1, 222.0], [34.2, 223.0], [34.3, 224.0], [34.4, 225.0], [34.5, 226.0], [34.6, 227.0], [34.7, 228.0], [34.8, 229.0], [34.9, 230.0], [35.0, 231.0], [35.1, 232.0], [35.2, 233.0], [35.3, 234.0], [35.4, 235.0], [35.5, 236.0], [35.6, 237.0], [35.7, 238.0], [35.8, 239.0], [35.9, 241.0], [36.0, 242.0], [36.1, 243.0], [36.2, 244.0], [36.3, 245.0], [36.4, 246.0], [36.5, 247.0], [36.6, 248.0], [36.7, 250.0], [36.8, 251.0], [36.9, 252.0], [37.0, 253.0], [37.1, 255.0], [37.2, 256.0], [37.3, 258.0], [37.4, 259.0], [37.5, 260.0], [37.6, 262.0], [37.7, 263.0], [37.8, 264.0], [37.9, 266.0], [38.0, 268.0], [38.1, 269.0], [38.2, 270.0], [38.3, 272.0], [38.4, 273.0], [38.5, 275.0], [38.6, 276.0], [38.7, 278.0], [38.8, 280.0], [38.9, 282.0], [39.0, 283.0], [39.1, 285.0], [39.2, 286.0], [39.3, 288.0], [39.4, 290.0], [39.5, 291.0], [39.6, 293.0], [39.7, 295.0], [39.8, 296.0], [39.9, 299.0], [40.0, 300.0], [40.1, 302.0], [40.2, 304.0], [40.3, 306.0], [40.4, 308.0], [40.5, 310.0], [40.6, 312.0], [40.7, 314.0], [40.8, 316.0], [40.9, 318.0], [41.0, 320.0], [41.1, 322.0], [41.2, 324.0], [41.3, 326.0], [41.4, 329.0], [41.5, 332.0], [41.6, 334.0], [41.7, 336.0], [41.8, 338.0], [41.9, 341.0], [42.0, 343.0], [42.1, 346.0], [42.2, 348.0], [42.3, 351.0], [42.4, 353.0], [42.5, 357.0], [42.6, 359.0], [42.7, 362.0], [42.8, 364.0], [42.9, 366.0], [43.0, 369.0], [43.1, 371.0], [43.2, 374.0], [43.3, 377.0], [43.4, 380.0], [43.5, 383.0], [43.6, 386.0], [43.7, 389.0], [43.8, 392.0], [43.9, 395.0], [44.0, 398.0], [44.1, 401.0], [44.2, 403.0], [44.3, 406.0], [44.4, 409.0], [44.5, 411.0], [44.6, 414.0], [44.7, 418.0], [44.8, 420.0], [44.9, 424.0], [45.0, 427.0], [45.1, 430.0], [45.2, 433.0], [45.3, 436.0], [45.4, 439.0], [45.5, 441.0], [45.6, 444.0], [45.7, 447.0], [45.8, 450.0], [45.9, 454.0], [46.0, 457.0], [46.1, 460.0], [46.2, 463.0], [46.3, 466.0], [46.4, 468.0], [46.5, 471.0], [46.6, 474.0], [46.7, 476.0], [46.8, 479.0], [46.9, 481.0], [47.0, 484.0], [47.1, 487.0], [47.2, 490.0], [47.3, 493.0], [47.4, 496.0], [47.5, 499.0], [47.6, 502.0], [47.7, 504.0], [47.8, 507.0], [47.9, 510.0], [48.0, 512.0], [48.1, 514.0], [48.2, 517.0], [48.3, 520.0], [48.4, 522.0], [48.5, 525.0], [48.6, 527.0], [48.7, 529.0], [48.8, 532.0], [48.9, 535.0], [49.0, 537.0], [49.1, 540.0], [49.2, 543.0], [49.3, 545.0], [49.4, 548.0], [49.5, 550.0], [49.6, 553.0], [49.7, 555.0], [49.8, 558.0], [49.9, 560.0], [50.0, 562.0], [50.1, 565.0], [50.2, 567.0], [50.3, 570.0], [50.4, 572.0], [50.5, 574.0], [50.6, 577.0], [50.7, 579.0], [50.8, 582.0], [50.9, 584.0], [51.0, 586.0], [51.1, 589.0], [51.2, 591.0], [51.3, 593.0], [51.4, 595.0], [51.5, 598.0], [51.6, 600.0], [51.7, 602.0], [51.8, 605.0], [51.9, 607.0], [52.0, 609.0], [52.1, 611.0], [52.2, 613.0], [52.3, 615.0], [52.4, 618.0], [52.5, 620.0], [52.6, 623.0], [52.7, 625.0], [52.8, 627.0], [52.9, 630.0], [53.0, 632.0], [53.1, 634.0], [53.2, 636.0], [53.3, 638.0], [53.4, 641.0], [53.5, 643.0], [53.6, 645.0], [53.7, 647.0], [53.8, 649.0], [53.9, 651.0], [54.0, 654.0], [54.1, 656.0], [54.2, 659.0], [54.3, 661.0], [54.4, 663.0], [54.5, 665.0], [54.6, 667.0], [54.7, 670.0], [54.8, 671.0], [54.9, 674.0], [55.0, 676.0], [55.1, 678.0], [55.2, 680.0], [55.3, 682.0], [55.4, 684.0], [55.5, 686.0], [55.6, 688.0], [55.7, 691.0], [55.8, 693.0], [55.9, 694.0], [56.0, 696.0], [56.1, 698.0], [56.2, 701.0], [56.3, 703.0], [56.4, 705.0], [56.5, 707.0], [56.6, 709.0], [56.7, 711.0], [56.8, 713.0], [56.9, 716.0], [57.0, 718.0], [57.1, 720.0], [57.2, 722.0], [57.3, 724.0], [57.4, 726.0], [57.5, 728.0], [57.6, 730.0], [57.7, 732.0], [57.8, 734.0], [57.9, 736.0], [58.0, 738.0], [58.1, 740.0], [58.2, 742.0], [58.3, 744.0], [58.4, 746.0], [58.5, 748.0], [58.6, 750.0], [58.7, 752.0], [58.8, 754.0], [58.9, 756.0], [59.0, 758.0], [59.1, 760.0], [59.2, 761.0], [59.3, 764.0], [59.4, 766.0], [59.5, 768.0], [59.6, 770.0], [59.7, 772.0], [59.8, 774.0], [59.9, 777.0], [60.0, 779.0], [60.1, 781.0], [60.2, 783.0], [60.3, 785.0], [60.4, 787.0], [60.5, 789.0], [60.6, 791.0], [60.7, 793.0], [60.8, 795.0], [60.9, 798.0], [61.0, 800.0], [61.1, 802.0], [61.2, 804.0], [61.3, 806.0], [61.4, 808.0], [61.5, 810.0], [61.6, 812.0], [61.7, 814.0], [61.8, 816.0], [61.9, 818.0], [62.0, 820.0], [62.1, 822.0], [62.2, 824.0], [62.3, 826.0], [62.4, 828.0], [62.5, 830.0], [62.6, 832.0], [62.7, 834.0], [62.8, 836.0], [62.9, 838.0], [63.0, 840.0], [63.1, 842.0], [63.2, 844.0], [63.3, 846.0], [63.4, 848.0], [63.5, 850.0], [63.6, 852.0], [63.7, 854.0], [63.8, 856.0], [63.9, 858.0], [64.0, 860.0], [64.1, 862.0], [64.2, 865.0], [64.3, 867.0], [64.4, 869.0], [64.5, 871.0], [64.6, 873.0], [64.7, 874.0], [64.8, 876.0], [64.9, 878.0], [65.0, 880.0], [65.1, 882.0], [65.2, 884.0], [65.3, 886.0], [65.4, 888.0], [65.5, 890.0], [65.6, 892.0], [65.7, 894.0], [65.8, 896.0], [65.9, 898.0], [66.0, 900.0], [66.1, 902.0], [66.2, 904.0], [66.3, 906.0], [66.4, 908.0], [66.5, 910.0], [66.6, 912.0], [66.7, 914.0], [66.8, 916.0], [66.9, 918.0], [67.0, 920.0], [67.1, 922.0], [67.2, 925.0], [67.3, 927.0], [67.4, 929.0], [67.5, 931.0], [67.6, 933.0], [67.7, 935.0], [67.8, 937.0], [67.9, 939.0], [68.0, 941.0], [68.1, 943.0], [68.2, 945.0], [68.3, 948.0], [68.4, 950.0], [68.5, 952.0], [68.6, 954.0], [68.7, 956.0], [68.8, 958.0], [68.9, 961.0], [69.0, 963.0], [69.1, 965.0], [69.2, 967.0], [69.3, 969.0], [69.4, 971.0], [69.5, 973.0], [69.6, 975.0], [69.7, 977.0], [69.8, 979.0], [69.9, 981.0], [70.0, 983.0], [70.1, 985.0], [70.2, 988.0], [70.3, 990.0], [70.4, 992.0], [70.5, 995.0], [70.6, 997.0], [70.7, 999.0], [70.8, 1001.0], [70.9, 1004.0], [71.0, 1006.0], [71.1, 1008.0], [71.2, 1010.0], [71.3, 1012.0], [71.4, 1014.0], [71.5, 1016.0], [71.6, 1018.0], [71.7, 1020.0], [71.8, 1023.0], [71.9, 1025.0], [72.0, 1027.0], [72.1, 1029.0], [72.2, 1032.0], [72.3, 1034.0], [72.4, 1037.0], [72.5, 1039.0], [72.6, 1041.0], [72.7, 1043.0], [72.8, 1045.0], [72.9, 1047.0], [73.0, 1050.0], [73.1, 1052.0], [73.2, 1055.0], [73.3, 1057.0], [73.4, 1059.0], [73.5, 1061.0], [73.6, 1064.0], [73.7, 1066.0], [73.8, 1068.0], [73.9, 1071.0], [74.0, 1073.0], [74.1, 1075.0], [74.2, 1078.0], [74.3, 1080.0], [74.4, 1083.0], [74.5, 1085.0], [74.6, 1087.0], [74.7, 1090.0], [74.8, 1093.0], [74.9, 1095.0], [75.0, 1097.0], [75.1, 1099.0], [75.2, 1102.0], [75.3, 1104.0], [75.4, 1106.0], [75.5, 1108.0], [75.6, 1111.0], [75.7, 1114.0], [75.8, 1116.0], [75.9, 1118.0], [76.0, 1121.0], [76.1, 1124.0], [76.2, 1126.0], [76.3, 1128.0], [76.4, 1131.0], [76.5, 1133.0], [76.6, 1136.0], [76.7, 1138.0], [76.8, 1141.0], [76.9, 1144.0], [77.0, 1146.0], [77.1, 1149.0], [77.2, 1151.0], [77.3, 1153.0], [77.4, 1155.0], [77.5, 1158.0], [77.6, 1160.0], [77.7, 1163.0], [77.8, 1166.0], [77.9, 1168.0], [78.0, 1171.0], [78.1, 1173.0], [78.2, 1175.0], [78.3, 1178.0], [78.4, 1180.0], [78.5, 1184.0], [78.6, 1186.0], [78.7, 1189.0], [78.8, 1192.0], [78.9, 1194.0], [79.0, 1197.0], [79.1, 1199.0], [79.2, 1202.0], [79.3, 1205.0], [79.4, 1207.0], [79.5, 1210.0], [79.6, 1213.0], [79.7, 1215.0], [79.8, 1218.0], [79.9, 1221.0], [80.0, 1223.0], [80.1, 1226.0], [80.2, 1228.0], [80.3, 1231.0], [80.4, 1234.0], [80.5, 1237.0], [80.6, 1240.0], [80.7, 1243.0], [80.8, 1246.0], [80.9, 1249.0], [81.0, 1251.0], [81.1, 1254.0], [81.2, 1257.0], [81.3, 1261.0], [81.4, 1263.0], [81.5, 1266.0], [81.6, 1269.0], [81.7, 1271.0], [81.8, 1274.0], [81.9, 1277.0], [82.0, 1280.0], [82.1, 1283.0], [82.2, 1286.0], [82.3, 1289.0], [82.4, 1292.0], [82.5, 1295.0], [82.6, 1298.0], [82.7, 1301.0], [82.8, 1304.0], [82.9, 1307.0], [83.0, 1310.0], [83.1, 1313.0], [83.2, 1316.0], [83.3, 1320.0], [83.4, 1323.0], [83.5, 1326.0], [83.6, 1330.0], [83.7, 1333.0], [83.8, 1336.0], [83.9, 1339.0], [84.0, 1343.0], [84.1, 1346.0], [84.2, 1350.0], [84.3, 1353.0], [84.4, 1356.0], [84.5, 1360.0], [84.6, 1364.0], [84.7, 1367.0], [84.8, 1370.0], [84.9, 1373.0], [85.0, 1377.0], [85.1, 1381.0], [85.2, 1385.0], [85.3, 1389.0], [85.4, 1392.0], [85.5, 1396.0], [85.6, 1400.0], [85.7, 1404.0], [85.8, 1407.0], [85.9, 1411.0], [86.0, 1414.0], [86.1, 1418.0], [86.2, 1421.0], [86.3, 1425.0], [86.4, 1428.0], [86.5, 1432.0], [86.6, 1435.0], [86.7, 1440.0], [86.8, 1445.0], [86.9, 1448.0], [87.0, 1452.0], [87.1, 1455.0], [87.2, 1460.0], [87.3, 1464.0], [87.4, 1468.0], [87.5, 1473.0], [87.6, 1477.0], [87.7, 1481.0], [87.8, 1485.0], [87.9, 1490.0], [88.0, 1493.0], [88.1, 1497.0], [88.2, 1501.0], [88.3, 1505.0], [88.4, 1508.0], [88.5, 1513.0], [88.6, 1517.0], [88.7, 1521.0], [88.8, 1525.0], [88.9, 1530.0], [89.0, 1534.0], [89.1, 1539.0], [89.2, 1544.0], [89.3, 1548.0], [89.4, 1553.0], [89.5, 1558.0], [89.6, 1562.0], [89.7, 1567.0], [89.8, 1571.0], [89.9, 1575.0], [90.0, 1579.0], [90.1, 1585.0], [90.2, 1589.0], [90.3, 1594.0], [90.4, 1599.0], [90.5, 1605.0], [90.6, 1611.0], [90.7, 1616.0], [90.8, 1621.0], [90.9, 1626.0], [91.0, 1631.0], [91.1, 1637.0], [91.2, 1642.0], [91.3, 1647.0], [91.4, 1652.0], [91.5, 1657.0], [91.6, 1664.0], [91.7, 1670.0], [91.8, 1676.0], [91.9, 1681.0], [92.0, 1687.0], [92.1, 1693.0], [92.2, 1698.0], [92.3, 1705.0], [92.4, 1710.0], [92.5, 1716.0], [92.6, 1723.0], [92.7, 1728.0], [92.8, 1733.0], [92.9, 1741.0], [93.0, 1747.0], [93.1, 1754.0], [93.2, 1761.0], [93.3, 1767.0], [93.4, 1773.0], [93.5, 1780.0], [93.6, 1788.0], [93.7, 1795.0], [93.8, 1803.0], [93.9, 1810.0], [94.0, 1818.0], [94.1, 1827.0], [94.2, 1836.0], [94.3, 1843.0], [94.4, 1851.0], [94.5, 1859.0], [94.6, 1867.0], [94.7, 1876.0], [94.8, 1884.0], [94.9, 1892.0], [95.0, 1901.0], [95.1, 1910.0], [95.2, 1919.0], [95.3, 1928.0], [95.4, 1936.0], [95.5, 1944.0], [95.6, 1953.0], [95.7, 1963.0], [95.8, 1974.0], [95.9, 1983.0], [96.0, 1994.0], [96.1, 2004.0], [96.2, 2015.0], [96.3, 2025.0], [96.4, 2037.0], [96.5, 2048.0], [96.6, 2060.0], [96.7, 2073.0], [96.8, 2085.0], [96.9, 2098.0], [97.0, 2112.0], [97.1, 2128.0], [97.2, 2142.0], [97.3, 2155.0], [97.4, 2169.0], [97.5, 2184.0], [97.6, 2200.0], [97.7, 2217.0], [97.8, 2234.0], [97.9, 2253.0], [98.0, 2270.0], [98.1, 2287.0], [98.2, 2308.0], [98.3, 2328.0], [98.4, 2351.0], [98.5, 2374.0], [98.6, 2397.0], [98.7, 2423.0], [98.8, 2451.0], [98.9, 2485.0], [99.0, 2522.0], [99.1, 2555.0], [99.2, 2598.0], [99.3, 2651.0], [99.4, 2700.0], [99.5, 2756.0], [99.6, 2824.0], [99.7, 2916.0], [99.8, 3045.0], [99.9, 3224.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24870.0, "series": [{"data": [[0.0, 11733.0], [600.0, 5361.0], [700.0, 5649.0], [800.0, 5852.0], [900.0, 5564.0], [1000.0, 5145.0], [1100.0, 4685.0], [1200.0, 4138.0], [1300.0, 3451.0], [1400.0, 3036.0], [1500.0, 2622.0], [1600.0, 2127.0], [100.0, 24870.0], [1700.0, 1793.0], [1800.0, 1438.0], [1900.0, 1264.0], [2000.0, 994.0], [2100.0, 808.0], [2200.0, 669.0], [2300.0, 521.0], [2400.0, 386.0], [2500.0, 310.0], [2600.0, 226.0], [2800.0, 143.0], [2700.0, 198.0], [2900.0, 86.0], [3000.0, 83.0], [3100.0, 64.0], [200.0, 10216.0], [3300.0, 25.0], [3200.0, 43.0], [3400.0, 20.0], [3500.0, 20.0], [3600.0, 4.0], [3700.0, 5.0], [3800.0, 6.0], [3900.0, 7.0], [4000.0, 1.0], [300.0, 4835.0], [400.0, 4046.0], [500.0, 4756.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 13832.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 55744.0, "series": [{"data": [[0.0, 55744.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 47624.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 13832.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72856334E12, "maxY": 16.0, "series": [{"data": [[1.72856916E12, 12.0], [1.72856784E12, 12.0], [1.72856886E12, 12.0], [1.72856976E12, 12.0], [1.72856946E12, 12.0], [1.72856826E12, 12.0], [1.72856988E12, 12.0], [1.72856856E12, 12.0], [1.72856958E12, 12.0], [1.72856796E12, 12.0], [1.72856802E12, 12.0], [1.72856964E12, 12.0], [1.72856832E12, 12.0], [1.72856934E12, 12.0], [1.72856994E12, 11.088794926004226], [1.72856874E12, 12.0], [1.72856904E12, 12.0], [1.72856814E12, 12.0], [1.72856844E12, 12.0], [1.7285685E12, 12.0], [1.7285688E12, 12.0], [1.72856982E12, 12.0], [1.7285679E12, 12.0], [1.7285682E12, 12.0], [1.72856862E12, 12.0], [1.72856952E12, 12.0], [1.72856892E12, 12.0], [1.72856922E12, 12.0], [1.72856898E12, 12.0], [1.72856838E12, 12.0], [1.72856928E12, 12.0], [1.72856868E12, 12.0], [1.72856778E12, 11.892694063926937], [1.7285694E12, 12.0], [1.72856808E12, 12.0], [1.7285691E12, 12.0], [1.72857E12, 7.681492109038743], [1.7285697E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72856334E12, 2.0], [1.72856364E12, 1.0], [1.72856346E12, 2.0], [1.72856358E12, 1.9922178988326849], [1.7285634E12, 2.0], [1.72856352E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72856382E12, 4.0], [1.72856412E12, 4.0], [1.72856442E12, 4.0], [1.72856532E12, 4.0], [1.72856472E12, 4.0], [1.72856502E12, 4.0], [1.7285637E12, 4.0], [1.728564E12, 4.0], [1.7285643E12, 4.0], [1.7285646E12, 4.0], [1.7285649E12, 4.0], [1.7285655E12, 2.3187250996015933], [1.7285652E12, 4.0], [1.72856388E12, 4.0], [1.72856418E12, 4.0], [1.72856448E12, 4.0], [1.72856478E12, 4.0], [1.72856496E12, 4.0], [1.72856376E12, 4.0], [1.72856406E12, 4.0], [1.72856436E12, 4.0], [1.72856538E12, 4.0], [1.72856466E12, 4.0], [1.72856508E12, 4.0], [1.72856544E12, 4.0], [1.72856364E12, 3.9976359338061487], [1.72856514E12, 4.0], [1.72856394E12, 4.0], [1.72856424E12, 4.0], [1.72856454E12, 4.0], [1.72856484E12, 4.0], [1.72856556E12, 1.0], [1.72856526E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72857108E12, 16.0], [1.72857078E12, 16.0], [1.72857138E12, 16.0], [1.72857168E12, 16.0], [1.7285715E12, 16.0], [1.7285718E12, 16.0], [1.72857048E12, 16.0], [1.72857018E12, 16.0], [1.72857126E12, 16.0], [1.72857156E12, 16.0], [1.72857024E12, 16.0], [1.72857186E12, 16.0], [1.72857036E12, 16.0], [1.72857198E12, 1.0], [1.72857006E12, 16.0], [1.72857096E12, 16.0], [1.72857066E12, 16.0], [1.72857012E12, 16.0], [1.72857174E12, 16.0], [1.72857072E12, 16.0], [1.72857042E12, 16.0], [1.72857084E12, 16.0], [1.72857054E12, 16.0], [1.72857114E12, 16.0], [1.72857144E12, 16.0], [1.7285706E12, 16.0], [1.7285703E12, 16.0], [1.7285712E12, 16.0], [1.7285709E12, 16.0], [1.72857102E12, 16.0], [1.72857132E12, 16.0], [1.72857E12, 12.571428571428571], [1.72857162E12, 16.0], [1.72857192E12, 12.229585798816565]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.72856592E12, 8.0], [1.72856754E12, 8.0], [1.72856562E12, 8.0], [1.72856694E12, 8.0], [1.72856724E12, 8.0], [1.72856664E12, 8.0], [1.72856634E12, 8.0], [1.72856604E12, 8.0], [1.72856766E12, 8.0], [1.72856574E12, 8.0], [1.7285664E12, 8.0], [1.7285661E12, 8.0], [1.7285658E12, 8.0], [1.72856742E12, 8.0], [1.72856772E12, 7.412738853503182], [1.72856682E12, 8.0], [1.72856712E12, 8.0], [1.72856652E12, 8.0], [1.72856622E12, 8.0], [1.72856688E12, 8.0], [1.72856658E12, 8.0], [1.72856628E12, 8.0], [1.72856598E12, 8.0], [1.72856568E12, 8.0], [1.7285673E12, 8.0], [1.7285676E12, 8.0], [1.728567E12, 8.0], [1.7285667E12, 8.0], [1.72856706E12, 8.0], [1.72856736E12, 8.0], [1.72856676E12, 8.0], [1.72856646E12, 8.0], [1.72856616E12, 8.0], [1.72856778E12, 3.7536231884057982], [1.72856586E12, 8.0], [1.72856556E12, 7.990610328638501], [1.72856718E12, 8.0], [1.72856748E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72857198E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 454.63738738738795, "minX": 1.0, "maxY": 956.5746450825465, "series": [{"data": [[2.0, 454.63738738738795], [8.0, 554.1841013530789], [9.0, 638.8883495145631], [10.0, 682.5565819861434], [11.0, 698.7845188284521], [3.0, 477.60824742268017], [12.0, 742.6503014394094], [13.0, 599.2857142857142], [14.0, 821.1785714285716], [15.0, 877.0672782874619], [1.0, 462.65573770491807], [4.0, 469.6474290389566], [16.0, 956.5746450825465], [5.0, 475.62025316455697], [6.0, 487.89506172839504], [7.0, 537.7991004497751]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.723882252559855, 706.3550255972708]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72856334E12, "maxY": 5.382761993333333E7, "series": [{"data": [[1.72856592E12, 4.3825735666666664E7], [1.72856916E12, 4.716707621666667E7], [1.72857138E12, 5.174683155E7], [1.72856472E12, 2.6168133166666668E7], [1.72856694E12, 4.594570406666667E7], [1.7285637E12, 2.5998906416666668E7], [1.72856574E12, 4.6947648016666666E7], [1.72856796E12, 4.766464128333333E7], [1.72857018E12, 5.3624236583333336E7], [1.7285661E12, 4.306838745E7], [1.72856832E12, 4.9105013416666664E7], [1.72856934E12, 4.831406595E7], [1.72857156E12, 5.2002677483333334E7], [1.7285649E12, 2.572995015E7], [1.72857036E12, 5.047637585E7], [1.72856388E12, 2.6073241933333334E7], [1.72856712E12, 4.236311306666667E7], [1.72856814E12, 5.0332100083333336E7], [1.72856658E12, 4.418347956666667E7], [1.7285688E12, 4.8441094E7], [1.72856982E12, 4.9844634983333334E7], [1.72857084E12, 5.168929828333333E7], [1.72856436E12, 2.4915943283333335E7], [1.72856538E12, 2.5703593183333334E7], [1.7285676E12, 4.323420495E7], [1.72856862E12, 5.005020045E7], [1.72856898E12, 4.89802836E7], [1.72856334E12, 5935749.2], [1.72856676E12, 4.300426613333333E7], [1.7285712E12, 4.946859518333333E7], [1.72856454E12, 2.70535671E7], [1.72856778E12, 3.1271881566666666E7], [1.72857102E12, 5.118907045E7], [1.72856556E12, 3.5704664416666664E7], [1.72857E12, 3.698112705E7], [1.72856352E12, 1.3598044816666666E7], [1.72856382E12, 2.6161843816666666E7], [1.72856502E12, 2.70414908E7], [1.72856724E12, 4.3700815766666666E7], [1.72856946E12, 5.00121319E7], [1.72857168E12, 5.128389618333333E7], [1.72856826E12, 5.084265555E7], [1.7285715E12, 4.899929536666667E7], [1.72856604E12, 4.118214795E7], [1.72857048E12, 5.12512932E7], [1.728564E12, 2.6445187633333333E7], [1.7285664E12, 4.3016697E7], [1.72856964E12, 4.9386705516666666E7], [1.72856742E12, 4.42234807E7], [1.72857186E12, 5.154671856666667E7], [1.7285652E12, 2.5563282366666667E7], [1.72856418E12, 2.7217028316666666E7], [1.72856622E12, 4.507944213333333E7], [1.72856844E12, 4.6164919516666666E7], [1.72857066E12, 5.2373058233333334E7], [1.72856688E12, 4.201027445E7], [1.72857012E12, 4.907820481666667E7], [1.72856346E12, 1.32569408E7], [1.7285679E12, 4.93740268E7], [1.72856568E12, 4.203646163333333E7], [1.72856466E12, 2.5632598883333333E7], [1.7285667E12, 4.52686437E7], [1.72856892E12, 4.819013543333333E7], [1.72857114E12, 5.382761993333333E7], [1.72856706E12, 4.4057864516666666E7], [1.7285703E12, 5.03578198E7], [1.72856364E12, 2.094664385E7], [1.72856928E12, 4.894353321666667E7], [1.72856484E12, 2.5327501066666666E7], [1.72856586E12, 4.329830615E7], [1.72856808E12, 4.98473191E7], [1.72857132E12, 5.1309406833333336E7], [1.7285691E12, 5.165361813333333E7], [1.72856754E12, 4.469844645E7], [1.72856412E12, 2.62636209E7], [1.72857078E12, 5.09070536E7], [1.72856532E12, 2.668277685E7], [1.72856976E12, 4.833436145E7], [1.72856634E12, 4.5787614833333336E7], [1.72856856E12, 4.76262206E7], [1.72856958E12, 5.054636103333333E7], [1.7285718E12, 4.963396895E7], [1.7285643E12, 2.691667045E7], [1.7285655E12, 1.3437340883333333E7], [1.72856772E12, 4.2762710333333336E7], [1.72856994E12, 4.931478135E7], [1.72856874E12, 4.951806381666667E7], [1.72857198E12, 2217392.9], [1.72856652E12, 4.39378584E7], [1.72857096E12, 4.933767725E7], [1.72856448E12, 2.5666952483333334E7], [1.72856478E12, 2.7672033966666665E7], [1.72856496E12, 2.6278402683333334E7], [1.7285682E12, 4.9514897766666666E7], [1.72857042E12, 5.089431605E7], [1.72856376E12, 2.5805368783333335E7], [1.72856598E12, 4.570785643333333E7], [1.728567E12, 4.408730371666667E7], [1.72856922E12, 4.98225715E7], [1.72857144E12, 5.1461729766666666E7], [1.7285706E12, 4.84624657E7], [1.72856514E12, 2.6126507683333334E7], [1.72856736E12, 4.43315495E7], [1.72856394E12, 2.7008299883333333E7], [1.72856838E12, 5.0351616416666664E7], [1.72856616E12, 4.227308336666667E7], [1.7285694E12, 4.693726845E7], [1.72856718E12, 4.3536315916666664E7], [1.72857162E12, 5.034548578333333E7], [1.72857108E12, 4.992253655E7], [1.72856562E12, 4.3290898666666664E7], [1.72856784E12, 4.938814693333333E7], [1.72856442E12, 2.729194515E7], [1.72856886E12, 4.77811195E7], [1.72856664E12, 4.20598596E7], [1.72856988E12, 4.793149146666667E7], [1.7285634E12, 1.315687165E7], [1.72856766E12, 4.4588730916666664E7], [1.72856802E12, 4.9508281166666664E7], [1.72857126E12, 5.31040098E7], [1.7285646E12, 2.3978490183333334E7], [1.72857024E12, 5.108206778333333E7], [1.7285658E12, 4.311698218333333E7], [1.72856358E12, 1.305972735E7], [1.72856682E12, 4.393416303333333E7], [1.72856904E12, 4.958102063333333E7], [1.72857006E12, 5.031878286666667E7], [1.7285685E12, 5.2015771233333334E7], [1.72857174E12, 5.1899695766666666E7], [1.72856628E12, 4.3566860516666666E7], [1.72857072E12, 5.077199928333333E7], [1.72856406E12, 2.6417055216666665E7], [1.7285673E12, 4.569009295E7], [1.72857054E12, 5.281822388333333E7], [1.72856508E12, 2.6979642616666667E7], [1.72856952E12, 4.784333368333333E7], [1.72856544E12, 2.4435861983333334E7], [1.72856424E12, 2.6116570833333332E7], [1.72856646E12, 4.4057455166666664E7], [1.72856868E12, 4.922155818333333E7], [1.7285709E12, 5.209037746666667E7], [1.72856526E12, 2.514022955E7], [1.72856748E12, 4.3322257166666664E7], [1.7285697E12, 4.973691235E7], [1.72857192E12, 4.0193131083333336E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72856592E12, 0.0], [1.72856916E12, 0.0], [1.72857138E12, 0.0], [1.72856472E12, 0.0], [1.72856694E12, 0.0], [1.7285637E12, 0.0], [1.72856574E12, 0.0], [1.72856796E12, 0.0], [1.72857018E12, 0.0], [1.7285661E12, 0.0], [1.72856832E12, 0.0], [1.72856934E12, 0.0], [1.72857156E12, 0.0], [1.7285649E12, 0.0], [1.72857036E12, 0.0], [1.72856388E12, 0.0], [1.72856712E12, 0.0], [1.72856814E12, 0.0], [1.72856658E12, 0.0], [1.7285688E12, 0.0], [1.72856982E12, 0.0], [1.72857084E12, 0.0], [1.72856436E12, 0.0], [1.72856538E12, 0.0], [1.7285676E12, 0.0], [1.72856862E12, 0.0], [1.72856898E12, 0.0], [1.72856334E12, 0.0], [1.72856676E12, 0.0], [1.7285712E12, 0.0], [1.72856454E12, 0.0], [1.72856778E12, 0.0], [1.72857102E12, 0.0], [1.72856556E12, 0.0], [1.72857E12, 0.0], [1.72856352E12, 0.0], [1.72856382E12, 0.0], [1.72856502E12, 0.0], [1.72856724E12, 0.0], [1.72856946E12, 0.0], [1.72857168E12, 0.0], [1.72856826E12, 0.0], [1.7285715E12, 0.0], [1.72856604E12, 0.0], [1.72857048E12, 0.0], [1.728564E12, 0.0], [1.7285664E12, 0.0], [1.72856964E12, 0.0], [1.72856742E12, 0.0], [1.72857186E12, 0.0], [1.7285652E12, 0.0], [1.72856418E12, 0.0], [1.72856622E12, 0.0], [1.72856844E12, 0.0], [1.72857066E12, 0.0], [1.72856688E12, 0.0], [1.72857012E12, 0.0], [1.72856346E12, 0.0], [1.7285679E12, 0.0], [1.72856568E12, 0.0], [1.72856466E12, 0.0], [1.7285667E12, 0.0], [1.72856892E12, 0.0], [1.72857114E12, 0.0], [1.72856706E12, 0.0], [1.7285703E12, 0.0], [1.72856364E12, 0.0], [1.72856928E12, 0.0], [1.72856484E12, 0.0], [1.72856586E12, 0.0], [1.72856808E12, 0.0], [1.72857132E12, 0.0], [1.7285691E12, 0.0], [1.72856754E12, 0.0], [1.72856412E12, 0.0], [1.72857078E12, 0.0], [1.72856532E12, 0.0], [1.72856976E12, 0.0], [1.72856634E12, 0.0], [1.72856856E12, 0.0], [1.72856958E12, 0.0], [1.7285718E12, 0.0], [1.7285643E12, 0.0], [1.7285655E12, 0.0], [1.72856772E12, 0.0], [1.72856994E12, 0.0], [1.72856874E12, 0.0], [1.72857198E12, 0.0], [1.72856652E12, 0.0], [1.72857096E12, 0.0], [1.72856448E12, 0.0], [1.72856478E12, 0.0], [1.72856496E12, 0.0], [1.7285682E12, 0.0], [1.72857042E12, 0.0], [1.72856376E12, 0.0], [1.72856598E12, 0.0], [1.728567E12, 0.0], [1.72856922E12, 0.0], [1.72857144E12, 0.0], [1.7285706E12, 0.0], [1.72856514E12, 0.0], [1.72856736E12, 0.0], [1.72856394E12, 0.0], [1.72856838E12, 0.0], [1.72856616E12, 0.0], [1.7285694E12, 0.0], [1.72856718E12, 0.0], [1.72857162E12, 0.0], [1.72857108E12, 0.0], [1.72856562E12, 0.0], [1.72856784E12, 0.0], [1.72856442E12, 0.0], [1.72856886E12, 0.0], [1.72856664E12, 0.0], [1.72856988E12, 0.0], [1.7285634E12, 0.0], [1.72856766E12, 0.0], [1.72856802E12, 0.0], [1.72857126E12, 0.0], [1.7285646E12, 0.0], [1.72857024E12, 0.0], [1.7285658E12, 0.0], [1.72856358E12, 0.0], [1.72856682E12, 0.0], [1.72856904E12, 0.0], [1.72857006E12, 0.0], [1.7285685E12, 0.0], [1.72857174E12, 0.0], [1.72856628E12, 0.0], [1.72857072E12, 0.0], [1.72856406E12, 0.0], [1.7285673E12, 0.0], [1.72857054E12, 0.0], [1.72856508E12, 0.0], [1.72856952E12, 0.0], [1.72856544E12, 0.0], [1.72856424E12, 0.0], [1.72856646E12, 0.0], [1.72856868E12, 0.0], [1.7285709E12, 0.0], [1.72856526E12, 0.0], [1.72856748E12, 0.0], [1.7285697E12, 0.0], [1.72857192E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72857198E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 423.4519572953737, "minX": 1.72856334E12, "maxY": 1033.8081457663463, "series": [{"data": [[1.72856592E12, 571.8964285714279], [1.72856916E12, 759.4602332979852], [1.72857138E12, 973.3628048780485], [1.72856472E12, 467.3093385214007], [1.72856694E12, 543.649717514125], [1.7285637E12, 464.1007751937985], [1.72856574E12, 523.1886586695733], [1.72856796E12, 779.5151843817786], [1.72857018E12, 939.6480938416428], [1.7285661E12, 534.8905027932977], [1.72856832E12, 781.0457018498366], [1.72856934E12, 738.0469387755109], [1.72857156E12, 987.6512345679012], [1.7285649E12, 456.65209125475315], [1.72857036E12, 954.9196428571432], [1.72856388E12, 505.2710084033614], [1.72856712E12, 532.4287305122499], [1.72856814E12, 743.9958634953463], [1.72856658E12, 566.4727488151656], [1.7285688E12, 791.0967032967035], [1.72856982E12, 754.2142857142854], [1.72857084E12, 995.429308565531], [1.72856436E12, 462.07961165048533], [1.72856538E12, 432.992766726944], [1.7285676E12, 569.3017751479292], [1.72856862E12, 711.6358208955234], [1.72856898E12, 711.5887573964491], [1.72856334E12, 528.9032258064516], [1.72856676E12, 570.2344497607654], [1.7285712E12, 965.4984802431613], [1.72856454E12, 450.5864661654135], [1.72856778E12, 629.4744186046507], [1.72857102E12, 931.827016520894], [1.72856556E12, 585.6069802731414], [1.72857E12, 590.8706047819971], [1.72856352E12, 456.5151515151515], [1.72856382E12, 458.50763358778613], [1.72856502E12, 426.4511545293073], [1.72856724E12, 570.4073634204273], [1.72856946E12, 747.2339544513445], [1.72857168E12, 938.2998046875002], [1.72856826E12, 724.4774322968907], [1.7285715E12, 935.3557504873294], [1.72856604E12, 566.8047058823528], [1.72857048E12, 999.4087591240879], [1.728564E12, 467.9531249999998], [1.7285664E12, 571.7185273159139], [1.72856964E12, 751.2144351464437], [1.72856742E12, 543.5801354401804], [1.72857186E12, 936.2363813229571], [1.7285652E12, 468.8666666666665], [1.72856418E12, 516.1428571428565], [1.72856622E12, 570.9928825622773], [1.72856844E12, 748.2014537902389], [1.72857066E12, 943.4550781250001], [1.72856688E12, 565.8795749704835], [1.72857012E12, 970.8503538928212], [1.72856346E12, 448.12313432835816], [1.7285679E12, 708.6696252465476], [1.72856568E12, 568.5786982248521], [1.72856466E12, 481.7094188376757], [1.7285667E12, 561.9859813084106], [1.72856892E12, 807.298206278026], [1.72857114E12, 963.8062248995991], [1.72856706E12, 530.1896361631758], [1.7285703E12, 876.7919340054997], [1.72856364E12, 432.9043478260869], [1.72856928E12, 714.5620655412121], [1.72856484E12, 454.4291115311907], [1.72856586E12, 541.2536640360764], [1.72856808E12, 745.03842159917], [1.72857132E12, 962.3507014028054], [1.7285691E12, 702.4180407371489], [1.72856754E12, 547.969142857142], [1.72856412E12, 494.8858921161827], [1.72857078E12, 976.7392638036819], [1.72856532E12, 480.35059760956193], [1.72856976E12, 734.3234390992828], [1.72856634E12, 543.9079545454549], [1.72856856E12, 730.2016210739617], [1.72856958E12, 742.1134020618568], [1.7285718E12, 975.9408163265305], [1.7285643E12, 464.156976744186], [1.7285655E12, 465.0637450199205], [1.72856772E12, 565.3515923566878], [1.72856994E12, 701.9957716701906], [1.72856874E12, 746.8345473465141], [1.72857198E12, 537.75], [1.72856652E12, 557.6239813736905], [1.72857096E12, 946.5428571428563], [1.72856448E12, 472.4753451676531], [1.72856478E12, 473.873015873016], [1.72856496E12, 484.6876267748475], [1.7285682E12, 818.6484641638234], [1.72857042E12, 979.9692937563974], [1.72856376E12, 481.9879518072288], [1.72856598E12, 519.9750271444088], [1.728567E12, 563.5652173913043], [1.72856922E12, 741.9514462809922], [1.72857144E12, 928.1039461020206], [1.7285706E12, 986.3401639344265], [1.72856514E12, 498.2349272349272], [1.72856736E12, 581.0712560386478], [1.72856394E12, 461.8181818181815], [1.72856838E12, 708.4621435594884], [1.72856616E12, 558.4237485448186], [1.7285694E12, 734.1357142857145], [1.72856718E12, 542.8781038374716], [1.72857162E12, 915.6287081339714], [1.72857108E12, 997.1754932502595], [1.72856562E12, 538.0167597765364], [1.72856784E12, 719.3687872763423], [1.72856442E12, 489.46169354838713], [1.72856886E12, 681.6568720379146], [1.72856664E12, 567.5129716981138], [1.72856988E12, 770.0659574468076], [1.7285634E12, 423.4519572953737], [1.72856766E12, 562.3552168815944], [1.72856802E12, 755.7792887029294], [1.72857126E12, 1033.8081457663463], [1.7285646E12, 436.22950819672127], [1.72857024E12, 940.552631578947], [1.7285658E12, 565.4905437352242], [1.72856358E12, 464.45136186770446], [1.72856682E12, 523.8890097932533], [1.72856904E12, 747.85015608741], [1.72857006E12, 904.613421550095], [1.7285685E12, 733.471486761711], [1.72857174E12, 1013.705263157895], [1.72856628E12, 557.1711292200233], [1.72857072E12, 969.765720081136], [1.72856406E12, 479.6553784860558], [1.7285673E12, 560.2837045720984], [1.72857054E12, 949.4632936507938], [1.72856508E12, 496.6721649484538], [1.72856952E12, 773.402150537635], [1.72856544E12, 444.459409594096], [1.72856424E12, 477.49900199600785], [1.72856646E12, 516.7096774193544], [1.72856868E12, 794.9296703296692], [1.7285709E12, 901.6992481203], [1.72856526E12, 487.3874239350912], [1.72856748E12, 567.6840855106892], [1.7285697E12, 694.7834456207906], [1.72857192E12, 766.910059171597]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72857198E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 278.62277580071185, "minX": 1.72856334E12, "maxY": 700.619506966774, "series": [{"data": [[1.72856592E12, 386.19166666666666], [1.72856916E12, 517.2460233297983], [1.72857138E12, 662.0111788617891], [1.72856472E12, 311.1789883268482], [1.72856694E12, 364.3615819209045], [1.7285637E12, 308.96511627906983], [1.72856574E12, 348.4656488549614], [1.72856796E12, 527.8036876355748], [1.72857018E12, 634.0097751710653], [1.7285661E12, 363.4916201117319], [1.72856832E12, 528.9107725788904], [1.72856934E12, 502.4673469387758], [1.72857156E12, 667.4855967078196], [1.7285649E12, 305.954372623574], [1.72857036E12, 652.3819444444445], [1.72856388E12, 339.36134453781506], [1.72856712E12, 360.63919821826244], [1.72856814E12, 502.4405377456048], [1.72856658E12, 384.09597156398127], [1.7285688E12, 535.0417582417574], [1.72856982E12, 512.671218487395], [1.72857084E12, 669.8679050567605], [1.72856436E12, 309.953398058252], [1.72856538E12, 287.4538878842679], [1.7285676E12, 385.4934911242601], [1.72856862E12, 482.14626865671664], [1.72856898E12, 485.72978303747493], [1.72856334E12, 350.41935483870964], [1.72856676E12, 383.9772727272727], [1.7285712E12, 656.6139817629178], [1.72856454E12, 295.97556390977394], [1.72856778E12, 423.48527131782953], [1.72857102E12, 636.0835762876575], [1.72856556E12, 395.40971168437], [1.72857E12, 398.3952180028123], [1.72856352E12, 303.7007575757576], [1.72856382E12, 306.4618320610686], [1.72856502E12, 280.6358792184728], [1.72856724E12, 381.58907363420394], [1.72856946E12, 507.6884057971012], [1.72857168E12, 637.0390625000002], [1.72856826E12, 488.66900702106295], [1.7285715E12, 642.2836257309955], [1.72856604E12, 386.2600000000003], [1.72857048E12, 674.7705943691346], [1.728564E12, 308.61132812500034], [1.7285664E12, 388.53444180522564], [1.72856964E12, 509.5010460251043], [1.72856742E12, 368.9209932279908], [1.72857186E12, 636.7898832684833], [1.7285652E12, 311.292156862745], [1.72856418E12, 344.1257995735604], [1.72856622E12, 386.2052194543293], [1.72856844E12, 513.913811007269], [1.72857066E12, 637.6953124999995], [1.72856688E12, 385.09799291617514], [1.72857012E12, 663.118301314459], [1.72856346E12, 297.30223880597026], [1.7285679E12, 484.0256410256412], [1.72856568E12, 386.2852071005911], [1.72856466E12, 324.5410821643285], [1.7285667E12, 377.9228971962618], [1.72856892E12, 548.6917040358747], [1.72857114E12, 649.8724899598386], [1.72856706E12, 358.04851157662597], [1.7285703E12, 601.0852428964256], [1.72856364E12, 289.0304347826083], [1.72856928E12, 483.6852035749744], [1.72856484E12, 306.22117202268436], [1.72856586E12, 367.6899661781285], [1.72856808E12, 502.7819314641744], [1.72857132E12, 652.2945891783563], [1.7285691E12, 472.10184287099923], [1.72856754E12, 368.9039999999999], [1.72856412E12, 327.7738589211619], [1.72857078E12, 664.8834355828227], [1.72856532E12, 316.6314741035857], [1.72856976E12, 495.1791197543502], [1.72856634E12, 366.4420454545454], [1.72856856E12, 499.0678824721377], [1.72856958E12, 502.90721649484504], [1.7285718E12, 667.9040816326534], [1.7285643E12, 306.87015503875926], [1.7285655E12, 306.39043824701207], [1.72856772E12, 378.4942675159237], [1.72856994E12, 473.82875264270587], [1.72856874E12, 506.76899063475537], [1.72857198E12, 359.4444444444444], [1.72856652E12, 373.0500582072176], [1.72857096E12, 646.8088669950744], [1.72856448E12, 314.44970414201214], [1.72856478E12, 311.2281746031747], [1.72856496E12, 321.5537525354971], [1.7285682E12, 554.4368600682593], [1.72857042E12, 664.0153531218009], [1.72856376E12, 322.15060240963845], [1.72856598E12, 347.44733984799103], [1.728567E12, 377.5405405405408], [1.72856922E12, 500.97004132231433], [1.72857144E12, 627.6843118383063], [1.7285706E12, 675.3821721311483], [1.72856514E12, 331.9646569646567], [1.72856736E12, 389.8357487922709], [1.72856394E12, 304.85880077369444], [1.72856838E12, 477.0442477876108], [1.72856616E12, 378.4994179278234], [1.7285694E12, 500.58265306122496], [1.72856718E12, 369.390519187359], [1.72857162E12, 627.0086124401919], [1.72857108E12, 681.0041536863963], [1.72856562E12, 367.80335195530785], [1.72856784E12, 485.59741550695816], [1.72856442E12, 324.792338709677], [1.72856886E12, 463.8985781990523], [1.72856664E12, 388.90330188679246], [1.72856988E12, 528.9063829787233], [1.7285634E12, 278.62277580071185], [1.72856766E12, 379.39038686987124], [1.72856802E12, 514.0376569037654], [1.72857126E12, 700.619506966774], [1.7285646E12, 293.71038251366156], [1.72857024E12, 637.3859649122812], [1.7285658E12, 380.8747044917259], [1.72856358E12, 311.07392996108956], [1.72856682E12, 355.2578890097929], [1.72856904E12, 505.63995837669165], [1.72857006E12, 618.6625708884684], [1.7285685E12, 491.34114052953174], [1.72857174E12, 686.9747368421046], [1.72856628E12, 376.4889406286377], [1.72857072E12, 658.8955375253544], [1.72856406E12, 320.0219123505975], [1.7285673E12, 375.04454865181754], [1.72857054E12, 640.3125000000007], [1.72856508E12, 327.72371134020625], [1.72856952E12, 526.7473118279568], [1.72856544E12, 298.84501845018434], [1.72856424E12, 316.92015968063885], [1.72856646E12, 348.36666666666645], [1.72856868E12, 535.879120879121], [1.7285709E12, 609.3402255639095], [1.72856526E12, 329.4016227180527], [1.72856748E12, 383.3978622327792], [1.7285697E12, 471.5514918190572], [1.72857192E12, 523.9857988165685]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72857198E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72856334E12, "maxY": 4.9E-324, "series": [{"data": [[1.72856592E12, 0.0], [1.72856916E12, 0.0], [1.72857138E12, 0.0], [1.72856472E12, 0.0], [1.72856694E12, 0.0], [1.7285637E12, 0.0], [1.72856574E12, 0.0], [1.72856796E12, 0.0], [1.72857018E12, 0.0], [1.7285661E12, 0.0], [1.72856832E12, 0.0], [1.72856934E12, 0.0], [1.72857156E12, 0.0], [1.7285649E12, 0.0], [1.72857036E12, 0.0], [1.72856388E12, 0.0], [1.72856712E12, 0.0], [1.72856814E12, 0.0], [1.72856658E12, 0.0], [1.7285688E12, 0.0], [1.72856982E12, 0.0], [1.72857084E12, 0.0], [1.72856436E12, 0.0], [1.72856538E12, 0.0], [1.7285676E12, 0.0], [1.72856862E12, 0.0], [1.72856898E12, 0.0], [1.72856334E12, 0.0], [1.72856676E12, 0.0], [1.7285712E12, 0.0], [1.72856454E12, 0.0], [1.72856778E12, 0.0], [1.72857102E12, 0.0], [1.72856556E12, 0.0], [1.72857E12, 0.0], [1.72856352E12, 0.0], [1.72856382E12, 0.0], [1.72856502E12, 0.0], [1.72856724E12, 0.0], [1.72856946E12, 0.0], [1.72857168E12, 0.0], [1.72856826E12, 0.0], [1.7285715E12, 0.0], [1.72856604E12, 0.0], [1.72857048E12, 0.0], [1.728564E12, 0.0], [1.7285664E12, 0.0], [1.72856964E12, 0.0], [1.72856742E12, 0.0], [1.72857186E12, 0.0], [1.7285652E12, 0.0], [1.72856418E12, 0.0], [1.72856622E12, 0.0], [1.72856844E12, 0.0], [1.72857066E12, 0.0], [1.72856688E12, 0.0], [1.72857012E12, 0.0], [1.72856346E12, 0.0], [1.7285679E12, 0.0], [1.72856568E12, 0.0], [1.72856466E12, 0.0], [1.7285667E12, 0.0], [1.72856892E12, 0.0], [1.72857114E12, 0.0], [1.72856706E12, 0.0], [1.7285703E12, 0.0], [1.72856364E12, 0.0], [1.72856928E12, 0.0], [1.72856484E12, 0.0], [1.72856586E12, 0.0], [1.72856808E12, 0.0], [1.72857132E12, 0.0], [1.7285691E12, 0.0], [1.72856754E12, 0.0], [1.72856412E12, 0.0], [1.72857078E12, 0.0], [1.72856532E12, 0.0], [1.72856976E12, 0.0], [1.72856634E12, 0.0], [1.72856856E12, 0.0], [1.72856958E12, 0.0], [1.7285718E12, 0.0], [1.7285643E12, 0.0], [1.7285655E12, 0.0], [1.72856772E12, 0.0], [1.72856994E12, 0.0], [1.72856874E12, 0.0], [1.72857198E12, 0.0], [1.72856652E12, 0.0], [1.72857096E12, 0.0], [1.72856448E12, 0.0], [1.72856478E12, 0.0], [1.72856496E12, 0.0], [1.7285682E12, 0.0], [1.72857042E12, 0.0], [1.72856376E12, 0.0], [1.72856598E12, 0.0], [1.728567E12, 0.0], [1.72856922E12, 0.0], [1.72857144E12, 0.0], [1.7285706E12, 0.0], [1.72856514E12, 0.0], [1.72856736E12, 0.0], [1.72856394E12, 0.0], [1.72856838E12, 0.0], [1.72856616E12, 0.0], [1.7285694E12, 0.0], [1.72856718E12, 0.0], [1.72857162E12, 0.0], [1.72857108E12, 0.0], [1.72856562E12, 0.0], [1.72856784E12, 0.0], [1.72856442E12, 0.0], [1.72856886E12, 0.0], [1.72856664E12, 0.0], [1.72856988E12, 0.0], [1.7285634E12, 0.0], [1.72856766E12, 0.0], [1.72856802E12, 0.0], [1.72857126E12, 0.0], [1.7285646E12, 0.0], [1.72857024E12, 0.0], [1.7285658E12, 0.0], [1.72856358E12, 0.0], [1.72856682E12, 0.0], [1.72856904E12, 0.0], [1.72857006E12, 0.0], [1.7285685E12, 0.0], [1.72857174E12, 0.0], [1.72856628E12, 0.0], [1.72857072E12, 0.0], [1.72856406E12, 0.0], [1.7285673E12, 0.0], [1.72857054E12, 0.0], [1.72856508E12, 0.0], [1.72856952E12, 0.0], [1.72856544E12, 0.0], [1.72856424E12, 0.0], [1.72856646E12, 0.0], [1.72856868E12, 0.0], [1.7285709E12, 0.0], [1.72856526E12, 0.0], [1.72856748E12, 0.0], [1.7285697E12, 0.0], [1.72857192E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72857198E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.72856334E12, "maxY": 4017.0, "series": [{"data": [[1.72856592E12, 2198.0], [1.72856916E12, 3084.0], [1.72857138E12, 3933.0], [1.72856472E12, 1983.0], [1.72856694E12, 2007.0], [1.7285637E12, 1651.0], [1.72856574E12, 1955.0], [1.72856796E12, 2894.0], [1.72857018E12, 3540.0], [1.7285661E12, 2032.0], [1.72856832E12, 3340.0], [1.72856934E12, 3366.0], [1.72857156E12, 3751.0], [1.7285649E12, 1611.0], [1.72857036E12, 3792.0], [1.72856388E12, 1658.0], [1.72856712E12, 2173.0], [1.72856814E12, 2755.0], [1.72856658E12, 1999.0], [1.7285688E12, 2703.0], [1.72856982E12, 2990.0], [1.72857084E12, 3967.0], [1.72856436E12, 2113.0], [1.72856538E12, 1698.0], [1.7285676E12, 2039.0], [1.72856862E12, 2557.0], [1.72856898E12, 3000.0], [1.72856334E12, 1696.0], [1.72856676E12, 2086.0], [1.7285712E12, 3481.0], [1.72856454E12, 1820.0], [1.72856778E12, 2821.0], [1.72857102E12, 3300.0], [1.72856556E12, 1959.0], [1.72857E12, 2291.0], [1.72856352E12, 1520.0], [1.72856382E12, 1641.0], [1.72856502E12, 1628.0], [1.72856724E12, 2015.0], [1.72856946E12, 2661.0], [1.72857168E12, 3288.0], [1.72856826E12, 2781.0], [1.7285715E12, 3517.0], [1.72856604E12, 2188.0], [1.72857048E12, 3991.0], [1.728564E12, 1899.0], [1.7285664E12, 2310.0], [1.72856964E12, 2859.0], [1.72856742E12, 1930.0], [1.72857186E12, 3395.0], [1.7285652E12, 1814.0], [1.72856418E12, 1557.0], [1.72856622E12, 1985.0], [1.72856844E12, 2756.0], [1.72857066E12, 3875.0], [1.72856688E12, 1928.0], [1.72857012E12, 3577.0], [1.72856346E12, 1766.0], [1.7285679E12, 2495.0], [1.72856568E12, 2158.0], [1.72856466E12, 1545.0], [1.7285667E12, 2013.0], [1.72856892E12, 2869.0], [1.72857114E12, 3739.0], [1.72856706E12, 1953.0], [1.7285703E12, 3543.0], [1.72856364E12, 1629.0], [1.72856928E12, 2917.0], [1.72856484E12, 1557.0], [1.72856586E12, 1910.0], [1.72856808E12, 3080.0], [1.72857132E12, 3981.0], [1.7285691E12, 2746.0], [1.72856754E12, 2097.0], [1.72856412E12, 1874.0], [1.72857078E12, 3514.0], [1.72856532E12, 1668.0], [1.72856976E12, 2671.0], [1.72856634E12, 2137.0], [1.72856856E12, 2841.0], [1.72856958E12, 2891.0], [1.7285718E12, 3854.0], [1.7285643E12, 1947.0], [1.7285655E12, 1617.0], [1.72856772E12, 2443.0], [1.72856994E12, 2479.0], [1.72856874E12, 3209.0], [1.72857198E12, 1160.0], [1.72856652E12, 2018.0], [1.72857096E12, 3932.0], [1.72856448E12, 1923.0], [1.72856478E12, 1735.0], [1.72856496E12, 1632.0], [1.7285682E12, 3010.0], [1.72857042E12, 3367.0], [1.72856376E12, 1507.0], [1.72856598E12, 2097.0], [1.728567E12, 2044.0], [1.72856922E12, 2646.0], [1.72857144E12, 3806.0], [1.7285706E12, 3947.0], [1.72856514E12, 1544.0], [1.72856736E12, 2219.0], [1.72856394E12, 1704.0], [1.72856838E12, 2996.0], [1.72856616E12, 2038.0], [1.7285694E12, 3136.0], [1.72856718E12, 2096.0], [1.72857162E12, 3236.0], [1.72857108E12, 3201.0], [1.72856562E12, 2227.0], [1.72856784E12, 2815.0], [1.72856442E12, 1871.0], [1.72856886E12, 2884.0], [1.72856664E12, 2184.0], [1.72856988E12, 2975.0], [1.7285634E12, 1535.0], [1.72856766E12, 2068.0], [1.72856802E12, 2521.0], [1.72857126E12, 3629.0], [1.7285646E12, 1772.0], [1.72857024E12, 3595.0], [1.7285658E12, 2125.0], [1.72856358E12, 1568.0], [1.72856682E12, 2167.0], [1.72856904E12, 2665.0], [1.72857006E12, 3607.0], [1.7285685E12, 2884.0], [1.72857174E12, 4017.0], [1.72856628E12, 1944.0], [1.72857072E12, 3561.0], [1.72856406E12, 1815.0], [1.7285673E12, 2151.0], [1.72857054E12, 3477.0], [1.72856508E12, 1895.0], [1.72856952E12, 2867.0], [1.72856544E12, 1959.0], [1.72856424E12, 1577.0], [1.72856646E12, 2112.0], [1.72856868E12, 3121.0], [1.7285709E12, 3222.0], [1.72856526E12, 1899.0], [1.72856748E12, 2257.0], [1.7285697E12, 2733.0], [1.72857192E12, 3590.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72856592E12, 1240.9], [1.72856916E12, 1677.8000000000002], [1.72857138E12, 1998.5], [1.72856472E12, 1022.0], [1.72856694E12, 1173.1999999999998], [1.7285637E12, 987.9000000000001], [1.72856574E12, 1149.6000000000001], [1.72856796E12, 1682.7], [1.72857018E12, 2057.6000000000004], [1.7285661E12, 1163.4], [1.72856832E12, 1653.0], [1.72856934E12, 1569.8999999999996], [1.72857156E12, 2152.0], [1.7285649E12, 977.2], [1.72857036E12, 2062.3], [1.72856388E12, 985.1000000000001], [1.72856712E12, 1145.8000000000002], [1.72856814E12, 1618.8000000000006], [1.72856658E12, 1175.5], [1.7285688E12, 1655.5], [1.72856982E12, 1569.8000000000002], [1.72857084E12, 2169.0], [1.72856436E12, 1007.8000000000002], [1.72856538E12, 977.2], [1.7285676E12, 1195.0], [1.72856862E12, 1582.6], [1.72856898E12, 1533.5], [1.72856334E12, 1163.2000000000003], [1.72856676E12, 1200.3000000000002], [1.7285712E12, 2095.4000000000005], [1.72856454E12, 1011.4], [1.72856778E12, 1397.6], [1.72857102E12, 1989.0], [1.72856556E12, 1214.0], [1.72857E12, 1292.4], [1.72856352E12, 996.0], [1.72856382E12, 1011.0], [1.72856502E12, 938.4000000000002], [1.72856724E12, 1192.7], [1.72856946E12, 1569.0], [1.72857168E12, 2019.0], [1.72856826E12, 1592.6000000000001], [1.7285715E12, 2036.6000000000001], [1.72856604E12, 1194.0999999999995], [1.72857048E12, 2174.0], [1.728564E12, 1023.7], [1.7285664E12, 1238.5000000000002], [1.72856964E12, 1648.3000000000002], [1.72856742E12, 1181.1000000000004], [1.72857186E12, 2005.3000000000002], [1.7285652E12, 1016.0], [1.72856418E12, 1037.0], [1.72856622E12, 1194.2], [1.72856844E12, 1658.6], [1.72857066E12, 2022.5], [1.72856688E12, 1206.6000000000001], [1.72857012E12, 2086.0], [1.72856346E12, 976.0], [1.7285679E12, 1552.0], [1.72856568E12, 1206.7999999999997], [1.72856466E12, 1008.0], [1.7285667E12, 1158.3000000000002], [1.72856892E12, 1764.8000000000006], [1.72857114E12, 2004.2000000000003], [1.72856706E12, 1124.4], [1.7285703E12, 1902.6000000000004], [1.72856364E12, 981.9000000000001], [1.72856928E12, 1596.6000000000001], [1.72856484E12, 965.0], [1.72856586E12, 1154.8000000000009], [1.72856808E12, 1588.2], [1.72857132E12, 2057.2], [1.7285691E12, 1550.8000000000002], [1.72856754E12, 1176.4], [1.72856412E12, 1067.1999999999998], [1.72857078E12, 2071.2], [1.72856532E12, 993.3], [1.72856976E12, 1581.0000000000002], [1.72856634E12, 1174.2999999999997], [1.72856856E12, 1601.8000000000002], [1.72856958E12, 1596.2999999999997], [1.7285718E12, 2062.3999999999996], [1.7285643E12, 979.1000000000001], [1.7285655E12, 988.2000000000002], [1.72856772E12, 1178.0], [1.72856994E12, 1489.5000000000005], [1.72856874E12, 1594.0], [1.72857198E12, 1065.7000000000005], [1.72856652E12, 1175.0], [1.72857096E12, 2072.6], [1.72856448E12, 980.9999999999999], [1.72856478E12, 1042.5], [1.72856496E12, 1055.6000000000004], [1.7285682E12, 1689.0], [1.72857042E12, 2061.0], [1.72856376E12, 1023.3000000000001], [1.72856598E12, 1150.8000000000002], [1.728567E12, 1192.200000000001], [1.72856922E12, 1557.1000000000004], [1.72857144E12, 2013.0], [1.7285706E12, 2046.5000000000005], [1.72856514E12, 1051.2], [1.72856736E12, 1214.1], [1.72856394E12, 998.8], [1.72856838E12, 1538.4], [1.72856616E12, 1172.0], [1.7285694E12, 1585.2999999999997], [1.72856718E12, 1181.5000000000005], [1.72857162E12, 1960.3999999999996], [1.72857108E12, 2124.8], [1.72856562E12, 1128.8], [1.72856784E12, 1630.3000000000002], [1.72856442E12, 1004.9000000000001], [1.72856886E12, 1503.4], [1.72856664E12, 1190.1], [1.72856988E12, 1655.9], [1.7285634E12, 960.2000000000002], [1.72856766E12, 1190.6000000000001], [1.72856802E12, 1584.9], [1.72857126E12, 2170.8], [1.7285646E12, 962.0], [1.72857024E12, 1947.5000000000005], [1.7285658E12, 1206.5000000000005], [1.72856358E12, 999.4000000000001], [1.72856682E12, 1129.0], [1.72856904E12, 1660.6000000000008], [1.72857006E12, 1944.2], [1.7285685E12, 1675.4], [1.72857174E12, 2127.8], [1.72856628E12, 1131.0], [1.72857072E12, 2017.6000000000001], [1.72856406E12, 1040.7], [1.7285673E12, 1183.4], [1.72857054E12, 2037.4], [1.72856508E12, 1046.4], [1.72856952E12, 1599.0], [1.72856544E12, 974.7], [1.72856424E12, 1058.2], [1.72856646E12, 1110.6], [1.72856868E12, 1697.9], [1.7285709E12, 1972.0], [1.72856526E12, 1011.6], [1.72856748E12, 1163.7], [1.7285697E12, 1533.0], [1.72857192E12, 1727.1999999999998]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72856592E12, 1839.3900000000008], [1.72856916E12, 2437.2799999999966], [1.72857138E12, 3134.5499999999984], [1.72856472E12, 1542.3500000000008], [1.72856694E12, 1715.12], [1.7285637E12, 1451.7499999999995], [1.72856574E12, 1745.0], [1.72856796E12, 2336.0899999999997], [1.72857018E12, 2985.2799999999997], [1.7285661E12, 1755.8799999999983], [1.72856832E12, 2502.9999999999955], [1.72856934E12, 2402.3299999999995], [1.72857156E12, 3057.7], [1.7285649E12, 1509.65], [1.72857036E12, 2866.91], [1.72856388E12, 1520.23], [1.72856712E12, 1781.06], [1.72856814E12, 2339.7999999999956], [1.72856658E12, 1862.2499999999984], [1.7285688E12, 2386.5999999999995], [1.72856982E12, 2457.8100000000004], [1.72857084E12, 3073.5999999999963], [1.72856436E12, 1646.7199999999991], [1.72856538E12, 1393.5200000000004], [1.7285676E12, 1702.3399999999992], [1.72856862E12, 2341.099999999999], [1.72856898E12, 2368.9000000000005], [1.72856334E12, 1696.0], [1.72856676E12, 1754.9799999999998], [1.7285712E12, 2991.08], [1.72856454E12, 1656.4199999999948], [1.72856778E12, 2126.0199999999995], [1.72857102E12, 2704.4000000000015], [1.72856556E12, 1795.3999999999983], [1.72857E12, 1945.56], [1.72856352E12, 1491.5000000000007], [1.72856382E12, 1409.0], [1.72856502E12, 1319.3200000000006], [1.72856724E12, 1732.9599999999982], [1.72856946E12, 2239.160000000002], [1.72857168E12, 2885.25], [1.72856826E12, 2226.7999999999993], [1.7285715E12, 2785.19], [1.72856604E12, 1756.7000000000003], [1.72857048E12, 3218.9999999999986], [1.728564E12, 1543.1100000000001], [1.7285664E12, 1762.9599999999982], [1.72856964E12, 2236.8599999999997], [1.72856742E12, 1676.3899999999999], [1.72857186E12, 2859.590000000001], [1.7285652E12, 1549.2599999999995], [1.72856418E12, 1405.8000000000002], [1.72856622E12, 1668.0399999999981], [1.72856844E12, 2312.6000000000004], [1.72857066E12, 3078.5], [1.72856688E12, 1728.4399999999991], [1.72857012E12, 2971.5000000000005], [1.72856346E12, 1380.5300000000002], [1.7285679E12, 2173.7], [1.72856568E12, 1670.08], [1.72856466E12, 1409.0], [1.7285667E12, 1705.86], [1.72856892E12, 2541.9399999999973], [1.72857114E12, 3119.5099999999993], [1.72856706E12, 1721.3999999999992], [1.7285703E12, 2774.5599999999995], [1.72856364E12, 1289.12], [1.72856928E12, 2387.9599999999996], [1.72856484E12, 1374.400000000002], [1.72856586E12, 1655.12], [1.72856808E12, 2418.8], [1.72857132E12, 2966.17], [1.7285691E12, 2139.8399999999992], [1.72856754E12, 1728.48], [1.72856412E12, 1530.880000000001], [1.72857078E12, 2848.620000000001], [1.72856532E12, 1517.8199999999997], [1.72856976E12, 2254.1000000000004], [1.72856634E12, 1775.9399999999985], [1.72856856E12, 2388.56], [1.72856958E12, 2415.569999999999], [1.7285718E12, 3010.1799999999985], [1.7285643E12, 1433.32], [1.7285655E12, 1391.0799999999988], [1.72856772E12, 1697.8199999999997], [1.72856994E12, 2183.489999999999], [1.72856874E12, 2362.94], [1.72857198E12, 1160.0], [1.72856652E12, 1786.0], [1.72857096E12, 2931.04], [1.72856448E12, 1474.000000000001], [1.72856478E12, 1486.0499999999997], [1.72856496E12, 1511.78], [1.7285682E12, 2361.4000000000005], [1.72857042E12, 2891.180000000002], [1.72856376E12, 1443.01], [1.72856598E12, 1596.6799999999998], [1.728567E12, 1738.2800000000002], [1.72856922E12, 2335.2999999999984], [1.72857144E12, 3156.199999999999], [1.7285706E12, 3017.8200000000006], [1.72856514E12, 1432.98], [1.72856736E12, 1854.1400000000012], [1.72856394E12, 1380.2200000000012], [1.72856838E12, 2438.439999999994], [1.72856616E12, 1791.1999999999991], [1.7285694E12, 2331.4099999999976], [1.72856718E12, 1640.4699999999998], [1.72857162E12, 2798.2599999999993], [1.72857108E12, 2942.76], [1.72856562E12, 1763.3999999999996], [1.72856784E12, 2372.399999999996], [1.72856442E12, 1496.8199999999974], [1.72856886E12, 2193.9600000000005], [1.72856664E12, 1815.8399999999992], [1.72856988E12, 2280.3100000000004], [1.7285634E12, 1459.9000000000003], [1.72856766E12, 1737.6400000000012], [1.72856802E12, 2305.6099999999988], [1.72857126E12, 2844.8999999999996], [1.7285646E12, 1406.5], [1.72857024E12, 2981.8700000000003], [1.7285658E12, 1732.3599999999997], [1.72856358E12, 1425.439999999999], [1.72856682E12, 1635.7999999999986], [1.72856904E12, 2306.8599999999997], [1.72857006E12, 2837.840000000002], [1.7285685E12, 2277.34], [1.72857174E12, 3088.000000000001], [1.72856628E12, 1710.1999999999998], [1.72857072E12, 2885.6], [1.72856406E12, 1442.3399999999992], [1.7285673E12, 1815.5200000000004], [1.72857054E12, 2904.499999999998], [1.72856508E12, 1571.0199999999995], [1.72856952E12, 2371.0499999999975], [1.72856544E12, 1534.5300000000016], [1.72856424E12, 1365.4400000000005], [1.72856646E12, 1606.4899999999989], [1.72856868E12, 2384.0499999999993], [1.7285709E12, 2971.7], [1.72856526E12, 1412.52], [1.72856748E12, 1795.4199999999996], [1.7285697E12, 2236.799999999999], [1.72857192E12, 2678.16]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72856592E12, 1426.7499999999995], [1.72856916E12, 1898.8], [1.72857138E12, 2283.5], [1.72856472E12, 1179.5], [1.72856694E12, 1340.8999999999996], [1.7285637E12, 1137.8499999999995], [1.72856574E12, 1365.1], [1.72856796E12, 1894.6999999999998], [1.72857018E12, 2446.8], [1.7285661E12, 1305.9999999999993], [1.72856832E12, 1901.0], [1.72856934E12, 1846.8999999999999], [1.72857156E12, 2437.149999999999], [1.7285649E12, 1140.4499999999998], [1.72857036E12, 2370.3999999999996], [1.72856388E12, 1196.75], [1.72856712E12, 1368.05], [1.72856814E12, 1892.599999999999], [1.72856658E12, 1363.5], [1.7285688E12, 1935.8999999999999], [1.72856982E12, 1775.7499999999995], [1.72857084E12, 2381.0], [1.72856436E12, 1135.4], [1.72856538E12, 1151.1999999999985], [1.7285676E12, 1318.4999999999995], [1.72856862E12, 1837.2999999999993], [1.72856898E12, 1816.75], [1.72856334E12, 1549.6], [1.72856676E12, 1448.4999999999998], [1.7285712E12, 2402.5999999999995], [1.72856454E12, 1150.5499999999995], [1.72856778E12, 1686.1999999999996], [1.72857102E12, 2277.5], [1.72856556E12, 1457.0], [1.72857E12, 1573.1999999999998], [1.72856352E12, 1163.75], [1.72856382E12, 1155.75], [1.72856502E12, 1105.8], [1.72856724E12, 1398.85], [1.72856946E12, 1802.1999999999998], [1.72857168E12, 2343.75], [1.72856826E12, 1829.6999999999994], [1.7285715E12, 2303.0999999999995], [1.72856604E12, 1337.7999999999997], [1.72857048E12, 2482.0], [1.728564E12, 1176.6999999999998], [1.7285664E12, 1403.6999999999998], [1.72856964E12, 1882.0], [1.72856742E12, 1359.8999999999999], [1.72857186E12, 2305.2999999999997], [1.7285652E12, 1227.35], [1.72856418E12, 1204.0], [1.72856622E12, 1377.3999999999999], [1.72856844E12, 1843.3999999999999], [1.72857066E12, 2312.75], [1.72856688E12, 1404.9999999999995], [1.72857012E12, 2408.5], [1.72856346E12, 1147.1999999999998], [1.7285679E12, 1761.25], [1.72856568E12, 1381.6999999999998], [1.72856466E12, 1146.0], [1.7285667E12, 1353.9999999999995], [1.72856892E12, 2012.35], [1.72857114E12, 2360.649999999999], [1.72856706E12, 1323.7999999999993], [1.7285703E12, 2292.9999999999973], [1.72856364E12, 1105.2999999999997], [1.72856928E12, 1885.1999999999994], [1.72856484E12, 1130.0], [1.72856586E12, 1364.1999999999998], [1.72856808E12, 1896.3999999999999], [1.72857132E12, 2318.6499999999996], [1.7285691E12, 1764.4], [1.72856754E12, 1352.1999999999998], [1.72856412E12, 1212.7499999999995], [1.72857078E12, 2329.4999999999995], [1.72856532E12, 1219.9499999999998], [1.72856976E12, 1886.0], [1.72856634E12, 1376.0], [1.72856856E12, 1828.7999999999988], [1.72856958E12, 1864.599999999998], [1.7285718E12, 2424.749999999998], [1.7285643E12, 1137.3], [1.7285655E12, 1139.9999999999998], [1.72856772E12, 1352.099999999999], [1.72856994E12, 1746.9499999999994], [1.72856874E12, 1889.0], [1.72857198E12, 1150.65], [1.72856652E12, 1405.0], [1.72857096E12, 2400.599999999999], [1.72856448E12, 1195.3999999999996], [1.72856478E12, 1200.25], [1.72856496E12, 1226.6999999999996], [1.7285682E12, 1954.0], [1.72857042E12, 2338.1], [1.72856376E12, 1162.5999999999995], [1.72856598E12, 1336.6999999999998], [1.728567E12, 1386.6], [1.72856922E12, 1849.4999999999986], [1.72857144E12, 2357.0], [1.7285706E12, 2351.8999999999996], [1.72856514E12, 1177.6999999999998], [1.72856736E12, 1413.4999999999995], [1.72856394E12, 1144.8999999999996], [1.72856838E12, 1829.8999999999992], [1.72856616E12, 1382.0], [1.7285694E12, 1823.5499999999993], [1.72856718E12, 1343.65], [1.72857162E12, 2244.3999999999996], [1.72857108E12, 2385.0], [1.72856562E12, 1356.3999999999999], [1.72856784E12, 1933.9499999999998], [1.72856442E12, 1143.15], [1.72856886E12, 1726.0], [1.72856664E12, 1406.6999999999994], [1.72856988E12, 1925.6999999999996], [1.7285634E12, 1104.6999999999998], [1.72856766E12, 1412.8999999999999], [1.72856802E12, 1830.3], [1.72857126E12, 2431.6], [1.7285646E12, 1092.0], [1.72857024E12, 2242.3499999999995], [1.7285658E12, 1370.65], [1.72856358E12, 1137.4], [1.72856682E12, 1290.0], [1.72856904E12, 1901.9], [1.72857006E12, 2218.2], [1.7285685E12, 1895.3999999999978], [1.72857174E12, 2445.8999999999996], [1.72856628E12, 1347.0], [1.72857072E12, 2279.5], [1.72856406E12, 1159.1999999999996], [1.7285673E12, 1385.7999999999997], [1.72857054E12, 2361.75], [1.72856508E12, 1184.7], [1.72856952E12, 1862.4499999999998], [1.72856544E12, 1133.8000000000002], [1.72856424E12, 1148.3999999999999], [1.72856646E12, 1307.4499999999998], [1.72856868E12, 1990.5999999999995], [1.7285709E12, 2368.0], [1.72856526E12, 1124.6999999999996], [1.72856748E12, 1343.8999999999987], [1.7285697E12, 1786.0], [1.72857192E12, 2029.8999999999974]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72856592E12, 45.0], [1.72856916E12, 43.0], [1.72857138E12, 73.0], [1.72856472E12, 40.0], [1.72856694E12, 41.0], [1.7285637E12, 42.0], [1.72856574E12, 48.0], [1.72856796E12, 47.0], [1.72857018E12, 20.0], [1.7285661E12, 41.0], [1.72856832E12, 46.0], [1.72856934E12, 37.0], [1.72857156E12, 60.0], [1.7285649E12, 38.0], [1.72857036E12, 79.0], [1.72856388E12, 42.0], [1.72856712E12, 42.0], [1.72856814E12, 50.0], [1.72856658E12, 42.0], [1.7285688E12, 41.0], [1.72856982E12, 38.0], [1.72857084E12, 73.0], [1.72856436E12, 41.0], [1.72856538E12, 38.0], [1.7285676E12, 39.0], [1.72856862E12, 45.0], [1.72856898E12, 59.0], [1.72856334E12, 49.0], [1.72856676E12, 47.0], [1.7285712E12, 80.0], [1.72856454E12, 37.0], [1.72856778E12, 43.0], [1.72857102E12, 73.0], [1.72856556E12, 43.0], [1.72857E12, 42.0], [1.72856352E12, 46.0], [1.72856382E12, 39.0], [1.72856502E12, 39.0], [1.72856724E12, 46.0], [1.72856946E12, 44.0], [1.72857168E12, 73.0], [1.72856826E12, 43.0], [1.7285715E12, 75.0], [1.72856604E12, 49.0], [1.72857048E12, 82.0], [1.728564E12, 40.0], [1.7285664E12, 41.0], [1.72856964E12, 51.0], [1.72856742E12, 41.0], [1.72857186E12, 66.0], [1.7285652E12, 42.0], [1.72856418E12, 41.0], [1.72856622E12, 45.0], [1.72856844E12, 46.0], [1.72857066E12, 70.0], [1.72856688E12, 43.0], [1.72857012E12, 71.0], [1.72856346E12, 41.0], [1.7285679E12, 52.0], [1.72856568E12, 45.0], [1.72856466E12, 44.0], [1.7285667E12, 41.0], [1.72856892E12, 52.0], [1.72857114E12, 67.0], [1.72856706E12, 44.0], [1.7285703E12, 71.0], [1.72856364E12, 39.0], [1.72856928E12, 48.0], [1.72856484E12, 39.0], [1.72856586E12, 41.0], [1.72856808E12, 45.0], [1.72857132E12, 74.0], [1.7285691E12, 52.0], [1.72856754E12, 42.0], [1.72856412E12, 36.0], [1.72857078E12, 74.0], [1.72856532E12, 35.0], [1.72856976E12, 48.0], [1.72856634E12, 39.0], [1.72856856E12, 50.0], [1.72856958E12, 47.0], [1.7285718E12, 72.0], [1.7285643E12, 43.0], [1.7285655E12, 44.0], [1.72856772E12, 44.0], [1.72856994E12, 44.0], [1.72856874E12, 47.0], [1.72857198E12, 61.0], [1.72856652E12, 46.0], [1.72857096E12, 71.0], [1.72856448E12, 38.0], [1.72856478E12, 39.0], [1.72856496E12, 42.0], [1.7285682E12, 44.0], [1.72857042E12, 43.0], [1.72856376E12, 45.0], [1.72856598E12, 38.0], [1.728567E12, 39.0], [1.72856922E12, 47.0], [1.72857144E12, 80.0], [1.7285706E12, 74.0], [1.72856514E12, 39.0], [1.72856736E12, 33.0], [1.72856394E12, 38.0], [1.72856838E12, 47.0], [1.72856616E12, 48.0], [1.7285694E12, 45.0], [1.72856718E12, 45.0], [1.72857162E12, 72.0], [1.72857108E12, 78.0], [1.72856562E12, 40.0], [1.72856784E12, 42.0], [1.72856442E12, 40.0], [1.72856886E12, 49.0], [1.72856664E12, 39.0], [1.72856988E12, 46.0], [1.7285634E12, 48.0], [1.72856766E12, 36.0], [1.72856802E12, 52.0], [1.72857126E12, 77.0], [1.7285646E12, 42.0], [1.72857024E12, 81.0], [1.7285658E12, 44.0], [1.72856358E12, 46.0], [1.72856682E12, 41.0], [1.72856904E12, 49.0], [1.72857006E12, 70.0], [1.7285685E12, 40.0], [1.72857174E12, 33.0], [1.72856628E12, 44.0], [1.72857072E12, 66.0], [1.72856406E12, 39.0], [1.7285673E12, 42.0], [1.72857054E12, 40.0], [1.72856508E12, 40.0], [1.72856952E12, 50.0], [1.72856544E12, 41.0], [1.72856424E12, 47.0], [1.72856646E12, 43.0], [1.72856868E12, 45.0], [1.7285709E12, 39.0], [1.72856526E12, 43.0], [1.72856748E12, 46.0], [1.7285697E12, 46.0], [1.72857192E12, 45.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72856592E12, 511.0], [1.72856916E12, 661.0], [1.72857138E12, 909.0], [1.72856472E12, 417.0], [1.72856694E12, 471.0], [1.7285637E12, 420.5], [1.72856574E12, 419.0], [1.72856796E12, 711.5], [1.72857018E12, 779.0], [1.7285661E12, 464.0], [1.72856832E12, 731.0], [1.72856934E12, 663.5], [1.72857156E12, 874.5], [1.7285649E12, 385.0], [1.72857036E12, 875.0], [1.72856388E12, 506.0], [1.72856712E12, 442.5], [1.72856814E12, 679.0], [1.72856658E12, 532.0], [1.7285688E12, 736.5], [1.72856982E12, 700.0], [1.72857084E12, 869.0], [1.72856436E12, 388.0], [1.72856538E12, 346.0], [1.7285676E12, 546.0], [1.72856862E12, 606.0], [1.72856898E12, 606.5], [1.72856334E12, 450.0], [1.72856676E12, 508.0], [1.7285712E12, 841.0], [1.72856454E12, 399.0], [1.72856778E12, 466.0], [1.72857102E12, 872.0], [1.72856556E12, 560.0], [1.72857E12, 521.0], [1.72856352E12, 409.0], [1.72856382E12, 395.0], [1.72856502E12, 328.0], [1.72856724E12, 515.0], [1.72856946E12, 692.5], [1.72857168E12, 818.0], [1.72856826E12, 605.0], [1.7285715E12, 831.5], [1.72856604E12, 514.5], [1.72857048E12, 882.0], [1.728564E12, 404.0], [1.7285664E12, 517.5], [1.72856964E12, 666.5], [1.72856742E12, 487.5], [1.72857186E12, 809.0], [1.7285652E12, 417.5], [1.72856418E12, 532.0], [1.72856622E12, 548.0], [1.72856844E12, 652.0], [1.72857066E12, 795.5], [1.72856688E12, 501.0], [1.72857012E12, 834.0], [1.72856346E12, 350.5], [1.7285679E12, 636.0], [1.72856568E12, 516.0], [1.72856466E12, 463.0], [1.7285667E12, 553.5], [1.72856892E12, 739.5], [1.72857114E12, 911.5], [1.72856706E12, 452.0], [1.7285703E12, 717.0], [1.72856364E12, 354.0], [1.72856928E12, 545.0], [1.72856484E12, 414.0], [1.72856586E12, 509.0], [1.72856808E12, 645.0], [1.72857132E12, 912.5], [1.7285691E12, 563.0], [1.72856754E12, 505.0], [1.72856412E12, 447.0], [1.72857078E12, 917.5], [1.72856532E12, 430.5], [1.72856976E12, 631.0], [1.72856634E12, 447.0], [1.72856856E12, 626.0], [1.72856958E12, 654.0], [1.7285718E12, 915.0], [1.7285643E12, 454.5], [1.7285655E12, 456.0], [1.72856772E12, 518.0], [1.72856994E12, 669.5], [1.72856874E12, 659.0], [1.72857198E12, 592.5], [1.72856652E12, 492.0], [1.72857096E12, 794.0], [1.72856448E12, 444.0], [1.72856478E12, 412.5], [1.72856496E12, 445.0], [1.7285682E12, 797.0], [1.72857042E12, 933.0], [1.72856376E12, 481.5], [1.72856598E12, 438.0], [1.728567E12, 524.0], [1.72856922E12, 700.0], [1.72857144E12, 811.0], [1.7285706E12, 891.0], [1.72856514E12, 478.0], [1.72856736E12, 522.5], [1.72856394E12, 405.0], [1.72856838E12, 591.0], [1.72856616E12, 506.0], [1.7285694E12, 629.0], [1.72856718E12, 498.5], [1.72857162E12, 808.0], [1.72857108E12, 956.0], [1.72856562E12, 476.0], [1.72856784E12, 515.5], [1.72856442E12, 474.5], [1.72856886E12, 535.0], [1.72856664E12, 524.5], [1.72856988E12, 699.0], [1.7285634E12, 274.0], [1.72856766E12, 517.0], [1.72856802E12, 696.5], [1.72857126E12, 1023.0], [1.7285646E12, 355.0], [1.72857024E12, 843.0], [1.7285658E12, 500.5], [1.72856358E12, 462.0], [1.72856682E12, 416.0], [1.72856904E12, 651.0], [1.72857006E12, 760.5], [1.7285685E12, 620.5], [1.72857174E12, 966.0], [1.72856628E12, 513.0], [1.72857072E12, 909.5], [1.72856406E12, 446.0], [1.7285673E12, 502.0], [1.72857054E12, 848.5], [1.72856508E12, 481.0], [1.72856952E12, 721.5], [1.72856544E12, 333.5], [1.72856424E12, 433.0], [1.72856646E12, 415.5], [1.72856868E12, 744.5], [1.7285709E12, 716.0], [1.72856526E12, 487.0], [1.72856748E12, 498.0], [1.7285697E12, 545.0], [1.72857192E12, 604.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72857198E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 157.0, "minX": 1.0, "maxY": 814.0, "series": [{"data": [[2.0, 690.0], [32.0, 157.0], [33.0, 322.5], [35.0, 245.0], [34.0, 244.5], [3.0, 640.0], [4.0, 605.0], [5.0, 612.0], [6.0, 602.0], [7.0, 570.0], [8.0, 551.5], [9.0, 538.5], [10.0, 576.0], [11.0, 642.0], [12.0, 659.5], [13.0, 655.0], [14.0, 641.0], [15.0, 631.0], [1.0, 814.0], [16.0, 586.5], [17.0, 545.0], [18.0, 526.5], [19.0, 490.0], [20.0, 421.5], [21.0, 408.0], [22.0, 346.0], [23.0, 327.5], [24.0, 336.5], [25.0, 314.0], [26.0, 268.5], [27.0, 262.0], [28.0, 288.0], [29.0, 353.5], [30.0, 287.0], [31.0, 308.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 35.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 97.0, "minX": 1.0, "maxY": 557.0, "series": [{"data": [[2.0, 458.5], [32.0, 97.0], [33.0, 193.5], [35.0, 151.0], [34.0, 157.5], [3.0, 433.0], [4.0, 413.0], [5.0, 417.5], [6.0, 420.5], [7.0, 399.0], [8.0, 387.5], [9.0, 385.0], [10.0, 406.0], [11.0, 452.0], [12.0, 463.5], [13.0, 464.0], [14.0, 460.0], [15.0, 447.0], [1.0, 557.0], [16.0, 424.0], [17.0, 392.0], [18.0, 384.5], [19.0, 361.0], [20.0, 303.0], [21.0, 275.0], [22.0, 224.0], [23.0, 210.5], [24.0, 219.0], [25.0, 193.0], [26.0, 169.5], [27.0, 168.0], [28.0, 176.5], [29.0, 221.5], [30.0, 171.5], [31.0, 191.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 35.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.72856334E12, "maxY": 18.183333333333334, "series": [{"data": [[1.72856592E12, 14.0], [1.72856916E12, 15.716666666666667], [1.72857138E12, 16.4], [1.72856472E12, 8.566666666666666], [1.72856694E12, 14.75], [1.7285637E12, 8.6], [1.72856574E12, 15.283333333333333], [1.72856796E12, 15.366666666666667], [1.72857018E12, 17.05], [1.7285661E12, 14.916666666666666], [1.72856832E12, 15.316666666666666], [1.72856934E12, 16.333333333333332], [1.72857156E12, 16.2], [1.7285649E12, 8.766666666666667], [1.72857036E12, 16.8], [1.72856388E12, 7.933333333333334], [1.72856712E12, 14.966666666666667], [1.72856814E12, 16.116666666666667], [1.72856658E12, 14.066666666666666], [1.7285688E12, 15.166666666666666], [1.72856982E12, 15.866666666666667], [1.72857084E12, 16.15], [1.72856436E12, 8.583333333333334], [1.72856538E12, 9.216666666666667], [1.7285676E12, 14.083333333333334], [1.72856862E12, 16.75], [1.72856898E12, 16.9], [1.72856334E12, 1.5833333333333333], [1.72856676E12, 13.933333333333334], [1.7285712E12, 16.45], [1.72856454E12, 8.866666666666667], [1.72856778E12, 10.833333333333334], [1.72857102E12, 17.15], [1.72856556E12, 11.1], [1.72857E12, 11.95], [1.72856352E12, 4.4], [1.72856382E12, 8.733333333333333], [1.72856502E12, 9.383333333333333], [1.72856724E12, 14.033333333333333], [1.72856946E12, 16.1], [1.72857168E12, 17.066666666666666], [1.72856826E12, 16.616666666666667], [1.7285715E12, 17.1], [1.72856604E12, 14.166666666666666], [1.72857048E12, 15.983333333333333], [1.728564E12, 8.533333333333333], [1.7285664E12, 14.033333333333333], [1.72856964E12, 15.933333333333334], [1.72856742E12, 14.766666666666667], [1.72857186E12, 17.133333333333333], [1.7285652E12, 8.5], [1.72856418E12, 7.816666666666666], [1.72856622E12, 14.05], [1.72856844E12, 16.05], [1.72857066E12, 17.066666666666666], [1.72856688E12, 14.116666666666667], [1.72857012E12, 16.483333333333334], [1.72856346E12, 4.466666666666667], [1.7285679E12, 16.9], [1.72856568E12, 14.083333333333334], [1.72856466E12, 8.316666666666666], [1.7285667E12, 14.266666666666667], [1.72856892E12, 14.866666666666667], [1.72857114E12, 16.6], [1.72856706E12, 15.116666666666667], [1.7285703E12, 18.183333333333334], [1.72856364E12, 7.716666666666667], [1.72856928E12, 16.783333333333335], [1.72856484E12, 8.816666666666666], [1.72856586E12, 14.783333333333333], [1.72856808E12, 16.05], [1.72857132E12, 16.633333333333333], [1.7285691E12, 17.183333333333334], [1.72856754E12, 14.583333333333334], [1.72856412E12, 8.033333333333333], [1.72857078E12, 16.3], [1.72856532E12, 8.366666666666667], [1.72856976E12, 16.283333333333335], [1.72856634E12, 14.666666666666666], [1.72856856E12, 16.45], [1.72856958E12, 16.166666666666668], [1.7285718E12, 16.333333333333332], [1.7285643E12, 8.6], [1.7285655E12, 4.133333333333334], [1.72856772E12, 13.066666666666666], [1.72856994E12, 15.733333333333333], [1.72856874E12, 16.016666666666666], [1.72857198E12, 0.5833333333333334], [1.72856652E12, 14.316666666666666], [1.72857096E12, 16.916666666666668], [1.72856448E12, 8.45], [1.72856478E12, 8.4], [1.72856496E12, 8.216666666666667], [1.7285682E12, 14.65], [1.72857042E12, 16.283333333333335], [1.72856376E12, 8.3], [1.72856598E12, 15.35], [1.728567E12, 14.183333333333334], [1.72856922E12, 16.133333333333333], [1.72857144E12, 17.316666666666666], [1.7285706E12, 16.266666666666666], [1.72856514E12, 8.016666666666667], [1.72856736E12, 13.8], [1.72856394E12, 8.616666666666667], [1.72856838E12, 16.95], [1.72856616E12, 14.316666666666666], [1.7285694E12, 16.333333333333332], [1.72856718E12, 14.766666666666667], [1.72857162E12, 17.416666666666668], [1.72857108E12, 16.05], [1.72856562E12, 14.916666666666666], [1.72856784E12, 16.766666666666666], [1.72856442E12, 8.266666666666667], [1.72856886E12, 17.583333333333332], [1.72856664E12, 14.133333333333333], [1.72856988E12, 15.666666666666666], [1.7285634E12, 4.683333333333334], [1.72856766E12, 14.216666666666667], [1.72856802E12, 15.933333333333334], [1.72857126E12, 15.55], [1.7285646E12, 9.15], [1.72857024E12, 17.1], [1.7285658E12, 14.1], [1.72856358E12, 4.266666666666667], [1.72856682E12, 15.316666666666666], [1.72856904E12, 16.016666666666666], [1.72857006E12, 17.633333333333333], [1.7285685E12, 16.366666666666667], [1.72857174E12, 15.833333333333334], [1.72856628E12, 14.316666666666666], [1.72857072E12, 16.433333333333334], [1.72856406E12, 8.366666666666667], [1.7285673E12, 14.216666666666667], [1.72857054E12, 16.8], [1.72856508E12, 8.083333333333334], [1.72856952E12, 15.5], [1.72856544E12, 9.033333333333333], [1.72856424E12, 8.35], [1.72856646E12, 15.5], [1.72856868E12, 15.166666666666666], [1.7285709E12, 17.733333333333334], [1.72856526E12, 8.216666666666667], [1.72856748E12, 14.033333333333333], [1.7285697E12, 17.316666666666666], [1.72857192E12, 13.833333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72857198E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.72856334E12, "maxY": 18.183333333333334, "series": [{"data": [[1.72856592E12, 14.0], [1.72856916E12, 15.716666666666667], [1.72857138E12, 16.4], [1.72856472E12, 8.566666666666666], [1.72856694E12, 14.75], [1.7285637E12, 8.6], [1.72856574E12, 15.283333333333333], [1.72856796E12, 15.366666666666667], [1.72857018E12, 17.05], [1.7285661E12, 14.916666666666666], [1.72856832E12, 15.316666666666666], [1.72856934E12, 16.333333333333332], [1.72857156E12, 16.2], [1.7285649E12, 8.766666666666667], [1.72857036E12, 16.8], [1.72856388E12, 7.933333333333334], [1.72856712E12, 14.966666666666667], [1.72856814E12, 16.116666666666667], [1.72856658E12, 14.066666666666666], [1.7285688E12, 15.166666666666666], [1.72856982E12, 15.866666666666667], [1.72857084E12, 16.15], [1.72856436E12, 8.583333333333334], [1.72856538E12, 9.216666666666667], [1.7285676E12, 14.083333333333334], [1.72856862E12, 16.75], [1.72856898E12, 16.9], [1.72856334E12, 1.55], [1.72856676E12, 13.933333333333334], [1.7285712E12, 16.45], [1.72856454E12, 8.866666666666667], [1.72856778E12, 10.75], [1.72857102E12, 17.15], [1.72856556E12, 10.983333333333333], [1.72857E12, 11.85], [1.72856352E12, 4.4], [1.72856382E12, 8.733333333333333], [1.72856502E12, 9.383333333333333], [1.72856724E12, 14.033333333333333], [1.72856946E12, 16.1], [1.72857168E12, 17.066666666666666], [1.72856826E12, 16.616666666666667], [1.7285715E12, 17.1], [1.72856604E12, 14.166666666666666], [1.72857048E12, 15.983333333333333], [1.728564E12, 8.533333333333333], [1.7285664E12, 14.033333333333333], [1.72856964E12, 15.933333333333334], [1.72856742E12, 14.766666666666667], [1.72857186E12, 17.133333333333333], [1.7285652E12, 8.5], [1.72856418E12, 7.816666666666666], [1.72856622E12, 14.05], [1.72856844E12, 16.05], [1.72857066E12, 17.066666666666666], [1.72856688E12, 14.116666666666667], [1.72857012E12, 16.483333333333334], [1.72856346E12, 4.466666666666667], [1.7285679E12, 16.9], [1.72856568E12, 14.083333333333334], [1.72856466E12, 8.316666666666666], [1.7285667E12, 14.266666666666667], [1.72856892E12, 14.866666666666667], [1.72857114E12, 16.6], [1.72856706E12, 15.116666666666667], [1.7285703E12, 18.183333333333334], [1.72856364E12, 7.666666666666667], [1.72856928E12, 16.783333333333335], [1.72856484E12, 8.816666666666666], [1.72856586E12, 14.783333333333333], [1.72856808E12, 16.05], [1.72857132E12, 16.633333333333333], [1.7285691E12, 17.183333333333334], [1.72856754E12, 14.583333333333334], [1.72856412E12, 8.033333333333333], [1.72857078E12, 16.3], [1.72856532E12, 8.366666666666667], [1.72856976E12, 16.283333333333335], [1.72856634E12, 14.666666666666666], [1.72856856E12, 16.45], [1.72856958E12, 16.166666666666668], [1.7285718E12, 16.333333333333332], [1.7285643E12, 8.6], [1.7285655E12, 4.183333333333334], [1.72856772E12, 13.083333333333334], [1.72856994E12, 15.766666666666667], [1.72856874E12, 16.016666666666666], [1.72857198E12, 0.6], [1.72856652E12, 14.316666666666666], [1.72857096E12, 16.916666666666668], [1.72856448E12, 8.45], [1.72856478E12, 8.4], [1.72856496E12, 8.216666666666667], [1.7285682E12, 14.65], [1.72857042E12, 16.283333333333335], [1.72856376E12, 8.3], [1.72856598E12, 15.35], [1.728567E12, 14.183333333333334], [1.72856922E12, 16.133333333333333], [1.72857144E12, 17.316666666666666], [1.7285706E12, 16.266666666666666], [1.72856514E12, 8.016666666666667], [1.72856736E12, 13.8], [1.72856394E12, 8.616666666666667], [1.72856838E12, 16.95], [1.72856616E12, 14.316666666666666], [1.7285694E12, 16.333333333333332], [1.72856718E12, 14.766666666666667], [1.72857162E12, 17.416666666666668], [1.72857108E12, 16.05], [1.72856562E12, 14.916666666666666], [1.72856784E12, 16.766666666666666], [1.72856442E12, 8.266666666666667], [1.72856886E12, 17.583333333333332], [1.72856664E12, 14.133333333333333], [1.72856988E12, 15.666666666666666], [1.7285634E12, 4.683333333333334], [1.72856766E12, 14.216666666666667], [1.72856802E12, 15.933333333333334], [1.72857126E12, 15.55], [1.7285646E12, 9.15], [1.72857024E12, 17.1], [1.7285658E12, 14.1], [1.72856358E12, 4.283333333333333], [1.72856682E12, 15.316666666666666], [1.72856904E12, 16.016666666666666], [1.72857006E12, 17.633333333333333], [1.7285685E12, 16.366666666666667], [1.72857174E12, 15.833333333333334], [1.72856628E12, 14.316666666666666], [1.72857072E12, 16.433333333333334], [1.72856406E12, 8.366666666666667], [1.7285673E12, 14.216666666666667], [1.72857054E12, 16.8], [1.72856508E12, 8.083333333333334], [1.72856952E12, 15.5], [1.72856544E12, 9.033333333333333], [1.72856424E12, 8.35], [1.72856646E12, 15.5], [1.72856868E12, 15.166666666666666], [1.7285709E12, 17.733333333333334], [1.72856526E12, 8.216666666666667], [1.72856748E12, 14.033333333333333], [1.7285697E12, 17.316666666666666], [1.72857192E12, 14.083333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72857198E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.72856334E12, "maxY": 18.183333333333334, "series": [{"data": [[1.72856592E12, 14.0], [1.72856916E12, 15.716666666666667], [1.72857138E12, 16.4], [1.72856472E12, 8.566666666666666], [1.72856694E12, 14.75], [1.7285637E12, 8.6], [1.72856574E12, 15.283333333333333], [1.72856796E12, 15.366666666666667], [1.72857018E12, 17.05], [1.7285661E12, 14.916666666666666], [1.72856832E12, 15.316666666666666], [1.72856934E12, 16.333333333333332], [1.72857156E12, 16.2], [1.7285649E12, 8.766666666666667], [1.72857036E12, 16.8], [1.72856388E12, 7.933333333333334], [1.72856712E12, 14.966666666666667], [1.72856814E12, 16.116666666666667], [1.72856658E12, 14.066666666666666], [1.7285688E12, 15.166666666666666], [1.72856982E12, 15.866666666666667], [1.72857084E12, 16.15], [1.72856436E12, 8.583333333333334], [1.72856538E12, 9.216666666666667], [1.7285676E12, 14.083333333333334], [1.72856862E12, 16.75], [1.72856898E12, 16.9], [1.72856334E12, 1.55], [1.72856676E12, 13.933333333333334], [1.7285712E12, 16.45], [1.72856454E12, 8.866666666666667], [1.72856778E12, 10.75], [1.72857102E12, 17.15], [1.72856556E12, 10.983333333333333], [1.72857E12, 11.85], [1.72856352E12, 4.4], [1.72856382E12, 8.733333333333333], [1.72856502E12, 9.383333333333333], [1.72856724E12, 14.033333333333333], [1.72856946E12, 16.1], [1.72857168E12, 17.066666666666666], [1.72856826E12, 16.616666666666667], [1.7285715E12, 17.1], [1.72856604E12, 14.166666666666666], [1.72857048E12, 15.983333333333333], [1.728564E12, 8.533333333333333], [1.7285664E12, 14.033333333333333], [1.72856964E12, 15.933333333333334], [1.72856742E12, 14.766666666666667], [1.72857186E12, 17.133333333333333], [1.7285652E12, 8.5], [1.72856418E12, 7.816666666666666], [1.72856622E12, 14.05], [1.72856844E12, 16.05], [1.72857066E12, 17.066666666666666], [1.72856688E12, 14.116666666666667], [1.72857012E12, 16.483333333333334], [1.72856346E12, 4.466666666666667], [1.7285679E12, 16.9], [1.72856568E12, 14.083333333333334], [1.72856466E12, 8.316666666666666], [1.7285667E12, 14.266666666666667], [1.72856892E12, 14.866666666666667], [1.72857114E12, 16.6], [1.72856706E12, 15.116666666666667], [1.7285703E12, 18.183333333333334], [1.72856364E12, 7.666666666666667], [1.72856928E12, 16.783333333333335], [1.72856484E12, 8.816666666666666], [1.72856586E12, 14.783333333333333], [1.72856808E12, 16.05], [1.72857132E12, 16.633333333333333], [1.7285691E12, 17.183333333333334], [1.72856754E12, 14.583333333333334], [1.72856412E12, 8.033333333333333], [1.72857078E12, 16.3], [1.72856532E12, 8.366666666666667], [1.72856976E12, 16.283333333333335], [1.72856634E12, 14.666666666666666], [1.72856856E12, 16.45], [1.72856958E12, 16.166666666666668], [1.7285718E12, 16.333333333333332], [1.7285643E12, 8.6], [1.7285655E12, 4.183333333333334], [1.72856772E12, 13.083333333333334], [1.72856994E12, 15.766666666666667], [1.72856874E12, 16.016666666666666], [1.72857198E12, 0.6], [1.72856652E12, 14.316666666666666], [1.72857096E12, 16.916666666666668], [1.72856448E12, 8.45], [1.72856478E12, 8.4], [1.72856496E12, 8.216666666666667], [1.7285682E12, 14.65], [1.72857042E12, 16.283333333333335], [1.72856376E12, 8.3], [1.72856598E12, 15.35], [1.728567E12, 14.183333333333334], [1.72856922E12, 16.133333333333333], [1.72857144E12, 17.316666666666666], [1.7285706E12, 16.266666666666666], [1.72856514E12, 8.016666666666667], [1.72856736E12, 13.8], [1.72856394E12, 8.616666666666667], [1.72856838E12, 16.95], [1.72856616E12, 14.316666666666666], [1.7285694E12, 16.333333333333332], [1.72856718E12, 14.766666666666667], [1.72857162E12, 17.416666666666668], [1.72857108E12, 16.05], [1.72856562E12, 14.916666666666666], [1.72856784E12, 16.766666666666666], [1.72856442E12, 8.266666666666667], [1.72856886E12, 17.583333333333332], [1.72856664E12, 14.133333333333333], [1.72856988E12, 15.666666666666666], [1.7285634E12, 4.683333333333334], [1.72856766E12, 14.216666666666667], [1.72856802E12, 15.933333333333334], [1.72857126E12, 15.55], [1.7285646E12, 9.15], [1.72857024E12, 17.1], [1.7285658E12, 14.1], [1.72856358E12, 4.283333333333333], [1.72856682E12, 15.316666666666666], [1.72856904E12, 16.016666666666666], [1.72857006E12, 17.633333333333333], [1.7285685E12, 16.366666666666667], [1.72857174E12, 15.833333333333334], [1.72856628E12, 14.316666666666666], [1.72857072E12, 16.433333333333334], [1.72856406E12, 8.366666666666667], [1.7285673E12, 14.216666666666667], [1.72857054E12, 16.8], [1.72856508E12, 8.083333333333334], [1.72856952E12, 15.5], [1.72856544E12, 9.033333333333333], [1.72856424E12, 8.35], [1.72856646E12, 15.5], [1.72856868E12, 15.166666666666666], [1.7285709E12, 17.733333333333334], [1.72856526E12, 8.216666666666667], [1.72856748E12, 14.033333333333333], [1.7285697E12, 17.316666666666666], [1.72857192E12, 14.083333333333334]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72857198E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.72856334E12, "maxY": 18.183333333333334, "series": [{"data": [[1.72856592E12, 14.0], [1.72856916E12, 15.716666666666667], [1.72857138E12, 16.4], [1.72856472E12, 8.566666666666666], [1.72856694E12, 14.75], [1.7285637E12, 8.6], [1.72856574E12, 15.283333333333333], [1.72856796E12, 15.366666666666667], [1.72857018E12, 17.05], [1.7285661E12, 14.916666666666666], [1.72856832E12, 15.316666666666666], [1.72856934E12, 16.333333333333332], [1.72857156E12, 16.2], [1.7285649E12, 8.766666666666667], [1.72857036E12, 16.8], [1.72856388E12, 7.933333333333334], [1.72856712E12, 14.966666666666667], [1.72856814E12, 16.116666666666667], [1.72856658E12, 14.066666666666666], [1.7285688E12, 15.166666666666666], [1.72856982E12, 15.866666666666667], [1.72857084E12, 16.15], [1.72856436E12, 8.583333333333334], [1.72856538E12, 9.216666666666667], [1.7285676E12, 14.083333333333334], [1.72856862E12, 16.75], [1.72856898E12, 16.9], [1.72856334E12, 1.55], [1.72856676E12, 13.933333333333334], [1.7285712E12, 16.45], [1.72856454E12, 8.866666666666667], [1.72856778E12, 10.75], [1.72857102E12, 17.15], [1.72856556E12, 10.983333333333333], [1.72857E12, 11.85], [1.72856352E12, 4.4], [1.72856382E12, 8.733333333333333], [1.72856502E12, 9.383333333333333], [1.72856724E12, 14.033333333333333], [1.72856946E12, 16.1], [1.72857168E12, 17.066666666666666], [1.72856826E12, 16.616666666666667], [1.7285715E12, 17.1], [1.72856604E12, 14.166666666666666], [1.72857048E12, 15.983333333333333], [1.728564E12, 8.533333333333333], [1.7285664E12, 14.033333333333333], [1.72856964E12, 15.933333333333334], [1.72856742E12, 14.766666666666667], [1.72857186E12, 17.133333333333333], [1.7285652E12, 8.5], [1.72856418E12, 7.816666666666666], [1.72856622E12, 14.05], [1.72856844E12, 16.05], [1.72857066E12, 17.066666666666666], [1.72856688E12, 14.116666666666667], [1.72857012E12, 16.483333333333334], [1.72856346E12, 4.466666666666667], [1.7285679E12, 16.9], [1.72856568E12, 14.083333333333334], [1.72856466E12, 8.316666666666666], [1.7285667E12, 14.266666666666667], [1.72856892E12, 14.866666666666667], [1.72857114E12, 16.6], [1.72856706E12, 15.116666666666667], [1.7285703E12, 18.183333333333334], [1.72856364E12, 7.666666666666667], [1.72856928E12, 16.783333333333335], [1.72856484E12, 8.816666666666666], [1.72856586E12, 14.783333333333333], [1.72856808E12, 16.05], [1.72857132E12, 16.633333333333333], [1.7285691E12, 17.183333333333334], [1.72856754E12, 14.583333333333334], [1.72856412E12, 8.033333333333333], [1.72857078E12, 16.3], [1.72856532E12, 8.366666666666667], [1.72856976E12, 16.283333333333335], [1.72856634E12, 14.666666666666666], [1.72856856E12, 16.45], [1.72856958E12, 16.166666666666668], [1.7285718E12, 16.333333333333332], [1.7285643E12, 8.6], [1.7285655E12, 4.183333333333334], [1.72856772E12, 13.083333333333334], [1.72856994E12, 15.766666666666667], [1.72856874E12, 16.016666666666666], [1.72857198E12, 0.6], [1.72856652E12, 14.316666666666666], [1.72857096E12, 16.916666666666668], [1.72856448E12, 8.45], [1.72856478E12, 8.4], [1.72856496E12, 8.216666666666667], [1.7285682E12, 14.65], [1.72857042E12, 16.283333333333335], [1.72856376E12, 8.3], [1.72856598E12, 15.35], [1.728567E12, 14.183333333333334], [1.72856922E12, 16.133333333333333], [1.72857144E12, 17.316666666666666], [1.7285706E12, 16.266666666666666], [1.72856514E12, 8.016666666666667], [1.72856736E12, 13.8], [1.72856394E12, 8.616666666666667], [1.72856838E12, 16.95], [1.72856616E12, 14.316666666666666], [1.7285694E12, 16.333333333333332], [1.72856718E12, 14.766666666666667], [1.72857162E12, 17.416666666666668], [1.72857108E12, 16.05], [1.72856562E12, 14.916666666666666], [1.72856784E12, 16.766666666666666], [1.72856442E12, 8.266666666666667], [1.72856886E12, 17.583333333333332], [1.72856664E12, 14.133333333333333], [1.72856988E12, 15.666666666666666], [1.7285634E12, 4.683333333333334], [1.72856766E12, 14.216666666666667], [1.72856802E12, 15.933333333333334], [1.72857126E12, 15.55], [1.7285646E12, 9.15], [1.72857024E12, 17.1], [1.7285658E12, 14.1], [1.72856358E12, 4.283333333333333], [1.72856682E12, 15.316666666666666], [1.72856904E12, 16.016666666666666], [1.72857006E12, 17.633333333333333], [1.7285685E12, 16.366666666666667], [1.72857174E12, 15.833333333333334], [1.72856628E12, 14.316666666666666], [1.72857072E12, 16.433333333333334], [1.72856406E12, 8.366666666666667], [1.7285673E12, 14.216666666666667], [1.72857054E12, 16.8], [1.72856508E12, 8.083333333333334], [1.72856952E12, 15.5], [1.72856544E12, 9.033333333333333], [1.72856424E12, 8.35], [1.72856646E12, 15.5], [1.72856868E12, 15.166666666666666], [1.7285709E12, 17.733333333333334], [1.72856526E12, 8.216666666666667], [1.72856748E12, 14.033333333333333], [1.7285697E12, 17.316666666666666], [1.72857192E12, 14.083333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72857198E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

