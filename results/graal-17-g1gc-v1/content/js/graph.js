/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 3024.0, "series": [{"data": [[0.0, 29.0], [0.1, 38.0], [0.2, 40.0], [0.3, 41.0], [0.4, 43.0], [0.5, 44.0], [0.6, 45.0], [0.7, 46.0], [0.8, 47.0], [0.9, 48.0], [1.0, 48.0], [1.1, 49.0], [1.2, 50.0], [1.3, 50.0], [1.4, 51.0], [1.5, 52.0], [1.6, 52.0], [1.7, 53.0], [1.8, 53.0], [1.9, 54.0], [2.0, 54.0], [2.1, 55.0], [2.2, 55.0], [2.3, 56.0], [2.4, 56.0], [2.5, 57.0], [2.6, 57.0], [2.7, 58.0], [2.8, 58.0], [2.9, 59.0], [3.0, 59.0], [3.1, 59.0], [3.2, 60.0], [3.3, 60.0], [3.4, 61.0], [3.5, 61.0], [3.6, 61.0], [3.7, 62.0], [3.8, 62.0], [3.9, 62.0], [4.0, 63.0], [4.1, 63.0], [4.2, 63.0], [4.3, 64.0], [4.4, 64.0], [4.5, 64.0], [4.6, 65.0], [4.7, 65.0], [4.8, 65.0], [4.9, 66.0], [5.0, 66.0], [5.1, 66.0], [5.2, 67.0], [5.3, 67.0], [5.4, 68.0], [5.5, 68.0], [5.6, 68.0], [5.7, 68.0], [5.8, 69.0], [5.9, 69.0], [6.0, 69.0], [6.1, 70.0], [6.2, 70.0], [6.3, 70.0], [6.4, 71.0], [6.5, 71.0], [6.6, 71.0], [6.7, 72.0], [6.8, 72.0], [6.9, 72.0], [7.0, 72.0], [7.1, 73.0], [7.2, 73.0], [7.3, 73.0], [7.4, 74.0], [7.5, 74.0], [7.6, 74.0], [7.7, 74.0], [7.8, 75.0], [7.9, 75.0], [8.0, 75.0], [8.1, 76.0], [8.2, 76.0], [8.3, 76.0], [8.4, 76.0], [8.5, 77.0], [8.6, 77.0], [8.7, 77.0], [8.8, 77.0], [8.9, 78.0], [9.0, 78.0], [9.1, 78.0], [9.2, 79.0], [9.3, 79.0], [9.4, 79.0], [9.5, 79.0], [9.6, 80.0], [9.7, 80.0], [9.8, 80.0], [9.9, 80.0], [10.0, 81.0], [10.1, 81.0], [10.2, 81.0], [10.3, 82.0], [10.4, 82.0], [10.5, 82.0], [10.6, 82.0], [10.7, 83.0], [10.8, 83.0], [10.9, 83.0], [11.0, 83.0], [11.1, 84.0], [11.2, 84.0], [11.3, 84.0], [11.4, 85.0], [11.5, 85.0], [11.6, 85.0], [11.7, 85.0], [11.8, 86.0], [11.9, 86.0], [12.0, 86.0], [12.1, 86.0], [12.2, 87.0], [12.3, 87.0], [12.4, 87.0], [12.5, 88.0], [12.6, 88.0], [12.7, 88.0], [12.8, 88.0], [12.9, 89.0], [13.0, 89.0], [13.1, 89.0], [13.2, 90.0], [13.3, 90.0], [13.4, 90.0], [13.5, 90.0], [13.6, 91.0], [13.7, 91.0], [13.8, 91.0], [13.9, 91.0], [14.0, 92.0], [14.1, 92.0], [14.2, 92.0], [14.3, 92.0], [14.4, 93.0], [14.5, 93.0], [14.6, 93.0], [14.7, 94.0], [14.8, 94.0], [14.9, 94.0], [15.0, 94.0], [15.1, 95.0], [15.2, 95.0], [15.3, 95.0], [15.4, 95.0], [15.5, 96.0], [15.6, 96.0], [15.7, 96.0], [15.8, 97.0], [15.9, 97.0], [16.0, 97.0], [16.1, 97.0], [16.2, 98.0], [16.3, 98.0], [16.4, 98.0], [16.5, 99.0], [16.6, 99.0], [16.7, 99.0], [16.8, 99.0], [16.9, 100.0], [17.0, 100.0], [17.1, 100.0], [17.2, 101.0], [17.3, 101.0], [17.4, 101.0], [17.5, 102.0], [17.6, 102.0], [17.7, 102.0], [17.8, 102.0], [17.9, 103.0], [18.0, 103.0], [18.1, 103.0], [18.2, 104.0], [18.3, 104.0], [18.4, 104.0], [18.5, 105.0], [18.6, 105.0], [18.7, 105.0], [18.8, 105.0], [18.9, 106.0], [19.0, 106.0], [19.1, 106.0], [19.2, 107.0], [19.3, 107.0], [19.4, 107.0], [19.5, 107.0], [19.6, 108.0], [19.7, 108.0], [19.8, 108.0], [19.9, 109.0], [20.0, 109.0], [20.1, 109.0], [20.2, 109.0], [20.3, 110.0], [20.4, 110.0], [20.5, 110.0], [20.6, 111.0], [20.7, 111.0], [20.8, 111.0], [20.9, 112.0], [21.0, 112.0], [21.1, 112.0], [21.2, 113.0], [21.3, 113.0], [21.4, 113.0], [21.5, 114.0], [21.6, 114.0], [21.7, 114.0], [21.8, 115.0], [21.9, 115.0], [22.0, 115.0], [22.1, 116.0], [22.2, 116.0], [22.3, 116.0], [22.4, 117.0], [22.5, 117.0], [22.6, 117.0], [22.7, 118.0], [22.8, 118.0], [22.9, 118.0], [23.0, 119.0], [23.1, 119.0], [23.2, 119.0], [23.3, 120.0], [23.4, 120.0], [23.5, 120.0], [23.6, 121.0], [23.7, 121.0], [23.8, 122.0], [23.9, 122.0], [24.0, 122.0], [24.1, 123.0], [24.2, 123.0], [24.3, 123.0], [24.4, 124.0], [24.5, 124.0], [24.6, 124.0], [24.7, 125.0], [24.8, 125.0], [24.9, 126.0], [25.0, 126.0], [25.1, 126.0], [25.2, 127.0], [25.3, 127.0], [25.4, 127.0], [25.5, 128.0], [25.6, 128.0], [25.7, 129.0], [25.8, 129.0], [25.9, 130.0], [26.0, 130.0], [26.1, 130.0], [26.2, 131.0], [26.3, 131.0], [26.4, 132.0], [26.5, 132.0], [26.6, 132.0], [26.7, 133.0], [26.8, 133.0], [26.9, 134.0], [27.0, 134.0], [27.1, 134.0], [27.2, 135.0], [27.3, 135.0], [27.4, 136.0], [27.5, 136.0], [27.6, 137.0], [27.7, 137.0], [27.8, 137.0], [27.9, 138.0], [28.0, 138.0], [28.1, 139.0], [28.2, 139.0], [28.3, 140.0], [28.4, 140.0], [28.5, 141.0], [28.6, 141.0], [28.7, 142.0], [28.8, 142.0], [28.9, 143.0], [29.0, 143.0], [29.1, 143.0], [29.2, 144.0], [29.3, 144.0], [29.4, 145.0], [29.5, 145.0], [29.6, 146.0], [29.7, 146.0], [29.8, 147.0], [29.9, 147.0], [30.0, 148.0], [30.1, 148.0], [30.2, 149.0], [30.3, 149.0], [30.4, 150.0], [30.5, 150.0], [30.6, 151.0], [30.7, 151.0], [30.8, 152.0], [30.9, 153.0], [31.0, 153.0], [31.1, 154.0], [31.2, 154.0], [31.3, 155.0], [31.4, 155.0], [31.5, 156.0], [31.6, 156.0], [31.7, 157.0], [31.8, 158.0], [31.9, 158.0], [32.0, 159.0], [32.1, 159.0], [32.2, 160.0], [32.3, 160.0], [32.4, 161.0], [32.5, 162.0], [32.6, 162.0], [32.7, 163.0], [32.8, 163.0], [32.9, 164.0], [33.0, 165.0], [33.1, 165.0], [33.2, 166.0], [33.3, 167.0], [33.4, 167.0], [33.5, 168.0], [33.6, 169.0], [33.7, 169.0], [33.8, 170.0], [33.9, 171.0], [34.0, 171.0], [34.1, 172.0], [34.2, 173.0], [34.3, 174.0], [34.4, 174.0], [34.5, 175.0], [34.6, 176.0], [34.7, 177.0], [34.8, 177.0], [34.9, 178.0], [35.0, 179.0], [35.1, 180.0], [35.2, 180.0], [35.3, 181.0], [35.4, 182.0], [35.5, 183.0], [35.6, 183.0], [35.7, 184.0], [35.8, 185.0], [35.9, 186.0], [36.0, 187.0], [36.1, 188.0], [36.2, 189.0], [36.3, 190.0], [36.4, 191.0], [36.5, 191.0], [36.6, 193.0], [36.7, 193.0], [36.8, 194.0], [36.9, 196.0], [37.0, 197.0], [37.1, 198.0], [37.2, 199.0], [37.3, 200.0], [37.4, 201.0], [37.5, 202.0], [37.6, 203.0], [37.7, 204.0], [37.8, 205.0], [37.9, 206.0], [38.0, 208.0], [38.1, 209.0], [38.2, 210.0], [38.3, 211.0], [38.4, 212.0], [38.5, 213.0], [38.6, 214.0], [38.7, 216.0], [38.8, 217.0], [38.9, 219.0], [39.0, 220.0], [39.1, 221.0], [39.2, 223.0], [39.3, 224.0], [39.4, 226.0], [39.5, 227.0], [39.6, 228.0], [39.7, 230.0], [39.8, 231.0], [39.9, 233.0], [40.0, 234.0], [40.1, 236.0], [40.2, 237.0], [40.3, 239.0], [40.4, 241.0], [40.5, 243.0], [40.6, 244.0], [40.7, 246.0], [40.8, 248.0], [40.9, 250.0], [41.0, 252.0], [41.1, 254.0], [41.2, 255.0], [41.3, 257.0], [41.4, 259.0], [41.5, 261.0], [41.6, 263.0], [41.7, 265.0], [41.8, 267.0], [41.9, 269.0], [42.0, 271.0], [42.1, 273.0], [42.2, 275.0], [42.3, 277.0], [42.4, 279.0], [42.5, 281.0], [42.6, 283.0], [42.7, 285.0], [42.8, 288.0], [42.9, 290.0], [43.0, 293.0], [43.1, 295.0], [43.2, 297.0], [43.3, 300.0], [43.4, 302.0], [43.5, 305.0], [43.6, 307.0], [43.7, 310.0], [43.8, 312.0], [43.9, 314.0], [44.0, 316.0], [44.1, 319.0], [44.2, 321.0], [44.3, 323.0], [44.4, 326.0], [44.5, 328.0], [44.6, 331.0], [44.7, 334.0], [44.8, 336.0], [44.9, 338.0], [45.0, 340.0], [45.1, 343.0], [45.2, 345.0], [45.3, 347.0], [45.4, 350.0], [45.5, 353.0], [45.6, 355.0], [45.7, 358.0], [45.8, 360.0], [45.9, 362.0], [46.0, 365.0], [46.1, 367.0], [46.2, 370.0], [46.3, 373.0], [46.4, 375.0], [46.5, 377.0], [46.6, 380.0], [46.7, 383.0], [46.8, 385.0], [46.9, 387.0], [47.0, 390.0], [47.1, 392.0], [47.2, 394.0], [47.3, 397.0], [47.4, 399.0], [47.5, 401.0], [47.6, 403.0], [47.7, 405.0], [47.8, 408.0], [47.9, 410.0], [48.0, 412.0], [48.1, 415.0], [48.2, 417.0], [48.3, 419.0], [48.4, 421.0], [48.5, 423.0], [48.6, 425.0], [48.7, 427.0], [48.8, 429.0], [48.9, 431.0], [49.0, 433.0], [49.1, 435.0], [49.2, 437.0], [49.3, 439.0], [49.4, 441.0], [49.5, 443.0], [49.6, 445.0], [49.7, 447.0], [49.8, 449.0], [49.9, 451.0], [50.0, 453.0], [50.1, 455.0], [50.2, 457.0], [50.3, 459.0], [50.4, 461.0], [50.5, 463.0], [50.6, 465.0], [50.7, 467.0], [50.8, 468.0], [50.9, 470.0], [51.0, 472.0], [51.1, 474.0], [51.2, 476.0], [51.3, 478.0], [51.4, 480.0], [51.5, 481.0], [51.6, 483.0], [51.7, 485.0], [51.8, 487.0], [51.9, 489.0], [52.0, 490.0], [52.1, 492.0], [52.2, 494.0], [52.3, 496.0], [52.4, 498.0], [52.5, 500.0], [52.6, 502.0], [52.7, 504.0], [52.8, 506.0], [52.9, 507.0], [53.0, 509.0], [53.1, 511.0], [53.2, 513.0], [53.3, 514.0], [53.4, 516.0], [53.5, 517.0], [53.6, 520.0], [53.7, 521.0], [53.8, 523.0], [53.9, 525.0], [54.0, 527.0], [54.1, 528.0], [54.2, 530.0], [54.3, 531.0], [54.4, 533.0], [54.5, 535.0], [54.6, 536.0], [54.7, 538.0], [54.8, 540.0], [54.9, 541.0], [55.0, 543.0], [55.1, 545.0], [55.2, 546.0], [55.3, 548.0], [55.4, 550.0], [55.5, 552.0], [55.6, 553.0], [55.7, 555.0], [55.8, 557.0], [55.9, 558.0], [56.0, 560.0], [56.1, 562.0], [56.2, 564.0], [56.3, 565.0], [56.4, 567.0], [56.5, 569.0], [56.6, 570.0], [56.7, 572.0], [56.8, 574.0], [56.9, 575.0], [57.0, 577.0], [57.1, 579.0], [57.2, 580.0], [57.3, 582.0], [57.4, 583.0], [57.5, 585.0], [57.6, 587.0], [57.7, 588.0], [57.8, 590.0], [57.9, 592.0], [58.0, 593.0], [58.1, 595.0], [58.2, 597.0], [58.3, 599.0], [58.4, 600.0], [58.5, 602.0], [58.6, 604.0], [58.7, 605.0], [58.8, 607.0], [58.9, 608.0], [59.0, 610.0], [59.1, 612.0], [59.2, 614.0], [59.3, 615.0], [59.4, 617.0], [59.5, 618.0], [59.6, 620.0], [59.7, 621.0], [59.8, 623.0], [59.9, 625.0], [60.0, 627.0], [60.1, 628.0], [60.2, 630.0], [60.3, 631.0], [60.4, 633.0], [60.5, 634.0], [60.6, 636.0], [60.7, 638.0], [60.8, 639.0], [60.9, 640.0], [61.0, 642.0], [61.1, 644.0], [61.2, 646.0], [61.3, 647.0], [61.4, 648.0], [61.5, 650.0], [61.6, 652.0], [61.7, 653.0], [61.8, 655.0], [61.9, 656.0], [62.0, 658.0], [62.1, 660.0], [62.2, 661.0], [62.3, 663.0], [62.4, 665.0], [62.5, 666.0], [62.6, 668.0], [62.7, 669.0], [62.8, 671.0], [62.9, 673.0], [63.0, 674.0], [63.1, 676.0], [63.2, 678.0], [63.3, 679.0], [63.4, 681.0], [63.5, 682.0], [63.6, 684.0], [63.7, 685.0], [63.8, 687.0], [63.9, 688.0], [64.0, 690.0], [64.1, 691.0], [64.2, 693.0], [64.3, 694.0], [64.4, 696.0], [64.5, 697.0], [64.6, 699.0], [64.7, 700.0], [64.8, 702.0], [64.9, 703.0], [65.0, 705.0], [65.1, 706.0], [65.2, 708.0], [65.3, 709.0], [65.4, 711.0], [65.5, 713.0], [65.6, 714.0], [65.7, 716.0], [65.8, 718.0], [65.9, 720.0], [66.0, 721.0], [66.1, 723.0], [66.2, 725.0], [66.3, 726.0], [66.4, 728.0], [66.5, 730.0], [66.6, 731.0], [66.7, 732.0], [66.8, 734.0], [66.9, 736.0], [67.0, 737.0], [67.1, 739.0], [67.2, 740.0], [67.3, 742.0], [67.4, 743.0], [67.5, 745.0], [67.6, 746.0], [67.7, 748.0], [67.8, 750.0], [67.9, 751.0], [68.0, 752.0], [68.1, 754.0], [68.2, 756.0], [68.3, 757.0], [68.4, 759.0], [68.5, 760.0], [68.6, 762.0], [68.7, 764.0], [68.8, 765.0], [68.9, 767.0], [69.0, 769.0], [69.1, 770.0], [69.2, 772.0], [69.3, 774.0], [69.4, 775.0], [69.5, 777.0], [69.6, 778.0], [69.7, 780.0], [69.8, 782.0], [69.9, 783.0], [70.0, 785.0], [70.1, 787.0], [70.2, 788.0], [70.3, 790.0], [70.4, 791.0], [70.5, 793.0], [70.6, 795.0], [70.7, 796.0], [70.8, 798.0], [70.9, 800.0], [71.0, 801.0], [71.1, 803.0], [71.2, 805.0], [71.3, 806.0], [71.4, 808.0], [71.5, 810.0], [71.6, 811.0], [71.7, 813.0], [71.8, 815.0], [71.9, 816.0], [72.0, 818.0], [72.1, 820.0], [72.2, 821.0], [72.3, 823.0], [72.4, 825.0], [72.5, 827.0], [72.6, 828.0], [72.7, 830.0], [72.8, 832.0], [72.9, 833.0], [73.0, 835.0], [73.1, 837.0], [73.2, 838.0], [73.3, 840.0], [73.4, 842.0], [73.5, 843.0], [73.6, 845.0], [73.7, 847.0], [73.8, 849.0], [73.9, 850.0], [74.0, 852.0], [74.1, 854.0], [74.2, 855.0], [74.3, 857.0], [74.4, 859.0], [74.5, 861.0], [74.6, 863.0], [74.7, 864.0], [74.8, 866.0], [74.9, 868.0], [75.0, 870.0], [75.1, 872.0], [75.2, 874.0], [75.3, 875.0], [75.4, 877.0], [75.5, 878.0], [75.6, 880.0], [75.7, 883.0], [75.8, 884.0], [75.9, 886.0], [76.0, 888.0], [76.1, 890.0], [76.2, 892.0], [76.3, 894.0], [76.4, 895.0], [76.5, 897.0], [76.6, 899.0], [76.7, 900.0], [76.8, 902.0], [76.9, 904.0], [77.0, 907.0], [77.1, 908.0], [77.2, 910.0], [77.3, 912.0], [77.4, 914.0], [77.5, 916.0], [77.6, 918.0], [77.7, 920.0], [77.8, 921.0], [77.9, 923.0], [78.0, 925.0], [78.1, 928.0], [78.2, 929.0], [78.3, 931.0], [78.4, 933.0], [78.5, 935.0], [78.6, 937.0], [78.7, 939.0], [78.8, 941.0], [78.9, 943.0], [79.0, 945.0], [79.1, 947.0], [79.2, 949.0], [79.3, 951.0], [79.4, 953.0], [79.5, 955.0], [79.6, 957.0], [79.7, 959.0], [79.8, 961.0], [79.9, 963.0], [80.0, 965.0], [80.1, 967.0], [80.2, 969.0], [80.3, 971.0], [80.4, 973.0], [80.5, 975.0], [80.6, 977.0], [80.7, 979.0], [80.8, 982.0], [80.9, 983.0], [81.0, 986.0], [81.1, 988.0], [81.2, 989.0], [81.3, 991.0], [81.4, 993.0], [81.5, 996.0], [81.6, 998.0], [81.7, 1000.0], [81.8, 1003.0], [81.9, 1005.0], [82.0, 1007.0], [82.1, 1009.0], [82.2, 1011.0], [82.3, 1014.0], [82.4, 1016.0], [82.5, 1018.0], [82.6, 1021.0], [82.7, 1023.0], [82.8, 1025.0], [82.9, 1027.0], [83.0, 1030.0], [83.1, 1032.0], [83.2, 1035.0], [83.3, 1037.0], [83.4, 1039.0], [83.5, 1041.0], [83.6, 1044.0], [83.7, 1046.0], [83.8, 1048.0], [83.9, 1050.0], [84.0, 1053.0], [84.1, 1055.0], [84.2, 1057.0], [84.3, 1059.0], [84.4, 1062.0], [84.5, 1065.0], [84.6, 1068.0], [84.7, 1071.0], [84.8, 1073.0], [84.9, 1076.0], [85.0, 1078.0], [85.1, 1081.0], [85.2, 1083.0], [85.3, 1086.0], [85.4, 1089.0], [85.5, 1091.0], [85.6, 1094.0], [85.7, 1096.0], [85.8, 1099.0], [85.9, 1101.0], [86.0, 1104.0], [86.1, 1106.0], [86.2, 1109.0], [86.3, 1112.0], [86.4, 1114.0], [86.5, 1117.0], [86.6, 1120.0], [86.7, 1122.0], [86.8, 1125.0], [86.9, 1128.0], [87.0, 1130.0], [87.1, 1133.0], [87.2, 1136.0], [87.3, 1139.0], [87.4, 1141.0], [87.5, 1144.0], [87.6, 1148.0], [87.7, 1150.0], [87.8, 1153.0], [87.9, 1156.0], [88.0, 1159.0], [88.1, 1163.0], [88.2, 1166.0], [88.3, 1169.0], [88.4, 1172.0], [88.5, 1175.0], [88.6, 1178.0], [88.7, 1181.0], [88.8, 1184.0], [88.9, 1187.0], [89.0, 1190.0], [89.1, 1194.0], [89.2, 1198.0], [89.3, 1201.0], [89.4, 1204.0], [89.5, 1208.0], [89.6, 1211.0], [89.7, 1215.0], [89.8, 1219.0], [89.9, 1222.0], [90.0, 1227.0], [90.1, 1230.0], [90.2, 1234.0], [90.3, 1238.0], [90.4, 1241.0], [90.5, 1245.0], [90.6, 1249.0], [90.7, 1253.0], [90.8, 1256.0], [90.9, 1260.0], [91.0, 1264.0], [91.1, 1267.0], [91.2, 1271.0], [91.3, 1275.0], [91.4, 1278.0], [91.5, 1283.0], [91.6, 1287.0], [91.7, 1291.0], [91.8, 1296.0], [91.9, 1300.0], [92.0, 1305.0], [92.1, 1310.0], [92.2, 1314.0], [92.3, 1318.0], [92.4, 1323.0], [92.5, 1327.0], [92.6, 1332.0], [92.7, 1336.0], [92.8, 1340.0], [92.9, 1344.0], [93.0, 1348.0], [93.1, 1353.0], [93.2, 1358.0], [93.3, 1363.0], [93.4, 1368.0], [93.5, 1373.0], [93.6, 1378.0], [93.7, 1385.0], [93.8, 1390.0], [93.9, 1395.0], [94.0, 1400.0], [94.1, 1406.0], [94.2, 1412.0], [94.3, 1417.0], [94.4, 1423.0], [94.5, 1428.0], [94.6, 1434.0], [94.7, 1441.0], [94.8, 1448.0], [94.9, 1453.0], [95.0, 1460.0], [95.1, 1466.0], [95.2, 1472.0], [95.3, 1478.0], [95.4, 1485.0], [95.5, 1493.0], [95.6, 1501.0], [95.7, 1507.0], [95.8, 1514.0], [95.9, 1523.0], [96.0, 1530.0], [96.1, 1538.0], [96.2, 1546.0], [96.3, 1556.0], [96.4, 1564.0], [96.5, 1571.0], [96.6, 1579.0], [96.7, 1589.0], [96.8, 1599.0], [96.9, 1608.0], [97.0, 1617.0], [97.1, 1626.0], [97.2, 1636.0], [97.3, 1647.0], [97.4, 1658.0], [97.5, 1669.0], [97.6, 1680.0], [97.7, 1691.0], [97.8, 1702.0], [97.9, 1716.0], [98.0, 1730.0], [98.1, 1746.0], [98.2, 1760.0], [98.3, 1776.0], [98.4, 1792.0], [98.5, 1809.0], [98.6, 1829.0], [98.7, 1847.0], [98.8, 1872.0], [98.9, 1893.0], [99.0, 1918.0], [99.1, 1941.0], [99.2, 1972.0], [99.3, 2003.0], [99.4, 2044.0], [99.5, 2089.0], [99.6, 2139.0], [99.7, 2206.0], [99.8, 2296.0], [99.9, 2431.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 23970.0, "series": [{"data": [[0.0, 19692.0], [600.0, 7381.0], [700.0, 7320.0], [800.0, 6735.0], [900.0, 5886.0], [1000.0, 4875.0], [1100.0, 4021.0], [1200.0, 3090.0], [1300.0, 2448.0], [1400.0, 1873.0], [1500.0, 1434.0], [100.0, 23970.0], [1600.0, 1140.0], [1700.0, 784.0], [1800.0, 572.0], [1900.0, 412.0], [2000.0, 284.0], [2100.0, 192.0], [2200.0, 132.0], [2300.0, 95.0], [2400.0, 52.0], [2500.0, 31.0], [2600.0, 23.0], [2800.0, 12.0], [2700.0, 11.0], [2900.0, 5.0], [3000.0, 1.0], [200.0, 7075.0], [300.0, 4842.0], [400.0, 5940.0], [500.0, 6872.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5160.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 61579.0, "series": [{"data": [[0.0, 61579.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 50461.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5160.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.4814814814814812, "minX": 1.72840722E12, "maxY": 16.0, "series": [{"data": [[1.72841166E12, 12.0], [1.72841196E12, 12.0], [1.72841226E12, 12.0], [1.72841256E12, 12.0], [1.72841124E12, 12.0], [1.72841094E12, 10.958333333333334], [1.72841184E12, 12.0], [1.72841154E12, 12.0], [1.72841148E12, 12.0], [1.72841118E12, 12.0], [1.72841178E12, 12.0], [1.72841208E12, 12.0], [1.72841238E12, 12.0], [1.72841268E12, 10.792863359442984], [1.72841136E12, 12.0], [1.72841106E12, 12.0], [1.728411E12, 12.0], [1.72841262E12, 12.0], [1.7284116E12, 12.0], [1.7284113E12, 12.0], [1.7284119E12, 12.0], [1.7284122E12, 12.0], [1.7284125E12, 12.0], [1.72841214E12, 12.0], [1.72841244E12, 12.0], [1.72841112E12, 12.0], [1.72841274E12, 4.273109243697478], [1.72841172E12, 12.0], [1.72841142E12, 12.0], [1.72841202E12, 12.0], [1.72841232E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72840728E12, 2.0], [1.72840746E12, 1.961089494163424], [1.72840734E12, 2.0], [1.72840722E12, 2.0], [1.7284074E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72840842E12, 4.0], [1.72840872E12, 4.0], [1.72840782E12, 4.0], [1.72840812E12, 4.0], [1.7284077E12, 4.0], [1.728408E12, 4.0], [1.72840902E12, 4.0], [1.72840794E12, 4.0], [1.72840824E12, 4.0], [1.72840764E12, 4.0], [1.72840752E12, 4.0], [1.72840914E12, 1.4814814814814812], [1.72840854E12, 4.0], [1.72840884E12, 4.0], [1.72840746E12, 3.969387755102041], [1.72840776E12, 4.0], [1.72840878E12, 4.0], [1.72840908E12, 3.6285714285714286], [1.72840866E12, 4.0], [1.72840896E12, 4.0], [1.72840806E12, 4.0], [1.72840836E12, 4.0], [1.7284089E12, 4.0], [1.7284083E12, 4.0], [1.7284086E12, 4.0], [1.72840818E12, 4.0], [1.72840848E12, 4.0], [1.72840758E12, 4.0], [1.72840788E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72841358E12, 16.0], [1.72841388E12, 16.0], [1.72841286E12, 16.0], [1.72841316E12, 16.0], [1.72841418E12, 3.2756410256410247], [1.72841346E12, 16.0], [1.72841376E12, 16.0], [1.7284131E12, 16.0], [1.7284134E12, 16.0], [1.7284137E12, 16.0], [1.728414E12, 16.0], [1.72841298E12, 16.0], [1.72841328E12, 16.0], [1.72841292E12, 16.0], [1.72841322E12, 16.0], [1.72841412E12, 14.184848484848485], [1.72841352E12, 16.0], [1.72841382E12, 16.0], [1.7284128E12, 16.0], [1.72841274E12, 15.932668329177064], [1.72841304E12, 16.0], [1.72841334E12, 16.0], [1.72841364E12, 16.0], [1.72841394E12, 16.0], [1.72841406E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.72841004E12, 8.0], [1.72840974E12, 8.0], [1.72841064E12, 8.0], [1.72841034E12, 8.0], [1.72840962E12, 8.0], [1.72841094E12, 5.856725146198832], [1.72840992E12, 8.0], [1.72840932E12, 8.0], [1.72840926E12, 8.0], [1.72841016E12, 8.0], [1.72840956E12, 8.0], [1.72840986E12, 8.0], [1.72840914E12, 7.987684729064035], [1.72841076E12, 8.0], [1.72840944E12, 8.0], [1.72841046E12, 8.0], [1.72840938E12, 8.0], [1.72840968E12, 8.0], [1.7284107E12, 8.0], [1.72841028E12, 8.0], [1.72840998E12, 8.0], [1.72841088E12, 8.0], [1.72841058E12, 8.0], [1.72841052E12, 8.0], [1.7284092E12, 8.0], [1.72841022E12, 8.0], [1.72841082E12, 8.0], [1.7284098E12, 8.0], [1.7284095E12, 8.0], [1.7284104E12, 8.0], [1.7284101E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72841418E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 385.26373626373635, "minX": 1.0, "maxY": 854.0512820512822, "series": [{"data": [[2.0, 395.15629522431306], [8.0, 456.75734310290187], [9.0, 492.03773584905673], [10.0, 463.9064748201439], [11.0, 562.0708955223881], [3.0, 397.27699530516435], [12.0, 583.374004026423], [13.0, 610.4411764705883], [14.0, 854.0512820512822], [15.0, 528.7619047619046], [1.0, 432.30909090909097], [4.0, 406.09869121422975], [16.0, 707.972844772697], [5.0, 385.26373626373635], [6.0, 421.80377358490557], [7.0, 450.3728155339804]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.72471843003424, 554.7933020477848]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72840722E12, "maxY": 7.109715193333334E7, "series": [{"data": [[1.72841358E12, 7.022689596666667E7], [1.72840812E12, 2.9967244633333333E7], [1.72841034E12, 5.401288031666667E7], [1.72841256E12, 6.431181828333333E7], [1.72840932E12, 5.328568206666667E7], [1.72841154E12, 6.412257895E7], [1.72841376E12, 6.9636161E7], [1.72840794E12, 3.1550183066666666E7], [1.72841118E12, 6.3408384083333336E7], [1.7284134E12, 6.964151508333333E7], [1.72841016E12, 5.265643403333333E7], [1.72840914E12, 4.4884922983333334E7], [1.72841238E12, 6.31284381E7], [1.72841136E12, 6.370299905E7], [1.72840746E12, 1.6622191383333333E7], [1.72840968E12, 5.320843765E7], [1.72841292E12, 6.717058265E7], [1.7284107E12, 5.2182014266666666E7], [1.72841412E12, 6.2447688233333334E7], [1.72840866E12, 3.036465505E7], [1.7284119E12, 6.1855741733333334E7], [1.72841088E12, 5.441081685E7], [1.72840728E12, 1.60553967E7], [1.72841052E12, 5.31891309E7], [1.7284083E12, 2.9455031283333335E7], [1.72841274E12, 4.902507375E7], [1.72841172E12, 6.154696271666667E7], [1.72840848E12, 3.1648019283333335E7], [1.7284095E12, 5.354755543333333E7], [1.72841394E12, 6.89043518E7], [1.72840842E12, 3.02597553E7], [1.72841166E12, 6.452068753333333E7], [1.72841388E12, 6.97289417E7], [1.72841064E12, 5.462129645E7], [1.72840962E12, 5.20846122E7], [1.72841286E12, 7.037143076666667E7], [1.7284074E12, 1.5820456266666668E7], [1.72841184E12, 6.1051549483333334E7], [1.72841148E12, 5.990594885E7], [1.72840824E12, 3.014277765E7], [1.72840926E12, 5.356767543333333E7], [1.7284137E12, 6.939256198333333E7], [1.72840722E12, 1412952.2833333334], [1.72840944E12, 5.379204645E7], [1.72841046E12, 5.322675586666667E7], [1.72841268E12, 6.0224307016666666E7], [1.728411E12, 6.180737443333333E7], [1.72840776E12, 3.1368047033333335E7], [1.72840878E12, 3.0692396183333334E7], [1.72841322E12, 7.016023145E7], [1.72840896E12, 3.0762034966666665E7], [1.72840998E12, 5.304425085E7], [1.7284122E12, 6.01518449E7], [1.72841082E12, 5.421780228333333E7], [1.72841304E12, 7.109715193333334E7], [1.7284086E12, 2.998042835E7], [1.7284098E12, 5.4070853166666664E7], [1.72841202E12, 6.4111694266666666E7], [1.72840758E12, 3.05481666E7], [1.72841406E12, 6.799224223333333E7], [1.72840872E12, 3.0758107183333334E7], [1.72841196E12, 6.317621711666667E7], [1.72840974E12, 5.36560823E7], [1.7284077E12, 2.9854957783333335E7], [1.72841094E12, 3.7399422833333336E7], [1.72841316E12, 6.820879331666666E7], [1.72841418E12, 8622425.783333333], [1.72840992E12, 5.37781448E7], [1.72840734E12, 1.50349509E7], [1.72840956E12, 5.177465395E7], [1.72841178E12, 6.2166858E7], [1.72840752E12, 2.917030935E7], [1.72841076E12, 5.353487813333333E7], [1.728414E12, 7.046128343333334E7], [1.72841298E12, 6.774621731666666E7], [1.72840854E12, 2.9540415683333334E7], [1.72840908E12, 2.552393225E7], [1.7284113E12, 6.390391221666667E7], [1.72841352E12, 6.90278757E7], [1.72841028E12, 5.4744697666666664E7], [1.72840806E12, 3.1380069966666665E7], [1.7284125E12, 6.136181978333333E7], [1.7284089E12, 2.918132365E7], [1.72841214E12, 6.474477381666667E7], [1.72841112E12, 6.260383661666667E7], [1.72841334E12, 6.961971841666667E7], [1.72840788E12, 3.0556941733333334E7], [1.7284101E12, 5.3864031733333334E7], [1.72841232E12, 6.255631413333333E7], [1.72841004E12, 5.313934785E7], [1.72840782E12, 3.027914035E7], [1.72841226E12, 6.14542981E7], [1.72841124E12, 6.298239688333333E7], [1.728408E12, 2.9738117266666666E7], [1.72840902E12, 2.898143425E7], [1.72841346E12, 6.75597206E7], [1.7284131E12, 6.934798813333334E7], [1.72840764E12, 2.99312359E7], [1.72840986E12, 5.28380494E7], [1.72841208E12, 6.165952005E7], [1.72840884E12, 3.0685145016666666E7], [1.72841106E12, 6.07314431E7], [1.72841328E12, 6.894268133333333E7], [1.72840938E12, 5.2533667833333336E7], [1.72841262E12, 6.263852003333333E7], [1.7284116E12, 6.2487211666666664E7], [1.72841382E12, 6.724890968333334E7], [1.72840836E12, 2.892861655E7], [1.72841058E12, 5.48715583E7], [1.7284128E12, 6.747765913333334E7], [1.7284092E12, 5.06046459E7], [1.72841022E12, 5.152537795E7], [1.72841244E12, 6.314230281666667E7], [1.72840818E12, 3.0525359266666666E7], [1.72841142E12, 6.351871356666667E7], [1.72841364E12, 7.034785685E7], [1.7284104E12, 5.1225399666666664E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72841358E12, 0.0], [1.72840812E12, 0.0], [1.72841034E12, 0.0], [1.72841256E12, 0.0], [1.72840932E12, 0.0], [1.72841154E12, 0.0], [1.72841376E12, 0.0], [1.72840794E12, 0.0], [1.72841118E12, 0.0], [1.7284134E12, 0.0], [1.72841016E12, 0.0], [1.72840914E12, 0.0], [1.72841238E12, 0.0], [1.72841136E12, 0.0], [1.72840746E12, 0.0], [1.72840968E12, 0.0], [1.72841292E12, 0.0], [1.7284107E12, 0.0], [1.72841412E12, 0.0], [1.72840866E12, 0.0], [1.7284119E12, 0.0], [1.72841088E12, 0.0], [1.72840728E12, 0.0], [1.72841052E12, 0.0], [1.7284083E12, 0.0], [1.72841274E12, 0.0], [1.72841172E12, 0.0], [1.72840848E12, 0.0], [1.7284095E12, 0.0], [1.72841394E12, 0.0], [1.72840842E12, 0.0], [1.72841166E12, 0.0], [1.72841388E12, 0.0], [1.72841064E12, 0.0], [1.72840962E12, 0.0], [1.72841286E12, 0.0], [1.7284074E12, 0.0], [1.72841184E12, 0.0], [1.72841148E12, 0.0], [1.72840824E12, 0.0], [1.72840926E12, 0.0], [1.7284137E12, 0.0], [1.72840722E12, 0.0], [1.72840944E12, 0.0], [1.72841046E12, 0.0], [1.72841268E12, 0.0], [1.728411E12, 0.0], [1.72840776E12, 0.0], [1.72840878E12, 0.0], [1.72841322E12, 0.0], [1.72840896E12, 0.0], [1.72840998E12, 0.0], [1.7284122E12, 0.0], [1.72841082E12, 0.0], [1.72841304E12, 0.0], [1.7284086E12, 0.0], [1.7284098E12, 0.0], [1.72841202E12, 0.0], [1.72840758E12, 0.0], [1.72841406E12, 0.0], [1.72840872E12, 0.0], [1.72841196E12, 0.0], [1.72840974E12, 0.0], [1.7284077E12, 0.0], [1.72841094E12, 0.0], [1.72841316E12, 0.0], [1.72841418E12, 0.0], [1.72840992E12, 0.0], [1.72840734E12, 0.0], [1.72840956E12, 0.0], [1.72841178E12, 0.0], [1.72840752E12, 0.0], [1.72841076E12, 0.0], [1.728414E12, 0.0], [1.72841298E12, 0.0], [1.72840854E12, 0.0], [1.72840908E12, 0.0], [1.7284113E12, 0.0], [1.72841352E12, 0.0], [1.72841028E12, 0.0], [1.72840806E12, 0.0], [1.7284125E12, 0.0], [1.7284089E12, 0.0], [1.72841214E12, 0.0], [1.72841112E12, 0.0], [1.72841334E12, 0.0], [1.72840788E12, 0.0], [1.7284101E12, 0.0], [1.72841232E12, 0.0], [1.72841004E12, 0.0], [1.72840782E12, 0.0], [1.72841226E12, 0.0], [1.72841124E12, 0.0], [1.728408E12, 0.0], [1.72840902E12, 0.0], [1.72841346E12, 0.0], [1.7284131E12, 0.0], [1.72840764E12, 0.0], [1.72840986E12, 0.0], [1.72841208E12, 0.0], [1.72840884E12, 0.0], [1.72841106E12, 0.0], [1.72841328E12, 0.0], [1.72840938E12, 0.0], [1.72841262E12, 0.0], [1.7284116E12, 0.0], [1.72841382E12, 0.0], [1.72840836E12, 0.0], [1.72841058E12, 0.0], [1.7284128E12, 0.0], [1.7284092E12, 0.0], [1.72841022E12, 0.0], [1.72841244E12, 0.0], [1.72840818E12, 0.0], [1.72841142E12, 0.0], [1.72841364E12, 0.0], [1.7284104E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72841418E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 367.8619631901842, "minX": 1.72840722E12, "maxY": 749.0929687500002, "series": [{"data": [[1.72841358E12, 713.3310961968689], [1.72840812E12, 414.94664371772814], [1.72841034E12, 443.7886029411761], [1.72841256E12, 595.0099091659786], [1.72840932E12, 451.0567644276252], [1.72841154E12, 581.3472668810302], [1.72841376E12, 720.171921921922], [1.72840794E12, 446.0204460966542], [1.72841118E12, 609.3189143341817], [1.7284134E12, 684.4273504273513], [1.72841016E12, 444.0268022181147], [1.72840914E12, 483.97020262216967], [1.72841238E12, 590.8238683127581], [1.72841136E12, 591.8820638820644], [1.72840746E12, 379.86760563380284], [1.72840968E12, 472.3405511811025], [1.72841292E12, 675.0007007708463], [1.7284107E12, 458.7438095238096], [1.72841412E12, 625.4234848484857], [1.72840866E12, 389.3816425120775], [1.7284119E12, 586.1596091205217], [1.72841088E12, 467.04859086491757], [1.72840728E12, 386.59424920127805], [1.72841052E12, 460.6545105566222], [1.7284083E12, 382.11483253588494], [1.72841274E12, 596.7230769230774], [1.72841172E12, 604.5943000838228], [1.72840848E12, 410.3842195540309], [1.7284095E12, 450.9427767354596], [1.72841394E12, 693.814440433215], [1.72840842E12, 401.34280936454826], [1.72841166E12, 579.1441223832531], [1.72841388E12, 706.661029411765], [1.72841064E12, 462.796314258002], [1.72840962E12, 448.1046728971964], [1.72841286E12, 707.6779661016946], [1.7284074E12, 405.13945578231306], [1.72841184E12, 578.5008064516138], [1.72841148E12, 566.5402843601894], [1.72840824E12, 403.10101010101], [1.72840926E12, 462.17437379576086], [1.7284137E12, 702.2527392257124], [1.72840722E12, 689.3809523809523], [1.72840944E12, 461.86859903381725], [1.72841046E12, 457.4600760456279], [1.72841268E12, 559.1566579634467], [1.728411E12, 568.5268562401274], [1.72840776E12, 413.9723183391004], [1.72840878E12, 424.5883392226148], [1.72841322E12, 699.9534883720936], [1.72840896E12, 413.6075731497416], [1.72840998E12, 469.1849315068496], [1.7284122E12, 583.0551500405511], [1.72841082E12, 462.2171814671816], [1.72841304E12, 732.7673003802273], [1.7284086E12, 396.71404958677704], [1.7284098E12, 466.79457364341073], [1.72841202E12, 577.7865707434054], [1.72840758E12, 407.77040816326485], [1.72841406E12, 724.4924585218698], [1.72840872E12, 407.6837606837608], [1.72841196E12, 571.5039808917188], [1.72840974E12, 456.6634890371774], [1.7284077E12, 424.57624113475146], [1.72841094E12, 431.08060109289653], [1.72841316E12, 717.787584143605], [1.72841418E12, 418.0641025641024], [1.72840992E12, 445.2680890538031], [1.72840734E12, 380.8761904761905], [1.72840956E12, 443.5907834101385], [1.72841178E12, 573.0866454689973], [1.72840752E12, 397.3640856672159], [1.72841076E12, 456.53136882129263], [1.728414E12, 737.7913779830649], [1.72841298E12, 696.2432629278935], [1.72840854E12, 398.55574043261214], [1.72840908E12, 397.6514285714288], [1.7284113E12, 626.7919930374236], [1.72841352E12, 728.7765151515162], [1.72841028E12, 459.9423076923072], [1.72840806E12, 405.6553480475376], [1.7284125E12, 550.3633587786259], [1.7284089E12, 420.45964912280715], [1.72841214E12, 559.0633693972175], [1.72841112E12, 585.3349593495933], [1.72841334E12, 721.8357196684262], [1.72840788E12, 417.2660869565215], [1.7284101E12, 467.10398445092324], [1.72841232E12, 600.5437864887402], [1.72841004E12, 462.65990338164283], [1.72840782E12, 394.49180327868896], [1.72841226E12, 571.2087301587293], [1.72841124E12, 586.026872964168], [1.728408E12, 419.8513986013986], [1.72840902E12, 367.8619631901842], [1.72841346E12, 690.9230215827342], [1.7284131E12, 712.8732289336322], [1.72840764E12, 401.36227045075134], [1.72840986E12, 436.9416058394159], [1.72841208E12, 585.7859477124182], [1.72840884E12, 410.1825938566554], [1.72841106E12, 573.5673306772912], [1.72841328E12, 717.3807030665672], [1.72840938E12, 455.3043478260869], [1.72841262E12, 594.2886683209271], [1.7284116E12, 586.4115729421359], [1.72841382E12, 690.4219985621861], [1.72840836E12, 400.6166666666665], [1.72841058E12, 467.95126705653024], [1.7284128E12, 716.952059925093], [1.7284092E12, 452.7714016933203], [1.72841022E12, 453.9573459715637], [1.72841244E12, 578.3432237369686], [1.72840818E12, 413.3189655172415], [1.72841142E12, 583.70569105691], [1.72841364E12, 749.0929687500002], [1.7284104E12, 437.6483516483517]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72841418E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 241.1932515337423, "minX": 1.72840722E12, "maxY": 505.5374999999996, "series": [{"data": [[1.72841358E12, 479.26696495152885], [1.72840812E12, 271.74698795180734], [1.72841034E12, 293.2150735294119], [1.72841256E12, 396.33938893476477], [1.72840932E12, 296.4011352885522], [1.72841154E12, 389.0225080385859], [1.72841376E12, 483.98123123123156], [1.72840794E12, 288.5724907063195], [1.72841118E12, 409.2111959287533], [1.7284134E12, 460.56552706552725], [1.72841016E12, 295.70887245841044], [1.72840914E12, 322.34088200238347], [1.72841238E12, 396.28148148148136], [1.72841136E12, 396.03112203112136], [1.72840746E12, 249.37746478873214], [1.72840968E12, 315.1801181102364], [1.72841292E12, 457.1681850035038], [1.7284107E12, 307.98380952380944], [1.72841412E12, 422.5121212121214], [1.72840866E12, 254.0708534621578], [1.7284119E12, 396.10097719869697], [1.72841088E12, 309.41010689990253], [1.72840728E12, 250.46325878594234], [1.72841052E12, 305.0278310940497], [1.7284083E12, 249.73684210526326], [1.72841274E12, 403.950961538461], [1.72841172E12, 407.26906957250606], [1.72840848E12, 264.67924528301876], [1.7284095E12, 298.7326454033769], [1.72841394E12, 469.062093862816], [1.72840842E12, 262.41137123745824], [1.72841166E12, 385.2334943639293], [1.72841388E12, 477.72279411764737], [1.72841064E12, 304.76236663433605], [1.72840962E12, 299.7710280373826], [1.72841286E12, 474.6396462785555], [1.7284074E12, 263.904761904762], [1.72841184E12, 388.9629032258061], [1.72841148E12, 383.5616113744078], [1.72840824E12, 261.4562289562291], [1.72840926E12, 306.12235067437354], [1.7284137E12, 474.0591672753836], [1.72840722E12, 504.85714285714283], [1.72840944E12, 304.2637681159418], [1.72841046E12, 304.73574144486673], [1.72841268E12, 373.05918189730176], [1.728411E12, 377.7606635071094], [1.72840776E12, 267.652249134948], [1.72840878E12, 276.26325088339206], [1.72841322E12, 471.4665697674418], [1.72840896E12, 267.7573149741822], [1.72840998E12, 312.2544031311156], [1.7284122E12, 393.2116788321165], [1.72841082E12, 304.66602316602297], [1.72841304E12, 490.80988593155865], [1.7284086E12, 259.59008264462807], [1.7284098E12, 309.1812015503876], [1.72841202E12, 385.44524380495653], [1.72840758E12, 266.77551020408185], [1.72841406E12, 492.3808446455509], [1.72840872E12, 264.0341880341885], [1.72841196E12, 381.1974522292993], [1.72840974E12, 302.65967588179177], [1.7284077E12, 279.52659574468123], [1.72841094E12, 281.403005464481], [1.72841316E12, 486.961106955871], [1.72841418E12, 269.28205128205116], [1.72840992E12, 293.882189239332], [1.72840734E12, 248.37142857142865], [1.72840956E12, 296.9797235023037], [1.72841178E12, 384.5532591414943], [1.72840752E12, 261.8632619439869], [1.72841076E12, 302.23288973384103], [1.728414E12, 495.9999999999995], [1.72841298E12, 472.6511289147858], [1.72840854E12, 262.35773710482556], [1.72840908E12, 261.7504761904762], [1.7284113E12, 419.49608355091385], [1.72841352E12, 494.7522727272733], [1.72841028E12, 302.94615384615423], [1.72840806E12, 261.15619694397304], [1.7284125E12, 369.11221374045846], [1.7284089E12, 278.0666666666668], [1.72841214E12, 370.5548686244205], [1.72841112E12, 391.6821138211381], [1.72841334E12, 485.49359457422787], [1.72840788E12, 271.8121739130433], [1.7284101E12, 309.2400388726922], [1.72841232E12, 403.09924937447863], [1.72841004E12, 308.63285024154527], [1.72840782E12, 257.74426229508214], [1.72841226E12, 384.819047619048], [1.72841124E12, 391.2752442996742], [1.728408E12, 275.29195804195837], [1.72840902E12, 241.1932515337423], [1.72841346E12, 468.62949640287843], [1.7284131E12, 480.612975391499], [1.72840764E12, 263.5642737896493], [1.72840986E12, 290.0301094890512], [1.72841208E12, 394.42320261437897], [1.72840884E12, 266.63481228668934], [1.72841106E12, 386.70438247012004], [1.72841328E12, 486.07554225878863], [1.72840938E12, 304.52551984877175], [1.72841262E12, 400.91397849462317], [1.7284116E12, 393.0619396903018], [1.72841382E12, 469.06182602444267], [1.72840836E12, 264.8650000000003], [1.72841058E12, 308.14619883040984], [1.7284128E12, 485.09438202247225], [1.7284092E12, 303.9153339604896], [1.72841022E12, 303.1981042654024], [1.72841244E12, 387.97754611066574], [1.72840818E12, 269.2327586206894], [1.72841142E12, 388.48861788617904], [1.72841364E12, 505.5374999999996], [1.7284104E12, 291.8690476190475]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72841418E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72840722E12, "maxY": 4.9E-324, "series": [{"data": [[1.72841358E12, 0.0], [1.72840812E12, 0.0], [1.72841034E12, 0.0], [1.72841256E12, 0.0], [1.72840932E12, 0.0], [1.72841154E12, 0.0], [1.72841376E12, 0.0], [1.72840794E12, 0.0], [1.72841118E12, 0.0], [1.7284134E12, 0.0], [1.72841016E12, 0.0], [1.72840914E12, 0.0], [1.72841238E12, 0.0], [1.72841136E12, 0.0], [1.72840746E12, 0.0], [1.72840968E12, 0.0], [1.72841292E12, 0.0], [1.7284107E12, 0.0], [1.72841412E12, 0.0], [1.72840866E12, 0.0], [1.7284119E12, 0.0], [1.72841088E12, 0.0], [1.72840728E12, 0.0], [1.72841052E12, 0.0], [1.7284083E12, 0.0], [1.72841274E12, 0.0], [1.72841172E12, 0.0], [1.72840848E12, 0.0], [1.7284095E12, 0.0], [1.72841394E12, 0.0], [1.72840842E12, 0.0], [1.72841166E12, 0.0], [1.72841388E12, 0.0], [1.72841064E12, 0.0], [1.72840962E12, 0.0], [1.72841286E12, 0.0], [1.7284074E12, 0.0], [1.72841184E12, 0.0], [1.72841148E12, 0.0], [1.72840824E12, 0.0], [1.72840926E12, 0.0], [1.7284137E12, 0.0], [1.72840722E12, 0.0], [1.72840944E12, 0.0], [1.72841046E12, 0.0], [1.72841268E12, 0.0], [1.728411E12, 0.0], [1.72840776E12, 0.0], [1.72840878E12, 0.0], [1.72841322E12, 0.0], [1.72840896E12, 0.0], [1.72840998E12, 0.0], [1.7284122E12, 0.0], [1.72841082E12, 0.0], [1.72841304E12, 0.0], [1.7284086E12, 0.0], [1.7284098E12, 0.0], [1.72841202E12, 0.0], [1.72840758E12, 0.0], [1.72841406E12, 0.0], [1.72840872E12, 0.0], [1.72841196E12, 0.0], [1.72840974E12, 0.0], [1.7284077E12, 0.0], [1.72841094E12, 0.0], [1.72841316E12, 0.0], [1.72841418E12, 0.0], [1.72840992E12, 0.0], [1.72840734E12, 0.0], [1.72840956E12, 0.0], [1.72841178E12, 0.0], [1.72840752E12, 0.0], [1.72841076E12, 0.0], [1.728414E12, 0.0], [1.72841298E12, 0.0], [1.72840854E12, 0.0], [1.72840908E12, 0.0], [1.7284113E12, 0.0], [1.72841352E12, 0.0], [1.72841028E12, 0.0], [1.72840806E12, 0.0], [1.7284125E12, 0.0], [1.7284089E12, 0.0], [1.72841214E12, 0.0], [1.72841112E12, 0.0], [1.72841334E12, 0.0], [1.72840788E12, 0.0], [1.7284101E12, 0.0], [1.72841232E12, 0.0], [1.72841004E12, 0.0], [1.72840782E12, 0.0], [1.72841226E12, 0.0], [1.72841124E12, 0.0], [1.728408E12, 0.0], [1.72840902E12, 0.0], [1.72841346E12, 0.0], [1.7284131E12, 0.0], [1.72840764E12, 0.0], [1.72840986E12, 0.0], [1.72841208E12, 0.0], [1.72840884E12, 0.0], [1.72841106E12, 0.0], [1.72841328E12, 0.0], [1.72840938E12, 0.0], [1.72841262E12, 0.0], [1.7284116E12, 0.0], [1.72841382E12, 0.0], [1.72840836E12, 0.0], [1.72841058E12, 0.0], [1.7284128E12, 0.0], [1.7284092E12, 0.0], [1.72841022E12, 0.0], [1.72841244E12, 0.0], [1.72840818E12, 0.0], [1.72841142E12, 0.0], [1.72841364E12, 0.0], [1.7284104E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72841418E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.72840722E12, "maxY": 3024.0, "series": [{"data": [[1.72841358E12, 2863.0], [1.72840812E12, 1767.0], [1.72841034E12, 1682.0], [1.72841256E12, 2419.0], [1.72840932E12, 1745.0], [1.72841154E12, 2289.0], [1.72841376E12, 2950.0], [1.72840794E12, 1631.0], [1.72841118E12, 2386.0], [1.7284134E12, 3024.0], [1.72841016E12, 1808.0], [1.72840914E12, 1797.0], [1.72841238E12, 2237.0], [1.72841136E12, 2469.0], [1.72840746E12, 1413.0], [1.72840968E12, 1666.0], [1.72841292E12, 2778.0], [1.7284107E12, 1815.0], [1.72841412E12, 2796.0], [1.72840866E12, 1447.0], [1.7284119E12, 2437.0], [1.72841088E12, 1791.0], [1.72840728E12, 1462.0], [1.72841052E12, 1668.0], [1.7284083E12, 1618.0], [1.72841274E12, 2751.0], [1.72841172E12, 2582.0], [1.72840848E12, 1458.0], [1.7284095E12, 1779.0], [1.72841394E12, 2521.0], [1.72840842E12, 1703.0], [1.72841166E12, 2858.0], [1.72841388E12, 2956.0], [1.72841064E12, 1855.0], [1.72840962E12, 1645.0], [1.72841286E12, 2649.0], [1.7284074E12, 1340.0], [1.72841184E12, 2268.0], [1.72841148E12, 2130.0], [1.72840824E12, 1606.0], [1.72840926E12, 1811.0], [1.7284137E12, 2892.0], [1.72840722E12, 1753.0], [1.72840944E12, 1955.0], [1.72841046E12, 1655.0], [1.72841268E12, 2207.0], [1.728411E12, 2323.0], [1.72840776E12, 1761.0], [1.72840878E12, 1557.0], [1.72841322E12, 2962.0], [1.72840896E12, 1563.0], [1.72840998E12, 1868.0], [1.7284122E12, 2728.0], [1.72841082E12, 1645.0], [1.72841304E12, 2715.0], [1.7284086E12, 1416.0], [1.7284098E12, 1843.0], [1.72841202E12, 2201.0], [1.72840758E12, 1521.0], [1.72841406E12, 2888.0], [1.72840872E12, 1657.0], [1.72841196E12, 2270.0], [1.72840974E12, 1760.0], [1.7284077E12, 1521.0], [1.72841094E12, 1688.0], [1.72841316E12, 2894.0], [1.72841418E12, 1224.0], [1.72840992E12, 1805.0], [1.72840734E12, 1587.0], [1.72840956E12, 1938.0], [1.72841178E12, 2164.0], [1.72840752E12, 1445.0], [1.72841076E12, 1937.0], [1.728414E12, 2899.0], [1.72841298E12, 2779.0], [1.72840854E12, 1479.0], [1.72840908E12, 1385.0], [1.7284113E12, 2216.0], [1.72841352E12, 2510.0], [1.72841028E12, 1696.0], [1.72840806E12, 1713.0], [1.7284125E12, 1971.0], [1.7284089E12, 1693.0], [1.72841214E12, 2343.0], [1.72841112E12, 2144.0], [1.72841334E12, 2902.0], [1.72840788E12, 1419.0], [1.7284101E12, 1777.0], [1.72841232E12, 2066.0], [1.72841004E12, 1765.0], [1.72840782E12, 1550.0], [1.72841226E12, 2670.0], [1.72841124E12, 2234.0], [1.728408E12, 1427.0], [1.72840902E12, 1606.0], [1.72841346E12, 2474.0], [1.7284131E12, 2990.0], [1.72840764E12, 1439.0], [1.72840986E12, 1747.0], [1.72841208E12, 2210.0], [1.72840884E12, 1558.0], [1.72841106E12, 2554.0], [1.72841328E12, 2674.0], [1.72840938E12, 1622.0], [1.72841262E12, 2464.0], [1.7284116E12, 2172.0], [1.72841382E12, 2686.0], [1.72840836E12, 1405.0], [1.72841058E12, 1886.0], [1.7284128E12, 2690.0], [1.7284092E12, 1873.0], [1.72841022E12, 1702.0], [1.72841244E12, 2380.0], [1.72840818E12, 1650.0], [1.72841142E12, 2572.0], [1.72841364E12, 2733.0], [1.7284104E12, 1792.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72841358E12, 1524.3999999999999], [1.72840812E12, 893.4000000000002], [1.72841034E12, 950.2], [1.72841256E12, 1258.0], [1.72840932E12, 986.0], [1.72841154E12, 1280.5], [1.72841376E12, 1517.7], [1.72840794E12, 909.1], [1.72841118E12, 1269.0], [1.7284134E12, 1534.0], [1.72841016E12, 953.0], [1.72840914E12, 1022.0], [1.72841238E12, 1264.4], [1.72841136E12, 1288.0], [1.72840746E12, 838.0000000000005], [1.72840968E12, 972.2000000000003], [1.72841292E12, 1465.4], [1.7284107E12, 961.0], [1.72841412E12, 1371.9], [1.72840866E12, 857.8000000000001], [1.7284119E12, 1260.4000000000005], [1.72841088E12, 989.0], [1.72840728E12, 828.2000000000003], [1.72841052E12, 975.4000000000001], [1.7284083E12, 851.6000000000001], [1.72841274E12, 1309.6], [1.72841172E12, 1295.2000000000003], [1.72840848E12, 912.8000000000001], [1.7284095E12, 972.3000000000001], [1.72841394E12, 1505.4], [1.72840842E12, 891.4000000000001], [1.72841166E12, 1273.4000000000005], [1.72841388E12, 1524.5000000000005], [1.72841064E12, 988.8000000000001], [1.72840962E12, 955.0], [1.72841286E12, 1519.0000000000002], [1.7284074E12, 883.0], [1.72841184E12, 1289.7000000000003], [1.72841148E12, 1243.0999999999997], [1.72840824E12, 875.0], [1.72840926E12, 1003.6000000000001], [1.7284137E12, 1522.0], [1.72840722E12, 1520.6000000000001], [1.72840944E12, 1023.1999999999998], [1.72841046E12, 985.4000000000001], [1.72841268E12, 1229.0], [1.728411E12, 1270.1999999999998], [1.72840776E12, 875.2], [1.72840878E12, 911.3], [1.72841322E12, 1498.6], [1.72840896E12, 889.8000000000001], [1.72840998E12, 984.2000000000003], [1.7284122E12, 1219.2000000000003], [1.72841082E12, 977.3000000000001], [1.72841304E12, 1537.000000000001], [1.7284086E12, 856.4], [1.7284098E12, 1008.7], [1.72841202E12, 1269.7999999999997], [1.72840758E12, 895.1], [1.72841406E12, 1520.4999999999998], [1.72840872E12, 863.7999999999996], [1.72841196E12, 1272.3], [1.72840974E12, 945.0], [1.7284077E12, 852.0], [1.72841094E12, 949.0], [1.72841316E12, 1515.4], [1.72841418E12, 923.6000000000001], [1.72840992E12, 947.0], [1.72840734E12, 868.2000000000003], [1.72840956E12, 943.4], [1.72841178E12, 1235.5000000000007], [1.72840752E12, 862.8000000000002], [1.72841076E12, 992.4000000000001], [1.728414E12, 1572.0], [1.72841298E12, 1482.8000000000004], [1.72840854E12, 863.8000000000001], [1.72840908E12, 847.4000000000001], [1.7284113E12, 1336.0], [1.72841352E12, 1510.8000000000002], [1.72841028E12, 1000.0], [1.72840806E12, 890.0], [1.7284125E12, 1209.4000000000005], [1.7284089E12, 867.3999999999999], [1.72841214E12, 1263.0], [1.72841112E12, 1277.7000000000003], [1.72841334E12, 1547.0], [1.72840788E12, 929.9999999999999], [1.7284101E12, 993.0], [1.72841232E12, 1270.0], [1.72841004E12, 967.8], [1.72840782E12, 863.8], [1.72841226E12, 1238.9], [1.72841124E12, 1300.4000000000005], [1.728408E12, 927.7], [1.72840902E12, 833.4000000000001], [1.72841346E12, 1511.3000000000006], [1.7284131E12, 1540.8], [1.72840764E12, 897.0], [1.72840986E12, 947.0], [1.72841208E12, 1264.0], [1.72840884E12, 900.3000000000008], [1.72841106E12, 1273.6000000000004], [1.72841328E12, 1483.0000000000005], [1.72840938E12, 971.1], [1.72841262E12, 1244.0], [1.7284116E12, 1277.0000000000002], [1.72841382E12, 1521.0], [1.72840836E12, 878.0], [1.72841058E12, 1003.1000000000005], [1.7284128E12, 1535.8000000000002], [1.7284092E12, 977.4000000000001], [1.72841022E12, 993.4], [1.72841244E12, 1260.6000000000001], [1.72840818E12, 851.8], [1.72841142E12, 1276.6000000000004], [1.72841364E12, 1575.8000000000002], [1.7284104E12, 965.4000000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72841358E12, 2193.6399999999994], [1.72840812E12, 1392.3799999999978], [1.72841034E12, 1441.0], [1.72841256E12, 1974.4399999999985], [1.72840932E12, 1354.2000000000007], [1.72841154E12, 1813.1], [1.72841376E12, 2294.1100000000024], [1.72840794E12, 1230.0500000000002], [1.72841118E12, 1900.2000000000007], [1.7284134E12, 2244.4500000000007], [1.72841016E12, 1441.17], [1.72840914E12, 1525.600000000001], [1.72841238E12, 1906.0399999999975], [1.72841136E12, 1906.0599999999993], [1.72840746E12, 1204.88], [1.72840968E12, 1402.8100000000004], [1.72841292E12, 2173.5200000000004], [1.7284107E12, 1420.2500000000002], [1.72841412E12, 2074.74], [1.72840866E12, 1251.4599999999998], [1.7284119E12, 1984.13], [1.72841088E12, 1419.7], [1.72840728E12, 1364.1800000000007], [1.72841052E12, 1405.1299999999994], [1.7284083E12, 1299.1600000000014], [1.72841274E12, 2021.4399999999987], [1.72841172E12, 1894.7799999999993], [1.72840848E12, 1316.599999999999], [1.7284095E12, 1419.289999999999], [1.72841394E12, 2202.28], [1.72840842E12, 1225.7699999999993], [1.72841166E12, 1802.57], [1.72841388E12, 2133.7300000000005], [1.72841064E12, 1459.36], [1.72840962E12, 1441.6699999999992], [1.72841286E12, 2206.1000000000004], [1.7284074E12, 1286.6000000000004], [1.72841184E12, 1883.1299999999994], [1.72841148E12, 1727.619999999999], [1.72840824E12, 1361.6499999999976], [1.72840926E12, 1449.099999999999], [1.7284137E12, 2136.899999999998], [1.72840722E12, 1753.0], [1.72840944E12, 1486.4800000000007], [1.72841046E12, 1432.0400000000009], [1.72841268E12, 1807.5], [1.728411E12, 1956.0], [1.72840776E12, 1352.8200000000015], [1.72840878E12, 1304.2000000000057], [1.72841322E12, 2262.730000000001], [1.72840896E12, 1334.54], [1.72840998E12, 1565.08], [1.7284122E12, 1853.3200000000002], [1.72841082E12, 1433.9699999999978], [1.72841304E12, 2287.5599999999995], [1.7284086E12, 1348.8599999999988], [1.7284098E12, 1437.5199999999977], [1.72841202E12, 1876.2800000000002], [1.72840758E12, 1229.4300000000003], [1.72841406E12, 2199.4900000000002], [1.72840872E12, 1285.84], [1.72841196E12, 1861.4600000000014], [1.72840974E12, 1478.5], [1.7284077E12, 1333.6000000000004], [1.72841094E12, 1463.729999999999], [1.72841316E12, 2223.3399999999992], [1.72841418E12, 1215.45], [1.72840992E12, 1358.0], [1.72840734E12, 1269.9599999999978], [1.72840956E12, 1467.0800000000022], [1.72841178E12, 1836.090000000004], [1.72840752E12, 1179.9599999999996], [1.72841076E12, 1556.2800000000007], [1.728414E12, 2156.0], [1.72841298E12, 2158.46], [1.72840854E12, 1165.98], [1.72840908E12, 1228.44], [1.7284113E12, 1835.5], [1.72841352E12, 2185.8599999999988], [1.72841028E12, 1446.2599999999989], [1.72840806E12, 1251.0000000000002], [1.7284125E12, 1692.4600000000014], [1.7284089E12, 1239.58], [1.72841214E12, 1931.1499999999999], [1.72841112E12, 1815.69], [1.72841334E12, 2171.88], [1.72840788E12, 1304.0400000000002], [1.7284101E12, 1417.1000000000001], [1.72841232E12, 1795.0], [1.72841004E12, 1379.3200000000013], [1.72840782E12, 1284.7999999999997], [1.72841226E12, 1879.3400000000006], [1.72841124E12, 1969.7000000000025], [1.728408E12, 1233.6799999999985], [1.72840902E12, 1255.2900000000002], [1.72841346E12, 2129.18], [1.7284131E12, 2225.239999999998], [1.72840764E12, 1277.0], [1.72840986E12, 1420.4499999999996], [1.72841208E12, 1835.5], [1.72840884E12, 1325.78], [1.72841106E12, 1787.44], [1.72841328E12, 2113.62], [1.72840938E12, 1385.0400000000036], [1.72841262E12, 1875.5000000000023], [1.7284116E12, 1945.6000000000001], [1.72841382E12, 2161.7599999999966], [1.72840836E12, 1293.6000000000004], [1.72841058E12, 1536.3200000000015], [1.7284128E12, 2234.400000000001], [1.7284092E12, 1503.4399999999996], [1.72841022E12, 1373.2800000000007], [1.72841244E12, 1848.1999999999998], [1.72840818E12, 1345.1199999999972], [1.72841142E12, 2041.8400000000074], [1.72841364E12, 2225.6600000000008], [1.7284104E12, 1423.239999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72841358E12, 1763.0], [1.72840812E12, 991.6999999999999], [1.72841034E12, 1079.1], [1.72841256E12, 1466.5999999999995], [1.72840932E12, 1131.0], [1.72841154E12, 1532.75], [1.72841376E12, 1770.35], [1.72840794E12, 1013.1499999999999], [1.72841118E12, 1479.0], [1.7284134E12, 1776.0], [1.72841016E12, 1103.7999999999993], [1.72840914E12, 1185.0], [1.72841238E12, 1504.6000000000001], [1.72841136E12, 1455.6999999999996], [1.72840746E12, 971.4], [1.72840968E12, 1152.8999999999999], [1.72841292E12, 1758.0], [1.7284107E12, 1112.0], [1.72841412E12, 1628.8500000000001], [1.72840866E12, 996.8999999999997], [1.7284119E12, 1482.1499999999994], [1.72841088E12, 1132.0], [1.72840728E12, 986.6000000000004], [1.72841052E12, 1119.2499999999995], [1.7284083E12, 998.2], [1.72841274E12, 1567.7999999999997], [1.72841172E12, 1485.3], [1.72840848E12, 1030.6], [1.7284095E12, 1116.65], [1.72841394E12, 1747.6000000000004], [1.72840842E12, 1006.5999999999995], [1.72841166E12, 1493.549999999998], [1.72841388E12, 1741.95], [1.72841064E12, 1119.4], [1.72840962E12, 1087.8999999999999], [1.72841286E12, 1783.4999999999995], [1.7284074E12, 1009.0], [1.72841184E12, 1473.5500000000004], [1.72841148E12, 1448.2999999999997], [1.72840824E12, 1002.75], [1.72840926E12, 1157.1], [1.7284137E12, 1722.0], [1.72840722E12, 1732.8999999999996], [1.72840944E12, 1179.9999999999995], [1.72841046E12, 1128.35], [1.72841268E12, 1425.5], [1.728411E12, 1533.8999999999992], [1.72840776E12, 1032.7499999999993], [1.72840878E12, 1041.4499999999998], [1.72841322E12, 1736.4499999999996], [1.72840896E12, 1063.9999999999998], [1.72840998E12, 1138.85], [1.7284122E12, 1453.7999999999997], [1.72841082E12, 1101.4499999999998], [1.72841304E12, 1787.2], [1.7284086E12, 1048.1], [1.7284098E12, 1178.0], [1.72841202E12, 1485.199999999999], [1.72840758E12, 1016.55], [1.72841406E12, 1793.9499999999996], [1.72840872E12, 1003.6999999999999], [1.72841196E12, 1459.1499999999999], [1.72840974E12, 1141.5], [1.7284077E12, 1014.75], [1.72841094E12, 1057.0500000000002], [1.72841316E12, 1745.5999999999995], [1.72841418E12, 1099.75], [1.72840992E12, 1107.05], [1.72840734E12, 1026.4], [1.72840956E12, 1120.6000000000008], [1.72841178E12, 1468.1499999999999], [1.72840752E12, 979.6], [1.72841076E12, 1139.0], [1.728414E12, 1798.0], [1.72841298E12, 1731.6999999999996], [1.72840854E12, 972.6999999999999], [1.72840908E12, 989.4999999999998], [1.7284113E12, 1523.5], [1.72841352E12, 1772.95], [1.72841028E12, 1156.8999999999999], [1.72840806E12, 995.5], [1.7284125E12, 1421.0], [1.7284089E12, 996.4499999999999], [1.72841214E12, 1468.75], [1.72841112E12, 1517.7000000000003], [1.72841334E12, 1722.1999999999998], [1.72840788E12, 1056.3999999999996], [1.7284101E12, 1147.5], [1.72841232E12, 1475.0], [1.72841004E12, 1117.0], [1.72840782E12, 1018.8999999999999], [1.72841226E12, 1413.0], [1.72841124E12, 1524.55], [1.728408E12, 1050.8500000000004], [1.72840902E12, 1008.1000000000001], [1.72841346E12, 1723.45], [1.7284131E12, 1780.6999999999996], [1.72840764E12, 986.0], [1.72840986E12, 1114.7999999999984], [1.72841208E12, 1489.0], [1.72840884E12, 1062.6], [1.72841106E12, 1473.4], [1.72841328E12, 1746.099999999999], [1.72840938E12, 1148.1], [1.72841262E12, 1516.0], [1.7284116E12, 1499.6], [1.72841382E12, 1713.1999999999996], [1.72840836E12, 975.9499999999999], [1.72841058E12, 1160.65], [1.7284128E12, 1778.0], [1.7284092E12, 1110.8], [1.72841022E12, 1128.0], [1.72841244E12, 1456.3999999999992], [1.72840818E12, 997.8999999999999], [1.72841142E12, 1461.9], [1.72841364E12, 1800.8500000000001], [1.7284104E12, 1136.7499999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72841358E12, 53.0], [1.72840812E12, 37.0], [1.72841034E12, 36.0], [1.72841256E12, 33.0], [1.72840932E12, 38.0], [1.72841154E12, 31.0], [1.72841376E12, 55.0], [1.72840794E12, 38.0], [1.72841118E12, 37.0], [1.7284134E12, 57.0], [1.72841016E12, 35.0], [1.72840914E12, 36.0], [1.72841238E12, 40.0], [1.72841136E12, 41.0], [1.72840746E12, 35.0], [1.72840968E12, 32.0], [1.72841292E12, 55.0], [1.7284107E12, 33.0], [1.72841412E12, 40.0], [1.72840866E12, 36.0], [1.7284119E12, 36.0], [1.72841088E12, 32.0], [1.72840728E12, 45.0], [1.72841052E12, 40.0], [1.7284083E12, 33.0], [1.72841274E12, 39.0], [1.72841172E12, 34.0], [1.72840848E12, 29.0], [1.7284095E12, 37.0], [1.72841394E12, 60.0], [1.72840842E12, 36.0], [1.72841166E12, 40.0], [1.72841388E12, 59.0], [1.72841064E12, 39.0], [1.72840962E12, 36.0], [1.72841286E12, 53.0], [1.7284074E12, 38.0], [1.72841184E12, 42.0], [1.72841148E12, 42.0], [1.72840824E12, 41.0], [1.72840926E12, 39.0], [1.7284137E12, 57.0], [1.72840722E12, 62.0], [1.72840944E12, 39.0], [1.72841046E12, 33.0], [1.72841268E12, 39.0], [1.728411E12, 42.0], [1.72840776E12, 32.0], [1.72840878E12, 40.0], [1.72841322E12, 60.0], [1.72840896E12, 30.0], [1.72840998E12, 39.0], [1.7284122E12, 41.0], [1.72841082E12, 34.0], [1.72841304E12, 60.0], [1.7284086E12, 35.0], [1.7284098E12, 34.0], [1.72841202E12, 42.0], [1.72840758E12, 38.0], [1.72841406E12, 56.0], [1.72840872E12, 34.0], [1.72841196E12, 39.0], [1.72840974E12, 33.0], [1.7284077E12, 36.0], [1.72841094E12, 35.0], [1.72841316E12, 44.0], [1.72841418E12, 39.0], [1.72840992E12, 37.0], [1.72840734E12, 36.0], [1.72840956E12, 37.0], [1.72841178E12, 34.0], [1.72840752E12, 35.0], [1.72841076E12, 37.0], [1.728414E12, 55.0], [1.72841298E12, 58.0], [1.72840854E12, 37.0], [1.72840908E12, 38.0], [1.7284113E12, 37.0], [1.72841352E12, 61.0], [1.72841028E12, 36.0], [1.72840806E12, 33.0], [1.7284125E12, 36.0], [1.7284089E12, 31.0], [1.72841214E12, 38.0], [1.72841112E12, 34.0], [1.72841334E12, 58.0], [1.72840788E12, 38.0], [1.7284101E12, 39.0], [1.72841232E12, 33.0], [1.72841004E12, 34.0], [1.72840782E12, 34.0], [1.72841226E12, 41.0], [1.72841124E12, 35.0], [1.728408E12, 36.0], [1.72840902E12, 36.0], [1.72841346E12, 55.0], [1.7284131E12, 56.0], [1.72840764E12, 35.0], [1.72840986E12, 37.0], [1.72841208E12, 38.0], [1.72840884E12, 38.0], [1.72841106E12, 44.0], [1.72841328E12, 51.0], [1.72840938E12, 37.0], [1.72841262E12, 34.0], [1.7284116E12, 38.0], [1.72841382E12, 61.0], [1.72840836E12, 38.0], [1.72841058E12, 36.0], [1.7284128E12, 55.0], [1.7284092E12, 38.0], [1.72841022E12, 36.0], [1.72841244E12, 41.0], [1.72840818E12, 34.0], [1.72841142E12, 38.0], [1.72841364E12, 54.0], [1.7284104E12, 38.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72841358E12, 641.0], [1.72840812E12, 361.0], [1.72841034E12, 405.0], [1.72841256E12, 533.0], [1.72840932E12, 376.0], [1.72841154E12, 481.0], [1.72841376E12, 674.5], [1.72840794E12, 449.0], [1.72841118E12, 550.0], [1.7284134E12, 524.0], [1.72841016E12, 375.5], [1.72840914E12, 443.0], [1.72841238E12, 516.0], [1.72841136E12, 510.0], [1.72840746E12, 313.0], [1.72840968E12, 436.0], [1.72841292E12, 539.0], [1.7284107E12, 399.0], [1.72841412E12, 485.0], [1.72840866E12, 338.0], [1.7284119E12, 511.5], [1.72841088E12, 425.0], [1.72840728E12, 294.0], [1.72841052E12, 420.5], [1.7284083E12, 306.0], [1.72841274E12, 444.5], [1.72841172E12, 570.0], [1.72840848E12, 340.0], [1.7284095E12, 404.0], [1.72841394E12, 607.0], [1.72840842E12, 362.5], [1.72841166E12, 503.0], [1.72841388E12, 638.5], [1.72841064E12, 417.0], [1.72840962E12, 399.5], [1.72841286E12, 616.0], [1.7284074E12, 376.0], [1.72841184E12, 483.5], [1.72841148E12, 482.5], [1.72840824E12, 367.0], [1.72840926E12, 404.0], [1.7284137E12, 630.0], [1.72840722E12, 532.0], [1.72840944E12, 397.0], [1.72841046E12, 411.0], [1.72841268E12, 493.0], [1.728411E12, 443.0], [1.72840776E12, 370.0], [1.72840878E12, 395.5], [1.72841322E12, 601.0], [1.72840896E12, 361.0], [1.72840998E12, 433.0], [1.7284122E12, 506.0], [1.72841082E12, 429.5], [1.72841304E12, 687.0], [1.7284086E12, 333.0], [1.7284098E12, 418.5], [1.72841202E12, 487.0], [1.72840758E12, 364.5], [1.72841406E12, 676.5], [1.72840872E12, 355.0], [1.72841196E12, 468.0], [1.72840974E12, 411.0], [1.7284077E12, 410.0], [1.72841094E12, 359.0], [1.72841316E12, 637.0], [1.72841418E12, 380.5], [1.72840992E12, 388.5], [1.72840734E12, 271.0], [1.72840956E12, 380.0], [1.72841178E12, 465.5], [1.72840752E12, 359.0], [1.72841076E12, 396.5], [1.728414E12, 694.0], [1.72841298E12, 630.0], [1.72840854E12, 365.0], [1.72840908E12, 365.0], [1.7284113E12, 588.0], [1.72841352E12, 700.0], [1.72841028E12, 396.0], [1.72840806E12, 362.0], [1.7284125E12, 450.0], [1.7284089E12, 405.0], [1.72841214E12, 420.0], [1.72841112E12, 516.5], [1.72841334E12, 649.0], [1.72840788E12, 372.0], [1.7284101E12, 438.0], [1.72841232E12, 535.0], [1.72841004E12, 421.0], [1.72840782E12, 328.5], [1.72841226E12, 470.0], [1.72841124E12, 491.5], [1.728408E12, 396.5], [1.72840902E12, 268.5], [1.72841346E12, 612.5], [1.7284131E12, 633.0], [1.72840764E12, 361.0], [1.72840986E12, 354.5], [1.72841208E12, 532.5], [1.72840884E12, 366.0], [1.72841106E12, 491.0], [1.72841328E12, 690.0], [1.72840938E12, 414.5], [1.72841262E12, 541.0], [1.7284116E12, 511.0], [1.72841382E12, 611.0], [1.72840836E12, 348.5], [1.72841058E12, 409.0], [1.7284128E12, 620.0], [1.7284092E12, 386.0], [1.72841022E12, 381.0], [1.72841244E12, 490.0], [1.72840818E12, 398.0], [1.72841142E12, 501.5], [1.72841364E12, 721.0], [1.7284104E12, 361.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72841418E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 136.0, "minX": 1.0, "maxY": 815.5, "series": [{"data": [[2.0, 815.5], [32.0, 260.5], [33.0, 251.0], [35.0, 253.0], [34.0, 250.0], [36.0, 211.0], [37.0, 230.0], [38.0, 136.0], [39.0, 239.5], [41.0, 178.0], [42.0, 172.5], [3.0, 576.0], [4.0, 525.5], [5.0, 495.0], [6.0, 547.0], [7.0, 504.5], [8.0, 462.0], [9.0, 432.0], [10.0, 414.0], [11.0, 403.0], [12.0, 425.0], [13.0, 436.0], [14.0, 514.0], [15.0, 503.0], [1.0, 669.0], [16.0, 511.0], [17.0, 507.5], [18.0, 505.0], [19.0, 509.0], [20.0, 471.5], [21.0, 448.0], [22.0, 463.0], [23.0, 419.0], [24.0, 397.0], [25.0, 401.0], [26.0, 334.0], [27.0, 339.0], [28.0, 293.0], [29.0, 297.0], [30.0, 261.0], [31.0, 253.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 42.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 81.5, "minX": 1.0, "maxY": 542.5, "series": [{"data": [[2.0, 542.5], [32.0, 158.5], [33.0, 169.5], [35.0, 170.5], [34.0, 150.5], [36.0, 128.0], [37.0, 137.0], [38.0, 81.5], [39.0, 146.0], [41.0, 109.0], [42.0, 117.0], [3.0, 378.0], [4.0, 365.5], [5.0, 335.0], [6.0, 368.5], [7.0, 345.5], [8.0, 320.0], [9.0, 306.0], [10.0, 295.5], [11.0, 288.0], [12.0, 301.5], [13.0, 313.0], [14.0, 362.0], [15.0, 360.0], [1.0, 440.0], [16.0, 358.0], [17.0, 362.0], [18.0, 364.0], [19.0, 367.0], [20.0, 341.0], [21.0, 322.0], [22.0, 341.5], [23.0, 306.0], [24.0, 285.5], [25.0, 291.0], [26.0, 230.5], [27.0, 230.0], [28.0, 195.5], [29.0, 192.5], [30.0, 165.0], [31.0, 160.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 42.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.72840722E12, "maxY": 23.783333333333335, "series": [{"data": [[1.72841358E12, 22.35], [1.72840812E12, 9.683333333333334], [1.72841034E12, 18.133333333333333], [1.72841256E12, 20.183333333333334], [1.72840932E12, 17.616666666666667], [1.72841154E12, 20.733333333333334], [1.72841376E12, 22.2], [1.72840794E12, 8.966666666666667], [1.72841118E12, 19.65], [1.7284134E12, 23.4], [1.72841016E12, 18.033333333333335], [1.72840914E12, 14.1], [1.72841238E12, 20.25], [1.72841136E12, 20.35], [1.72840746E12, 5.95], [1.72840968E12, 16.933333333333334], [1.72841292E12, 23.783333333333335], [1.7284107E12, 17.5], [1.72841412E12, 21.833333333333332], [1.72840866E12, 10.35], [1.7284119E12, 20.466666666666665], [1.72841088E12, 17.15], [1.72840728E12, 5.216666666666667], [1.72841052E12, 17.366666666666667], [1.7284083E12, 10.45], [1.72841274E12, 17.5], [1.72841172E12, 19.883333333333333], [1.72840848E12, 9.716666666666667], [1.7284095E12, 17.766666666666666], [1.72841394E12, 23.083333333333332], [1.72840842E12, 9.966666666666667], [1.72841166E12, 20.7], [1.72841388E12, 22.666666666666668], [1.72841064E12, 17.183333333333334], [1.72840962E12, 17.85], [1.72841286E12, 22.616666666666667], [1.7284074E12, 4.9], [1.72841184E12, 20.666666666666668], [1.72841148E12, 21.1], [1.72840824E12, 9.9], [1.72840926E12, 17.3], [1.7284137E12, 22.816666666666666], [1.72840722E12, 0.38333333333333336], [1.72840944E12, 17.25], [1.72841046E12, 17.533333333333335], [1.72841268E12, 19.05], [1.728411E12, 21.1], [1.72840776E12, 9.633333333333333], [1.72840878E12, 9.433333333333334], [1.72841322E12, 22.933333333333334], [1.72840896E12, 9.683333333333334], [1.72840998E12, 17.033333333333335], [1.7284122E12, 20.55], [1.72841082E12, 17.266666666666666], [1.72841304E12, 21.916666666666668], [1.7284086E12, 10.083333333333334], [1.7284098E12, 17.2], [1.72841202E12, 20.85], [1.72840758E12, 9.8], [1.72841406E12, 22.1], [1.72840872E12, 9.75], [1.72841196E12, 20.933333333333334], [1.72840974E12, 17.483333333333334], [1.7284077E12, 9.4], [1.72841094E12, 12.266666666666667], [1.72841316E12, 22.283333333333335], [1.72841418E12, 2.5], [1.72840992E12, 17.966666666666665], [1.72840734E12, 5.25], [1.72840956E12, 18.066666666666666], [1.72841178E12, 20.966666666666665], [1.72840752E12, 10.116666666666667], [1.72841076E12, 17.533333333333335], [1.728414E12, 21.65], [1.72841298E12, 22.883333333333333], [1.72840854E12, 10.016666666666667], [1.72840908E12, 8.7], [1.7284113E12, 19.15], [1.72841352E12, 22.0], [1.72841028E12, 17.333333333333332], [1.72840806E12, 9.816666666666666], [1.7284125E12, 21.833333333333332], [1.7284089E12, 9.5], [1.72841214E12, 21.566666666666666], [1.72841112E12, 20.5], [1.72841334E12, 22.116666666666667], [1.72840788E12, 9.583333333333334], [1.7284101E12, 17.15], [1.72841232E12, 19.983333333333334], [1.72841004E12, 17.25], [1.72840782E12, 10.166666666666666], [1.72841226E12, 21.0], [1.72841124E12, 20.466666666666665], [1.728408E12, 9.533333333333333], [1.72840902E12, 10.866666666666667], [1.72841346E12, 23.166666666666668], [1.7284131E12, 22.35], [1.72840764E12, 9.983333333333333], [1.72840986E12, 18.266666666666666], [1.72841208E12, 20.4], [1.72840884E12, 9.766666666666667], [1.72841106E12, 20.916666666666668], [1.72841328E12, 22.283333333333335], [1.72840938E12, 17.633333333333333], [1.72841262E12, 20.15], [1.7284116E12, 20.45], [1.72841382E12, 23.183333333333334], [1.72840836E12, 10.0], [1.72841058E12, 17.1], [1.7284128E12, 22.25], [1.7284092E12, 17.716666666666665], [1.72841022E12, 17.583333333333332], [1.72841244E12, 20.783333333333335], [1.72840818E12, 9.666666666666666], [1.72841142E12, 20.5], [1.72841364E12, 21.333333333333332], [1.7284104E12, 18.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72841418E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.72840722E12, "maxY": 23.783333333333335, "series": [{"data": [[1.72841358E12, 22.35], [1.72840812E12, 9.683333333333334], [1.72841034E12, 18.133333333333333], [1.72841256E12, 20.183333333333334], [1.72840932E12, 17.616666666666667], [1.72841154E12, 20.733333333333334], [1.72841376E12, 22.2], [1.72840794E12, 8.966666666666667], [1.72841118E12, 19.65], [1.7284134E12, 23.4], [1.72841016E12, 18.033333333333335], [1.72840914E12, 13.983333333333333], [1.72841238E12, 20.25], [1.72841136E12, 20.35], [1.72840746E12, 5.916666666666667], [1.72840968E12, 16.933333333333334], [1.72841292E12, 23.783333333333335], [1.7284107E12, 17.5], [1.72841412E12, 22.0], [1.72840866E12, 10.35], [1.7284119E12, 20.466666666666665], [1.72841088E12, 17.15], [1.72840728E12, 5.216666666666667], [1.72841052E12, 17.366666666666667], [1.7284083E12, 10.45], [1.72841274E12, 17.333333333333332], [1.72841172E12, 19.883333333333333], [1.72840848E12, 9.716666666666667], [1.7284095E12, 17.766666666666666], [1.72841394E12, 23.083333333333332], [1.72840842E12, 9.966666666666667], [1.72841166E12, 20.7], [1.72841388E12, 22.666666666666668], [1.72841064E12, 17.183333333333334], [1.72840962E12, 17.833333333333332], [1.72841286E12, 22.616666666666667], [1.7284074E12, 4.9], [1.72841184E12, 20.666666666666668], [1.72841148E12, 21.1], [1.72840824E12, 9.9], [1.72840926E12, 17.3], [1.7284137E12, 22.816666666666666], [1.72840722E12, 0.35], [1.72840944E12, 17.25], [1.72841046E12, 17.533333333333335], [1.72841268E12, 19.15], [1.728411E12, 21.1], [1.72840776E12, 9.633333333333333], [1.72840878E12, 9.433333333333334], [1.72841322E12, 22.933333333333334], [1.72840896E12, 9.683333333333334], [1.72840998E12, 17.033333333333335], [1.7284122E12, 20.55], [1.72841082E12, 17.266666666666666], [1.72841304E12, 21.916666666666668], [1.7284086E12, 10.083333333333334], [1.7284098E12, 17.2], [1.72841202E12, 20.85], [1.72840758E12, 9.8], [1.72841406E12, 22.1], [1.72840872E12, 9.75], [1.72841196E12, 20.933333333333334], [1.72840974E12, 17.483333333333334], [1.7284077E12, 9.4], [1.72841094E12, 12.2], [1.72841316E12, 22.283333333333335], [1.72841418E12, 2.6], [1.72840992E12, 17.966666666666665], [1.72840734E12, 5.25], [1.72840956E12, 18.083333333333332], [1.72841178E12, 20.966666666666665], [1.72840752E12, 10.116666666666667], [1.72841076E12, 17.533333333333335], [1.728414E12, 21.65], [1.72841298E12, 22.883333333333333], [1.72840854E12, 10.016666666666667], [1.72840908E12, 8.75], [1.7284113E12, 19.15], [1.72841352E12, 22.0], [1.72841028E12, 17.333333333333332], [1.72840806E12, 9.816666666666666], [1.7284125E12, 21.833333333333332], [1.7284089E12, 9.5], [1.72841214E12, 21.566666666666666], [1.72841112E12, 20.5], [1.72841334E12, 22.116666666666667], [1.72840788E12, 9.583333333333334], [1.7284101E12, 17.15], [1.72841232E12, 19.983333333333334], [1.72841004E12, 17.25], [1.72840782E12, 10.166666666666666], [1.72841226E12, 21.0], [1.72841124E12, 20.466666666666665], [1.728408E12, 9.533333333333333], [1.72840902E12, 10.866666666666667], [1.72841346E12, 23.166666666666668], [1.7284131E12, 22.35], [1.72840764E12, 9.983333333333333], [1.72840986E12, 18.266666666666666], [1.72841208E12, 20.4], [1.72840884E12, 9.766666666666667], [1.72841106E12, 20.916666666666668], [1.72841328E12, 22.283333333333335], [1.72840938E12, 17.633333333333333], [1.72841262E12, 20.15], [1.7284116E12, 20.45], [1.72841382E12, 23.183333333333334], [1.72840836E12, 10.0], [1.72841058E12, 17.1], [1.7284128E12, 22.25], [1.7284092E12, 17.716666666666665], [1.72841022E12, 17.583333333333332], [1.72841244E12, 20.783333333333335], [1.72840818E12, 9.666666666666666], [1.72841142E12, 20.5], [1.72841364E12, 21.333333333333332], [1.7284104E12, 18.2]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72841418E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.72840722E12, "maxY": 23.783333333333335, "series": [{"data": [[1.72841358E12, 22.35], [1.72840812E12, 9.683333333333334], [1.72841034E12, 18.133333333333333], [1.72841256E12, 20.183333333333334], [1.72840932E12, 17.616666666666667], [1.72841154E12, 20.733333333333334], [1.72841376E12, 22.2], [1.72840794E12, 8.966666666666667], [1.72841118E12, 19.65], [1.7284134E12, 23.4], [1.72841016E12, 18.033333333333335], [1.72840914E12, 13.983333333333333], [1.72841238E12, 20.25], [1.72841136E12, 20.35], [1.72840746E12, 5.916666666666667], [1.72840968E12, 16.933333333333334], [1.72841292E12, 23.783333333333335], [1.7284107E12, 17.5], [1.72841412E12, 22.0], [1.72840866E12, 10.35], [1.7284119E12, 20.466666666666665], [1.72841088E12, 17.15], [1.72840728E12, 5.216666666666667], [1.72841052E12, 17.366666666666667], [1.7284083E12, 10.45], [1.72841274E12, 17.333333333333332], [1.72841172E12, 19.883333333333333], [1.72840848E12, 9.716666666666667], [1.7284095E12, 17.766666666666666], [1.72841394E12, 23.083333333333332], [1.72840842E12, 9.966666666666667], [1.72841166E12, 20.7], [1.72841388E12, 22.666666666666668], [1.72841064E12, 17.183333333333334], [1.72840962E12, 17.833333333333332], [1.72841286E12, 22.616666666666667], [1.7284074E12, 4.9], [1.72841184E12, 20.666666666666668], [1.72841148E12, 21.1], [1.72840824E12, 9.9], [1.72840926E12, 17.3], [1.7284137E12, 22.816666666666666], [1.72840722E12, 0.35], [1.72840944E12, 17.25], [1.72841046E12, 17.533333333333335], [1.72841268E12, 19.15], [1.728411E12, 21.1], [1.72840776E12, 9.633333333333333], [1.72840878E12, 9.433333333333334], [1.72841322E12, 22.933333333333334], [1.72840896E12, 9.683333333333334], [1.72840998E12, 17.033333333333335], [1.7284122E12, 20.55], [1.72841082E12, 17.266666666666666], [1.72841304E12, 21.916666666666668], [1.7284086E12, 10.083333333333334], [1.7284098E12, 17.2], [1.72841202E12, 20.85], [1.72840758E12, 9.8], [1.72841406E12, 22.1], [1.72840872E12, 9.75], [1.72841196E12, 20.933333333333334], [1.72840974E12, 17.483333333333334], [1.7284077E12, 9.4], [1.72841094E12, 12.2], [1.72841316E12, 22.283333333333335], [1.72841418E12, 2.6], [1.72840992E12, 17.966666666666665], [1.72840734E12, 5.25], [1.72840956E12, 18.083333333333332], [1.72841178E12, 20.966666666666665], [1.72840752E12, 10.116666666666667], [1.72841076E12, 17.533333333333335], [1.728414E12, 21.65], [1.72841298E12, 22.883333333333333], [1.72840854E12, 10.016666666666667], [1.72840908E12, 8.75], [1.7284113E12, 19.15], [1.72841352E12, 22.0], [1.72841028E12, 17.333333333333332], [1.72840806E12, 9.816666666666666], [1.7284125E12, 21.833333333333332], [1.7284089E12, 9.5], [1.72841214E12, 21.566666666666666], [1.72841112E12, 20.5], [1.72841334E12, 22.116666666666667], [1.72840788E12, 9.583333333333334], [1.7284101E12, 17.15], [1.72841232E12, 19.983333333333334], [1.72841004E12, 17.25], [1.72840782E12, 10.166666666666666], [1.72841226E12, 21.0], [1.72841124E12, 20.466666666666665], [1.728408E12, 9.533333333333333], [1.72840902E12, 10.866666666666667], [1.72841346E12, 23.166666666666668], [1.7284131E12, 22.35], [1.72840764E12, 9.983333333333333], [1.72840986E12, 18.266666666666666], [1.72841208E12, 20.4], [1.72840884E12, 9.766666666666667], [1.72841106E12, 20.916666666666668], [1.72841328E12, 22.283333333333335], [1.72840938E12, 17.633333333333333], [1.72841262E12, 20.15], [1.7284116E12, 20.45], [1.72841382E12, 23.183333333333334], [1.72840836E12, 10.0], [1.72841058E12, 17.1], [1.7284128E12, 22.25], [1.7284092E12, 17.716666666666665], [1.72841022E12, 17.583333333333332], [1.72841244E12, 20.783333333333335], [1.72840818E12, 9.666666666666666], [1.72841142E12, 20.5], [1.72841364E12, 21.333333333333332], [1.7284104E12, 18.2]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72841418E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.72840722E12, "maxY": 23.783333333333335, "series": [{"data": [[1.72841358E12, 22.35], [1.72840812E12, 9.683333333333334], [1.72841034E12, 18.133333333333333], [1.72841256E12, 20.183333333333334], [1.72840932E12, 17.616666666666667], [1.72841154E12, 20.733333333333334], [1.72841376E12, 22.2], [1.72840794E12, 8.966666666666667], [1.72841118E12, 19.65], [1.7284134E12, 23.4], [1.72841016E12, 18.033333333333335], [1.72840914E12, 13.983333333333333], [1.72841238E12, 20.25], [1.72841136E12, 20.35], [1.72840746E12, 5.916666666666667], [1.72840968E12, 16.933333333333334], [1.72841292E12, 23.783333333333335], [1.7284107E12, 17.5], [1.72841412E12, 22.0], [1.72840866E12, 10.35], [1.7284119E12, 20.466666666666665], [1.72841088E12, 17.15], [1.72840728E12, 5.216666666666667], [1.72841052E12, 17.366666666666667], [1.7284083E12, 10.45], [1.72841274E12, 17.333333333333332], [1.72841172E12, 19.883333333333333], [1.72840848E12, 9.716666666666667], [1.7284095E12, 17.766666666666666], [1.72841394E12, 23.083333333333332], [1.72840842E12, 9.966666666666667], [1.72841166E12, 20.7], [1.72841388E12, 22.666666666666668], [1.72841064E12, 17.183333333333334], [1.72840962E12, 17.833333333333332], [1.72841286E12, 22.616666666666667], [1.7284074E12, 4.9], [1.72841184E12, 20.666666666666668], [1.72841148E12, 21.1], [1.72840824E12, 9.9], [1.72840926E12, 17.3], [1.7284137E12, 22.816666666666666], [1.72840722E12, 0.35], [1.72840944E12, 17.25], [1.72841046E12, 17.533333333333335], [1.72841268E12, 19.15], [1.728411E12, 21.1], [1.72840776E12, 9.633333333333333], [1.72840878E12, 9.433333333333334], [1.72841322E12, 22.933333333333334], [1.72840896E12, 9.683333333333334], [1.72840998E12, 17.033333333333335], [1.7284122E12, 20.55], [1.72841082E12, 17.266666666666666], [1.72841304E12, 21.916666666666668], [1.7284086E12, 10.083333333333334], [1.7284098E12, 17.2], [1.72841202E12, 20.85], [1.72840758E12, 9.8], [1.72841406E12, 22.1], [1.72840872E12, 9.75], [1.72841196E12, 20.933333333333334], [1.72840974E12, 17.483333333333334], [1.7284077E12, 9.4], [1.72841094E12, 12.2], [1.72841316E12, 22.283333333333335], [1.72841418E12, 2.6], [1.72840992E12, 17.966666666666665], [1.72840734E12, 5.25], [1.72840956E12, 18.083333333333332], [1.72841178E12, 20.966666666666665], [1.72840752E12, 10.116666666666667], [1.72841076E12, 17.533333333333335], [1.728414E12, 21.65], [1.72841298E12, 22.883333333333333], [1.72840854E12, 10.016666666666667], [1.72840908E12, 8.75], [1.7284113E12, 19.15], [1.72841352E12, 22.0], [1.72841028E12, 17.333333333333332], [1.72840806E12, 9.816666666666666], [1.7284125E12, 21.833333333333332], [1.7284089E12, 9.5], [1.72841214E12, 21.566666666666666], [1.72841112E12, 20.5], [1.72841334E12, 22.116666666666667], [1.72840788E12, 9.583333333333334], [1.7284101E12, 17.15], [1.72841232E12, 19.983333333333334], [1.72841004E12, 17.25], [1.72840782E12, 10.166666666666666], [1.72841226E12, 21.0], [1.72841124E12, 20.466666666666665], [1.728408E12, 9.533333333333333], [1.72840902E12, 10.866666666666667], [1.72841346E12, 23.166666666666668], [1.7284131E12, 22.35], [1.72840764E12, 9.983333333333333], [1.72840986E12, 18.266666666666666], [1.72841208E12, 20.4], [1.72840884E12, 9.766666666666667], [1.72841106E12, 20.916666666666668], [1.72841328E12, 22.283333333333335], [1.72840938E12, 17.633333333333333], [1.72841262E12, 20.15], [1.7284116E12, 20.45], [1.72841382E12, 23.183333333333334], [1.72840836E12, 10.0], [1.72841058E12, 17.1], [1.7284128E12, 22.25], [1.7284092E12, 17.716666666666665], [1.72841022E12, 17.583333333333332], [1.72841244E12, 20.783333333333335], [1.72840818E12, 9.666666666666666], [1.72841142E12, 20.5], [1.72841364E12, 21.333333333333332], [1.7284104E12, 18.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72841418E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

