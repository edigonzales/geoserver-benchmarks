/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 31.0, "minX": 0.0, "maxY": 3644.0, "series": [{"data": [[0.0, 31.0], [0.1, 37.0], [0.2, 40.0], [0.3, 41.0], [0.4, 43.0], [0.5, 44.0], [0.6, 45.0], [0.7, 46.0], [0.8, 47.0], [0.9, 48.0], [1.0, 49.0], [1.1, 50.0], [1.2, 50.0], [1.3, 51.0], [1.4, 52.0], [1.5, 53.0], [1.6, 53.0], [1.7, 54.0], [1.8, 54.0], [1.9, 55.0], [2.0, 56.0], [2.1, 56.0], [2.2, 57.0], [2.3, 57.0], [2.4, 58.0], [2.5, 58.0], [2.6, 59.0], [2.7, 59.0], [2.8, 59.0], [2.9, 60.0], [3.0, 60.0], [3.1, 61.0], [3.2, 61.0], [3.3, 62.0], [3.4, 62.0], [3.5, 63.0], [3.6, 63.0], [3.7, 63.0], [3.8, 64.0], [3.9, 64.0], [4.0, 65.0], [4.1, 65.0], [4.2, 65.0], [4.3, 66.0], [4.4, 66.0], [4.5, 67.0], [4.6, 67.0], [4.7, 67.0], [4.8, 68.0], [4.9, 68.0], [5.0, 69.0], [5.1, 69.0], [5.2, 69.0], [5.3, 70.0], [5.4, 70.0], [5.5, 71.0], [5.6, 71.0], [5.7, 71.0], [5.8, 72.0], [5.9, 72.0], [6.0, 72.0], [6.1, 73.0], [6.2, 73.0], [6.3, 73.0], [6.4, 74.0], [6.5, 74.0], [6.6, 74.0], [6.7, 75.0], [6.8, 75.0], [6.9, 75.0], [7.0, 76.0], [7.1, 76.0], [7.2, 76.0], [7.3, 77.0], [7.4, 77.0], [7.5, 77.0], [7.6, 78.0], [7.7, 78.0], [7.8, 78.0], [7.9, 79.0], [8.0, 79.0], [8.1, 79.0], [8.2, 80.0], [8.3, 80.0], [8.4, 80.0], [8.5, 81.0], [8.6, 81.0], [8.7, 81.0], [8.8, 82.0], [8.9, 82.0], [9.0, 82.0], [9.1, 83.0], [9.2, 83.0], [9.3, 83.0], [9.4, 84.0], [9.5, 84.0], [9.6, 84.0], [9.7, 85.0], [9.8, 85.0], [9.9, 85.0], [10.0, 86.0], [10.1, 86.0], [10.2, 86.0], [10.3, 87.0], [10.4, 87.0], [10.5, 87.0], [10.6, 87.0], [10.7, 88.0], [10.8, 88.0], [10.9, 88.0], [11.0, 89.0], [11.1, 89.0], [11.2, 89.0], [11.3, 90.0], [11.4, 90.0], [11.5, 90.0], [11.6, 91.0], [11.7, 91.0], [11.8, 91.0], [11.9, 92.0], [12.0, 92.0], [12.1, 92.0], [12.2, 93.0], [12.3, 93.0], [12.4, 93.0], [12.5, 94.0], [12.6, 94.0], [12.7, 94.0], [12.8, 95.0], [12.9, 95.0], [13.0, 95.0], [13.1, 95.0], [13.2, 96.0], [13.3, 96.0], [13.4, 96.0], [13.5, 97.0], [13.6, 97.0], [13.7, 97.0], [13.8, 98.0], [13.9, 98.0], [14.0, 98.0], [14.1, 99.0], [14.2, 99.0], [14.3, 99.0], [14.4, 100.0], [14.5, 100.0], [14.6, 100.0], [14.7, 101.0], [14.8, 101.0], [14.9, 101.0], [15.0, 102.0], [15.1, 102.0], [15.2, 102.0], [15.3, 103.0], [15.4, 103.0], [15.5, 103.0], [15.6, 104.0], [15.7, 104.0], [15.8, 104.0], [15.9, 105.0], [16.0, 105.0], [16.1, 105.0], [16.2, 106.0], [16.3, 106.0], [16.4, 106.0], [16.5, 107.0], [16.6, 107.0], [16.7, 107.0], [16.8, 108.0], [16.9, 108.0], [17.0, 108.0], [17.1, 109.0], [17.2, 109.0], [17.3, 109.0], [17.4, 110.0], [17.5, 110.0], [17.6, 110.0], [17.7, 111.0], [17.8, 111.0], [17.9, 112.0], [18.0, 112.0], [18.1, 112.0], [18.2, 113.0], [18.3, 113.0], [18.4, 113.0], [18.5, 114.0], [18.6, 114.0], [18.7, 114.0], [18.8, 115.0], [18.9, 115.0], [19.0, 116.0], [19.1, 116.0], [19.2, 116.0], [19.3, 117.0], [19.4, 117.0], [19.5, 117.0], [19.6, 118.0], [19.7, 118.0], [19.8, 118.0], [19.9, 119.0], [20.0, 119.0], [20.1, 119.0], [20.2, 120.0], [20.3, 120.0], [20.4, 121.0], [20.5, 121.0], [20.6, 121.0], [20.7, 122.0], [20.8, 122.0], [20.9, 122.0], [21.0, 123.0], [21.1, 123.0], [21.2, 124.0], [21.3, 124.0], [21.4, 124.0], [21.5, 125.0], [21.6, 125.0], [21.7, 125.0], [21.8, 126.0], [21.9, 126.0], [22.0, 127.0], [22.1, 127.0], [22.2, 127.0], [22.3, 128.0], [22.4, 128.0], [22.5, 129.0], [22.6, 129.0], [22.7, 130.0], [22.8, 130.0], [22.9, 130.0], [23.0, 131.0], [23.1, 131.0], [23.2, 132.0], [23.3, 132.0], [23.4, 132.0], [23.5, 133.0], [23.6, 133.0], [23.7, 134.0], [23.8, 134.0], [23.9, 134.0], [24.0, 135.0], [24.1, 135.0], [24.2, 136.0], [24.3, 136.0], [24.4, 137.0], [24.5, 137.0], [24.6, 137.0], [24.7, 138.0], [24.8, 138.0], [24.9, 139.0], [25.0, 139.0], [25.1, 140.0], [25.2, 140.0], [25.3, 141.0], [25.4, 141.0], [25.5, 141.0], [25.6, 142.0], [25.7, 142.0], [25.8, 143.0], [25.9, 143.0], [26.0, 144.0], [26.1, 144.0], [26.2, 145.0], [26.3, 145.0], [26.4, 146.0], [26.5, 146.0], [26.6, 147.0], [26.7, 147.0], [26.8, 148.0], [26.9, 148.0], [27.0, 149.0], [27.1, 149.0], [27.2, 150.0], [27.3, 150.0], [27.4, 151.0], [27.5, 151.0], [27.6, 152.0], [27.7, 152.0], [27.8, 153.0], [27.9, 153.0], [28.0, 154.0], [28.1, 154.0], [28.2, 155.0], [28.3, 155.0], [28.4, 156.0], [28.5, 156.0], [28.6, 157.0], [28.7, 157.0], [28.8, 158.0], [28.9, 158.0], [29.0, 159.0], [29.1, 160.0], [29.2, 160.0], [29.3, 161.0], [29.4, 161.0], [29.5, 162.0], [29.6, 162.0], [29.7, 163.0], [29.8, 164.0], [29.9, 164.0], [30.0, 165.0], [30.1, 165.0], [30.2, 166.0], [30.3, 167.0], [30.4, 167.0], [30.5, 168.0], [30.6, 168.0], [30.7, 169.0], [30.8, 170.0], [30.9, 170.0], [31.0, 171.0], [31.1, 171.0], [31.2, 172.0], [31.3, 173.0], [31.4, 173.0], [31.5, 174.0], [31.6, 174.0], [31.7, 175.0], [31.8, 176.0], [31.9, 176.0], [32.0, 177.0], [32.1, 178.0], [32.2, 178.0], [32.3, 179.0], [32.4, 180.0], [32.5, 180.0], [32.6, 181.0], [32.7, 181.0], [32.8, 182.0], [32.9, 183.0], [33.0, 184.0], [33.1, 184.0], [33.2, 185.0], [33.3, 186.0], [33.4, 186.0], [33.5, 187.0], [33.6, 188.0], [33.7, 188.0], [33.8, 189.0], [33.9, 190.0], [34.0, 191.0], [34.1, 191.0], [34.2, 192.0], [34.3, 193.0], [34.4, 193.0], [34.5, 194.0], [34.6, 195.0], [34.7, 196.0], [34.8, 197.0], [34.9, 198.0], [35.0, 198.0], [35.1, 199.0], [35.2, 200.0], [35.3, 201.0], [35.4, 202.0], [35.5, 202.0], [35.6, 203.0], [35.7, 204.0], [35.8, 205.0], [35.9, 206.0], [36.0, 207.0], [36.1, 208.0], [36.2, 209.0], [36.3, 210.0], [36.4, 211.0], [36.5, 212.0], [36.6, 213.0], [36.7, 214.0], [36.8, 215.0], [36.9, 216.0], [37.0, 217.0], [37.1, 218.0], [37.2, 219.0], [37.3, 220.0], [37.4, 221.0], [37.5, 222.0], [37.6, 223.0], [37.7, 224.0], [37.8, 226.0], [37.9, 227.0], [38.0, 228.0], [38.1, 229.0], [38.2, 230.0], [38.3, 232.0], [38.4, 233.0], [38.5, 234.0], [38.6, 236.0], [38.7, 237.0], [38.8, 238.0], [38.9, 240.0], [39.0, 241.0], [39.1, 243.0], [39.2, 244.0], [39.3, 245.0], [39.4, 247.0], [39.5, 248.0], [39.6, 249.0], [39.7, 251.0], [39.8, 253.0], [39.9, 254.0], [40.0, 256.0], [40.1, 258.0], [40.2, 259.0], [40.3, 261.0], [40.4, 262.0], [40.5, 264.0], [40.6, 266.0], [40.7, 267.0], [40.8, 269.0], [40.9, 271.0], [41.0, 272.0], [41.1, 274.0], [41.2, 276.0], [41.3, 277.0], [41.4, 279.0], [41.5, 281.0], [41.6, 283.0], [41.7, 285.0], [41.8, 287.0], [41.9, 289.0], [42.0, 291.0], [42.1, 293.0], [42.2, 295.0], [42.3, 297.0], [42.4, 300.0], [42.5, 302.0], [42.6, 304.0], [42.7, 306.0], [42.8, 309.0], [42.9, 311.0], [43.0, 313.0], [43.1, 316.0], [43.2, 318.0], [43.3, 320.0], [43.4, 322.0], [43.5, 324.0], [43.6, 327.0], [43.7, 328.0], [43.8, 331.0], [43.9, 333.0], [44.0, 336.0], [44.1, 338.0], [44.2, 341.0], [44.3, 343.0], [44.4, 346.0], [44.5, 348.0], [44.6, 350.0], [44.7, 353.0], [44.8, 355.0], [44.9, 357.0], [45.0, 359.0], [45.1, 362.0], [45.2, 365.0], [45.3, 367.0], [45.4, 370.0], [45.5, 372.0], [45.6, 375.0], [45.7, 377.0], [45.8, 380.0], [45.9, 382.0], [46.0, 384.0], [46.1, 387.0], [46.2, 389.0], [46.3, 392.0], [46.4, 394.0], [46.5, 397.0], [46.6, 399.0], [46.7, 401.0], [46.8, 404.0], [46.9, 406.0], [47.0, 409.0], [47.1, 411.0], [47.2, 413.0], [47.3, 415.0], [47.4, 418.0], [47.5, 420.0], [47.6, 423.0], [47.7, 425.0], [47.8, 428.0], [47.9, 430.0], [48.0, 432.0], [48.1, 434.0], [48.2, 437.0], [48.3, 439.0], [48.4, 441.0], [48.5, 443.0], [48.6, 446.0], [48.7, 447.0], [48.8, 450.0], [48.9, 452.0], [49.0, 454.0], [49.1, 456.0], [49.2, 458.0], [49.3, 461.0], [49.4, 463.0], [49.5, 465.0], [49.6, 467.0], [49.7, 469.0], [49.8, 471.0], [49.9, 474.0], [50.0, 476.0], [50.1, 478.0], [50.2, 480.0], [50.3, 482.0], [50.4, 484.0], [50.5, 486.0], [50.6, 488.0], [50.7, 491.0], [50.8, 493.0], [50.9, 495.0], [51.0, 497.0], [51.1, 499.0], [51.2, 501.0], [51.3, 503.0], [51.4, 505.0], [51.5, 507.0], [51.6, 509.0], [51.7, 511.0], [51.8, 513.0], [51.9, 514.0], [52.0, 516.0], [52.1, 518.0], [52.2, 520.0], [52.3, 522.0], [52.4, 524.0], [52.5, 526.0], [52.6, 528.0], [52.7, 530.0], [52.8, 532.0], [52.9, 534.0], [53.0, 536.0], [53.1, 537.0], [53.2, 539.0], [53.3, 541.0], [53.4, 543.0], [53.5, 544.0], [53.6, 546.0], [53.7, 548.0], [53.8, 550.0], [53.9, 552.0], [54.0, 554.0], [54.1, 556.0], [54.2, 558.0], [54.3, 559.0], [54.4, 561.0], [54.5, 563.0], [54.6, 565.0], [54.7, 567.0], [54.8, 569.0], [54.9, 571.0], [55.0, 572.0], [55.1, 575.0], [55.2, 576.0], [55.3, 578.0], [55.4, 580.0], [55.5, 582.0], [55.6, 583.0], [55.7, 585.0], [55.8, 587.0], [55.9, 589.0], [56.0, 591.0], [56.1, 593.0], [56.2, 594.0], [56.3, 596.0], [56.4, 598.0], [56.5, 600.0], [56.6, 601.0], [56.7, 603.0], [56.8, 605.0], [56.9, 607.0], [57.0, 609.0], [57.1, 611.0], [57.2, 613.0], [57.3, 615.0], [57.4, 617.0], [57.5, 618.0], [57.6, 620.0], [57.7, 622.0], [57.8, 623.0], [57.9, 625.0], [58.0, 627.0], [58.1, 629.0], [58.2, 630.0], [58.3, 632.0], [58.4, 634.0], [58.5, 636.0], [58.6, 638.0], [58.7, 639.0], [58.8, 641.0], [58.9, 643.0], [59.0, 645.0], [59.1, 647.0], [59.2, 649.0], [59.3, 650.0], [59.4, 652.0], [59.5, 654.0], [59.6, 656.0], [59.7, 657.0], [59.8, 659.0], [59.9, 661.0], [60.0, 663.0], [60.1, 664.0], [60.2, 666.0], [60.3, 668.0], [60.4, 669.0], [60.5, 671.0], [60.6, 673.0], [60.7, 674.0], [60.8, 676.0], [60.9, 678.0], [61.0, 680.0], [61.1, 682.0], [61.2, 683.0], [61.3, 685.0], [61.4, 687.0], [61.5, 689.0], [61.6, 691.0], [61.7, 692.0], [61.8, 694.0], [61.9, 696.0], [62.0, 698.0], [62.1, 700.0], [62.2, 701.0], [62.3, 703.0], [62.4, 705.0], [62.5, 706.0], [62.6, 708.0], [62.7, 710.0], [62.8, 712.0], [62.9, 714.0], [63.0, 716.0], [63.1, 718.0], [63.2, 719.0], [63.3, 721.0], [63.4, 723.0], [63.5, 725.0], [63.6, 726.0], [63.7, 728.0], [63.8, 730.0], [63.9, 732.0], [64.0, 733.0], [64.1, 735.0], [64.2, 737.0], [64.3, 739.0], [64.4, 741.0], [64.5, 742.0], [64.6, 744.0], [64.7, 746.0], [64.8, 747.0], [64.9, 749.0], [65.0, 751.0], [65.1, 752.0], [65.2, 754.0], [65.3, 756.0], [65.4, 757.0], [65.5, 759.0], [65.6, 761.0], [65.7, 763.0], [65.8, 764.0], [65.9, 766.0], [66.0, 768.0], [66.1, 770.0], [66.2, 772.0], [66.3, 774.0], [66.4, 775.0], [66.5, 777.0], [66.6, 779.0], [66.7, 781.0], [66.8, 783.0], [66.9, 785.0], [67.0, 787.0], [67.1, 788.0], [67.2, 790.0], [67.3, 792.0], [67.4, 794.0], [67.5, 795.0], [67.6, 797.0], [67.7, 799.0], [67.8, 801.0], [67.9, 803.0], [68.0, 804.0], [68.1, 806.0], [68.2, 808.0], [68.3, 810.0], [68.4, 812.0], [68.5, 813.0], [68.6, 815.0], [68.7, 817.0], [68.8, 819.0], [68.9, 821.0], [69.0, 823.0], [69.1, 825.0], [69.2, 826.0], [69.3, 828.0], [69.4, 830.0], [69.5, 832.0], [69.6, 834.0], [69.7, 836.0], [69.8, 837.0], [69.9, 839.0], [70.0, 841.0], [70.1, 843.0], [70.2, 844.0], [70.3, 846.0], [70.4, 848.0], [70.5, 850.0], [70.6, 852.0], [70.7, 853.0], [70.8, 855.0], [70.9, 857.0], [71.0, 859.0], [71.1, 860.0], [71.2, 862.0], [71.3, 864.0], [71.4, 866.0], [71.5, 868.0], [71.6, 870.0], [71.7, 872.0], [71.8, 874.0], [71.9, 875.0], [72.0, 877.0], [72.1, 879.0], [72.2, 881.0], [72.3, 883.0], [72.4, 885.0], [72.5, 887.0], [72.6, 889.0], [72.7, 891.0], [72.8, 893.0], [72.9, 895.0], [73.0, 896.0], [73.1, 898.0], [73.2, 900.0], [73.3, 902.0], [73.4, 904.0], [73.5, 906.0], [73.6, 908.0], [73.7, 910.0], [73.8, 912.0], [73.9, 914.0], [74.0, 916.0], [74.1, 918.0], [74.2, 920.0], [74.3, 922.0], [74.4, 924.0], [74.5, 925.0], [74.6, 928.0], [74.7, 929.0], [74.8, 931.0], [74.9, 933.0], [75.0, 935.0], [75.1, 937.0], [75.2, 940.0], [75.3, 942.0], [75.4, 944.0], [75.5, 946.0], [75.6, 948.0], [75.7, 950.0], [75.8, 952.0], [75.9, 954.0], [76.0, 956.0], [76.1, 959.0], [76.2, 960.0], [76.3, 963.0], [76.4, 965.0], [76.5, 967.0], [76.6, 969.0], [76.7, 971.0], [76.8, 973.0], [76.9, 975.0], [77.0, 977.0], [77.1, 979.0], [77.2, 981.0], [77.3, 984.0], [77.4, 986.0], [77.5, 988.0], [77.6, 990.0], [77.7, 992.0], [77.8, 994.0], [77.9, 996.0], [78.0, 998.0], [78.1, 1001.0], [78.2, 1003.0], [78.3, 1005.0], [78.4, 1007.0], [78.5, 1009.0], [78.6, 1012.0], [78.7, 1014.0], [78.8, 1017.0], [78.9, 1019.0], [79.0, 1021.0], [79.1, 1024.0], [79.2, 1026.0], [79.3, 1028.0], [79.4, 1031.0], [79.5, 1033.0], [79.6, 1035.0], [79.7, 1038.0], [79.8, 1040.0], [79.9, 1043.0], [80.0, 1045.0], [80.1, 1047.0], [80.2, 1050.0], [80.3, 1052.0], [80.4, 1055.0], [80.5, 1057.0], [80.6, 1059.0], [80.7, 1061.0], [80.8, 1064.0], [80.9, 1066.0], [81.0, 1069.0], [81.1, 1071.0], [81.2, 1073.0], [81.3, 1076.0], [81.4, 1079.0], [81.5, 1081.0], [81.6, 1083.0], [81.7, 1086.0], [81.8, 1088.0], [81.9, 1091.0], [82.0, 1093.0], [82.1, 1095.0], [82.2, 1098.0], [82.3, 1101.0], [82.4, 1104.0], [82.5, 1106.0], [82.6, 1109.0], [82.7, 1112.0], [82.8, 1114.0], [82.9, 1117.0], [83.0, 1120.0], [83.1, 1122.0], [83.2, 1125.0], [83.3, 1128.0], [83.4, 1130.0], [83.5, 1133.0], [83.6, 1136.0], [83.7, 1139.0], [83.8, 1141.0], [83.9, 1144.0], [84.0, 1147.0], [84.1, 1149.0], [84.2, 1152.0], [84.3, 1155.0], [84.4, 1158.0], [84.5, 1161.0], [84.6, 1163.0], [84.7, 1166.0], [84.8, 1169.0], [84.9, 1172.0], [85.0, 1175.0], [85.1, 1178.0], [85.2, 1181.0], [85.3, 1184.0], [85.4, 1187.0], [85.5, 1190.0], [85.6, 1192.0], [85.7, 1196.0], [85.8, 1199.0], [85.9, 1202.0], [86.0, 1204.0], [86.1, 1207.0], [86.2, 1210.0], [86.3, 1213.0], [86.4, 1216.0], [86.5, 1219.0], [86.6, 1222.0], [86.7, 1225.0], [86.8, 1229.0], [86.9, 1232.0], [87.0, 1235.0], [87.1, 1238.0], [87.2, 1242.0], [87.3, 1245.0], [87.4, 1248.0], [87.5, 1251.0], [87.6, 1255.0], [87.7, 1259.0], [87.8, 1263.0], [87.9, 1266.0], [88.0, 1270.0], [88.1, 1273.0], [88.2, 1277.0], [88.3, 1280.0], [88.4, 1284.0], [88.5, 1288.0], [88.6, 1292.0], [88.7, 1295.0], [88.8, 1299.0], [88.9, 1303.0], [89.0, 1307.0], [89.1, 1311.0], [89.2, 1315.0], [89.3, 1319.0], [89.4, 1323.0], [89.5, 1327.0], [89.6, 1331.0], [89.7, 1335.0], [89.8, 1339.0], [89.9, 1343.0], [90.0, 1347.0], [90.1, 1351.0], [90.2, 1356.0], [90.3, 1360.0], [90.4, 1364.0], [90.5, 1368.0], [90.6, 1373.0], [90.7, 1377.0], [90.8, 1381.0], [90.9, 1386.0], [91.0, 1389.0], [91.1, 1394.0], [91.2, 1399.0], [91.3, 1403.0], [91.4, 1407.0], [91.5, 1411.0], [91.6, 1416.0], [91.7, 1420.0], [91.8, 1425.0], [91.9, 1431.0], [92.0, 1435.0], [92.1, 1441.0], [92.2, 1446.0], [92.3, 1451.0], [92.4, 1457.0], [92.5, 1461.0], [92.6, 1467.0], [92.7, 1473.0], [92.8, 1478.0], [92.9, 1484.0], [93.0, 1490.0], [93.1, 1495.0], [93.2, 1501.0], [93.3, 1506.0], [93.4, 1513.0], [93.5, 1518.0], [93.6, 1524.0], [93.7, 1529.0], [93.8, 1535.0], [93.9, 1541.0], [94.0, 1549.0], [94.1, 1555.0], [94.2, 1561.0], [94.3, 1569.0], [94.4, 1576.0], [94.5, 1583.0], [94.6, 1591.0], [94.7, 1598.0], [94.8, 1605.0], [94.9, 1612.0], [95.0, 1619.0], [95.1, 1627.0], [95.2, 1634.0], [95.3, 1641.0], [95.4, 1649.0], [95.5, 1658.0], [95.6, 1667.0], [95.7, 1675.0], [95.8, 1684.0], [95.9, 1691.0], [96.0, 1700.0], [96.1, 1711.0], [96.2, 1719.0], [96.3, 1729.0], [96.4, 1738.0], [96.5, 1748.0], [96.6, 1759.0], [96.7, 1771.0], [96.8, 1782.0], [96.9, 1794.0], [97.0, 1803.0], [97.1, 1815.0], [97.2, 1829.0], [97.3, 1842.0], [97.4, 1853.0], [97.5, 1867.0], [97.6, 1882.0], [97.7, 1897.0], [97.8, 1911.0], [97.9, 1928.0], [98.0, 1943.0], [98.1, 1961.0], [98.2, 1980.0], [98.3, 1997.0], [98.4, 2014.0], [98.5, 2031.0], [98.6, 2052.0], [98.7, 2077.0], [98.8, 2102.0], [98.9, 2128.0], [99.0, 2156.0], [99.1, 2193.0], [99.2, 2227.0], [99.3, 2270.0], [99.4, 2316.0], [99.5, 2367.0], [99.6, 2436.0], [99.7, 2517.0], [99.8, 2622.0], [99.9, 2790.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24395.0, "series": [{"data": [[0.0, 16789.0], [600.0, 6552.0], [700.0, 6608.0], [800.0, 6384.0], [900.0, 5713.0], [1000.0, 4912.0], [1100.0, 4200.0], [1200.0, 3513.0], [1300.0, 2821.0], [1400.0, 2272.0], [1500.0, 1831.0], [100.0, 24395.0], [1600.0, 1481.0], [1700.0, 1144.0], [1800.0, 883.0], [1900.0, 698.0], [2000.0, 551.0], [2100.0, 395.0], [2300.0, 220.0], [2200.0, 279.0], [2400.0, 160.0], [2500.0, 118.0], [2600.0, 81.0], [2700.0, 54.0], [2800.0, 49.0], [2900.0, 26.0], [3000.0, 15.0], [3100.0, 9.0], [200.0, 8497.0], [3300.0, 6.0], [3200.0, 8.0], [3400.0, 1.0], [3500.0, 2.0], [3600.0, 1.0], [300.0, 4937.0], [400.0, 5301.0], [500.0, 6294.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7990.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 59982.0, "series": [{"data": [[0.0, 59982.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 49228.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7990.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72864926E12, "maxY": 16.0, "series": [{"data": [[1.72865412E12, 12.0], [1.72865382E12, 12.0], [1.72865472E12, 12.0], [1.72865442E12, 12.0], [1.72865484E12, 12.0], [1.72865454E12, 12.0], [1.72865352E12, 12.0], [1.72865322E12, 12.0], [1.72865364E12, 12.0], [1.72865334E12, 12.0], [1.72865424E12, 12.0], [1.72865394E12, 12.0], [1.72865436E12, 12.0], [1.72865406E12, 12.0], [1.72865496E12, 7.495049504950491], [1.72865466E12, 12.0], [1.72865316E12, 12.0], [1.72865478E12, 12.0], [1.72865376E12, 12.0], [1.72865346E12, 12.0], [1.72865388E12, 12.0], [1.72865358E12, 12.0], [1.72865448E12, 12.0], [1.72865418E12, 12.0], [1.7286546E12, 12.0], [1.7286543E12, 12.0], [1.72865328E12, 12.0], [1.7286549E12, 11.599637681159402], [1.7286534E12, 12.0], [1.72865502E12, 1.0], [1.7286531E12, 11.955641272902605], [1.728654E12, 12.0], [1.7286537E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72864944E12, 1.9116607773851595], [1.72864932E12, 2.0], [1.72864938E12, 2.0], [1.72864926E12, 1.9966996699669968]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72865088E12, 4.0], [1.72865058E12, 4.0], [1.72865028E12, 4.0], [1.72864998E12, 4.0], [1.72864968E12, 4.0], [1.7286507E12, 4.0], [1.728651E12, 4.0], [1.7286504E12, 4.0], [1.7286501E12, 4.0], [1.7286498E12, 4.0], [1.7286495E12, 4.0], [1.72865082E12, 4.0], [1.72865112E12, 1.8195121951219513], [1.72865052E12, 4.0], [1.72865022E12, 4.0], [1.72864992E12, 4.0], [1.72864962E12, 4.0], [1.72865094E12, 4.0], [1.72865064E12, 4.0], [1.72865034E12, 4.0], [1.72865004E12, 4.0], [1.72864974E12, 4.0], [1.72864944E12, 3.727272727272727], [1.72865106E12, 3.4571428571428573], [1.72865076E12, 4.0], [1.72865046E12, 4.0], [1.72865016E12, 4.0], [1.72864986E12, 4.0], [1.72864956E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72865574E12, 16.0], [1.72865604E12, 16.0], [1.72865634E12, 16.0], [1.72865664E12, 3.632231404958678], [1.72865646E12, 16.0], [1.72865514E12, 16.0], [1.72865544E12, 16.0], [1.72865526E12, 16.0], [1.72865556E12, 16.0], [1.72865586E12, 16.0], [1.72865616E12, 16.0], [1.72865598E12, 16.0], [1.72865628E12, 16.0], [1.72865658E12, 13.25611745513867], [1.72865508E12, 16.0], [1.72865538E12, 16.0], [1.72865568E12, 16.0], [1.7286555E12, 16.0], [1.7286558E12, 16.0], [1.7286561E12, 16.0], [1.7286564E12, 16.0], [1.72865622E12, 16.0], [1.72865652E12, 16.0], [1.7286552E12, 16.0], [1.72865502E12, 15.948393378773119], [1.72865532E12, 16.0], [1.72865562E12, 16.0], [1.72865592E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.7286525E12, 8.0], [1.7286528E12, 8.0], [1.7286519E12, 8.0], [1.7286522E12, 8.0], [1.7286513E12, 8.0], [1.7286516E12, 8.0], [1.72865262E12, 8.0], [1.72865292E12, 8.0], [1.72865202E12, 8.0], [1.72865232E12, 8.0], [1.72865142E12, 8.0], [1.72865172E12, 8.0], [1.72865274E12, 8.0], [1.72865112E12, 7.9360465116279055], [1.72865214E12, 8.0], [1.72865304E12, 6.827160493827159], [1.72865244E12, 8.0], [1.72865154E12, 8.0], [1.72865184E12, 8.0], [1.72865286E12, 8.0], [1.72865124E12, 8.0], [1.72865226E12, 8.0], [1.72865256E12, 8.0], [1.72865166E12, 8.0], [1.72865196E12, 8.0], [1.72865298E12, 8.0], [1.72865136E12, 8.0], [1.72865238E12, 8.0], [1.72865268E12, 8.0], [1.72865178E12, 8.0], [1.72865208E12, 8.0], [1.7286531E12, 1.4545454545454544], [1.72865118E12, 8.0], [1.72865148E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72865664E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 369.025641025641, "minX": 1.0, "maxY": 811.7394903424758, "series": [{"data": [[2.0, 393.0637626262615], [8.0, 479.86096424974966], [9.0, 511.2962962962964], [10.0, 564.0330188679242], [11.0, 593.6874999999987], [3.0, 369.025641025641], [12.0, 631.8827369995379], [13.0, 591.0266666666665], [14.0, 660.1673819742487], [15.0, 611.5038759689922], [1.0, 428.276595744681], [4.0, 407.8368857689828], [16.0, 811.7394903424758], [5.0, 403.3732057416269], [6.0, 437.6776556776559], [7.0, 453.36040609137075]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.697909556314174, 602.5108105802112]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72864926E12, "maxY": 6.154326361666667E7, "series": [{"data": [[1.7286525E12, 4.94989784E7], [1.72865574E12, 6.0423653916666664E7], [1.72865028E12, 2.9484670166666668E7], [1.72865472E12, 5.813519686666667E7], [1.7286513E12, 5.2186020666666664E7], [1.72865454E12, 5.77139841E7], [1.72865352E12, 5.8764254583333336E7], [1.7286501E12, 2.982212545E7], [1.72865232E12, 5.1078615233333334E7], [1.72865334E12, 5.945141605E7], [1.72865556E12, 6.0554095583333336E7], [1.72865436E12, 5.836101005E7], [1.72865112E12, 1.8218085233333334E7], [1.72865214E12, 5.109146245E7], [1.72865658E12, 5.701693696666667E7], [1.72864992E12, 3.10133351E7], [1.72865316E12, 5.7982313516666666E7], [1.72865094E12, 3.0700374883333333E7], [1.72865538E12, 6.136351071666667E7], [1.72865418E12, 6.02580188E7], [1.7286564E12, 6.1236875333333336E7], [1.72864974E12, 3.115276015E7], [1.72865196E12, 4.961714995E7], [1.72865298E12, 5.101469315E7], [1.72865622E12, 5.913046195E7], [1.72865076E12, 3.0512980333333332E7], [1.7286552E12, 5.951748968333333E7], [1.72865178E12, 5.064829821666667E7], [1.72865502E12, 5.001900315E7], [1.72864956E12, 3.04356866E7], [1.728654E12, 5.588631088333333E7], [1.72864998E12, 2.954575285E7], [1.7286522E12, 5.095973603333333E7], [1.72865442E12, 5.616665035E7], [1.72865664E12, 1.3446397033333333E7], [1.72865646E12, 6.045129575E7], [1.728651E12, 2.882135935E7], [1.72865322E12, 5.769266211666667E7], [1.72865544E12, 6.133508075E7], [1.72865202E12, 5.186712985E7], [1.72865526E12, 5.9865469083333336E7], [1.72865424E12, 5.675799681666667E7], [1.7286498E12, 3.0288638283333335E7], [1.72865082E12, 3.0737350033333335E7], [1.72865628E12, 6.053014161666667E7], [1.72865406E12, 5.822112413333333E7], [1.72865304E12, 4.25957422E7], [1.72865508E12, 5.9728409766666666E7], [1.72864962E12, 2.9548755616666667E7], [1.72865184E12, 5.098756331666667E7], [1.72865286E12, 5.039647903333333E7], [1.72865064E12, 3.0442777066666666E7], [1.72865388E12, 5.741676405E7], [1.72865166E12, 4.964145013333333E7], [1.7286561E12, 6.030893478333333E7], [1.72864944E12, 1.4249546516666668E7], [1.72865046E12, 3.109877615E7], [1.72865268E12, 5.313356365E7], [1.7286549E12, 5.715723946666667E7], [1.72864926E12, 1.5810552583333334E7], [1.72865148E12, 5.27947807E7], [1.7286537E12, 5.916770913333333E7], [1.72865592E12, 6.062941415E7], [1.72865088E12, 2.8722252566666666E7], [1.72865412E12, 5.637842056666667E7], [1.72865634E12, 5.94498108E7], [1.7286519E12, 5.050099555E7], [1.72864968E12, 3.0513386166666668E7], [1.72865514E12, 6.070743688333333E7], [1.7286507E12, 3.077076505E7], [1.72865292E12, 5.112288271666667E7], [1.7286495E12, 2.9168674083333332E7], [1.72865172E12, 5.051269381666667E7], [1.72865394E12, 5.722760571666667E7], [1.72865616E12, 6.1047566666666664E7], [1.72865274E12, 5.18349422E7], [1.72865598E12, 6.1307118766666666E7], [1.72865052E12, 2.9664387683333334E7], [1.72865496E12, 4.231977006666667E7], [1.72865154E12, 5.0301450483333334E7], [1.72865478E12, 5.825604293333333E7], [1.72864932E12, 1.5257659883333333E7], [1.72865376E12, 5.744618831666667E7], [1.72865034E12, 2.8729877483333334E7], [1.72865256E12, 4.9639489E7], [1.72865358E12, 5.7157951233333334E7], [1.7286558E12, 5.955213278333333E7], [1.7286546E12, 5.8170219983333334E7], [1.72865136E12, 5.1258005416666664E7], [1.72865238E12, 5.076360503333333E7], [1.72865016E12, 3.06147721E7], [1.7286534E12, 5.905790085E7], [1.72865118E12, 5.138503635E7], [1.72865562E12, 6.0321707416666664E7], [1.72865058E12, 2.9514180083333332E7], [1.7286528E12, 4.941563103333333E7], [1.72865382E12, 5.9362910583333336E7], [1.72865604E12, 6.154326361666667E7], [1.72865484E12, 5.6623187E7], [1.72864938E12, 1.5680867133333333E7], [1.7286516E12, 4.82137447E7], [1.72865262E12, 5.148197836666667E7], [1.7286504E12, 2.9930148816666666E7], [1.72865364E12, 5.593148961666667E7], [1.72865142E12, 4.9949385483333334E7], [1.72865586E12, 6.03518565E7], [1.72865022E12, 3.0390953933333334E7], [1.72865244E12, 5.051892081666667E7], [1.72865466E12, 5.7942197666666664E7], [1.72865124E12, 4.907846061666667E7], [1.72865346E12, 5.9022995983333334E7], [1.72865568E12, 6.082874693333333E7], [1.72865226E12, 4.933353761666667E7], [1.7286555E12, 5.941475478333333E7], [1.72865004E12, 3.0957395083333332E7], [1.72865448E12, 5.686309163333333E7], [1.72865106E12, 2.3693819733333334E7], [1.7286543E12, 5.7497529516666666E7], [1.72865652E12, 5.96935371E7], [1.72865328E12, 5.7094908416666664E7], [1.72865208E12, 5.01172341E7], [1.72864986E12, 3.0600525016666666E7], [1.7286531E12, 5.1229992416666664E7], [1.72865532E12, 5.9017432766666666E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7286525E12, 0.0], [1.72865574E12, 0.0], [1.72865028E12, 0.0], [1.72865472E12, 0.0], [1.7286513E12, 0.0], [1.72865454E12, 0.0], [1.72865352E12, 0.0], [1.7286501E12, 0.0], [1.72865232E12, 0.0], [1.72865334E12, 0.0], [1.72865556E12, 0.0], [1.72865436E12, 0.0], [1.72865112E12, 0.0], [1.72865214E12, 0.0], [1.72865658E12, 0.0], [1.72864992E12, 0.0], [1.72865316E12, 0.0], [1.72865094E12, 0.0], [1.72865538E12, 0.0], [1.72865418E12, 0.0], [1.7286564E12, 0.0], [1.72864974E12, 0.0], [1.72865196E12, 0.0], [1.72865298E12, 0.0], [1.72865622E12, 0.0], [1.72865076E12, 0.0], [1.7286552E12, 0.0], [1.72865178E12, 0.0], [1.72865502E12, 0.0], [1.72864956E12, 0.0], [1.728654E12, 0.0], [1.72864998E12, 0.0], [1.7286522E12, 0.0], [1.72865442E12, 0.0], [1.72865664E12, 0.0], [1.72865646E12, 0.0], [1.728651E12, 0.0], [1.72865322E12, 0.0], [1.72865544E12, 0.0], [1.72865202E12, 0.0], [1.72865526E12, 0.0], [1.72865424E12, 0.0], [1.7286498E12, 0.0], [1.72865082E12, 0.0], [1.72865628E12, 0.0], [1.72865406E12, 0.0], [1.72865304E12, 0.0], [1.72865508E12, 0.0], [1.72864962E12, 0.0], [1.72865184E12, 0.0], [1.72865286E12, 0.0], [1.72865064E12, 0.0], [1.72865388E12, 0.0], [1.72865166E12, 0.0], [1.7286561E12, 0.0], [1.72864944E12, 0.0], [1.72865046E12, 0.0], [1.72865268E12, 0.0], [1.7286549E12, 0.0], [1.72864926E12, 0.0], [1.72865148E12, 0.0], [1.7286537E12, 0.0], [1.72865592E12, 0.0], [1.72865088E12, 0.0], [1.72865412E12, 0.0], [1.72865634E12, 0.0], [1.7286519E12, 0.0], [1.72864968E12, 0.0], [1.72865514E12, 0.0], [1.7286507E12, 0.0], [1.72865292E12, 0.0], [1.7286495E12, 0.0], [1.72865172E12, 0.0], [1.72865394E12, 0.0], [1.72865616E12, 0.0], [1.72865274E12, 0.0], [1.72865598E12, 0.0], [1.72865052E12, 0.0], [1.72865496E12, 0.0], [1.72865154E12, 0.0], [1.72865478E12, 0.0], [1.72864932E12, 0.0], [1.72865376E12, 0.0], [1.72865034E12, 0.0], [1.72865256E12, 0.0], [1.72865358E12, 0.0], [1.7286558E12, 0.0], [1.7286546E12, 0.0], [1.72865136E12, 0.0], [1.72865238E12, 0.0], [1.72865016E12, 0.0], [1.7286534E12, 0.0], [1.72865118E12, 0.0], [1.72865562E12, 0.0], [1.72865058E12, 0.0], [1.7286528E12, 0.0], [1.72865382E12, 0.0], [1.72865604E12, 0.0], [1.72865484E12, 0.0], [1.72864938E12, 0.0], [1.7286516E12, 0.0], [1.72865262E12, 0.0], [1.7286504E12, 0.0], [1.72865364E12, 0.0], [1.72865142E12, 0.0], [1.72865586E12, 0.0], [1.72865022E12, 0.0], [1.72865244E12, 0.0], [1.72865466E12, 0.0], [1.72865124E12, 0.0], [1.72865346E12, 0.0], [1.72865568E12, 0.0], [1.72865226E12, 0.0], [1.7286555E12, 0.0], [1.72865004E12, 0.0], [1.72865448E12, 0.0], [1.72865106E12, 0.0], [1.7286543E12, 0.0], [1.72865652E12, 0.0], [1.72865328E12, 0.0], [1.72865208E12, 0.0], [1.72864986E12, 0.0], [1.7286531E12, 0.0], [1.72865532E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72865664E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 377.9069400630915, "minX": 1.72864926E12, "maxY": 870.2291666666669, "series": [{"data": [[1.7286525E12, 457.58015267175625], [1.72865574E12, 774.8105263157895], [1.72865028E12, 386.17475728155335], [1.72865472E12, 597.3642384105958], [1.7286513E12, 474.20886699507383], [1.72865454E12, 648.2830188679249], [1.72865352E12, 644.813226094726], [1.7286501E12, 404.0084317032039], [1.72865232E12, 483.7359437751002], [1.72865334E12, 629.3029513888893], [1.72865556E12, 815.8445199660171], [1.72865436E12, 615.3982905982913], [1.72865112E12, 417.90450928381966], [1.72865214E12, 487.31020408163255], [1.72865658E12, 650.9861337683525], [1.72864992E12, 446.72523364486005], [1.72865316E12, 611.1426146010176], [1.72865094E12, 418.2382608695654], [1.72865538E12, 845.0872246696028], [1.72865418E12, 626.072790294628], [1.7286564E12, 799.5767946577636], [1.72864974E12, 397.7541528239202], [1.72865196E12, 456.0646387832701], [1.72865298E12, 496.44008264462826], [1.72865622E12, 771.7117552334942], [1.72865076E12, 431.9982078853044], [1.7286552E12, 795.6996699669963], [1.72865178E12, 486.58215010141913], [1.72865502E12, 758.3935052531048], [1.72864956E12, 398.9169435215945], [1.728654E12, 608.320707070707], [1.72864998E12, 424.9168141592922], [1.7286522E12, 488.5934959349593], [1.72865442E12, 627.55710549259], [1.72865664E12, 439.6983471074379], [1.72865646E12, 869.5407608695645], [1.728651E12, 377.9069400630915], [1.72865322E12, 643.0383586083863], [1.72865544E12, 818.7274275979549], [1.72865202E12, 494.55257731958767], [1.72865526E12, 780.2773722627744], [1.72865424E12, 626.3205240174669], [1.7286498E12, 403.36195286195294], [1.72865082E12, 425.38434163701066], [1.72865628E12, 830.4447322970639], [1.72865406E12, 657.7351598173519], [1.72865304E12, 461.2740740740739], [1.72865508E12, 819.6823228010245], [1.72864962E12, 403.4847972972974], [1.72865184E12, 477.908183632734], [1.72865286E12, 481.10642570281107], [1.72865064E12, 402.0050083472455], [1.72865388E12, 652.4584837545125], [1.72865166E12, 476.3465739821255], [1.7286561E12, 798.2148209825151], [1.72864944E12, 389.46258503401344], [1.72865046E12, 405.2013536379017], [1.72865268E12, 490.30040733197615], [1.7286549E12, 630.582427536231], [1.72864926E12, 386.49504950495043], [1.72865148E12, 475.0956607495069], [1.7286537E12, 637.9300265721874], [1.72865592E12, 839.2237762237768], [1.72865088E12, 404.75420875420906], [1.72865412E12, 609.8589634664394], [1.72865634E12, 780.4180929095357], [1.7286519E12, 471.0421568627453], [1.72864968E12, 442.0440366972474], [1.72865514E12, 804.4215851602023], [1.7286507E12, 391.2528548123978], [1.72865292E12, 486.738555442523], [1.7286495E12, 391.8908794788274], [1.72865172E12, 496.8078512396693], [1.72865394E12, 651.9255222524982], [1.72865616E12, 839.5375874125867], [1.72865274E12, 487.02842639593877], [1.72865598E12, 813.0626587637598], [1.72865052E12, 398.57142857142804], [1.72865496E12, 500.1819306930694], [1.72865154E12, 480.60381143430266], [1.72865478E12, 642.2747546833192], [1.72864932E12, 384.8032258064516], [1.72865376E12, 632.0668425681621], [1.72865034E12, 394.8898026315789], [1.72865256E12, 478.0788423153692], [1.72865358E12, 614.4586206896562], [1.7286558E12, 796.2244224422442], [1.7286546E12, 642.3592493297591], [1.72865136E12, 479.6599999999997], [1.72865238E12, 476.2300796812748], [1.72865016E12, 428.8960573476701], [1.7286534E12, 680.5393364928916], [1.72865118E12, 503.8014705882353], [1.72865562E12, 815.8971962616821], [1.72865058E12, 404.5288135593216], [1.7286528E12, 480.3409999999997], [1.72865382E12, 620.6519480519479], [1.72865604E12, 870.2291666666669], [1.72865484E12, 646.5494604316544], [1.72864938E12, 395.371710526316], [1.7286516E12, 462.0849420849414], [1.72865262E12, 492.1065573770494], [1.7286504E12, 416.2370242214531], [1.72865364E12, 619.7777777777765], [1.72865142E12, 474.331020812686], [1.72865586E12, 801.8828451882839], [1.72865022E12, 401.95174708818615], [1.72865244E12, 468.2893450635383], [1.72865466E12, 628.4685863874348], [1.72865124E12, 460.9500480307397], [1.72865346E12, 646.735426008969], [1.72865568E12, 834.7937336814633], [1.72865226E12, 466.83026188166815], [1.7286555E12, 804.8078859060404], [1.72865004E12, 406.8477157360408], [1.72865448E12, 613.5735042735042], [1.72865106E12, 395.28571428571445], [1.7286543E12, 632.0605263157893], [1.72865652E12, 823.5132591958934], [1.72865328E12, 636.0239786856116], [1.72865208E12, 495.5583075335395], [1.72864986E12, 415.13275862068986], [1.7286531E12, 599.0557129367329], [1.72865532E12, 806.5628691983118]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72865664E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 247.14037854889597, "minX": 1.72864926E12, "maxY": 582.279891304348, "series": [{"data": [[1.7286525E12, 303.6832061068706], [1.72865574E12, 516.2712550607283], [1.72865028E12, 251.41423948220068], [1.72865472E12, 396.5447019867547], [1.7286513E12, 311.89852216748767], [1.72865454E12, 432.8301886792452], [1.72865352E12, 428.0321715817693], [1.7286501E12, 263.0522765598652], [1.72865232E12, 319.4859437751006], [1.72865334E12, 418.46267361111074], [1.72865556E12, 544.4256584536963], [1.72865436E12, 408.87435897435876], [1.72865112E12, 275.5994694960212], [1.72865214E12, 321.8785714285712], [1.72865658E12, 436.851549755302], [1.72864992E12, 289.72149532710284], [1.72865316E12, 407.7945670628187], [1.72865094E12, 271.19826086956556], [1.72865538E12, 562.5453744493386], [1.72865418E12, 413.5051993067588], [1.7286564E12, 532.2170283806345], [1.72864974E12, 256.31893687707645], [1.72865196E12, 302.43631178707227], [1.72865298E12, 327.3677685950414], [1.72865622E12, 518.0386473429953], [1.72865076E12, 280.3924731182793], [1.7286552E12, 532.9447194719472], [1.72865178E12, 323.22312373225157], [1.72865502E12, 510.61986628462245], [1.72864956E12, 259.85714285714295], [1.728654E12, 406.4074074074079], [1.72864998E12, 279.1044247787609], [1.7286522E12, 325.06707317073216], [1.72865442E12, 419.4603312990405], [1.72865664E12, 284.88016528925596], [1.72865646E12, 581.2699275362314], [1.728651E12, 247.14037854889597], [1.72865322E12, 430.48706512042787], [1.72865544E12, 545.6660988074952], [1.72865202E12, 326.6979381443296], [1.72865526E12, 526.1987023519865], [1.72865424E12, 417.044541484716], [1.7286498E12, 261.4528619528618], [1.72865082E12, 274.90925266903923], [1.72865628E12, 555.7227979274621], [1.72865406E12, 439.33150684931474], [1.72865304E12, 301.7296296296296], [1.72865508E12, 547.2109308283517], [1.72864962E12, 263.5996621621623], [1.72865184E12, 315.2974051896207], [1.72865286E12, 317.95481927710904], [1.72865064E12, 261.0767946577628], [1.72865388E12, 435.0063176895305], [1.72865166E12, 317.5173783515389], [1.7286561E12, 535.7568692756051], [1.72864944E12, 256.07142857142856], [1.72865046E12, 262.115059221658], [1.72865268E12, 323.0651731160894], [1.7286549E12, 419.32155797101433], [1.72864926E12, 247.4422442244225], [1.72865148E12, 310.96055226824456], [1.7286537E12, 423.47741364038944], [1.72865592E12, 562.8916083916087], [1.72865088E12, 267.688552188552], [1.72865412E12, 409.2837723024637], [1.72865634E12, 525.1939690301548], [1.7286519E12, 313.71372549019605], [1.72864968E12, 289.59449541284386], [1.72865514E12, 536.7698145025294], [1.7286507E12, 253.50734094616632], [1.72865292E12, 322.6276703967441], [1.7286495E12, 256.1449511400652], [1.72865172E12, 332.3202479338842], [1.72865394E12, 435.46412352406895], [1.72865616E12, 560.4143356643359], [1.72865274E12, 320.64263959390854], [1.72865598E12, 543.1168501270113], [1.72865052E12, 260.8006644518271], [1.72865496E12, 329.35519801980206], [1.72865154E12, 318.57673019057205], [1.72865478E12, 426.3371989295272], [1.72864932E12, 249.57419354838711], [1.72865376E12, 422.60773966578694], [1.72865034E12, 260.44572368421075], [1.72865256E12, 318.6986027944114], [1.72865358E12, 408.14913793103403], [1.7286558E12, 535.4018151815188], [1.7286546E12, 428.06344950848967], [1.72865136E12, 316.93300000000016], [1.72865238E12, 315.1563745019919], [1.72865016E12, 277.7347670250898], [1.7286534E12, 450.08530805687207], [1.72865118E12, 334.70798319327713], [1.72865562E12, 547.0433305012746], [1.72865058E12, 264.033898305085], [1.7286528E12, 320.70099999999996], [1.72865382E12, 409.6545454545458], [1.72865604E12, 582.279891304348], [1.72865484E12, 432.8507194244613], [1.72864938E12, 257.26973684210543], [1.7286516E12, 309.64575289575265], [1.72865262E12, 323.8596311475409], [1.7286504E12, 270.54844290657445], [1.72865364E12, 418.1299145299146], [1.72865142E12, 316.09217046580795], [1.72865586E12, 537.7372384937236], [1.72865022E12, 260.2312811980029], [1.72865244E12, 309.1534701857284], [1.72865466E12, 418.1928446771376], [1.72865124E12, 308.02785782901066], [1.72865346E12, 429.92107623318367], [1.72865568E12, 555.3742384682332], [1.72865226E12, 312.28128031037824], [1.7286555E12, 540.018456375839], [1.72865004E12, 262.77326565143835], [1.72865448E12, 409.8726495726498], [1.72865106E12, 257.86734693877554], [1.7286543E12, 420.8017543859649], [1.72865652E12, 554.7587681779303], [1.72865328E12, 425.5177619893427], [1.72865208E12, 330.37667698658436], [1.72864986E12, 269.155172413793], [1.7286531E12, 397.7186024551461], [1.72865532E12, 538.3932489451477]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72865664E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72864926E12, "maxY": 4.9E-324, "series": [{"data": [[1.7286525E12, 0.0], [1.72865574E12, 0.0], [1.72865028E12, 0.0], [1.72865472E12, 0.0], [1.7286513E12, 0.0], [1.72865454E12, 0.0], [1.72865352E12, 0.0], [1.7286501E12, 0.0], [1.72865232E12, 0.0], [1.72865334E12, 0.0], [1.72865556E12, 0.0], [1.72865436E12, 0.0], [1.72865112E12, 0.0], [1.72865214E12, 0.0], [1.72865658E12, 0.0], [1.72864992E12, 0.0], [1.72865316E12, 0.0], [1.72865094E12, 0.0], [1.72865538E12, 0.0], [1.72865418E12, 0.0], [1.7286564E12, 0.0], [1.72864974E12, 0.0], [1.72865196E12, 0.0], [1.72865298E12, 0.0], [1.72865622E12, 0.0], [1.72865076E12, 0.0], [1.7286552E12, 0.0], [1.72865178E12, 0.0], [1.72865502E12, 0.0], [1.72864956E12, 0.0], [1.728654E12, 0.0], [1.72864998E12, 0.0], [1.7286522E12, 0.0], [1.72865442E12, 0.0], [1.72865664E12, 0.0], [1.72865646E12, 0.0], [1.728651E12, 0.0], [1.72865322E12, 0.0], [1.72865544E12, 0.0], [1.72865202E12, 0.0], [1.72865526E12, 0.0], [1.72865424E12, 0.0], [1.7286498E12, 0.0], [1.72865082E12, 0.0], [1.72865628E12, 0.0], [1.72865406E12, 0.0], [1.72865304E12, 0.0], [1.72865508E12, 0.0], [1.72864962E12, 0.0], [1.72865184E12, 0.0], [1.72865286E12, 0.0], [1.72865064E12, 0.0], [1.72865388E12, 0.0], [1.72865166E12, 0.0], [1.7286561E12, 0.0], [1.72864944E12, 0.0], [1.72865046E12, 0.0], [1.72865268E12, 0.0], [1.7286549E12, 0.0], [1.72864926E12, 0.0], [1.72865148E12, 0.0], [1.7286537E12, 0.0], [1.72865592E12, 0.0], [1.72865088E12, 0.0], [1.72865412E12, 0.0], [1.72865634E12, 0.0], [1.7286519E12, 0.0], [1.72864968E12, 0.0], [1.72865514E12, 0.0], [1.7286507E12, 0.0], [1.72865292E12, 0.0], [1.7286495E12, 0.0], [1.72865172E12, 0.0], [1.72865394E12, 0.0], [1.72865616E12, 0.0], [1.72865274E12, 0.0], [1.72865598E12, 0.0], [1.72865052E12, 0.0], [1.72865496E12, 0.0], [1.72865154E12, 0.0], [1.72865478E12, 0.0], [1.72864932E12, 0.0], [1.72865376E12, 0.0], [1.72865034E12, 0.0], [1.72865256E12, 0.0], [1.72865358E12, 0.0], [1.7286558E12, 0.0], [1.7286546E12, 0.0], [1.72865136E12, 0.0], [1.72865238E12, 0.0], [1.72865016E12, 0.0], [1.7286534E12, 0.0], [1.72865118E12, 0.0], [1.72865562E12, 0.0], [1.72865058E12, 0.0], [1.7286528E12, 0.0], [1.72865382E12, 0.0], [1.72865604E12, 0.0], [1.72865484E12, 0.0], [1.72864938E12, 0.0], [1.7286516E12, 0.0], [1.72865262E12, 0.0], [1.7286504E12, 0.0], [1.72865364E12, 0.0], [1.72865142E12, 0.0], [1.72865586E12, 0.0], [1.72865022E12, 0.0], [1.72865244E12, 0.0], [1.72865466E12, 0.0], [1.72865124E12, 0.0], [1.72865346E12, 0.0], [1.72865568E12, 0.0], [1.72865226E12, 0.0], [1.7286555E12, 0.0], [1.72865004E12, 0.0], [1.72865448E12, 0.0], [1.72865106E12, 0.0], [1.7286543E12, 0.0], [1.72865652E12, 0.0], [1.72865328E12, 0.0], [1.72865208E12, 0.0], [1.72864986E12, 0.0], [1.7286531E12, 0.0], [1.72865532E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72865664E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 31.0, "minX": 1.72864926E12, "maxY": 3644.0, "series": [{"data": [[1.7286525E12, 1868.0], [1.72865574E12, 2958.0], [1.72865028E12, 1614.0], [1.72865472E12, 2491.0], [1.7286513E12, 1748.0], [1.72865454E12, 2332.0], [1.72865352E12, 2861.0], [1.7286501E12, 1757.0], [1.72865232E12, 1896.0], [1.72865334E12, 2587.0], [1.72865556E12, 3564.0], [1.72865436E12, 2532.0], [1.72865112E12, 1609.0], [1.72865214E12, 1709.0], [1.72865658E12, 2976.0], [1.72864992E12, 1700.0], [1.72865316E12, 2743.0], [1.72865094E12, 1395.0], [1.72865538E12, 3254.0], [1.72865418E12, 2308.0], [1.7286564E12, 2840.0], [1.72864974E12, 1500.0], [1.72865196E12, 1907.0], [1.72865298E12, 2145.0], [1.72865622E12, 3174.0], [1.72865076E12, 1655.0], [1.7286552E12, 2932.0], [1.72865178E12, 1789.0], [1.72865502E12, 3138.0], [1.72864956E12, 1466.0], [1.728654E12, 2465.0], [1.72864998E12, 1446.0], [1.7286522E12, 2044.0], [1.72865442E12, 2783.0], [1.72865664E12, 1503.0], [1.72865646E12, 3407.0], [1.728651E12, 1493.0], [1.72865322E12, 2426.0], [1.72865544E12, 3027.0], [1.72865202E12, 1922.0], [1.72865526E12, 3317.0], [1.72865424E12, 2542.0], [1.7286498E12, 1729.0], [1.72865082E12, 1573.0], [1.72865628E12, 3231.0], [1.72865406E12, 2549.0], [1.72865304E12, 1974.0], [1.72865508E12, 3082.0], [1.72864962E12, 1395.0], [1.72865184E12, 2068.0], [1.72865286E12, 1969.0], [1.72865064E12, 1408.0], [1.72865388E12, 2661.0], [1.72865166E12, 1968.0], [1.7286561E12, 3218.0], [1.72864944E12, 1402.0], [1.72865046E12, 1453.0], [1.72865268E12, 2129.0], [1.7286549E12, 2296.0], [1.72864926E12, 1451.0], [1.72865148E12, 1907.0], [1.7286537E12, 2624.0], [1.72865592E12, 3111.0], [1.72865088E12, 1693.0], [1.72865412E12, 2588.0], [1.72865634E12, 2875.0], [1.7286519E12, 1961.0], [1.72864968E12, 1521.0], [1.72865514E12, 3004.0], [1.7286507E12, 1337.0], [1.72865292E12, 1724.0], [1.7286495E12, 1416.0], [1.72865172E12, 1802.0], [1.72865394E12, 2604.0], [1.72865616E12, 3336.0], [1.72865274E12, 1632.0], [1.72865598E12, 3644.0], [1.72865052E12, 1435.0], [1.72865496E12, 2011.0], [1.72865154E12, 2003.0], [1.72865478E12, 2502.0], [1.72864932E12, 1590.0], [1.72865376E12, 2398.0], [1.72865034E12, 1573.0], [1.72865256E12, 1792.0], [1.72865358E12, 2945.0], [1.7286558E12, 3344.0], [1.7286546E12, 2422.0], [1.72865136E12, 1834.0], [1.72865238E12, 1757.0], [1.72865016E12, 1684.0], [1.7286534E12, 2584.0], [1.72865118E12, 1919.0], [1.72865562E12, 3162.0], [1.72865058E12, 1478.0], [1.7286528E12, 1994.0], [1.72865382E12, 2701.0], [1.72865604E12, 3139.0], [1.72865484E12, 2623.0], [1.72864938E12, 1322.0], [1.7286516E12, 1871.0], [1.72865262E12, 1916.0], [1.7286504E12, 1741.0], [1.72865364E12, 2366.0], [1.72865142E12, 1838.0], [1.72865586E12, 2922.0], [1.72865022E12, 1692.0], [1.72865244E12, 1812.0], [1.72865466E12, 2568.0], [1.72865124E12, 1805.0], [1.72865346E12, 2256.0], [1.72865568E12, 3560.0], [1.72865226E12, 1864.0], [1.7286555E12, 3278.0], [1.72865004E12, 1364.0], [1.72865448E12, 2310.0], [1.72865106E12, 1722.0], [1.7286543E12, 2537.0], [1.72865652E12, 3361.0], [1.72865328E12, 2290.0], [1.72865208E12, 1862.0], [1.72864986E12, 1552.0], [1.7286531E12, 2376.0], [1.72865532E12, 2995.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7286525E12, 1002.8000000000002], [1.72865574E12, 1719.0], [1.72865028E12, 869.5000000000001], [1.72865472E12, 1329.5000000000007], [1.7286513E12, 1019.4], [1.72865454E12, 1398.2], [1.72865352E12, 1393.0], [1.7286501E12, 882.0000000000001], [1.72865232E12, 1018.9000000000002], [1.72865334E12, 1369.0], [1.72865556E12, 1737.8000000000002], [1.72865436E12, 1378.7000000000003], [1.72865112E12, 933.2], [1.72865214E12, 1011.2999999999998], [1.72865658E12, 1435.3], [1.72864992E12, 925.6000000000001], [1.72865316E12, 1386.0], [1.72865094E12, 892.9999999999999], [1.72865538E12, 1798.9999999999998], [1.72865418E12, 1371.5], [1.7286564E12, 1725.4000000000005], [1.72864974E12, 863.3000000000004], [1.72865196E12, 987.4000000000001], [1.72865298E12, 1058.0], [1.72865622E12, 1676.1000000000001], [1.72865076E12, 913.1], [1.7286552E12, 1674.9000000000003], [1.72865178E12, 1021.6000000000001], [1.72865502E12, 1647.8000000000002], [1.72864956E12, 873.7], [1.728654E12, 1341.5000000000007], [1.72864998E12, 901.4000000000001], [1.7286522E12, 1056.0], [1.72865442E12, 1331.4], [1.72865664E12, 1007.6000000000001], [1.72865646E12, 1852.0], [1.728651E12, 852.0], [1.72865322E12, 1385.8000000000002], [1.72865544E12, 1769.5], [1.72865202E12, 1028.0], [1.72865526E12, 1729.6000000000001], [1.72865424E12, 1368.8000000000002], [1.7286498E12, 883.0], [1.72865082E12, 913.0], [1.72865628E12, 1788.2000000000016], [1.72865406E12, 1372.4], [1.72865304E12, 1003.0], [1.72865508E12, 1768.9999999999995], [1.72864962E12, 887.0], [1.72865184E12, 1024.7], [1.72865286E12, 1024.0], [1.72865064E12, 884.0], [1.72865388E12, 1433.5], [1.72865166E12, 1030.4], [1.7286561E12, 1715.8], [1.72864944E12, 872.0], [1.72865046E12, 884.2000000000003], [1.72865268E12, 1056.7], [1.7286549E12, 1369.0], [1.72864926E12, 843.6000000000001], [1.72865148E12, 1082.5], [1.7286537E12, 1390.0], [1.72865592E12, 1767.0], [1.72865088E12, 843.5], [1.72865412E12, 1340.0000000000002], [1.72865634E12, 1700.2], [1.7286519E12, 1027.5], [1.72864968E12, 886.6000000000001], [1.72865514E12, 1737.6], [1.7286507E12, 823.2], [1.72865292E12, 1016.2000000000002], [1.7286495E12, 856.5], [1.72865172E12, 1028.3000000000002], [1.72865394E12, 1379.8000000000002], [1.72865616E12, 1732.0], [1.72865274E12, 1045.8], [1.72865598E12, 1740.3999999999999], [1.72865052E12, 885.8000000000002], [1.72865496E12, 1114.6000000000001], [1.72865154E12, 1025.8000000000002], [1.72865478E12, 1389.0], [1.72864932E12, 884.8000000000001], [1.72865376E12, 1390.0], [1.72865034E12, 875.0], [1.72865256E12, 1035.7], [1.72865358E12, 1342.9], [1.7286558E12, 1737.1000000000001], [1.7286546E12, 1375.0], [1.72865136E12, 1017.8], [1.72865238E12, 1044.0], [1.72865016E12, 867.3000000000001], [1.7286534E12, 1446.7999999999997], [1.72865118E12, 1076.5000000000002], [1.72865562E12, 1688.4], [1.72865058E12, 881.8], [1.7286528E12, 1022.9], [1.72865382E12, 1361.4], [1.72865604E12, 1808.5], [1.72865484E12, 1410.5000000000002], [1.72864938E12, 853.0], [1.7286516E12, 988.0], [1.72865262E12, 1026.5000000000005], [1.7286504E12, 929.1], [1.72865364E12, 1380.2000000000007], [1.72865142E12, 1008.0], [1.72865586E12, 1717.4], [1.72865022E12, 870.6000000000001], [1.72865244E12, 977.8000000000002], [1.72865466E12, 1384.8999999999999], [1.72865124E12, 1033.0], [1.72865346E12, 1398.4], [1.72865568E12, 1821.0], [1.72865226E12, 1025.0], [1.7286555E12, 1719.3000000000004], [1.72865004E12, 885.0000000000007], [1.72865448E12, 1338.8000000000002], [1.72865106E12, 838.9000000000001], [1.7286543E12, 1372.7000000000003], [1.72865652E12, 1739.0], [1.72865328E12, 1378.6000000000001], [1.72865208E12, 1037.0], [1.72864986E12, 928.3999999999999], [1.7286531E12, 1374.0], [1.72865532E12, 1715.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7286525E12, 1465.6699999999998], [1.72865574E12, 2524.2000000000007], [1.72865028E12, 1309.2199999999966], [1.72865472E12, 1901.5500000000004], [1.7286513E12, 1551.7200000000003], [1.72865454E12, 1990.7199999999998], [1.72865352E12, 2045.5999999999985], [1.7286501E12, 1452.7799999999993], [1.72865232E12, 1539.4799999999996], [1.72865334E12, 2039.3500000000001], [1.72865556E12, 2519.76], [1.72865436E12, 1971.58], [1.72865112E12, 1310.4999999999993], [1.72865214E12, 1476.5199999999995], [1.72865658E12, 2185.3300000000004], [1.72864992E12, 1280.84], [1.72865316E12, 1987.3600000000006], [1.72865094E12, 1320.44], [1.72865538E12, 2719.920000000003], [1.72865418E12, 2020.6500000000008], [1.7286564E12, 2517.2599999999998], [1.72864974E12, 1253.0200000000018], [1.72865196E12, 1412.41], [1.72865298E12, 1529.5099999999989], [1.72865622E12, 2640.5499999999993], [1.72865076E12, 1419.9299999999976], [1.7286552E12, 2609.699999999999], [1.72865178E12, 1536.9499999999998], [1.72865502E12, 2382.959999999999], [1.72864956E12, 1252.4000000000005], [1.728654E12, 1971.5499999999995], [1.72864998E12, 1299.1200000000006], [1.7286522E12, 1497.75], [1.72865442E12, 2059.3199999999997], [1.72865664E12, 1251.6799999999998], [1.72865646E12, 2635.1000000000017], [1.728651E12, 1197.65], [1.72865322E12, 1938.8799999999987], [1.72865544E12, 2533.75], [1.72865202E12, 1534.2699999999977], [1.72865526E12, 2473.2800000000047], [1.72865424E12, 2093.3999999999996], [1.7286498E12, 1329.3499999999997], [1.72865082E12, 1323.1100000000001], [1.72865628E12, 2527.870000000001], [1.72865406E12, 2152.7599999999993], [1.72865304E12, 1423.78], [1.72865508E12, 2510.5199999999995], [1.72864962E12, 1264.2400000000016], [1.72865184E12, 1479.7900000000002], [1.72865286E12, 1568.4199999999996], [1.72865064E12, 1310.0], [1.72865388E12, 2101.4900000000034], [1.72865166E12, 1554.5599999999963], [1.7286561E12, 2419.76], [1.72864944E12, 1196.3000000000002], [1.72865046E12, 1267.320000000001], [1.72865268E12, 1700.5499999999993], [1.7286549E12, 1949.5500000000004], [1.72864926E12, 1326.7999999999993], [1.72865148E12, 1516.8000000000002], [1.7286537E12, 2014.700000000001], [1.72865592E12, 2540.249999999998], [1.72865088E12, 1218.6999999999994], [1.72865412E12, 1911.2400000000011], [1.72865634E12, 2476.6800000000003], [1.7286519E12, 1460.0599999999995], [1.72864968E12, 1320.54], [1.72865514E12, 2483.339999999998], [1.7286507E12, 1187.3200000000002], [1.72865292E12, 1427.48], [1.7286495E12, 1156.7], [1.72865172E12, 1478.5499999999997], [1.72865394E12, 1991.4600000000005], [1.72865616E12, 2638.499999999997], [1.72865274E12, 1465.1], [1.72865598E12, 2592.620000000001], [1.72865052E12, 1186.97], [1.72865496E12, 1664.299999999999], [1.72865154E12, 1545.1], [1.72865478E12, 2036.6799999999998], [1.72864932E12, 1264.0599999999993], [1.72865376E12, 2076.399999999998], [1.72865034E12, 1267.82], [1.72865256E12, 1485.7300000000002], [1.72865358E12, 2055.800000000002], [1.7286558E12, 2481.6699999999955], [1.7286546E12, 2093.0], [1.72865136E12, 1522.93], [1.72865238E12, 1495.7000000000003], [1.72865016E12, 1361.3299999999995], [1.7286534E12, 2051.9200000000023], [1.72865118E12, 1591.6800000000012], [1.72865562E12, 2533.420000000002], [1.72865058E12, 1316.7200000000003], [1.7286528E12, 1505.7800000000002], [1.72865382E12, 2026.44], [1.72865604E12, 2561.2000000000007], [1.72865484E12, 2091.5799999999963], [1.72864938E12, 1281.5999999999997], [1.7286516E12, 1514.2999999999988], [1.72865262E12, 1532.69], [1.7286504E12, 1351.2600000000002], [1.72865364E12, 2020.29], [1.72865142E12, 1456.3999999999996], [1.72865586E12, 2417.4799999999987], [1.72865022E12, 1277.4400000000005], [1.72865244E12, 1557.84], [1.72865466E12, 2003.609999999999], [1.72865124E12, 1448.7999999999993], [1.72865346E12, 1964.319999999996], [1.72865568E12, 2575.5], [1.72865226E12, 1462.5999999999976], [1.7286555E12, 2665.5599999999995], [1.72865004E12, 1217.2000000000016], [1.72865448E12, 1981.9299999999994], [1.72865106E12, 1348.8999999999996], [1.7286543E12, 2070.7199999999993], [1.72865652E12, 2594.2999999999984], [1.72865328E12, 1961.0300000000002], [1.72865208E12, 1582.2999999999995], [1.72864986E12, 1342.9499999999998], [1.7286531E12, 2011.2000000000025], [1.72865532E12, 2522.6600000000017]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7286525E12, 1190.8499999999997], [1.72865574E12, 2040.0], [1.72865028E12, 1002.2999999999997], [1.72865472E12, 1558.4999999999986], [1.7286513E12, 1231.6], [1.72865454E12, 1562.3], [1.72865352E12, 1614.0], [1.7286501E12, 993.4999999999998], [1.72865232E12, 1219.9499999999998], [1.72865334E12, 1644.4499999999994], [1.72865556E12, 2002.3999999999996], [1.72865436E12, 1589.8000000000002], [1.72865112E12, 1085.5999999999995], [1.72865214E12, 1193.8999999999999], [1.72865658E12, 1709.9499999999996], [1.72864992E12, 1039.4], [1.72865316E12, 1593.1], [1.72865094E12, 1047.3999999999996], [1.72865538E12, 2102.4], [1.72865418E12, 1600.0], [1.7286564E12, 2013.0], [1.72864974E12, 982.9500000000002], [1.72865196E12, 1152.499999999999], [1.72865298E12, 1213.0], [1.72865622E12, 1976.0999999999995], [1.72865076E12, 1053.4999999999995], [1.7286552E12, 2005.35], [1.72865178E12, 1179.6], [1.72865502E12, 1913.3999999999996], [1.72864956E12, 993.0], [1.728654E12, 1579.55], [1.72864998E12, 1042.3999999999992], [1.7286522E12, 1225.0], [1.72865442E12, 1548.599999999999], [1.72865664E12, 1090.5], [1.72865646E12, 2116.0], [1.728651E12, 1020.5], [1.72865322E12, 1571.3999999999992], [1.72865544E12, 2083.5], [1.72865202E12, 1205.8999999999999], [1.72865526E12, 1983.199999999999], [1.72865424E12, 1607.4], [1.7286498E12, 1034.25], [1.72865082E12, 1083.8000000000002], [1.72865628E12, 2010.1], [1.72865406E12, 1635.6000000000001], [1.72865304E12, 1121.4499999999998], [1.72865508E12, 2085.0], [1.72864962E12, 991.4000000000001], [1.72865184E12, 1213.6999999999998], [1.72865286E12, 1209.15], [1.72865064E12, 1035.0], [1.72865388E12, 1664.2999999999997], [1.72865166E12, 1152.1999999999998], [1.7286561E12, 1942.6999999999996], [1.72864944E12, 982.5], [1.72865046E12, 1040.5999999999992], [1.72865268E12, 1246.85], [1.7286549E12, 1596.0], [1.72864926E12, 988.6000000000001], [1.72865148E12, 1233.25], [1.7286537E12, 1575.0], [1.72865592E12, 2043.75], [1.72865088E12, 983.25], [1.72865412E12, 1567.3999999999987], [1.72865634E12, 1959.6], [1.7286519E12, 1202.9499999999998], [1.72864968E12, 1083.6999999999998], [1.72865514E12, 2017.6499999999999], [1.7286507E12, 985.3], [1.72865292E12, 1169.6], [1.7286495E12, 971.25], [1.72865172E12, 1190.7499999999998], [1.72865394E12, 1627.8999999999985], [1.72865616E12, 2029.5], [1.72865274E12, 1215.1], [1.72865598E12, 2025.8999999999985], [1.72865052E12, 986.0], [1.72865496E12, 1310.55], [1.72865154E12, 1160.4999999999986], [1.72865478E12, 1632.6999999999996], [1.72864932E12, 1032.9], [1.72865376E12, 1614.0], [1.72865034E12, 968.5999999999995], [1.72865256E12, 1207.7499999999986], [1.72865358E12, 1571.1500000000008], [1.7286558E12, 1989.6999999999998], [1.7286546E12, 1607.0], [1.72865136E12, 1191.6499999999996], [1.72865238E12, 1220.5], [1.72865016E12, 1013.3999999999996], [1.7286534E12, 1603.1999999999998], [1.72865118E12, 1241.35], [1.72865562E12, 1970.5999999999985], [1.72865058E12, 1012.4499999999999], [1.7286528E12, 1148.9499999999998], [1.72865382E12, 1590.6000000000001], [1.72865604E12, 2072.5], [1.72865484E12, 1597.4499999999994], [1.72864938E12, 1011.75], [1.7286516E12, 1158.8999999999999], [1.72865262E12, 1203.6], [1.7286504E12, 1032.1], [1.72865364E12, 1573.9], [1.72865142E12, 1174.5], [1.72865586E12, 1956.6000000000006], [1.72865022E12, 1012.8], [1.72865244E12, 1156.6], [1.72865466E12, 1630.0], [1.72865124E12, 1175.9999999999998], [1.72865346E12, 1586.0000000000005], [1.72865568E12, 2031.0], [1.72865226E12, 1156.1999999999998], [1.7286555E12, 1970.3999999999996], [1.72865004E12, 1002.4], [1.72865448E12, 1531.3500000000001], [1.72865106E12, 944.0499999999997], [1.7286543E12, 1620.3000000000006], [1.72865652E12, 2009.0], [1.72865328E12, 1573.4999999999986], [1.72865208E12, 1225.0], [1.72864986E12, 1035.299999999999], [1.7286531E12, 1618.0], [1.72865532E12, 1989.1000000000006]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7286525E12, 34.0], [1.72865574E12, 60.0], [1.72865028E12, 32.0], [1.72865472E12, 46.0], [1.7286513E12, 37.0], [1.72865454E12, 41.0], [1.72865352E12, 35.0], [1.7286501E12, 33.0], [1.72865232E12, 33.0], [1.72865334E12, 37.0], [1.72865556E12, 61.0], [1.72865436E12, 39.0], [1.72865112E12, 39.0], [1.72865214E12, 40.0], [1.72865658E12, 47.0], [1.72864992E12, 32.0], [1.72865316E12, 43.0], [1.72865094E12, 32.0], [1.72865538E12, 63.0], [1.72865418E12, 36.0], [1.7286564E12, 54.0], [1.72864974E12, 32.0], [1.72865196E12, 33.0], [1.72865298E12, 32.0], [1.72865622E12, 63.0], [1.72865076E12, 34.0], [1.7286552E12, 59.0], [1.72865178E12, 37.0], [1.72865502E12, 52.0], [1.72864956E12, 38.0], [1.728654E12, 38.0], [1.72864998E12, 35.0], [1.7286522E12, 32.0], [1.72865442E12, 39.0], [1.72865664E12, 39.0], [1.72865646E12, 63.0], [1.728651E12, 32.0], [1.72865322E12, 51.0], [1.72865544E12, 56.0], [1.72865202E12, 34.0], [1.72865526E12, 62.0], [1.72865424E12, 36.0], [1.7286498E12, 32.0], [1.72865082E12, 33.0], [1.72865628E12, 66.0], [1.72865406E12, 38.0], [1.72865304E12, 34.0], [1.72865508E12, 57.0], [1.72864962E12, 34.0], [1.72865184E12, 39.0], [1.72865286E12, 36.0], [1.72865064E12, 35.0], [1.72865388E12, 37.0], [1.72865166E12, 38.0], [1.7286561E12, 62.0], [1.72864944E12, 40.0], [1.72865046E12, 37.0], [1.72865268E12, 35.0], [1.7286549E12, 41.0], [1.72864926E12, 36.0], [1.72865148E12, 35.0], [1.7286537E12, 46.0], [1.72865592E12, 69.0], [1.72865088E12, 35.0], [1.72865412E12, 41.0], [1.72865634E12, 61.0], [1.7286519E12, 33.0], [1.72864968E12, 35.0], [1.72865514E12, 62.0], [1.7286507E12, 34.0], [1.72865292E12, 36.0], [1.7286495E12, 33.0], [1.72865172E12, 32.0], [1.72865394E12, 37.0], [1.72865616E12, 63.0], [1.72865274E12, 38.0], [1.72865598E12, 55.0], [1.72865052E12, 37.0], [1.72865496E12, 39.0], [1.72865154E12, 35.0], [1.72865478E12, 48.0], [1.72864932E12, 35.0], [1.72865376E12, 36.0], [1.72865034E12, 36.0], [1.72865256E12, 36.0], [1.72865358E12, 42.0], [1.7286558E12, 62.0], [1.7286546E12, 40.0], [1.72865136E12, 37.0], [1.72865238E12, 35.0], [1.72865016E12, 34.0], [1.7286534E12, 37.0], [1.72865118E12, 43.0], [1.72865562E12, 53.0], [1.72865058E12, 34.0], [1.7286528E12, 33.0], [1.72865382E12, 37.0], [1.72865604E12, 72.0], [1.72865484E12, 40.0], [1.72864938E12, 36.0], [1.7286516E12, 37.0], [1.72865262E12, 42.0], [1.7286504E12, 37.0], [1.72865364E12, 37.0], [1.72865142E12, 38.0], [1.72865586E12, 58.0], [1.72865022E12, 32.0], [1.72865244E12, 37.0], [1.72865466E12, 39.0], [1.72865124E12, 35.0], [1.72865346E12, 42.0], [1.72865568E12, 60.0], [1.72865226E12, 31.0], [1.7286555E12, 64.0], [1.72865004E12, 38.0], [1.72865448E12, 42.0], [1.72865106E12, 38.0], [1.7286543E12, 41.0], [1.72865652E12, 55.0], [1.72865328E12, 39.0], [1.72865208E12, 39.0], [1.72864986E12, 36.0], [1.7286531E12, 38.0], [1.72865532E12, 65.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7286525E12, 387.0], [1.72865574E12, 595.0], [1.72865028E12, 312.5], [1.72865472E12, 460.0], [1.7286513E12, 391.0], [1.72865454E12, 588.0], [1.72865352E12, 559.0], [1.7286501E12, 322.0], [1.72865232E12, 420.5], [1.72865334E12, 536.5], [1.72865556E12, 735.0], [1.72865436E12, 515.0], [1.72865112E12, 333.0], [1.72865214E12, 473.0], [1.72865658E12, 492.0], [1.72864992E12, 437.0], [1.72865316E12, 498.5], [1.72865094E12, 364.0], [1.72865538E12, 777.0], [1.72865418E12, 500.5], [1.7286564E12, 693.5], [1.72864974E12, 341.5], [1.72865196E12, 375.5], [1.72865298E12, 450.0], [1.72865622E12, 621.0], [1.72865076E12, 393.5], [1.7286552E12, 664.0], [1.72865178E12, 445.0], [1.72865502E12, 597.0], [1.72864956E12, 361.5], [1.728654E12, 499.5], [1.72864998E12, 402.0], [1.7286522E12, 441.0], [1.72865442E12, 536.0], [1.72865664E12, 433.0], [1.72865646E12, 798.5], [1.728651E12, 282.5], [1.72865322E12, 578.0], [1.72865544E12, 705.5], [1.72865202E12, 451.5], [1.72865526E12, 637.0], [1.72865424E12, 514.0], [1.7286498E12, 358.0], [1.72865082E12, 380.0], [1.72865628E12, 755.5], [1.72865406E12, 600.0], [1.72865304E12, 376.5], [1.72865508E12, 680.0], [1.72864962E12, 386.5], [1.72865184E12, 401.5], [1.72865286E12, 410.5], [1.72865064E12, 349.0], [1.72865388E12, 579.5], [1.72865166E12, 424.0], [1.7286561E12, 710.0], [1.72864944E12, 360.5], [1.72865046E12, 348.0], [1.72865268E12, 424.0], [1.7286549E12, 590.0], [1.72864926E12, 284.0], [1.72865148E12, 391.0], [1.7286537E12, 566.0], [1.72865592E12, 770.0], [1.72865088E12, 384.5], [1.72865412E12, 516.0], [1.72865634E12, 646.0], [1.7286519E12, 401.5], [1.72864968E12, 413.0], [1.72865514E12, 692.5], [1.7286507E12, 327.0], [1.72865292E12, 459.0], [1.7286495E12, 347.0], [1.72865172E12, 473.0], [1.72865394E12, 597.0], [1.72865616E12, 780.5], [1.72865274E12, 450.0], [1.72865598E12, 716.0], [1.72865052E12, 354.0], [1.72865496E12, 409.5], [1.72865154E12, 429.0], [1.72865478E12, 561.0], [1.72864932E12, 260.0], [1.72865376E12, 565.0], [1.72865034E12, 333.0], [1.72865256E12, 438.0], [1.72865358E12, 518.0], [1.7286558E12, 680.0], [1.7286546E12, 557.0], [1.72865136E12, 417.5], [1.72865238E12, 397.0], [1.72865016E12, 409.0], [1.7286534E12, 627.0], [1.72865118E12, 463.0], [1.72865562E12, 782.0], [1.72865058E12, 338.0], [1.7286528E12, 421.5], [1.72865382E12, 500.0], [1.72865604E12, 827.5], [1.72865484E12, 577.5], [1.72864938E12, 365.0], [1.7286516E12, 379.0], [1.72865262E12, 449.5], [1.7286504E12, 387.0], [1.72865364E12, 517.0], [1.72865142E12, 441.0], [1.72865586E12, 725.0], [1.72865022E12, 372.0], [1.72865244E12, 395.0], [1.72865466E12, 526.0], [1.72865124E12, 376.0], [1.72865346E12, 596.0], [1.72865568E12, 738.0], [1.72865226E12, 381.0], [1.7286555E12, 686.0], [1.72865004E12, 378.0], [1.72865448E12, 508.5], [1.72865106E12, 349.5], [1.7286543E12, 568.0], [1.72865652E12, 751.0], [1.72865328E12, 576.5], [1.72865208E12, 451.0], [1.72864986E12, 350.5], [1.7286531E12, 445.0], [1.72865532E12, 711.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72865664E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 206.5, "minX": 1.0, "maxY": 772.5, "series": [{"data": [[2.0, 612.5], [32.0, 237.0], [33.0, 219.0], [34.0, 206.5], [35.0, 223.0], [37.0, 226.0], [36.0, 386.5], [3.0, 588.0], [4.0, 453.5], [5.0, 520.0], [6.0, 499.0], [7.0, 511.5], [8.0, 460.0], [9.0, 429.5], [10.0, 437.0], [11.0, 456.0], [12.0, 496.0], [13.0, 523.0], [14.0, 532.0], [15.0, 559.0], [1.0, 772.5], [16.0, 558.0], [17.0, 552.0], [18.0, 524.5], [19.0, 495.0], [20.0, 492.5], [21.0, 434.0], [22.0, 402.5], [23.0, 357.0], [24.0, 349.0], [25.0, 325.0], [26.0, 284.5], [27.0, 299.0], [28.0, 310.0], [29.0, 249.0], [30.0, 240.0], [31.0, 224.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 37.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 126.0, "minX": 1.0, "maxY": 507.5, "series": [{"data": [[2.0, 399.0], [32.0, 147.5], [33.0, 134.0], [34.0, 146.5], [35.0, 126.0], [37.0, 137.0], [36.0, 259.0], [3.0, 402.0], [4.0, 309.5], [5.0, 347.5], [6.0, 341.5], [7.0, 346.0], [8.0, 323.0], [9.0, 310.0], [10.0, 305.5], [11.0, 317.0], [12.0, 347.0], [13.0, 367.0], [14.0, 374.0], [15.0, 394.0], [1.0, 507.5], [16.0, 391.0], [17.0, 395.5], [18.0, 373.0], [19.0, 355.0], [20.0, 359.0], [21.0, 312.0], [22.0, 284.0], [23.0, 253.0], [24.0, 231.5], [25.0, 206.0], [26.0, 177.0], [27.0, 189.0], [28.0, 189.0], [29.0, 154.5], [30.0, 147.0], [31.0, 137.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 37.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.9166666666666665, "minX": 1.72864926E12, "maxY": 20.7, "series": [{"data": [[1.7286525E12, 17.466666666666665], [1.72865574E12, 20.583333333333332], [1.72865028E12, 10.3], [1.72865472E12, 20.133333333333333], [1.7286513E12, 16.916666666666668], [1.72865454E12, 18.55], [1.72865352E12, 18.65], [1.7286501E12, 9.883333333333333], [1.72865232E12, 16.6], [1.72865334E12, 19.2], [1.72865556E12, 19.616666666666667], [1.72865436E12, 19.5], [1.72865112E12, 6.383333333333334], [1.72865214E12, 16.333333333333332], [1.72865658E12, 20.283333333333335], [1.72864992E12, 8.916666666666666], [1.72865316E12, 19.633333333333333], [1.72865094E12, 9.583333333333334], [1.72865538E12, 18.916666666666668], [1.72865418E12, 19.233333333333334], [1.7286564E12, 19.966666666666665], [1.72864974E12, 10.033333333333333], [1.72865196E12, 17.533333333333335], [1.72865298E12, 16.133333333333333], [1.72865622E12, 20.7], [1.72865076E12, 9.3], [1.7286552E12, 20.2], [1.72865178E12, 16.433333333333334], [1.72865502E12, 17.7], [1.72864956E12, 10.033333333333333], [1.728654E12, 19.8], [1.72864998E12, 9.416666666666666], [1.7286522E12, 16.4], [1.72865442E12, 19.116666666666667], [1.72865664E12, 3.9166666666666665], [1.72865646E12, 18.4], [1.728651E12, 10.566666666666666], [1.72865322E12, 18.683333333333334], [1.72865544E12, 19.566666666666666], [1.72865202E12, 16.166666666666668], [1.72865526E12, 20.55], [1.72865424E12, 19.083333333333332], [1.7286498E12, 9.9], [1.72865082E12, 9.366666666666667], [1.72865628E12, 19.3], [1.72865406E12, 18.25], [1.72865304E12, 13.4], [1.72865508E12, 19.516666666666666], [1.72864962E12, 9.866666666666667], [1.72865184E12, 16.7], [1.72865286E12, 16.6], [1.72865064E12, 9.983333333333333], [1.72865388E12, 18.466666666666665], [1.72865166E12, 16.783333333333335], [1.7286561E12, 20.016666666666666], [1.72864944E12, 4.933333333333334], [1.72865046E12, 9.85], [1.72865268E12, 16.366666666666667], [1.7286549E12, 18.383333333333333], [1.72864926E12, 5.083333333333333], [1.72865148E12, 16.9], [1.7286537E12, 18.816666666666666], [1.72865592E12, 19.066666666666666], [1.72865088E12, 9.9], [1.72865412E12, 19.616666666666667], [1.72865634E12, 20.45], [1.7286519E12, 17.0], [1.72864968E12, 9.083333333333334], [1.72865514E12, 19.766666666666666], [1.7286507E12, 10.216666666666667], [1.72865292E12, 16.383333333333333], [1.7286495E12, 10.233333333333333], [1.72865172E12, 16.133333333333333], [1.72865394E12, 18.35], [1.72865616E12, 19.066666666666666], [1.72865274E12, 16.416666666666668], [1.72865598E12, 19.683333333333334], [1.72865052E12, 10.033333333333333], [1.72865496E12, 13.3], [1.72865154E12, 16.616666666666667], [1.72865478E12, 18.683333333333334], [1.72864932E12, 5.166666666666667], [1.72865376E12, 18.95], [1.72865034E12, 10.133333333333333], [1.72865256E12, 16.7], [1.72865358E12, 19.333333333333332], [1.7286558E12, 20.2], [1.7286546E12, 18.65], [1.72865136E12, 16.666666666666668], [1.72865238E12, 16.733333333333334], [1.72865016E12, 9.3], [1.7286534E12, 17.583333333333332], [1.72865118E12, 15.866666666666667], [1.72865562E12, 19.616666666666667], [1.72865058E12, 9.833333333333334], [1.7286528E12, 16.666666666666668], [1.72865382E12, 19.25], [1.72865604E12, 18.4], [1.72865484E12, 18.533333333333335], [1.72864938E12, 5.066666666666666], [1.7286516E12, 17.266666666666666], [1.72865262E12, 16.266666666666666], [1.7286504E12, 9.633333333333333], [1.72865364E12, 19.5], [1.72865142E12, 16.816666666666666], [1.72865586E12, 19.916666666666668], [1.72865022E12, 10.016666666666667], [1.72865244E12, 17.05], [1.72865466E12, 19.1], [1.72865124E12, 17.35], [1.72865346E12, 18.583333333333332], [1.72865568E12, 19.15], [1.72865226E12, 17.183333333333334], [1.7286555E12, 19.866666666666667], [1.72865004E12, 9.85], [1.72865448E12, 19.5], [1.72865106E12, 8.133333333333333], [1.7286543E12, 19.0], [1.72865652E12, 19.483333333333334], [1.72865328E12, 18.766666666666666], [1.72865208E12, 16.15], [1.72864986E12, 9.666666666666666], [1.7286531E12, 17.816666666666666], [1.72865532E12, 19.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72865664E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.033333333333333, "minX": 1.72864926E12, "maxY": 20.7, "series": [{"data": [[1.7286525E12, 17.466666666666665], [1.72865574E12, 20.583333333333332], [1.72865028E12, 10.3], [1.72865472E12, 20.133333333333333], [1.7286513E12, 16.916666666666668], [1.72865454E12, 18.55], [1.72865352E12, 18.65], [1.7286501E12, 9.883333333333333], [1.72865232E12, 16.6], [1.72865334E12, 19.2], [1.72865556E12, 19.616666666666667], [1.72865436E12, 19.5], [1.72865112E12, 6.283333333333333], [1.72865214E12, 16.333333333333332], [1.72865658E12, 20.433333333333334], [1.72864992E12, 8.916666666666666], [1.72865316E12, 19.633333333333333], [1.72865094E12, 9.583333333333334], [1.72865538E12, 18.916666666666668], [1.72865418E12, 19.233333333333334], [1.7286564E12, 19.966666666666665], [1.72864974E12, 10.033333333333333], [1.72865196E12, 17.533333333333335], [1.72865298E12, 16.133333333333333], [1.72865622E12, 20.7], [1.72865076E12, 9.3], [1.7286552E12, 20.2], [1.72865178E12, 16.433333333333334], [1.72865502E12, 17.45], [1.72864956E12, 10.033333333333333], [1.728654E12, 19.8], [1.72864998E12, 9.416666666666666], [1.7286522E12, 16.4], [1.72865442E12, 19.116666666666667], [1.72865664E12, 4.033333333333333], [1.72865646E12, 18.4], [1.728651E12, 10.566666666666666], [1.72865322E12, 18.683333333333334], [1.72865544E12, 19.566666666666666], [1.72865202E12, 16.166666666666668], [1.72865526E12, 20.55], [1.72865424E12, 19.083333333333332], [1.7286498E12, 9.9], [1.72865082E12, 9.366666666666667], [1.72865628E12, 19.3], [1.72865406E12, 18.25], [1.72865304E12, 13.5], [1.72865508E12, 19.516666666666666], [1.72864962E12, 9.866666666666667], [1.72865184E12, 16.7], [1.72865286E12, 16.6], [1.72865064E12, 9.983333333333333], [1.72865388E12, 18.466666666666665], [1.72865166E12, 16.783333333333335], [1.7286561E12, 20.016666666666666], [1.72864944E12, 4.9], [1.72865046E12, 9.85], [1.72865268E12, 16.366666666666667], [1.7286549E12, 18.4], [1.72864926E12, 5.05], [1.72865148E12, 16.9], [1.7286537E12, 18.816666666666666], [1.72865592E12, 19.066666666666666], [1.72865088E12, 9.9], [1.72865412E12, 19.616666666666667], [1.72865634E12, 20.45], [1.7286519E12, 17.0], [1.72864968E12, 9.083333333333334], [1.72865514E12, 19.766666666666666], [1.7286507E12, 10.216666666666667], [1.72865292E12, 16.383333333333333], [1.7286495E12, 10.233333333333333], [1.72865172E12, 16.133333333333333], [1.72865394E12, 18.35], [1.72865616E12, 19.066666666666666], [1.72865274E12, 16.416666666666668], [1.72865598E12, 19.683333333333334], [1.72865052E12, 10.033333333333333], [1.72865496E12, 13.466666666666667], [1.72865154E12, 16.616666666666667], [1.72865478E12, 18.683333333333334], [1.72864932E12, 5.166666666666667], [1.72865376E12, 18.95], [1.72865034E12, 10.133333333333333], [1.72865256E12, 16.7], [1.72865358E12, 19.333333333333332], [1.7286558E12, 20.2], [1.7286546E12, 18.65], [1.72865136E12, 16.666666666666668], [1.72865238E12, 16.733333333333334], [1.72865016E12, 9.3], [1.7286534E12, 17.583333333333332], [1.72865118E12, 15.866666666666667], [1.72865562E12, 19.616666666666667], [1.72865058E12, 9.833333333333334], [1.7286528E12, 16.666666666666668], [1.72865382E12, 19.25], [1.72865604E12, 18.4], [1.72865484E12, 18.533333333333335], [1.72864938E12, 5.066666666666666], [1.7286516E12, 17.266666666666666], [1.72865262E12, 16.266666666666666], [1.7286504E12, 9.633333333333333], [1.72865364E12, 19.5], [1.72865142E12, 16.816666666666666], [1.72865586E12, 19.916666666666668], [1.72865022E12, 10.016666666666667], [1.72865244E12, 17.05], [1.72865466E12, 19.1], [1.72865124E12, 17.35], [1.72865346E12, 18.583333333333332], [1.72865568E12, 19.15], [1.72865226E12, 17.183333333333334], [1.7286555E12, 19.866666666666667], [1.72865004E12, 9.85], [1.72865448E12, 19.5], [1.72865106E12, 8.166666666666666], [1.7286543E12, 19.0], [1.72865652E12, 19.483333333333334], [1.72865328E12, 18.766666666666666], [1.72865208E12, 16.15], [1.72864986E12, 9.666666666666666], [1.7286531E12, 17.65], [1.72865532E12, 19.75]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72865664E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.033333333333333, "minX": 1.72864926E12, "maxY": 20.7, "series": [{"data": [[1.7286525E12, 17.466666666666665], [1.72865574E12, 20.583333333333332], [1.72865028E12, 10.3], [1.72865472E12, 20.133333333333333], [1.7286513E12, 16.916666666666668], [1.72865454E12, 18.55], [1.72865352E12, 18.65], [1.7286501E12, 9.883333333333333], [1.72865232E12, 16.6], [1.72865334E12, 19.2], [1.72865556E12, 19.616666666666667], [1.72865436E12, 19.5], [1.72865112E12, 6.283333333333333], [1.72865214E12, 16.333333333333332], [1.72865658E12, 20.433333333333334], [1.72864992E12, 8.916666666666666], [1.72865316E12, 19.633333333333333], [1.72865094E12, 9.583333333333334], [1.72865538E12, 18.916666666666668], [1.72865418E12, 19.233333333333334], [1.7286564E12, 19.966666666666665], [1.72864974E12, 10.033333333333333], [1.72865196E12, 17.533333333333335], [1.72865298E12, 16.133333333333333], [1.72865622E12, 20.7], [1.72865076E12, 9.3], [1.7286552E12, 20.2], [1.72865178E12, 16.433333333333334], [1.72865502E12, 17.45], [1.72864956E12, 10.033333333333333], [1.728654E12, 19.8], [1.72864998E12, 9.416666666666666], [1.7286522E12, 16.4], [1.72865442E12, 19.116666666666667], [1.72865664E12, 4.033333333333333], [1.72865646E12, 18.4], [1.728651E12, 10.566666666666666], [1.72865322E12, 18.683333333333334], [1.72865544E12, 19.566666666666666], [1.72865202E12, 16.166666666666668], [1.72865526E12, 20.55], [1.72865424E12, 19.083333333333332], [1.7286498E12, 9.9], [1.72865082E12, 9.366666666666667], [1.72865628E12, 19.3], [1.72865406E12, 18.25], [1.72865304E12, 13.5], [1.72865508E12, 19.516666666666666], [1.72864962E12, 9.866666666666667], [1.72865184E12, 16.7], [1.72865286E12, 16.6], [1.72865064E12, 9.983333333333333], [1.72865388E12, 18.466666666666665], [1.72865166E12, 16.783333333333335], [1.7286561E12, 20.016666666666666], [1.72864944E12, 4.9], [1.72865046E12, 9.85], [1.72865268E12, 16.366666666666667], [1.7286549E12, 18.4], [1.72864926E12, 5.05], [1.72865148E12, 16.9], [1.7286537E12, 18.816666666666666], [1.72865592E12, 19.066666666666666], [1.72865088E12, 9.9], [1.72865412E12, 19.616666666666667], [1.72865634E12, 20.45], [1.7286519E12, 17.0], [1.72864968E12, 9.083333333333334], [1.72865514E12, 19.766666666666666], [1.7286507E12, 10.216666666666667], [1.72865292E12, 16.383333333333333], [1.7286495E12, 10.233333333333333], [1.72865172E12, 16.133333333333333], [1.72865394E12, 18.35], [1.72865616E12, 19.066666666666666], [1.72865274E12, 16.416666666666668], [1.72865598E12, 19.683333333333334], [1.72865052E12, 10.033333333333333], [1.72865496E12, 13.466666666666667], [1.72865154E12, 16.616666666666667], [1.72865478E12, 18.683333333333334], [1.72864932E12, 5.166666666666667], [1.72865376E12, 18.95], [1.72865034E12, 10.133333333333333], [1.72865256E12, 16.7], [1.72865358E12, 19.333333333333332], [1.7286558E12, 20.2], [1.7286546E12, 18.65], [1.72865136E12, 16.666666666666668], [1.72865238E12, 16.733333333333334], [1.72865016E12, 9.3], [1.7286534E12, 17.583333333333332], [1.72865118E12, 15.866666666666667], [1.72865562E12, 19.616666666666667], [1.72865058E12, 9.833333333333334], [1.7286528E12, 16.666666666666668], [1.72865382E12, 19.25], [1.72865604E12, 18.4], [1.72865484E12, 18.533333333333335], [1.72864938E12, 5.066666666666666], [1.7286516E12, 17.266666666666666], [1.72865262E12, 16.266666666666666], [1.7286504E12, 9.633333333333333], [1.72865364E12, 19.5], [1.72865142E12, 16.816666666666666], [1.72865586E12, 19.916666666666668], [1.72865022E12, 10.016666666666667], [1.72865244E12, 17.05], [1.72865466E12, 19.1], [1.72865124E12, 17.35], [1.72865346E12, 18.583333333333332], [1.72865568E12, 19.15], [1.72865226E12, 17.183333333333334], [1.7286555E12, 19.866666666666667], [1.72865004E12, 9.85], [1.72865448E12, 19.5], [1.72865106E12, 8.166666666666666], [1.7286543E12, 19.0], [1.72865652E12, 19.483333333333334], [1.72865328E12, 18.766666666666666], [1.72865208E12, 16.15], [1.72864986E12, 9.666666666666666], [1.7286531E12, 17.65], [1.72865532E12, 19.75]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72865664E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.033333333333333, "minX": 1.72864926E12, "maxY": 20.7, "series": [{"data": [[1.7286525E12, 17.466666666666665], [1.72865574E12, 20.583333333333332], [1.72865028E12, 10.3], [1.72865472E12, 20.133333333333333], [1.7286513E12, 16.916666666666668], [1.72865454E12, 18.55], [1.72865352E12, 18.65], [1.7286501E12, 9.883333333333333], [1.72865232E12, 16.6], [1.72865334E12, 19.2], [1.72865556E12, 19.616666666666667], [1.72865436E12, 19.5], [1.72865112E12, 6.283333333333333], [1.72865214E12, 16.333333333333332], [1.72865658E12, 20.433333333333334], [1.72864992E12, 8.916666666666666], [1.72865316E12, 19.633333333333333], [1.72865094E12, 9.583333333333334], [1.72865538E12, 18.916666666666668], [1.72865418E12, 19.233333333333334], [1.7286564E12, 19.966666666666665], [1.72864974E12, 10.033333333333333], [1.72865196E12, 17.533333333333335], [1.72865298E12, 16.133333333333333], [1.72865622E12, 20.7], [1.72865076E12, 9.3], [1.7286552E12, 20.2], [1.72865178E12, 16.433333333333334], [1.72865502E12, 17.45], [1.72864956E12, 10.033333333333333], [1.728654E12, 19.8], [1.72864998E12, 9.416666666666666], [1.7286522E12, 16.4], [1.72865442E12, 19.116666666666667], [1.72865664E12, 4.033333333333333], [1.72865646E12, 18.4], [1.728651E12, 10.566666666666666], [1.72865322E12, 18.683333333333334], [1.72865544E12, 19.566666666666666], [1.72865202E12, 16.166666666666668], [1.72865526E12, 20.55], [1.72865424E12, 19.083333333333332], [1.7286498E12, 9.9], [1.72865082E12, 9.366666666666667], [1.72865628E12, 19.3], [1.72865406E12, 18.25], [1.72865304E12, 13.5], [1.72865508E12, 19.516666666666666], [1.72864962E12, 9.866666666666667], [1.72865184E12, 16.7], [1.72865286E12, 16.6], [1.72865064E12, 9.983333333333333], [1.72865388E12, 18.466666666666665], [1.72865166E12, 16.783333333333335], [1.7286561E12, 20.016666666666666], [1.72864944E12, 4.9], [1.72865046E12, 9.85], [1.72865268E12, 16.366666666666667], [1.7286549E12, 18.4], [1.72864926E12, 5.05], [1.72865148E12, 16.9], [1.7286537E12, 18.816666666666666], [1.72865592E12, 19.066666666666666], [1.72865088E12, 9.9], [1.72865412E12, 19.616666666666667], [1.72865634E12, 20.45], [1.7286519E12, 17.0], [1.72864968E12, 9.083333333333334], [1.72865514E12, 19.766666666666666], [1.7286507E12, 10.216666666666667], [1.72865292E12, 16.383333333333333], [1.7286495E12, 10.233333333333333], [1.72865172E12, 16.133333333333333], [1.72865394E12, 18.35], [1.72865616E12, 19.066666666666666], [1.72865274E12, 16.416666666666668], [1.72865598E12, 19.683333333333334], [1.72865052E12, 10.033333333333333], [1.72865496E12, 13.466666666666667], [1.72865154E12, 16.616666666666667], [1.72865478E12, 18.683333333333334], [1.72864932E12, 5.166666666666667], [1.72865376E12, 18.95], [1.72865034E12, 10.133333333333333], [1.72865256E12, 16.7], [1.72865358E12, 19.333333333333332], [1.7286558E12, 20.2], [1.7286546E12, 18.65], [1.72865136E12, 16.666666666666668], [1.72865238E12, 16.733333333333334], [1.72865016E12, 9.3], [1.7286534E12, 17.583333333333332], [1.72865118E12, 15.866666666666667], [1.72865562E12, 19.616666666666667], [1.72865058E12, 9.833333333333334], [1.7286528E12, 16.666666666666668], [1.72865382E12, 19.25], [1.72865604E12, 18.4], [1.72865484E12, 18.533333333333335], [1.72864938E12, 5.066666666666666], [1.7286516E12, 17.266666666666666], [1.72865262E12, 16.266666666666666], [1.7286504E12, 9.633333333333333], [1.72865364E12, 19.5], [1.72865142E12, 16.816666666666666], [1.72865586E12, 19.916666666666668], [1.72865022E12, 10.016666666666667], [1.72865244E12, 17.05], [1.72865466E12, 19.1], [1.72865124E12, 17.35], [1.72865346E12, 18.583333333333332], [1.72865568E12, 19.15], [1.72865226E12, 17.183333333333334], [1.7286555E12, 19.866666666666667], [1.72865004E12, 9.85], [1.72865448E12, 19.5], [1.72865106E12, 8.166666666666666], [1.7286543E12, 19.0], [1.72865652E12, 19.483333333333334], [1.72865328E12, 18.766666666666666], [1.72865208E12, 16.15], [1.72864986E12, 9.666666666666666], [1.7286531E12, 17.65], [1.72865532E12, 19.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72865664E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

