/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 33.0, "minX": 0.0, "maxY": 5627.0, "series": [{"data": [[0.0, 33.0], [0.1, 43.0], [0.2, 46.0], [0.3, 48.0], [0.4, 50.0], [0.5, 51.0], [0.6, 53.0], [0.7, 54.0], [0.8, 55.0], [0.9, 56.0], [1.0, 56.0], [1.1, 57.0], [1.2, 58.0], [1.3, 59.0], [1.4, 60.0], [1.5, 60.0], [1.6, 61.0], [1.7, 62.0], [1.8, 63.0], [1.9, 63.0], [2.0, 64.0], [2.1, 65.0], [2.2, 65.0], [2.3, 66.0], [2.4, 67.0], [2.5, 67.0], [2.6, 68.0], [2.7, 68.0], [2.8, 69.0], [2.9, 70.0], [3.0, 70.0], [3.1, 71.0], [3.2, 72.0], [3.3, 72.0], [3.4, 73.0], [3.5, 73.0], [3.6, 74.0], [3.7, 74.0], [3.8, 75.0], [3.9, 75.0], [4.0, 76.0], [4.1, 76.0], [4.2, 77.0], [4.3, 77.0], [4.4, 78.0], [4.5, 78.0], [4.6, 79.0], [4.7, 79.0], [4.8, 79.0], [4.9, 80.0], [5.0, 80.0], [5.1, 81.0], [5.2, 81.0], [5.3, 82.0], [5.4, 82.0], [5.5, 83.0], [5.6, 83.0], [5.7, 83.0], [5.8, 84.0], [5.9, 84.0], [6.0, 85.0], [6.1, 85.0], [6.2, 86.0], [6.3, 86.0], [6.4, 87.0], [6.5, 87.0], [6.6, 88.0], [6.7, 88.0], [6.8, 88.0], [6.9, 89.0], [7.0, 89.0], [7.1, 90.0], [7.2, 91.0], [7.3, 91.0], [7.4, 91.0], [7.5, 92.0], [7.6, 92.0], [7.7, 93.0], [7.8, 93.0], [7.9, 94.0], [8.0, 94.0], [8.1, 95.0], [8.2, 95.0], [8.3, 96.0], [8.4, 96.0], [8.5, 96.0], [8.6, 97.0], [8.7, 97.0], [8.8, 98.0], [8.9, 98.0], [9.0, 99.0], [9.1, 99.0], [9.2, 99.0], [9.3, 100.0], [9.4, 100.0], [9.5, 101.0], [9.6, 101.0], [9.7, 101.0], [9.8, 102.0], [9.9, 102.0], [10.0, 103.0], [10.1, 103.0], [10.2, 103.0], [10.3, 104.0], [10.4, 104.0], [10.5, 104.0], [10.6, 105.0], [10.7, 105.0], [10.8, 106.0], [10.9, 106.0], [11.0, 106.0], [11.1, 107.0], [11.2, 107.0], [11.3, 108.0], [11.4, 108.0], [11.5, 108.0], [11.6, 109.0], [11.7, 109.0], [11.8, 110.0], [11.9, 110.0], [12.0, 110.0], [12.1, 111.0], [12.2, 111.0], [12.3, 112.0], [12.4, 112.0], [12.5, 113.0], [12.6, 113.0], [12.7, 113.0], [12.8, 114.0], [12.9, 114.0], [13.0, 115.0], [13.1, 115.0], [13.2, 116.0], [13.3, 116.0], [13.4, 116.0], [13.5, 117.0], [13.6, 117.0], [13.7, 118.0], [13.8, 118.0], [13.9, 118.0], [14.0, 119.0], [14.1, 119.0], [14.2, 120.0], [14.3, 120.0], [14.4, 120.0], [14.5, 121.0], [14.6, 121.0], [14.7, 121.0], [14.8, 122.0], [14.9, 123.0], [15.0, 123.0], [15.1, 123.0], [15.2, 124.0], [15.3, 124.0], [15.4, 125.0], [15.5, 125.0], [15.6, 125.0], [15.7, 126.0], [15.8, 126.0], [15.9, 127.0], [16.0, 127.0], [16.1, 128.0], [16.2, 128.0], [16.3, 129.0], [16.4, 129.0], [16.5, 130.0], [16.6, 130.0], [16.7, 130.0], [16.8, 131.0], [16.9, 131.0], [17.0, 132.0], [17.1, 132.0], [17.2, 133.0], [17.3, 133.0], [17.4, 134.0], [17.5, 134.0], [17.6, 135.0], [17.7, 135.0], [17.8, 136.0], [17.9, 136.0], [18.0, 136.0], [18.1, 137.0], [18.2, 137.0], [18.3, 138.0], [18.4, 138.0], [18.5, 139.0], [18.6, 139.0], [18.7, 139.0], [18.8, 140.0], [18.9, 140.0], [19.0, 141.0], [19.1, 141.0], [19.2, 142.0], [19.3, 142.0], [19.4, 143.0], [19.5, 143.0], [19.6, 144.0], [19.7, 144.0], [19.8, 145.0], [19.9, 145.0], [20.0, 146.0], [20.1, 146.0], [20.2, 147.0], [20.3, 147.0], [20.4, 148.0], [20.5, 148.0], [20.6, 148.0], [20.7, 149.0], [20.8, 149.0], [20.9, 150.0], [21.0, 150.0], [21.1, 151.0], [21.2, 152.0], [21.3, 152.0], [21.4, 153.0], [21.5, 153.0], [21.6, 153.0], [21.7, 154.0], [21.8, 154.0], [21.9, 155.0], [22.0, 155.0], [22.1, 156.0], [22.2, 156.0], [22.3, 157.0], [22.4, 158.0], [22.5, 158.0], [22.6, 159.0], [22.7, 159.0], [22.8, 160.0], [22.9, 160.0], [23.0, 161.0], [23.1, 161.0], [23.2, 162.0], [23.3, 162.0], [23.4, 163.0], [23.5, 163.0], [23.6, 164.0], [23.7, 165.0], [23.8, 165.0], [23.9, 166.0], [24.0, 166.0], [24.1, 167.0], [24.2, 167.0], [24.3, 168.0], [24.4, 169.0], [24.5, 169.0], [24.6, 170.0], [24.7, 170.0], [24.8, 171.0], [24.9, 171.0], [25.0, 172.0], [25.1, 173.0], [25.2, 173.0], [25.3, 174.0], [25.4, 174.0], [25.5, 175.0], [25.6, 176.0], [25.7, 176.0], [25.8, 177.0], [25.9, 178.0], [26.0, 178.0], [26.1, 179.0], [26.2, 179.0], [26.3, 180.0], [26.4, 181.0], [26.5, 181.0], [26.6, 182.0], [26.7, 183.0], [26.8, 183.0], [26.9, 184.0], [27.0, 184.0], [27.1, 185.0], [27.2, 185.0], [27.3, 186.0], [27.4, 187.0], [27.5, 187.0], [27.6, 188.0], [27.7, 189.0], [27.8, 189.0], [27.9, 190.0], [28.0, 191.0], [28.1, 191.0], [28.2, 192.0], [28.3, 193.0], [28.4, 194.0], [28.5, 194.0], [28.6, 195.0], [28.7, 196.0], [28.8, 197.0], [28.9, 197.0], [29.0, 198.0], [29.1, 199.0], [29.2, 199.0], [29.3, 200.0], [29.4, 201.0], [29.5, 202.0], [29.6, 202.0], [29.7, 203.0], [29.8, 204.0], [29.9, 205.0], [30.0, 206.0], [30.1, 207.0], [30.2, 207.0], [30.3, 208.0], [30.4, 209.0], [30.5, 209.0], [30.6, 210.0], [30.7, 211.0], [30.8, 212.0], [30.9, 213.0], [31.0, 214.0], [31.1, 215.0], [31.2, 215.0], [31.3, 216.0], [31.4, 217.0], [31.5, 218.0], [31.6, 219.0], [31.7, 220.0], [31.8, 221.0], [31.9, 222.0], [32.0, 223.0], [32.1, 224.0], [32.2, 225.0], [32.3, 226.0], [32.4, 226.0], [32.5, 227.0], [32.6, 228.0], [32.7, 229.0], [32.8, 230.0], [32.9, 231.0], [33.0, 232.0], [33.1, 234.0], [33.2, 235.0], [33.3, 236.0], [33.4, 237.0], [33.5, 238.0], [33.6, 239.0], [33.7, 241.0], [33.8, 242.0], [33.9, 243.0], [34.0, 243.0], [34.1, 245.0], [34.2, 246.0], [34.3, 248.0], [34.4, 249.0], [34.5, 250.0], [34.6, 251.0], [34.7, 252.0], [34.8, 253.0], [34.9, 254.0], [35.0, 255.0], [35.1, 256.0], [35.2, 258.0], [35.3, 259.0], [35.4, 260.0], [35.5, 261.0], [35.6, 263.0], [35.7, 265.0], [35.8, 266.0], [35.9, 267.0], [36.0, 268.0], [36.1, 270.0], [36.2, 271.0], [36.3, 272.0], [36.4, 274.0], [36.5, 275.0], [36.6, 276.0], [36.7, 278.0], [36.8, 279.0], [36.9, 280.0], [37.0, 282.0], [37.1, 284.0], [37.2, 285.0], [37.3, 287.0], [37.4, 288.0], [37.5, 290.0], [37.6, 291.0], [37.7, 293.0], [37.8, 295.0], [37.9, 296.0], [38.0, 298.0], [38.1, 299.0], [38.2, 301.0], [38.3, 303.0], [38.4, 305.0], [38.5, 306.0], [38.6, 308.0], [38.7, 309.0], [38.8, 311.0], [38.9, 313.0], [39.0, 315.0], [39.1, 317.0], [39.2, 319.0], [39.3, 321.0], [39.4, 323.0], [39.5, 325.0], [39.6, 326.0], [39.7, 328.0], [39.8, 330.0], [39.9, 332.0], [40.0, 334.0], [40.1, 336.0], [40.2, 338.0], [40.3, 341.0], [40.4, 343.0], [40.5, 344.0], [40.6, 346.0], [40.7, 349.0], [40.8, 351.0], [40.9, 353.0], [41.0, 355.0], [41.1, 357.0], [41.2, 359.0], [41.3, 361.0], [41.4, 364.0], [41.5, 365.0], [41.6, 368.0], [41.7, 370.0], [41.8, 372.0], [41.9, 375.0], [42.0, 377.0], [42.1, 379.0], [42.2, 382.0], [42.3, 384.0], [42.4, 387.0], [42.5, 389.0], [42.6, 392.0], [42.7, 394.0], [42.8, 396.0], [42.9, 399.0], [43.0, 402.0], [43.1, 405.0], [43.2, 408.0], [43.3, 410.0], [43.4, 413.0], [43.5, 415.0], [43.6, 417.0], [43.7, 420.0], [43.8, 422.0], [43.9, 425.0], [44.0, 427.0], [44.1, 430.0], [44.2, 433.0], [44.3, 436.0], [44.4, 438.0], [44.5, 440.0], [44.6, 443.0], [44.7, 445.0], [44.8, 448.0], [44.9, 452.0], [45.0, 455.0], [45.1, 458.0], [45.2, 461.0], [45.3, 463.0], [45.4, 466.0], [45.5, 470.0], [45.6, 472.0], [45.7, 475.0], [45.8, 478.0], [45.9, 481.0], [46.0, 483.0], [46.1, 485.0], [46.2, 488.0], [46.3, 491.0], [46.4, 493.0], [46.5, 497.0], [46.6, 499.0], [46.7, 502.0], [46.8, 505.0], [46.9, 507.0], [47.0, 510.0], [47.1, 512.0], [47.2, 515.0], [47.3, 518.0], [47.4, 520.0], [47.5, 523.0], [47.6, 526.0], [47.7, 528.0], [47.8, 531.0], [47.9, 534.0], [48.0, 536.0], [48.1, 538.0], [48.2, 541.0], [48.3, 543.0], [48.4, 546.0], [48.5, 549.0], [48.6, 551.0], [48.7, 553.0], [48.8, 556.0], [48.9, 559.0], [49.0, 562.0], [49.1, 564.0], [49.2, 567.0], [49.3, 570.0], [49.4, 573.0], [49.5, 576.0], [49.6, 578.0], [49.7, 580.0], [49.8, 584.0], [49.9, 586.0], [50.0, 589.0], [50.1, 592.0], [50.2, 594.0], [50.3, 597.0], [50.4, 600.0], [50.5, 602.0], [50.6, 605.0], [50.7, 607.0], [50.8, 610.0], [50.9, 613.0], [51.0, 616.0], [51.1, 618.0], [51.2, 621.0], [51.3, 623.0], [51.4, 626.0], [51.5, 629.0], [51.6, 631.0], [51.7, 633.0], [51.8, 636.0], [51.9, 640.0], [52.0, 643.0], [52.1, 646.0], [52.2, 649.0], [52.3, 652.0], [52.4, 654.0], [52.5, 657.0], [52.6, 660.0], [52.7, 662.0], [52.8, 665.0], [52.9, 667.0], [53.0, 670.0], [53.1, 672.0], [53.2, 675.0], [53.3, 678.0], [53.4, 681.0], [53.5, 684.0], [53.6, 687.0], [53.7, 689.0], [53.8, 692.0], [53.9, 694.0], [54.0, 697.0], [54.1, 700.0], [54.2, 702.0], [54.3, 705.0], [54.4, 707.0], [54.5, 710.0], [54.6, 712.0], [54.7, 716.0], [54.8, 718.0], [54.9, 721.0], [55.0, 724.0], [55.1, 727.0], [55.2, 730.0], [55.3, 733.0], [55.4, 736.0], [55.5, 739.0], [55.6, 742.0], [55.7, 744.0], [55.8, 747.0], [55.9, 749.0], [56.0, 753.0], [56.1, 756.0], [56.2, 759.0], [56.3, 761.0], [56.4, 764.0], [56.5, 766.0], [56.6, 769.0], [56.7, 772.0], [56.8, 775.0], [56.9, 778.0], [57.0, 780.0], [57.1, 783.0], [57.2, 786.0], [57.3, 788.0], [57.4, 791.0], [57.5, 793.0], [57.6, 795.0], [57.7, 798.0], [57.8, 801.0], [57.9, 803.0], [58.0, 805.0], [58.1, 808.0], [58.2, 811.0], [58.3, 814.0], [58.4, 817.0], [58.5, 819.0], [58.6, 822.0], [58.7, 825.0], [58.8, 828.0], [58.9, 831.0], [59.0, 833.0], [59.1, 835.0], [59.2, 838.0], [59.3, 841.0], [59.4, 844.0], [59.5, 846.0], [59.6, 849.0], [59.7, 851.0], [59.8, 854.0], [59.9, 857.0], [60.0, 860.0], [60.1, 863.0], [60.2, 866.0], [60.3, 868.0], [60.4, 872.0], [60.5, 875.0], [60.6, 877.0], [60.7, 880.0], [60.8, 883.0], [60.9, 885.0], [61.0, 888.0], [61.1, 890.0], [61.2, 893.0], [61.3, 896.0], [61.4, 898.0], [61.5, 901.0], [61.6, 904.0], [61.7, 907.0], [61.8, 910.0], [61.9, 912.0], [62.0, 915.0], [62.1, 918.0], [62.2, 921.0], [62.3, 924.0], [62.4, 927.0], [62.5, 930.0], [62.6, 933.0], [62.7, 935.0], [62.8, 938.0], [62.9, 941.0], [63.0, 943.0], [63.1, 945.0], [63.2, 949.0], [63.3, 952.0], [63.4, 955.0], [63.5, 959.0], [63.6, 962.0], [63.7, 964.0], [63.8, 967.0], [63.9, 969.0], [64.0, 972.0], [64.1, 975.0], [64.2, 977.0], [64.3, 979.0], [64.4, 982.0], [64.5, 985.0], [64.6, 988.0], [64.7, 991.0], [64.8, 995.0], [64.9, 998.0], [65.0, 1001.0], [65.1, 1004.0], [65.2, 1007.0], [65.3, 1010.0], [65.4, 1013.0], [65.5, 1015.0], [65.6, 1017.0], [65.7, 1020.0], [65.8, 1023.0], [65.9, 1026.0], [66.0, 1030.0], [66.1, 1032.0], [66.2, 1036.0], [66.3, 1040.0], [66.4, 1042.0], [66.5, 1044.0], [66.6, 1048.0], [66.7, 1051.0], [66.8, 1055.0], [66.9, 1057.0], [67.0, 1060.0], [67.1, 1062.0], [67.2, 1065.0], [67.3, 1069.0], [67.4, 1071.0], [67.5, 1073.0], [67.6, 1076.0], [67.7, 1079.0], [67.8, 1082.0], [67.9, 1084.0], [68.0, 1087.0], [68.1, 1090.0], [68.2, 1093.0], [68.3, 1096.0], [68.4, 1099.0], [68.5, 1102.0], [68.6, 1104.0], [68.7, 1107.0], [68.8, 1110.0], [68.9, 1113.0], [69.0, 1116.0], [69.1, 1119.0], [69.2, 1122.0], [69.3, 1125.0], [69.4, 1128.0], [69.5, 1130.0], [69.6, 1133.0], [69.7, 1135.0], [69.8, 1138.0], [69.9, 1142.0], [70.0, 1144.0], [70.1, 1147.0], [70.2, 1150.0], [70.3, 1153.0], [70.4, 1156.0], [70.5, 1160.0], [70.6, 1163.0], [70.7, 1167.0], [70.8, 1169.0], [70.9, 1173.0], [71.0, 1176.0], [71.1, 1178.0], [71.2, 1181.0], [71.3, 1184.0], [71.4, 1187.0], [71.5, 1190.0], [71.6, 1193.0], [71.7, 1196.0], [71.8, 1199.0], [71.9, 1202.0], [72.0, 1206.0], [72.1, 1209.0], [72.2, 1212.0], [72.3, 1216.0], [72.4, 1219.0], [72.5, 1222.0], [72.6, 1226.0], [72.7, 1230.0], [72.8, 1234.0], [72.9, 1237.0], [73.0, 1240.0], [73.1, 1243.0], [73.2, 1246.0], [73.3, 1249.0], [73.4, 1253.0], [73.5, 1256.0], [73.6, 1259.0], [73.7, 1262.0], [73.8, 1265.0], [73.9, 1268.0], [74.0, 1272.0], [74.1, 1276.0], [74.2, 1279.0], [74.3, 1283.0], [74.4, 1286.0], [74.5, 1289.0], [74.6, 1292.0], [74.7, 1295.0], [74.8, 1298.0], [74.9, 1301.0], [75.0, 1304.0], [75.1, 1308.0], [75.2, 1312.0], [75.3, 1315.0], [75.4, 1319.0], [75.5, 1322.0], [75.6, 1325.0], [75.7, 1329.0], [75.8, 1332.0], [75.9, 1336.0], [76.0, 1339.0], [76.1, 1344.0], [76.2, 1348.0], [76.3, 1352.0], [76.4, 1355.0], [76.5, 1358.0], [76.6, 1362.0], [76.7, 1365.0], [76.8, 1368.0], [76.9, 1372.0], [77.0, 1375.0], [77.1, 1378.0], [77.2, 1382.0], [77.3, 1385.0], [77.4, 1389.0], [77.5, 1392.0], [77.6, 1396.0], [77.7, 1399.0], [77.8, 1401.0], [77.9, 1405.0], [78.0, 1408.0], [78.1, 1412.0], [78.2, 1416.0], [78.3, 1419.0], [78.4, 1422.0], [78.5, 1425.0], [78.6, 1428.0], [78.7, 1432.0], [78.8, 1436.0], [78.9, 1439.0], [79.0, 1443.0], [79.1, 1447.0], [79.2, 1451.0], [79.3, 1454.0], [79.4, 1457.0], [79.5, 1461.0], [79.6, 1464.0], [79.7, 1468.0], [79.8, 1472.0], [79.9, 1475.0], [80.0, 1479.0], [80.1, 1482.0], [80.2, 1485.0], [80.3, 1490.0], [80.4, 1495.0], [80.5, 1498.0], [80.6, 1501.0], [80.7, 1505.0], [80.8, 1508.0], [80.9, 1512.0], [81.0, 1516.0], [81.1, 1520.0], [81.2, 1524.0], [81.3, 1529.0], [81.4, 1532.0], [81.5, 1536.0], [81.6, 1540.0], [81.7, 1543.0], [81.8, 1547.0], [81.9, 1551.0], [82.0, 1557.0], [82.1, 1562.0], [82.2, 1566.0], [82.3, 1571.0], [82.4, 1575.0], [82.5, 1579.0], [82.6, 1582.0], [82.7, 1586.0], [82.8, 1590.0], [82.9, 1594.0], [83.0, 1598.0], [83.1, 1603.0], [83.2, 1608.0], [83.3, 1612.0], [83.4, 1616.0], [83.5, 1621.0], [83.6, 1625.0], [83.7, 1629.0], [83.8, 1633.0], [83.9, 1637.0], [84.0, 1641.0], [84.1, 1645.0], [84.2, 1649.0], [84.3, 1654.0], [84.4, 1657.0], [84.5, 1662.0], [84.6, 1666.0], [84.7, 1670.0], [84.8, 1675.0], [84.9, 1679.0], [85.0, 1686.0], [85.1, 1690.0], [85.2, 1694.0], [85.3, 1699.0], [85.4, 1702.0], [85.5, 1707.0], [85.6, 1712.0], [85.7, 1717.0], [85.8, 1723.0], [85.9, 1728.0], [86.0, 1732.0], [86.1, 1736.0], [86.2, 1741.0], [86.3, 1746.0], [86.4, 1751.0], [86.5, 1756.0], [86.6, 1759.0], [86.7, 1765.0], [86.8, 1770.0], [86.9, 1775.0], [87.0, 1779.0], [87.1, 1785.0], [87.2, 1790.0], [87.3, 1796.0], [87.4, 1802.0], [87.5, 1807.0], [87.6, 1813.0], [87.7, 1817.0], [87.8, 1822.0], [87.9, 1827.0], [88.0, 1833.0], [88.1, 1839.0], [88.2, 1845.0], [88.3, 1850.0], [88.4, 1855.0], [88.5, 1861.0], [88.6, 1867.0], [88.7, 1873.0], [88.8, 1878.0], [88.9, 1883.0], [89.0, 1889.0], [89.1, 1896.0], [89.2, 1901.0], [89.3, 1906.0], [89.4, 1911.0], [89.5, 1918.0], [89.6, 1923.0], [89.7, 1929.0], [89.8, 1936.0], [89.9, 1942.0], [90.0, 1948.0], [90.1, 1954.0], [90.2, 1961.0], [90.3, 1967.0], [90.4, 1973.0], [90.5, 1980.0], [90.6, 1988.0], [90.7, 1995.0], [90.8, 2001.0], [90.9, 2006.0], [91.0, 2013.0], [91.1, 2022.0], [91.2, 2030.0], [91.3, 2038.0], [91.4, 2046.0], [91.5, 2052.0], [91.6, 2061.0], [91.7, 2068.0], [91.8, 2074.0], [91.9, 2082.0], [92.0, 2090.0], [92.1, 2097.0], [92.2, 2105.0], [92.3, 2112.0], [92.4, 2120.0], [92.5, 2128.0], [92.6, 2136.0], [92.7, 2144.0], [92.8, 2154.0], [92.9, 2163.0], [93.0, 2170.0], [93.1, 2180.0], [93.2, 2189.0], [93.3, 2199.0], [93.4, 2206.0], [93.5, 2215.0], [93.6, 2225.0], [93.7, 2236.0], [93.8, 2246.0], [93.9, 2255.0], [94.0, 2262.0], [94.1, 2270.0], [94.2, 2282.0], [94.3, 2293.0], [94.4, 2302.0], [94.5, 2312.0], [94.6, 2324.0], [94.7, 2333.0], [94.8, 2341.0], [94.9, 2351.0], [95.0, 2362.0], [95.1, 2371.0], [95.2, 2381.0], [95.3, 2394.0], [95.4, 2405.0], [95.5, 2418.0], [95.6, 2432.0], [95.7, 2445.0], [95.8, 2457.0], [95.9, 2475.0], [96.0, 2488.0], [96.1, 2502.0], [96.2, 2521.0], [96.3, 2536.0], [96.4, 2551.0], [96.5, 2566.0], [96.6, 2582.0], [96.7, 2597.0], [96.8, 2616.0], [96.9, 2633.0], [97.0, 2649.0], [97.1, 2663.0], [97.2, 2677.0], [97.3, 2693.0], [97.4, 2717.0], [97.5, 2736.0], [97.6, 2757.0], [97.7, 2777.0], [97.8, 2798.0], [97.9, 2831.0], [98.0, 2854.0], [98.1, 2881.0], [98.2, 2907.0], [98.3, 2935.0], [98.4, 2963.0], [98.5, 2996.0], [98.6, 3024.0], [98.7, 3050.0], [98.8, 3083.0], [98.9, 3111.0], [99.0, 3150.0], [99.1, 3190.0], [99.2, 3238.0], [99.3, 3311.0], [99.4, 3373.0], [99.5, 3451.0], [99.6, 3553.0], [99.7, 3637.0], [99.8, 3806.0], [99.9, 4024.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 9837.0, "series": [{"data": [[0.0, 4541.0], [600.0, 1820.0], [700.0, 1801.0], [800.0, 1814.0], [900.0, 1723.0], [1000.0, 1712.0], [1100.0, 1670.0], [1200.0, 1497.0], [1300.0, 1409.0], [1400.0, 1395.0], [1500.0, 1214.0], [1600.0, 1128.0], [1700.0, 1006.0], [1800.0, 886.0], [1900.0, 793.0], [2000.0, 666.0], [2100.0, 585.0], [2200.0, 516.0], [2300.0, 478.0], [2400.0, 368.0], [2500.0, 308.0], [2600.0, 300.0], [2700.0, 235.0], [2800.0, 179.0], [2900.0, 170.0], [3000.0, 166.0], [3100.0, 133.0], [3300.0, 75.0], [3200.0, 82.0], [3400.0, 56.0], [3500.0, 53.0], [3600.0, 36.0], [3700.0, 30.0], [3800.0, 21.0], [3900.0, 22.0], [4000.0, 18.0], [4100.0, 13.0], [4300.0, 5.0], [4200.0, 10.0], [4600.0, 2.0], [4500.0, 2.0], [4400.0, 3.0], [4800.0, 1.0], [4700.0, 2.0], [5600.0, 1.0], [5400.0, 1.0], [100.0, 9837.0], [200.0, 4372.0], [300.0, 2361.0], [400.0, 1828.0], [500.0, 1856.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9556.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 22957.0, "series": [{"data": [[0.0, 22957.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 16687.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9556.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.728738E12, "maxY": 8.0, "series": [{"data": [[1.72873812E12, 2.0], [1.72873824E12, 1.768211920529802], [1.72873806E12, 2.0], [1.728738E12, 2.0], [1.72873818E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72873878E12, 4.0], [1.72873908E12, 4.0], [1.72873938E12, 4.0], [1.72873968E12, 4.0], [1.7287395E12, 4.0], [1.7287398E12, 4.0], [1.72873848E12, 4.0], [1.7287401E12, 4.0], [1.72873926E12, 4.0], [1.72873956E12, 4.0], [1.72873824E12, 3.9922480620155034], [1.72873986E12, 4.0], [1.72874016E12, 4.0], [1.72873836E12, 4.0], [1.72873998E12, 4.0], [1.72874028E12, 3.8101545253863147], [1.72873896E12, 4.0], [1.72873866E12, 4.0], [1.72873974E12, 4.0], [1.72874004E12, 4.0], [1.72873872E12, 4.0], [1.72874034E12, 2.825242718446602], [1.72873842E12, 4.0], [1.72873884E12, 4.0], [1.72873854E12, 4.0], [1.72873914E12, 4.0], [1.72873944E12, 4.0], [1.7287386E12, 4.0], [1.72874022E12, 4.0], [1.7287383E12, 4.0], [1.7287389E12, 4.0], [1.7287392E12, 4.0], [1.72873902E12, 4.0], [1.72873932E12, 4.0], [1.72873962E12, 4.0], [1.72873992E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.7287407E12, 8.0], [1.7287425E12, 8.0], [1.7287419E12, 8.0], [1.72874412E12, 8.0], [1.72874208E12, 8.0], [1.7287437E12, 8.0], [1.72874148E12, 8.0], [1.7287431E12, 8.0], [1.72874232E12, 8.0], [1.72874394E12, 8.0], [1.72874172E12, 8.0], [1.72874334E12, 8.0], [1.7287413E12, 8.0], [1.72874352E12, 8.0], [1.72874292E12, 8.0], [1.72874088E12, 8.0], [1.72874184E12, 8.0], [1.72874346E12, 8.0], [1.72874124E12, 8.0], [1.72874064E12, 8.0], [1.72874286E12, 8.0], [1.72874046E12, 8.0], [1.72874304E12, 8.0], [1.72874106E12, 8.0], [1.72874244E12, 8.0], [1.72874406E12, 8.0], [1.72874328E12, 8.0], [1.72874082E12, 8.0], [1.72874268E12, 8.0], [1.7287443E12, 7.379227053140099], [1.72874226E12, 8.0], [1.72874166E12, 8.0], [1.72874388E12, 8.0], [1.7287428E12, 8.0], [1.72874442E12, 1.0], [1.728741E12, 8.0], [1.7287422E12, 8.0], [1.72874382E12, 8.0], [1.72874178E12, 8.0], [1.728744E12, 8.0], [1.7287404E12, 8.0], [1.72874118E12, 8.0], [1.7287434E12, 8.0], [1.72874202E12, 8.0], [1.72874424E12, 8.0], [1.72874142E12, 8.0], [1.72874364E12, 8.0], [1.7287416E12, 8.0], [1.72874322E12, 8.0], [1.72874058E12, 8.0], [1.72874262E12, 8.0], [1.72874154E12, 8.0], [1.72874376E12, 8.0], [1.72874034E12, 7.938967136150235], [1.72874316E12, 8.0], [1.72874112E12, 8.0], [1.72874076E12, 8.0], [1.72874274E12, 8.0], [1.72874436E12, 4.470914127423823], [1.72874214E12, 8.0], [1.72874136E12, 8.0], [1.72874052E12, 8.0], [1.72874298E12, 8.0], [1.72874238E12, 8.0], [1.72874094E12, 8.0], [1.72874256E12, 8.0], [1.72874418E12, 8.0], [1.72874196E12, 8.0], [1.72874358E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72874442E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 353.36734693877554, "minX": 1.0, "maxY": 1006.9201187208805, "series": [{"data": [[2.0, 400.0170593013811], [1.0, 353.36734693877554], [4.0, 523.2299468623463], [8.0, 1006.9201187208805], [5.0, 913.8275862068969], [3.0, 485.89144736842087], [6.0, 979.1290322580646], [7.0, 990.6517857142865]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[6.5082113821137675, 831.565650406504]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 8.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.728738E12, "maxY": 2.847204285E7, "series": [{"data": [[1.7287425E12, 2.65173652E7], [1.72873908E12, 2.2811133333333332E7], [1.7287437E12, 2.2461894683333334E7], [1.7287401E12, 2.326101185E7], [1.72874148E12, 2.369538535E7], [1.72874232E12, 2.4255875666666668E7], [1.72873926E12, 2.3758684866666667E7], [1.72873824E12, 1.8692008866666667E7], [1.72874334E12, 2.05571873E7], [1.72873806E12, 1.5037117733333332E7], [1.72874028E12, 2.206013415E7], [1.7287413E12, 2.378667785E7], [1.72874352E12, 2.35815673E7], [1.72874184E12, 2.449655365E7], [1.72873842E12, 2.4129382966666665E7], [1.72874064E12, 2.6209709883333333E7], [1.72874286E12, 2.5865898466666665E7], [1.72874046E12, 2.61892364E7], [1.72874304E12, 2.345318205E7], [1.72874406E12, 2.1953342466666665E7], [1.72873944E12, 2.3087874933333334E7], [1.7287386E12, 2.45772737E7], [1.72874082E12, 2.42045588E7], [1.72874268E12, 2.436187515E7], [1.72873962E12, 2.3395612983333334E7], [1.72874166E12, 2.48055629E7], [1.72874388E12, 2.24568215E7], [1.72874442E12, 2282106.8833333333], [1.72873878E12, 2.404083255E7], [1.728741E12, 2.525573475E7], [1.7287422E12, 2.4145216916666668E7], [1.7287398E12, 2.3637275783333335E7], [1.72874118E12, 2.447500845E7], [1.7287434E12, 2.26043151E7], [1.72874202E12, 2.4257360883333333E7], [1.72874424E12, 2.1815466616666667E7], [1.72874016E12, 2.4589241316666666E7], [1.72873998E12, 2.4012784483333334E7], [1.72874322E12, 2.33682996E7], [1.72873896E12, 2.4747776266666666E7], [1.72873812E12, 1.4884430233333332E7], [1.72874154E12, 2.3013376566666666E7], [1.72874376E12, 2.16480243E7], [1.72874034E12, 2.1646343783333335E7], [1.72874274E12, 2.3929834416666668E7], [1.72873914E12, 2.3325902983333334E7], [1.72874136E12, 2.3245476383333333E7], [1.7287383E12, 2.3261542466666665E7], [1.72874052E12, 2.5010373916666668E7], [1.72874238E12, 2.847204285E7], [1.72874256E12, 2.6766765866666667E7], [1.72873932E12, 2.2044309216666665E7], [1.72874358E12, 2.3284709133333333E7], [1.7287407E12, 2.5767090066666666E7], [1.72873968E12, 2.2722216466666665E7], [1.7287419E12, 2.3949437683333334E7], [1.72874412E12, 2.20334243E7], [1.7287395E12, 2.4336313666666668E7], [1.72874208E12, 2.5500683733333334E7], [1.72873848E12, 2.2938380133333333E7], [1.7287431E12, 2.2640367216666665E7], [1.72874394E12, 2.1136194483333334E7], [1.72873986E12, 2.366899715E7], [1.72874172E12, 2.5531952266666666E7], [1.72874292E12, 2.47226463E7], [1.72873866E12, 2.3949294683333334E7], [1.72874088E12, 2.3865280733333334E7], [1.72874346E12, 2.4370744233333334E7], [1.72874004E12, 2.1616477983333334E7], [1.72874124E12, 2.28108612E7], [1.72873884E12, 2.4523631283333335E7], [1.72874106E12, 2.5724084883333333E7], [1.72874244E12, 2.7288047816666666E7], [1.72874022E12, 2.2071499E7], [1.72874328E12, 2.1857828383333333E7], [1.7287443E12, 2.1892159316666666E7], [1.7287392E12, 2.29597499E7], [1.72873902E12, 2.32542941E7], [1.72874226E12, 2.3823327833333332E7], [1.728738E12, 7991786.55], [1.7287428E12, 2.47917391E7], [1.72873938E12, 2.20001819E7], [1.72874382E12, 2.261240855E7], [1.72874178E12, 2.529711495E7], [1.728744E12, 2.3404900583333332E7], [1.72873818E12, 1.56242542E7], [1.7287404E12, 2.7145865766666666E7], [1.72873956E12, 2.374561105E7], [1.72874142E12, 2.46745594E7], [1.72874364E12, 2.2047107383333333E7], [1.72873836E12, 2.4063156383333333E7], [1.7287416E12, 2.40791507E7], [1.72874058E12, 2.5904723283333335E7], [1.72874262E12, 2.4080527383333333E7], [1.72873974E12, 2.264257965E7], [1.72873872E12, 2.382503305E7], [1.72874316E12, 2.38634676E7], [1.72874112E12, 2.5619762733333334E7], [1.72873854E12, 2.4619402816666666E7], [1.72874076E12, 2.5267010566666666E7], [1.72874436E12, 1.8191684916666668E7], [1.72874214E12, 2.4069067466666665E7], [1.72874298E12, 2.430736315E7], [1.7287389E12, 2.2662059316666666E7], [1.72874094E12, 2.45737075E7], [1.72874418E12, 2.102358135E7], [1.72874196E12, 2.4473101116666667E7], [1.72873992E12, 2.3109032516666666E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7287425E12, 0.0], [1.72873908E12, 0.0], [1.7287437E12, 0.0], [1.7287401E12, 0.0], [1.72874148E12, 0.0], [1.72874232E12, 0.0], [1.72873926E12, 0.0], [1.72873824E12, 0.0], [1.72874334E12, 0.0], [1.72873806E12, 0.0], [1.72874028E12, 0.0], [1.7287413E12, 0.0], [1.72874352E12, 0.0], [1.72874184E12, 0.0], [1.72873842E12, 0.0], [1.72874064E12, 0.0], [1.72874286E12, 0.0], [1.72874046E12, 0.0], [1.72874304E12, 0.0], [1.72874406E12, 0.0], [1.72873944E12, 0.0], [1.7287386E12, 0.0], [1.72874082E12, 0.0], [1.72874268E12, 0.0], [1.72873962E12, 0.0], [1.72874166E12, 0.0], [1.72874388E12, 0.0], [1.72874442E12, 0.0], [1.72873878E12, 0.0], [1.728741E12, 0.0], [1.7287422E12, 0.0], [1.7287398E12, 0.0], [1.72874118E12, 0.0], [1.7287434E12, 0.0], [1.72874202E12, 0.0], [1.72874424E12, 0.0], [1.72874016E12, 0.0], [1.72873998E12, 0.0], [1.72874322E12, 0.0], [1.72873896E12, 0.0], [1.72873812E12, 0.0], [1.72874154E12, 0.0], [1.72874376E12, 0.0], [1.72874034E12, 0.0], [1.72874274E12, 0.0], [1.72873914E12, 0.0], [1.72874136E12, 0.0], [1.7287383E12, 0.0], [1.72874052E12, 0.0], [1.72874238E12, 0.0], [1.72874256E12, 0.0], [1.72873932E12, 0.0], [1.72874358E12, 0.0], [1.7287407E12, 0.0], [1.72873968E12, 0.0], [1.7287419E12, 0.0], [1.72874412E12, 0.0], [1.7287395E12, 0.0], [1.72874208E12, 0.0], [1.72873848E12, 0.0], [1.7287431E12, 0.0], [1.72874394E12, 0.0], [1.72873986E12, 0.0], [1.72874172E12, 0.0], [1.72874292E12, 0.0], [1.72873866E12, 0.0], [1.72874088E12, 0.0], [1.72874346E12, 0.0], [1.72874004E12, 0.0], [1.72874124E12, 0.0], [1.72873884E12, 0.0], [1.72874106E12, 0.0], [1.72874244E12, 0.0], [1.72874022E12, 0.0], [1.72874328E12, 0.0], [1.7287443E12, 0.0], [1.7287392E12, 0.0], [1.72873902E12, 0.0], [1.72874226E12, 0.0], [1.728738E12, 0.0], [1.7287428E12, 0.0], [1.72873938E12, 0.0], [1.72874382E12, 0.0], [1.72874178E12, 0.0], [1.728744E12, 0.0], [1.72873818E12, 0.0], [1.7287404E12, 0.0], [1.72873956E12, 0.0], [1.72874142E12, 0.0], [1.72874364E12, 0.0], [1.72873836E12, 0.0], [1.7287416E12, 0.0], [1.72874058E12, 0.0], [1.72874262E12, 0.0], [1.72873974E12, 0.0], [1.72873872E12, 0.0], [1.72874316E12, 0.0], [1.72874112E12, 0.0], [1.72873854E12, 0.0], [1.72874076E12, 0.0], [1.72874436E12, 0.0], [1.72874214E12, 0.0], [1.72874298E12, 0.0], [1.7287389E12, 0.0], [1.72874094E12, 0.0], [1.72874418E12, 0.0], [1.72874196E12, 0.0], [1.72873992E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72874442E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 349.56097560975616, "minX": 1.728738E12, "maxY": 1244.9974358974375, "series": [{"data": [[1.7287425E12, 896.4018691588781], [1.72873908E12, 560.9437939110071], [1.7287437E12, 1144.0644391408102], [1.7287401E12, 544.7036199095021], [1.72874148E12, 1117.064965197215], [1.72874232E12, 1063.2649006622498], [1.72873926E12, 509.70042194092844], [1.72873824E12, 411.1051344743278], [1.72874334E12, 1194.8287841191066], [1.72873806E12, 388.61093247588445], [1.72874028E12, 498.0242825607067], [1.7287413E12, 991.6756198347111], [1.72874352E12, 1037.2360515021458], [1.72874184E12, 1036.7004310344828], [1.72873842E12, 505.5623678646933], [1.72874064E12, 977.1710794297356], [1.72874286E12, 1063.873333333333], [1.72874046E12, 891.7279549718575], [1.72874304E12, 989.6791666666668], [1.72874406E12, 1119.0163934426223], [1.72873944E12, 533.4519015659954], [1.7287386E12, 515.462365591398], [1.72874082E12, 1038.9461206896547], [1.72874268E12, 975.0347648261765], [1.72873962E12, 536.3281249999998], [1.72874166E12, 1009.2273684210525], [1.72874388E12, 1084.405034324943], [1.72874442E12, 349.56097560975616], [1.72873878E12, 553.0393518518514], [1.728741E12, 988.4742268041242], [1.7287422E12, 1036.58695652174], [1.7287398E12, 492.98136645962734], [1.72874118E12, 1040.3874458874448], [1.7287434E12, 1157.9854721549636], [1.72874202E12, 948.4422310756966], [1.72874424E12, 1244.9974358974375], [1.72874016E12, 517.6544276457875], [1.72873998E12, 553.8683602771366], [1.72874322E12, 1048.8096280087516], [1.72873896E12, 505.1210191082797], [1.72873812E12, 402.2541806020069], [1.72874154E12, 1035.500000000001], [1.72874376E12, 1091.3106575963711], [1.72874034E12, 660.0286396181383], [1.72874274E12, 990.9120654396733], [1.72873914E12, 561.3395784543325], [1.72874136E12, 922.2384615384617], [1.7287383E12, 508.5744680851063], [1.72874052E12, 875.4098360655747], [1.72874238E12, 923.4489402697485], [1.72874256E12, 900.9906542056078], [1.72873932E12, 482.08433734939763], [1.72874358E12, 1096.5701149425297], [1.7287407E12, 921.4285714285719], [1.72873968E12, 517.8315334773216], [1.7287419E12, 954.6733466933864], [1.72874412E12, 1131.1796690307315], [1.7287395E12, 540.1950672645744], [1.72874208E12, 1022.0889830508476], [1.72873848E12, 532.9199999999993], [1.7287431E12, 935.4050387596892], [1.72874394E12, 1157.0000000000005], [1.72873986E12, 558.68287037037], [1.72874172E12, 997.1434511434509], [1.72874292E12, 995.7979381443292], [1.72873866E12, 516.0236559139784], [1.72874088E12, 943.3463035019454], [1.72874346E12, 1085.3272727272736], [1.72874004E12, 522.1132897603491], [1.72874124E12, 951.6435643564358], [1.72873884E12, 570.3317647058823], [1.72874106E12, 958.519920318725], [1.72874244E12, 889.7434944237928], [1.72874022E12, 464.36310679611677], [1.72874328E12, 1010.7139830508476], [1.7287443E12, 1068.0990338164252], [1.7287392E12, 520.6659388646293], [1.72873902E12, 509.2452431289634], [1.72874226E12, 969.0404040404042], [1.728738E12, 423.74482758620695], [1.7287428E12, 972.6571428571424], [1.72873938E12, 548.6628701594534], [1.72874382E12, 1074.2984409799549], [1.72874178E12, 939.9785992217899], [1.728744E12, 1076.2549450549452], [1.72873818E12, 404.6598639455782], [1.7287404E12, 987.7971311475407], [1.72873956E12, 491.2494887525564], [1.72874142E12, 1016.7808510638297], [1.72874364E12, 1127.677570093458], [1.72873836E12, 504.0567226890758], [1.7287416E12, 1016.7768421052641], [1.72874058E12, 940.3813229571986], [1.72874262E12, 921.3423076923073], [1.72873974E12, 529.9999999999994], [1.72873872E12, 515.8900862068964], [1.72874316E12, 1054.879912663755], [1.72874112E12, 903.4301886792456], [1.72873854E12, 544.918552036199], [1.72874076E12, 951.6726546906189], [1.72874436E12, 710.2853185595566], [1.72874214E12, 1038.9849137931046], [1.72874298E12, 941.9901768172882], [1.7287389E12, 534.3102678571433], [1.72874094E12, 1007.6927966101698], [1.72874418E12, 1134.3333333333344], [1.72874196E12, 918.5790476190476], [1.72873992E12, 553.5265588914552]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72874442E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 228.73170731707322, "minX": 1.728738E12, "maxY": 838.174358974359, "series": [{"data": [[1.7287425E12, 595.8093457943921], [1.72873908E12, 382.88992974238874], [1.7287437E12, 757.238663484487], [1.7287401E12, 368.04977375565625], [1.72874148E12, 756.6241299303946], [1.72874232E12, 716.7593818984546], [1.72873926E12, 341.4936708860758], [1.72873824E12, 282.35696821515893], [1.72874334E12, 791.09429280397], [1.72873806E12, 272.2475884244371], [1.72874028E12, 335.4061810154526], [1.7287413E12, 654.6838842975214], [1.72874352E12, 690.5665236051502], [1.72874184E12, 691.2327586206893], [1.72873842E12, 341.7801268498943], [1.72874064E12, 647.1629327902235], [1.72874286E12, 706.5311111111109], [1.72874046E12, 598.9981238273922], [1.72874304E12, 665.1729166666668], [1.72874406E12, 751.7306791569083], [1.72873944E12, 360.0693512304251], [1.7287386E12, 347.29892473118275], [1.72874082E12, 698.9956896551723], [1.72874268E12, 652.4151329243358], [1.72873962E12, 358.0624999999999], [1.72874166E12, 667.4589473684206], [1.72874388E12, 718.3752860411898], [1.72874442E12, 228.73170731707322], [1.72873878E12, 369.50000000000017], [1.728741E12, 652.6020618556696], [1.7287422E12, 702.8847826086957], [1.7287398E12, 329.1035196687374], [1.72874118E12, 697.0822510822507], [1.7287434E12, 769.3220338983043], [1.72874202E12, 631.4980079681276], [1.72874424E12, 838.174358974359], [1.72874016E12, 340.32397408207333], [1.72873998E12, 368.38799076212507], [1.72874322E12, 699.3216630196935], [1.72873896E12, 335.2972399150742], [1.72873812E12, 283.3377926421404], [1.72874154E12, 704.9804347826092], [1.72874376E12, 729.344671201815], [1.72874034E12, 444.9212410501191], [1.72874274E12, 662.3742331288345], [1.72873914E12, 374.5245901639343], [1.72874136E12, 622.9980769230774], [1.7287383E12, 347.2191489361701], [1.72874052E12, 594.1092896174863], [1.72874238E12, 602.077071290944], [1.72874256E12, 588.6373831775702], [1.72873932E12, 329.23493975903625], [1.72874358E12, 725.9885057471267], [1.7287407E12, 613.4324324324326], [1.72873968E12, 347.82073434125255], [1.7287419E12, 644.2725450901808], [1.72874412E12, 753.2813238770689], [1.7287395E12, 359.05829596412565], [1.72874208E12, 678.593220338983], [1.72873848E12, 362.5577777777778], [1.7287431E12, 629.0387596899222], [1.72874394E12, 775.1435523114357], [1.72873986E12, 374.98842592592587], [1.72874172E12, 663.006237006237], [1.72874292E12, 658.7278350515455], [1.72873866E12, 351.11827956989265], [1.72874088E12, 633.5214007782097], [1.72874346E12, 712.4340909090909], [1.72874004E12, 355.32461873638346], [1.72874124E12, 645.3762376237623], [1.72873884E12, 383.86588235294164], [1.72874106E12, 635.6135458167328], [1.72874244E12, 581.1263940520449], [1.72874022E12, 312.99417475728205], [1.72874328E12, 682.2309322033898], [1.7287443E12, 717.0483091787439], [1.7287392E12, 347.5262008733623], [1.72873902E12, 343.19027484143805], [1.72874226E12, 653.488888888889], [1.728738E12, 289.9793103448274], [1.7287428E12, 644.6959183673473], [1.72873938E12, 374.69020501138976], [1.72874382E12, 724.0645879732747], [1.72874178E12, 628.9669260700385], [1.728744E12, 713.8285714285714], [1.72873818E12, 280.8945578231292], [1.7287404E12, 658.5717213114757], [1.72873956E12, 325.5112474437625], [1.72874142E12, 674.4085106382976], [1.72874364E12, 753.3855140186913], [1.72873836E12, 344.281512605042], [1.7287416E12, 682.311578947369], [1.72874058E12, 629.6050583657589], [1.72874262E12, 621.9519230769235], [1.72873974E12, 359.1434878587197], [1.72873872E12, 347.6573275862068], [1.72874316E12, 703.7663755458512], [1.72874112E12, 600.1226415094349], [1.72873854E12, 368.34615384615375], [1.72874076E12, 629.6447105788416], [1.72874436E12, 474.57617728531864], [1.72874214E12, 702.5301724137936], [1.72874298E12, 628.2102161100196], [1.7287389E12, 361.1941964285712], [1.72874094E12, 668.9724576271187], [1.72874418E12, 754.3523809523809], [1.72874196E12, 613.744761904762], [1.72873992E12, 372.080831408776]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72874442E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.728738E12, "maxY": 4.9E-324, "series": [{"data": [[1.7287425E12, 0.0], [1.72873908E12, 0.0], [1.7287437E12, 0.0], [1.7287401E12, 0.0], [1.72874148E12, 0.0], [1.72874232E12, 0.0], [1.72873926E12, 0.0], [1.72873824E12, 0.0], [1.72874334E12, 0.0], [1.72873806E12, 0.0], [1.72874028E12, 0.0], [1.7287413E12, 0.0], [1.72874352E12, 0.0], [1.72874184E12, 0.0], [1.72873842E12, 0.0], [1.72874064E12, 0.0], [1.72874286E12, 0.0], [1.72874046E12, 0.0], [1.72874304E12, 0.0], [1.72874406E12, 0.0], [1.72873944E12, 0.0], [1.7287386E12, 0.0], [1.72874082E12, 0.0], [1.72874268E12, 0.0], [1.72873962E12, 0.0], [1.72874166E12, 0.0], [1.72874388E12, 0.0], [1.72874442E12, 0.0], [1.72873878E12, 0.0], [1.728741E12, 0.0], [1.7287422E12, 0.0], [1.7287398E12, 0.0], [1.72874118E12, 0.0], [1.7287434E12, 0.0], [1.72874202E12, 0.0], [1.72874424E12, 0.0], [1.72874016E12, 0.0], [1.72873998E12, 0.0], [1.72874322E12, 0.0], [1.72873896E12, 0.0], [1.72873812E12, 0.0], [1.72874154E12, 0.0], [1.72874376E12, 0.0], [1.72874034E12, 0.0], [1.72874274E12, 0.0], [1.72873914E12, 0.0], [1.72874136E12, 0.0], [1.7287383E12, 0.0], [1.72874052E12, 0.0], [1.72874238E12, 0.0], [1.72874256E12, 0.0], [1.72873932E12, 0.0], [1.72874358E12, 0.0], [1.7287407E12, 0.0], [1.72873968E12, 0.0], [1.7287419E12, 0.0], [1.72874412E12, 0.0], [1.7287395E12, 0.0], [1.72874208E12, 0.0], [1.72873848E12, 0.0], [1.7287431E12, 0.0], [1.72874394E12, 0.0], [1.72873986E12, 0.0], [1.72874172E12, 0.0], [1.72874292E12, 0.0], [1.72873866E12, 0.0], [1.72874088E12, 0.0], [1.72874346E12, 0.0], [1.72874004E12, 0.0], [1.72874124E12, 0.0], [1.72873884E12, 0.0], [1.72874106E12, 0.0], [1.72874244E12, 0.0], [1.72874022E12, 0.0], [1.72874328E12, 0.0], [1.7287443E12, 0.0], [1.7287392E12, 0.0], [1.72873902E12, 0.0], [1.72874226E12, 0.0], [1.728738E12, 0.0], [1.7287428E12, 0.0], [1.72873938E12, 0.0], [1.72874382E12, 0.0], [1.72874178E12, 0.0], [1.728744E12, 0.0], [1.72873818E12, 0.0], [1.7287404E12, 0.0], [1.72873956E12, 0.0], [1.72874142E12, 0.0], [1.72874364E12, 0.0], [1.72873836E12, 0.0], [1.7287416E12, 0.0], [1.72874058E12, 0.0], [1.72874262E12, 0.0], [1.72873974E12, 0.0], [1.72873872E12, 0.0], [1.72874316E12, 0.0], [1.72874112E12, 0.0], [1.72873854E12, 0.0], [1.72874076E12, 0.0], [1.72874436E12, 0.0], [1.72874214E12, 0.0], [1.72874298E12, 0.0], [1.7287389E12, 0.0], [1.72874094E12, 0.0], [1.72874418E12, 0.0], [1.72874196E12, 0.0], [1.72873992E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72874442E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 33.0, "minX": 1.728738E12, "maxY": 5627.0, "series": [{"data": [[1.7287425E12, 3373.0], [1.72873908E12, 2612.0], [1.7287437E12, 4125.0], [1.7287401E12, 1885.0], [1.72874148E12, 3586.0], [1.72874232E12, 4266.0], [1.72873926E12, 2283.0], [1.72873824E12, 1868.0], [1.72874334E12, 4885.0], [1.72873806E12, 1670.0], [1.72874028E12, 2122.0], [1.7287413E12, 4561.0], [1.72874352E12, 4401.0], [1.72874184E12, 4428.0], [1.72873842E12, 1700.0], [1.72874064E12, 3951.0], [1.72874286E12, 3840.0], [1.72874046E12, 3733.0], [1.72874304E12, 4373.0], [1.72874406E12, 3827.0], [1.72873944E12, 2274.0], [1.7287386E12, 2181.0], [1.72874082E12, 4020.0], [1.72874268E12, 3733.0], [1.72873962E12, 2067.0], [1.72874166E12, 3884.0], [1.72874388E12, 4067.0], [1.72874442E12, 890.0], [1.72873878E12, 2194.0], [1.728741E12, 4130.0], [1.7287422E12, 4354.0], [1.7287398E12, 1948.0], [1.72874118E12, 4100.0], [1.7287434E12, 4133.0], [1.72874202E12, 3464.0], [1.72874424E12, 5412.0], [1.72874016E12, 1915.0], [1.72873998E12, 1946.0], [1.72874322E12, 4313.0], [1.72873896E12, 1814.0], [1.72873812E12, 1990.0], [1.72874154E12, 3990.0], [1.72874376E12, 4303.0], [1.72874034E12, 2991.0], [1.72874274E12, 3968.0], [1.72873914E12, 2262.0], [1.72874136E12, 3980.0], [1.7287383E12, 1755.0], [1.72874052E12, 3986.0], [1.72874238E12, 3568.0], [1.72874256E12, 3120.0], [1.72873932E12, 2181.0], [1.72874358E12, 4465.0], [1.7287407E12, 3761.0], [1.72873968E12, 1844.0], [1.7287419E12, 3609.0], [1.72874412E12, 4385.0], [1.7287395E12, 1770.0], [1.72874208E12, 3976.0], [1.72873848E12, 1810.0], [1.7287431E12, 3781.0], [1.72874394E12, 5627.0], [1.72873986E12, 2259.0], [1.72874172E12, 3657.0], [1.72874292E12, 3687.0], [1.72873866E12, 1906.0], [1.72874088E12, 3842.0], [1.72874346E12, 4100.0], [1.72874004E12, 2232.0], [1.72874124E12, 3441.0], [1.72873884E12, 1813.0], [1.72874106E12, 4012.0], [1.72874244E12, 3512.0], [1.72874022E12, 1885.0], [1.72874328E12, 3739.0], [1.7287443E12, 3905.0], [1.7287392E12, 2324.0], [1.72873902E12, 2417.0], [1.72874226E12, 3723.0], [1.728738E12, 1669.0], [1.7287428E12, 3989.0], [1.72873938E12, 1991.0], [1.72874382E12, 3972.0], [1.72874178E12, 4171.0], [1.728744E12, 4244.0], [1.72873818E12, 1357.0], [1.7287404E12, 3633.0], [1.72873956E12, 1946.0], [1.72874142E12, 3386.0], [1.72874364E12, 3845.0], [1.72873836E12, 2143.0], [1.7287416E12, 3636.0], [1.72874058E12, 3232.0], [1.72874262E12, 4012.0], [1.72873974E12, 2036.0], [1.72873872E12, 1923.0], [1.72874316E12, 4215.0], [1.72874112E12, 4615.0], [1.72873854E12, 1928.0], [1.72874076E12, 3943.0], [1.72874436E12, 3644.0], [1.72874214E12, 3887.0], [1.72874298E12, 3621.0], [1.7287389E12, 1854.0], [1.72874094E12, 3597.0], [1.72874418E12, 4126.0], [1.72874196E12, 3716.0], [1.72873992E12, 2162.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7287425E12, 62.0], [1.72873908E12, 42.0], [1.7287437E12, 74.0], [1.7287401E12, 35.0], [1.72874148E12, 54.0], [1.72874232E12, 62.0], [1.72873926E12, 42.0], [1.72873824E12, 41.0], [1.72874334E12, 77.0], [1.72873806E12, 33.0], [1.72874028E12, 45.0], [1.7287413E12, 71.0], [1.72874352E12, 78.0], [1.72874184E12, 52.0], [1.72873842E12, 40.0], [1.72874064E12, 70.0], [1.72874286E12, 62.0], [1.72874046E12, 60.0], [1.72874304E12, 62.0], [1.72874406E12, 65.0], [1.72873944E12, 46.0], [1.7287386E12, 39.0], [1.72874082E12, 69.0], [1.72874268E12, 70.0], [1.72873962E12, 44.0], [1.72874166E12, 59.0], [1.72874388E12, 80.0], [1.72874442E12, 36.0], [1.72873878E12, 37.0], [1.728741E12, 69.0], [1.7287422E12, 60.0], [1.7287398E12, 39.0], [1.72874118E12, 58.0], [1.7287434E12, 68.0], [1.72874202E12, 56.0], [1.72874424E12, 67.0], [1.72874016E12, 35.0], [1.72873998E12, 44.0], [1.72874322E12, 61.0], [1.72873896E12, 47.0], [1.72873812E12, 35.0], [1.72874154E12, 67.0], [1.72874376E12, 69.0], [1.72874034E12, 42.0], [1.72874274E12, 71.0], [1.72873914E12, 40.0], [1.72874136E12, 68.0], [1.7287383E12, 40.0], [1.72874052E12, 74.0], [1.72874238E12, 63.0], [1.72874256E12, 50.0], [1.72873932E12, 46.0], [1.72874358E12, 65.0], [1.7287407E12, 63.0], [1.72873968E12, 42.0], [1.7287419E12, 74.0], [1.72874412E12, 82.0], [1.7287395E12, 43.0], [1.72874208E12, 68.0], [1.72873848E12, 49.0], [1.7287431E12, 69.0], [1.72874394E12, 78.0], [1.72873986E12, 43.0], [1.72874172E12, 61.0], [1.72874292E12, 68.0], [1.72873866E12, 41.0], [1.72874088E12, 67.0], [1.72874346E12, 82.0], [1.72874004E12, 40.0], [1.72874124E12, 57.0], [1.72873884E12, 40.0], [1.72874106E12, 60.0], [1.72874244E12, 62.0], [1.72874022E12, 42.0], [1.72874328E12, 70.0], [1.7287443E12, 73.0], [1.7287392E12, 48.0], [1.72873902E12, 41.0], [1.72874226E12, 58.0], [1.728738E12, 39.0], [1.7287428E12, 72.0], [1.72873938E12, 51.0], [1.72874382E12, 71.0], [1.72874178E12, 58.0], [1.728744E12, 66.0], [1.72873818E12, 36.0], [1.7287404E12, 56.0], [1.72873956E12, 41.0], [1.72874142E12, 72.0], [1.72874364E12, 74.0], [1.72873836E12, 45.0], [1.7287416E12, 66.0], [1.72874058E12, 64.0], [1.72874262E12, 57.0], [1.72873974E12, 41.0], [1.72873872E12, 48.0], [1.72874316E12, 77.0], [1.72874112E12, 67.0], [1.72873854E12, 44.0], [1.72874076E12, 72.0], [1.72874436E12, 56.0], [1.72874214E12, 65.0], [1.72874298E12, 68.0], [1.7287389E12, 43.0], [1.72874094E12, 70.0], [1.72874418E12, 62.0], [1.72874196E12, 72.0], [1.72873992E12, 42.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7287425E12, 1969.2000000000007], [1.72873908E12, 1176.8], [1.7287437E12, 2585.0], [1.7287401E12, 1094.4999999999998], [1.72874148E12, 2339.6000000000004], [1.72874232E12, 2347.4], [1.72873926E12, 1134.0], [1.72873824E12, 982.0], [1.72874334E12, 2687.2000000000016], [1.72873806E12, 885.8], [1.72874028E12, 1058.6], [1.7287413E12, 2222.0], [1.72874352E12, 2354.3], [1.72874184E12, 2317.0], [1.72873842E12, 1123.8000000000002], [1.72874064E12, 2177.8], [1.72874286E12, 2384.1000000000004], [1.72874046E12, 1939.8000000000002], [1.72874304E12, 2244.1000000000004], [1.72874406E12, 2314.2], [1.72873944E12, 1205.0], [1.7287386E12, 1111.4], [1.72874082E12, 2306.5], [1.72874268E12, 2232.0], [1.72873962E12, 1137.5], [1.72874166E12, 2090.2000000000003], [1.72874388E12, 2337.6], [1.72874442E12, 813.2000000000004], [1.72873878E12, 1266.6], [1.728741E12, 2303.2000000000007], [1.7287422E12, 2169.7000000000003], [1.7287398E12, 1124.4], [1.72874118E12, 2223.5999999999995], [1.7287434E12, 2495.2000000000007], [1.72874202E12, 2184.0], [1.72874424E12, 2692.8], [1.72874016E12, 1128.8000000000002], [1.72873998E12, 1244.0], [1.72874322E12, 2350.2], [1.72873896E12, 1162.4000000000003], [1.72873812E12, 853.0], [1.72874154E12, 2334.4], [1.72874376E12, 2368.4], [1.72874034E12, 1574.0], [1.72874274E12, 2197.0], [1.72873914E12, 1185.6], [1.72874136E12, 2057.0000000000005], [1.7287383E12, 1063.6000000000001], [1.72874052E12, 2039.0], [1.72874238E12, 1971.0], [1.72874256E12, 2038.0000000000005], [1.72873932E12, 1109.2], [1.72874358E12, 2378.4000000000005], [1.7287407E12, 2087.4], [1.72873968E12, 1095.4], [1.7287419E12, 2121.0], [1.72874412E12, 2414.8], [1.7287395E12, 1154.8000000000002], [1.72874208E12, 2155.4], [1.72873848E12, 1135.6000000000001], [1.7287431E12, 2179.8], [1.72874394E12, 2564.8], [1.72873986E12, 1150.7], [1.72874172E12, 2224.6], [1.72874292E12, 2137.6000000000004], [1.72873866E12, 1109.6000000000001], [1.72874088E12, 2132.5], [1.72874346E12, 2426.5], [1.72874004E12, 1126.0], [1.72874124E12, 2066.8], [1.72873884E12, 1179.8000000000002], [1.72874106E12, 2223.8999999999996], [1.72874244E12, 1939.6000000000001], [1.72874022E12, 1062.8000000000002], [1.72874328E12, 2198.7], [1.7287443E12, 2353.0], [1.7287392E12, 1163.7000000000003], [1.72873902E12, 1108.4], [1.72874226E12, 2041.8000000000006], [1.728738E12, 924.6000000000001], [1.7287428E12, 2130.100000000001], [1.72873938E12, 1181.0], [1.72874382E12, 2290.0], [1.72874178E12, 2138.0], [1.728744E12, 2503.4000000000015], [1.72873818E12, 873.5], [1.7287404E12, 2163.0], [1.72873956E12, 1121.0], [1.72874142E12, 2216.8], [1.72874364E12, 2498.2], [1.72873836E12, 1112.4], [1.7287416E12, 2115.4], [1.72874058E12, 2098.5], [1.72874262E12, 2048.0000000000005], [1.72873974E12, 1205.8000000000002], [1.72873872E12, 1170.5], [1.72874316E12, 2392.3], [1.72874112E12, 2036.3000000000002], [1.72873854E12, 1147.8], [1.72874076E12, 2121.8], [1.72874436E12, 1664.8000000000002], [1.72874214E12, 2217.5], [1.72874298E12, 2094.0], [1.7287389E12, 1232.8000000000002], [1.72874094E12, 2058.8999999999996], [1.72874418E12, 2561.6000000000013], [1.72874196E12, 2053.0], [1.72873992E12, 1205.0000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7287425E12, 2968.999999999999], [1.72873908E12, 1947.5599999999956], [1.7287437E12, 4001.2000000000007], [1.7287401E12, 1650.3899999999999], [1.72874148E12, 3363.16], [1.72874232E12, 3845.239999999994], [1.72873926E12, 1960.0], [1.72873824E12, 1530.799999999996], [1.72874334E12, 4239.6799999999985], [1.72873806E12, 1342.4399999999998], [1.72874028E12, 1643.2599999999993], [1.7287413E12, 3401.749999999996], [1.72874352E12, 3646.4799999999914], [1.72874184E12, 3257.2500000000005], [1.72873842E12, 1589.4399999999996], [1.72874064E12, 3319.1999999999985], [1.72874286E12, 3277.720000000002], [1.72874046E12, 3174.579999999995], [1.72874304E12, 3441.38], [1.72874406E12, 3535.879999999997], [1.72873944E12, 1792.2399999999989], [1.7287386E12, 1780.419999999996], [1.72874082E12, 3476.8], [1.72874268E12, 3252.2], [1.72873962E12, 1794.3099999999993], [1.72874166E12, 3332.600000000001], [1.72874388E12, 3750.7400000000007], [1.72874442E12, 890.0], [1.72873878E12, 1778.3700000000001], [1.728741E12, 3375.7399999999993], [1.7287422E12, 3599.789999999999], [1.7287398E12, 1605.9599999999982], [1.72874118E12, 3359.33], [1.7287434E12, 3496.500000000001], [1.72874202E12, 2898.159999999999], [1.72874424E12, 3989.9599999999964], [1.72874016E12, 1707.0400000000004], [1.72873998E12, 1807.1599999999992], [1.72874322E12, 3500.4400000000037], [1.72873896E12, 1572.359999999999], [1.72873812E12, 1432.0], [1.72874154E12, 3772.2699999999986], [1.72874376E12, 3831.299999999993], [1.72874034E12, 2560.200000000001], [1.72874274E12, 3139.4000000000005], [1.72873914E12, 1901.8799999999999], [1.72874136E12, 3041.8099999999986], [1.7287383E12, 1526.9], [1.72874052E12, 2926.0], [1.72874238E12, 2973.0], [1.72874256E12, 3006.84], [1.72873932E12, 1582.099999999998], [1.72874358E12, 3647.8799999999987], [1.7287407E12, 3243.899999999995], [1.72873968E12, 1761.6800000000003], [1.7287419E12, 3400.0], [1.72874412E12, 3595.3599999999997], [1.7287395E12, 1602.59], [1.72874208E12, 3394.7199999999957], [1.72873848E12, 1599.8200000000002], [1.7287431E12, 3389.909999999999], [1.72874394E12, 4240.999999999998], [1.72873986E12, 1778.290000000003], [1.72874172E12, 3343.3600000000006], [1.72874292E12, 3285.419999999999], [1.72873866E12, 1709.6599999999976], [1.72874088E12, 3133.05], [1.72874346E12, 3826.0499999999975], [1.72874004E12, 1743.7999999999995], [1.72874124E12, 3074.08], [1.72873884E12, 1653.3400000000004], [1.72874106E12, 3240.159999999996], [1.72874244E12, 3039.2300000000005], [1.72874022E12, 1656.1999999999998], [1.72874328E12, 3560.4799999999996], [1.7287443E12, 3715.600000000005], [1.7287392E12, 1702.3099999999972], [1.72873902E12, 1813.599999999999], [1.72874226E12, 3204.920000000001], [1.728738E12, 1653.3599999999997], [1.7287428E12, 3523.189999999995], [1.72873938E12, 1832.6000000000022], [1.72874382E12, 3381.5], [1.72874178E12, 3053.250000000001], [1.728744E12, 3726.36], [1.72873818E12, 1266.9500000000003], [1.7287404E12, 3395.010000000001], [1.72873956E12, 1660.1000000000004], [1.72874142E12, 3339.19], [1.72874364E12, 3526.6199999999994], [1.72873836E12, 1661.190000000001], [1.7287416E12, 3037.0400000000004], [1.72874058E12, 2860.9000000000015], [1.72874262E12, 2791.379999999999], [1.72873974E12, 1746.8599999999992], [1.72873872E12, 1716.9500000000012], [1.72874316E12, 3383.249999999999], [1.72874112E12, 3171.839999999998], [1.72873854E12, 1755.57], [1.72874076E12, 3110.76], [1.72874436E12, 2812.5199999999995], [1.72874214E12, 3579.0000000000014], [1.72874298E12, 3336.199999999998], [1.7287389E12, 1658.02], [1.72874094E12, 3187.0199999999995], [1.72874418E12, 3453.940000000002], [1.72874196E12, 2989.76], [1.72873992E12, 1761.2799999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7287425E12, 795.0], [1.72873908E12, 534.0], [1.7287437E12, 853.0], [1.7287401E12, 536.0], [1.72874148E12, 1057.0], [1.72874232E12, 929.0], [1.72873926E12, 425.0], [1.72873824E12, 330.0], [1.72874334E12, 897.0], [1.72873806E12, 232.0], [1.72874028E12, 424.0], [1.7287413E12, 717.5], [1.72874352E12, 796.0], [1.72874184E12, 852.5], [1.72873842E12, 431.0], [1.72874064E12, 835.0], [1.72874286E12, 913.5], [1.72874046E12, 745.0], [1.72874304E12, 804.5], [1.72874406E12, 1080.0], [1.72873944E12, 488.0], [1.7287386E12, 455.0], [1.72874082E12, 920.0], [1.72874268E12, 781.0], [1.72873962E12, 498.0], [1.72874166E12, 911.0], [1.72874388E12, 871.0], [1.72874442E12, 257.0], [1.72873878E12, 488.5], [1.728741E12, 789.0], [1.7287422E12, 1000.0], [1.7287398E12, 360.0], [1.72874118E12, 991.5], [1.7287434E12, 1047.0], [1.72874202E12, 809.0], [1.72874424E12, 1113.5], [1.72874016E12, 420.0], [1.72873998E12, 498.0], [1.72874322E12, 935.0], [1.72873896E12, 444.0], [1.72873812E12, 325.0], [1.72874154E12, 862.5], [1.72874376E12, 994.0], [1.72874034E12, 449.0], [1.72874274E12, 807.0], [1.72873914E12, 512.0], [1.72874136E12, 772.5], [1.7287383E12, 466.5], [1.72874052E12, 700.0], [1.72874238E12, 908.0], [1.72874256E12, 677.0], [1.72873932E12, 385.5], [1.72874358E12, 936.0], [1.7287407E12, 653.0], [1.72873968E12, 410.0], [1.7287419E12, 778.0], [1.72874412E12, 1015.0], [1.7287395E12, 489.0], [1.72874208E12, 930.5], [1.72873848E12, 495.5], [1.7287431E12, 630.5], [1.72874394E12, 980.0], [1.72873986E12, 521.0], [1.72874172E12, 804.0], [1.72874292E12, 899.0], [1.72873866E12, 457.0], [1.72874088E12, 795.0], [1.72874346E12, 924.0], [1.72874004E12, 467.0], [1.72874124E12, 801.0], [1.72873884E12, 572.0], [1.72874106E12, 688.0], [1.72874244E12, 772.0], [1.72874022E12, 318.0], [1.72874328E12, 885.5], [1.7287443E12, 889.5], [1.7287392E12, 450.5], [1.72873902E12, 403.0], [1.72874226E12, 841.0], [1.728738E12, 339.0], [1.7287428E12, 790.0], [1.72873938E12, 475.0], [1.72874382E12, 941.0], [1.72874178E12, 664.0], [1.728744E12, 838.0], [1.72873818E12, 384.5], [1.7287404E12, 938.5], [1.72873956E12, 386.0], [1.72874142E12, 858.5], [1.72874364E12, 962.0], [1.72873836E12, 429.5], [1.7287416E12, 930.0], [1.72874058E12, 798.5], [1.72874262E12, 765.5], [1.72873974E12, 432.0], [1.72873872E12, 464.5], [1.72874316E12, 960.5], [1.72874112E12, 674.5], [1.72873854E12, 502.0], [1.72874076E12, 728.0], [1.72874436E12, 463.0], [1.72874214E12, 916.5], [1.72874298E12, 716.0], [1.7287389E12, 468.0], [1.72874094E12, 990.5], [1.72874418E12, 1023.0], [1.72874196E12, 638.0], [1.72873992E12, 488.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7287425E12, 2330.2], [1.72873908E12, 1394.799999999998], [1.7287437E12, 3031.0], [1.7287401E12, 1300.55], [1.72874148E12, 2745.3999999999987], [1.72874232E12, 2783.799999999998], [1.72873926E12, 1345.5], [1.72873824E12, 1114.5], [1.72874334E12, 3104.3999999999996], [1.72873806E12, 1045.8], [1.72874028E12, 1219.3999999999996], [1.7287413E12, 2659.5], [1.72874352E12, 2717.0499999999993], [1.72874184E12, 2756.5], [1.72873842E12, 1314.9999999999995], [1.72874064E12, 2537.2], [1.72874286E12, 2870.3999999999996], [1.72874046E12, 2291.7999999999997], [1.72874304E12, 2663.65], [1.72874406E12, 2656.7999999999997], [1.72873944E12, 1387.1999999999998], [1.7287386E12, 1262.8999999999996], [1.72874082E12, 2723.0], [1.72874268E12, 2670.5], [1.72873962E12, 1315.9499999999996], [1.72874166E12, 2609.2], [1.72874388E12, 2850.399999999998], [1.72874442E12, 845.9], [1.72873878E12, 1436.1], [1.728741E12, 2659.0], [1.7287422E12, 2558.2], [1.7287398E12, 1242.3999999999996], [1.72874118E12, 2516.8499999999995], [1.7287434E12, 2834.8999999999996], [1.72874202E12, 2508.0499999999997], [1.72874424E12, 3031.2], [1.72874016E12, 1342.9999999999998], [1.72873998E12, 1430.3], [1.72874322E12, 2601.7999999999997], [1.72873896E12, 1240.0], [1.72873812E12, 1092.0], [1.72874154E12, 2701.35], [1.72874376E12, 2678.0999999999995], [1.72874034E12, 1966.0], [1.72874274E12, 2518.0], [1.72873914E12, 1377.5999999999992], [1.72874136E12, 2297.8], [1.7287383E12, 1258.05], [1.72874052E12, 2329.5], [1.72874238E12, 2400.0], [1.72874256E12, 2365.7999999999997], [1.72873932E12, 1236.2499999999998], [1.72874358E12, 2841.3999999999996], [1.7287407E12, 2490.999999999998], [1.72873968E12, 1380.5999999999992], [1.7287419E12, 2397.0], [1.72874412E12, 2815.999999999998], [1.7287395E12, 1358.5499999999997], [1.72874208E12, 2566.6999999999994], [1.72873848E12, 1341.9], [1.7287431E12, 2666.7], [1.72874394E12, 2937.3999999999996], [1.72873986E12, 1359.4499999999998], [1.72874172E12, 2714.2], [1.72874292E12, 2481.9999999999995], [1.72873866E12, 1322.7], [1.72874088E12, 2559.5], [1.72874346E12, 2926.45], [1.72874004E12, 1337.0], [1.72874124E12, 2463.9999999999995], [1.72873884E12, 1353.1999999999998], [1.72874106E12, 2552.4999999999995], [1.72874244E12, 2201.3499999999976], [1.72874022E12, 1324.1999999999998], [1.72874328E12, 2593.35], [1.7287443E12, 2696.75], [1.7287392E12, 1373.2499999999998], [1.72873902E12, 1301.3999999999996], [1.72874226E12, 2405.3999999999996], [1.728738E12, 1109.3999999999994], [1.7287428E12, 2508.149999999999], [1.72873938E12, 1340.0], [1.72874382E12, 2590.0], [1.72874178E12, 2554.0], [1.728744E12, 2983.6], [1.72873818E12, 1007.5], [1.7287404E12, 2516.2999999999997], [1.72873956E12, 1273.0], [1.72874142E12, 2513.2], [1.72874364E12, 2954.899999999999], [1.72873836E12, 1297.1999999999998], [1.7287416E12, 2448.9999999999995], [1.72874058E12, 2377.5], [1.72874262E12, 2336.35], [1.72873974E12, 1404.3], [1.72873872E12, 1330.0], [1.72874316E12, 2759.299999999997], [1.72874112E12, 2383.9], [1.72873854E12, 1374.7499999999995], [1.72874076E12, 2441.2], [1.72874436E12, 1935.9999999999993], [1.72874214E12, 2633.5], [1.72874298E12, 2344.5], [1.7287389E12, 1378.1], [1.72874094E12, 2469.399999999998], [1.72874418E12, 2945.5499999999997], [1.72874196E12, 2395.5999999999995], [1.72873992E12, 1406.3999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72874442E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 179.5, "minX": 1.0, "maxY": 1102.0, "series": [{"data": [[2.0, 1102.0], [8.0, 635.5], [9.0, 553.0], [10.0, 459.0], [11.0, 398.0], [3.0, 1026.0], [12.0, 330.0], [13.0, 320.0], [14.0, 288.0], [15.0, 257.0], [1.0, 845.5], [4.0, 947.0], [16.0, 222.5], [17.0, 186.0], [18.0, 182.5], [19.0, 208.0], [5.0, 817.5], [20.0, 179.5], [21.0, 206.5], [6.0, 776.0], [7.0, 682.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 21.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 111.5, "minX": 1.0, "maxY": 771.5, "series": [{"data": [[2.0, 771.5], [8.0, 459.0], [9.0, 394.0], [10.0, 321.5], [11.0, 271.0], [3.0, 683.5], [12.0, 210.0], [13.0, 198.0], [14.0, 189.5], [15.0, 152.0], [1.0, 621.5], [4.0, 650.5], [16.0, 130.5], [17.0, 114.0], [18.0, 119.0], [19.0, 147.0], [5.0, 567.0], [20.0, 111.5], [21.0, 160.0], [6.0, 533.0], [7.0, 476.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 21.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.728738E12, "maxY": 9.15, "series": [{"data": [[1.7287425E12, 8.916666666666666], [1.72873908E12, 7.116666666666666], [1.7287437E12, 6.983333333333333], [1.7287401E12, 7.366666666666666], [1.72874148E12, 7.183333333333334], [1.72874232E12, 7.55], [1.72873926E12, 7.9], [1.72873824E12, 6.85], [1.72874334E12, 6.716666666666667], [1.72873806E12, 5.183333333333334], [1.72874028E12, 7.533333333333333], [1.7287413E12, 8.066666666666666], [1.72874352E12, 7.766666666666667], [1.72874184E12, 7.733333333333333], [1.72873842E12, 7.883333333333334], [1.72874064E12, 8.183333333333334], [1.72874286E12, 7.5], [1.72874046E12, 8.883333333333333], [1.72874304E12, 8.0], [1.72874406E12, 7.116666666666666], [1.72873944E12, 7.45], [1.7287386E12, 7.75], [1.72874082E12, 7.733333333333333], [1.72874268E12, 8.15], [1.72873962E12, 7.466666666666667], [1.72874166E12, 7.916666666666667], [1.72874388E12, 7.283333333333333], [1.72874442E12, 0.6666666666666666], [1.72873878E12, 7.2], [1.728741E12, 8.083333333333334], [1.7287422E12, 7.666666666666667], [1.7287398E12, 8.05], [1.72874118E12, 7.7], [1.7287434E12, 6.883333333333334], [1.72874202E12, 8.366666666666667], [1.72874424E12, 6.5], [1.72874016E12, 7.716666666666667], [1.72873998E12, 7.216666666666667], [1.72874322E12, 7.616666666666666], [1.72873896E12, 7.85], [1.72873812E12, 4.983333333333333], [1.72874154E12, 7.666666666666667], [1.72874376E12, 7.35], [1.72874034E12, 7.066666666666666], [1.72874274E12, 8.15], [1.72873914E12, 7.116666666666666], [1.72874136E12, 8.666666666666666], [1.7287383E12, 7.833333333333333], [1.72874052E12, 9.15], [1.72874238E12, 8.65], [1.72874256E12, 8.916666666666666], [1.72873932E12, 8.3], [1.72874358E12, 7.25], [1.7287407E12, 8.633333333333333], [1.72873968E12, 7.716666666666667], [1.7287419E12, 8.316666666666666], [1.72874412E12, 7.05], [1.7287395E12, 7.433333333333334], [1.72874208E12, 7.866666666666666], [1.72873848E12, 7.5], [1.7287431E12, 8.6], [1.72874394E12, 6.85], [1.72873986E12, 7.2], [1.72874172E12, 8.016666666666667], [1.72874292E12, 8.083333333333334], [1.72873866E12, 7.75], [1.72874088E12, 8.566666666666666], [1.72874346E12, 7.333333333333333], [1.72874004E12, 7.65], [1.72874124E12, 8.416666666666666], [1.72873884E12, 7.083333333333333], [1.72874106E12, 8.366666666666667], [1.72874244E12, 8.966666666666667], [1.72874022E12, 8.583333333333334], [1.72874328E12, 7.866666666666666], [1.7287443E12, 6.883333333333334], [1.7287392E12, 7.633333333333334], [1.72873902E12, 7.883333333333334], [1.72874226E12, 8.25], [1.728738E12, 2.45], [1.7287428E12, 8.166666666666666], [1.72873938E12, 7.316666666666666], [1.72874382E12, 7.483333333333333], [1.72874178E12, 8.566666666666666], [1.728744E12, 7.583333333333333], [1.72873818E12, 4.9], [1.7287404E12, 8.133333333333333], [1.72873956E12, 8.15], [1.72874142E12, 7.833333333333333], [1.72874364E12, 7.133333333333334], [1.72873836E12, 7.933333333333334], [1.7287416E12, 7.916666666666667], [1.72874058E12, 8.566666666666666], [1.72874262E12, 8.666666666666666], [1.72873974E12, 7.55], [1.72873872E12, 7.733333333333333], [1.72874316E12, 7.633333333333334], [1.72874112E12, 8.833333333333334], [1.72873854E12, 7.366666666666666], [1.72874076E12, 8.35], [1.72874436E12, 5.916666666666667], [1.72874214E12, 7.733333333333333], [1.72874298E12, 8.483333333333333], [1.7287389E12, 7.466666666666667], [1.72874094E12, 7.866666666666666], [1.72874418E12, 7.0], [1.72874196E12, 8.75], [1.72873992E12, 7.216666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72874442E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6833333333333333, "minX": 1.728738E12, "maxY": 9.15, "series": [{"data": [[1.7287425E12, 8.916666666666666], [1.72873908E12, 7.116666666666666], [1.7287437E12, 6.983333333333333], [1.7287401E12, 7.366666666666666], [1.72874148E12, 7.183333333333334], [1.72874232E12, 7.55], [1.72873926E12, 7.9], [1.72873824E12, 6.816666666666666], [1.72874334E12, 6.716666666666667], [1.72873806E12, 5.183333333333334], [1.72874028E12, 7.55], [1.7287413E12, 8.066666666666666], [1.72874352E12, 7.766666666666667], [1.72874184E12, 7.733333333333333], [1.72873842E12, 7.883333333333334], [1.72874064E12, 8.183333333333334], [1.72874286E12, 7.5], [1.72874046E12, 8.883333333333333], [1.72874304E12, 8.0], [1.72874406E12, 7.116666666666666], [1.72873944E12, 7.45], [1.7287386E12, 7.75], [1.72874082E12, 7.733333333333333], [1.72874268E12, 8.15], [1.72873962E12, 7.466666666666667], [1.72874166E12, 7.916666666666667], [1.72874388E12, 7.283333333333333], [1.72874442E12, 0.6833333333333333], [1.72873878E12, 7.2], [1.728741E12, 8.083333333333334], [1.7287422E12, 7.666666666666667], [1.7287398E12, 8.05], [1.72874118E12, 7.7], [1.7287434E12, 6.883333333333334], [1.72874202E12, 8.366666666666667], [1.72874424E12, 6.5], [1.72874016E12, 7.716666666666667], [1.72873998E12, 7.216666666666667], [1.72874322E12, 7.616666666666666], [1.72873896E12, 7.85], [1.72873812E12, 4.983333333333333], [1.72874154E12, 7.666666666666667], [1.72874376E12, 7.35], [1.72874034E12, 6.983333333333333], [1.72874274E12, 8.15], [1.72873914E12, 7.116666666666666], [1.72874136E12, 8.666666666666666], [1.7287383E12, 7.833333333333333], [1.72874052E12, 9.15], [1.72874238E12, 8.65], [1.72874256E12, 8.916666666666666], [1.72873932E12, 8.3], [1.72874358E12, 7.25], [1.7287407E12, 8.633333333333333], [1.72873968E12, 7.716666666666667], [1.7287419E12, 8.316666666666666], [1.72874412E12, 7.05], [1.7287395E12, 7.433333333333334], [1.72874208E12, 7.866666666666666], [1.72873848E12, 7.5], [1.7287431E12, 8.6], [1.72874394E12, 6.85], [1.72873986E12, 7.2], [1.72874172E12, 8.016666666666667], [1.72874292E12, 8.083333333333334], [1.72873866E12, 7.75], [1.72874088E12, 8.566666666666666], [1.72874346E12, 7.333333333333333], [1.72874004E12, 7.65], [1.72874124E12, 8.416666666666666], [1.72873884E12, 7.083333333333333], [1.72874106E12, 8.366666666666667], [1.72874244E12, 8.966666666666667], [1.72874022E12, 8.583333333333334], [1.72874328E12, 7.866666666666666], [1.7287443E12, 6.9], [1.7287392E12, 7.633333333333334], [1.72873902E12, 7.883333333333334], [1.72874226E12, 8.25], [1.728738E12, 2.4166666666666665], [1.7287428E12, 8.166666666666666], [1.72873938E12, 7.316666666666666], [1.72874382E12, 7.483333333333333], [1.72874178E12, 8.566666666666666], [1.728744E12, 7.583333333333333], [1.72873818E12, 4.9], [1.7287404E12, 8.133333333333333], [1.72873956E12, 8.15], [1.72874142E12, 7.833333333333333], [1.72874364E12, 7.133333333333334], [1.72873836E12, 7.933333333333334], [1.7287416E12, 7.916666666666667], [1.72874058E12, 8.566666666666666], [1.72874262E12, 8.666666666666666], [1.72873974E12, 7.55], [1.72873872E12, 7.733333333333333], [1.72874316E12, 7.633333333333334], [1.72874112E12, 8.833333333333334], [1.72873854E12, 7.366666666666666], [1.72874076E12, 8.35], [1.72874436E12, 6.016666666666667], [1.72874214E12, 7.733333333333333], [1.72874298E12, 8.483333333333333], [1.7287389E12, 7.466666666666667], [1.72874094E12, 7.866666666666666], [1.72874418E12, 7.0], [1.72874196E12, 8.75], [1.72873992E12, 7.216666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72874442E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6833333333333333, "minX": 1.728738E12, "maxY": 9.15, "series": [{"data": [[1.7287425E12, 8.916666666666666], [1.72873908E12, 7.116666666666666], [1.7287437E12, 6.983333333333333], [1.7287401E12, 7.366666666666666], [1.72874148E12, 7.183333333333334], [1.72874232E12, 7.55], [1.72873926E12, 7.9], [1.72873824E12, 6.816666666666666], [1.72874334E12, 6.716666666666667], [1.72873806E12, 5.183333333333334], [1.72874028E12, 7.55], [1.7287413E12, 8.066666666666666], [1.72874352E12, 7.766666666666667], [1.72874184E12, 7.733333333333333], [1.72873842E12, 7.883333333333334], [1.72874064E12, 8.183333333333334], [1.72874286E12, 7.5], [1.72874046E12, 8.883333333333333], [1.72874304E12, 8.0], [1.72874406E12, 7.116666666666666], [1.72873944E12, 7.45], [1.7287386E12, 7.75], [1.72874082E12, 7.733333333333333], [1.72874268E12, 8.15], [1.72873962E12, 7.466666666666667], [1.72874166E12, 7.916666666666667], [1.72874388E12, 7.283333333333333], [1.72874442E12, 0.6833333333333333], [1.72873878E12, 7.2], [1.728741E12, 8.083333333333334], [1.7287422E12, 7.666666666666667], [1.7287398E12, 8.05], [1.72874118E12, 7.7], [1.7287434E12, 6.883333333333334], [1.72874202E12, 8.366666666666667], [1.72874424E12, 6.5], [1.72874016E12, 7.716666666666667], [1.72873998E12, 7.216666666666667], [1.72874322E12, 7.616666666666666], [1.72873896E12, 7.85], [1.72873812E12, 4.983333333333333], [1.72874154E12, 7.666666666666667], [1.72874376E12, 7.35], [1.72874034E12, 6.983333333333333], [1.72874274E12, 8.15], [1.72873914E12, 7.116666666666666], [1.72874136E12, 8.666666666666666], [1.7287383E12, 7.833333333333333], [1.72874052E12, 9.15], [1.72874238E12, 8.65], [1.72874256E12, 8.916666666666666], [1.72873932E12, 8.3], [1.72874358E12, 7.25], [1.7287407E12, 8.633333333333333], [1.72873968E12, 7.716666666666667], [1.7287419E12, 8.316666666666666], [1.72874412E12, 7.05], [1.7287395E12, 7.433333333333334], [1.72874208E12, 7.866666666666666], [1.72873848E12, 7.5], [1.7287431E12, 8.6], [1.72874394E12, 6.85], [1.72873986E12, 7.2], [1.72874172E12, 8.016666666666667], [1.72874292E12, 8.083333333333334], [1.72873866E12, 7.75], [1.72874088E12, 8.566666666666666], [1.72874346E12, 7.333333333333333], [1.72874004E12, 7.65], [1.72874124E12, 8.416666666666666], [1.72873884E12, 7.083333333333333], [1.72874106E12, 8.366666666666667], [1.72874244E12, 8.966666666666667], [1.72874022E12, 8.583333333333334], [1.72874328E12, 7.866666666666666], [1.7287443E12, 6.9], [1.7287392E12, 7.633333333333334], [1.72873902E12, 7.883333333333334], [1.72874226E12, 8.25], [1.728738E12, 2.4166666666666665], [1.7287428E12, 8.166666666666666], [1.72873938E12, 7.316666666666666], [1.72874382E12, 7.483333333333333], [1.72874178E12, 8.566666666666666], [1.728744E12, 7.583333333333333], [1.72873818E12, 4.9], [1.7287404E12, 8.133333333333333], [1.72873956E12, 8.15], [1.72874142E12, 7.833333333333333], [1.72874364E12, 7.133333333333334], [1.72873836E12, 7.933333333333334], [1.7287416E12, 7.916666666666667], [1.72874058E12, 8.566666666666666], [1.72874262E12, 8.666666666666666], [1.72873974E12, 7.55], [1.72873872E12, 7.733333333333333], [1.72874316E12, 7.633333333333334], [1.72874112E12, 8.833333333333334], [1.72873854E12, 7.366666666666666], [1.72874076E12, 8.35], [1.72874436E12, 6.016666666666667], [1.72874214E12, 7.733333333333333], [1.72874298E12, 8.483333333333333], [1.7287389E12, 7.466666666666667], [1.72874094E12, 7.866666666666666], [1.72874418E12, 7.0], [1.72874196E12, 8.75], [1.72873992E12, 7.216666666666667]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72874442E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6833333333333333, "minX": 1.728738E12, "maxY": 9.15, "series": [{"data": [[1.7287425E12, 8.916666666666666], [1.72873908E12, 7.116666666666666], [1.7287437E12, 6.983333333333333], [1.7287401E12, 7.366666666666666], [1.72874148E12, 7.183333333333334], [1.72874232E12, 7.55], [1.72873926E12, 7.9], [1.72873824E12, 6.816666666666666], [1.72874334E12, 6.716666666666667], [1.72873806E12, 5.183333333333334], [1.72874028E12, 7.55], [1.7287413E12, 8.066666666666666], [1.72874352E12, 7.766666666666667], [1.72874184E12, 7.733333333333333], [1.72873842E12, 7.883333333333334], [1.72874064E12, 8.183333333333334], [1.72874286E12, 7.5], [1.72874046E12, 8.883333333333333], [1.72874304E12, 8.0], [1.72874406E12, 7.116666666666666], [1.72873944E12, 7.45], [1.7287386E12, 7.75], [1.72874082E12, 7.733333333333333], [1.72874268E12, 8.15], [1.72873962E12, 7.466666666666667], [1.72874166E12, 7.916666666666667], [1.72874388E12, 7.283333333333333], [1.72874442E12, 0.6833333333333333], [1.72873878E12, 7.2], [1.728741E12, 8.083333333333334], [1.7287422E12, 7.666666666666667], [1.7287398E12, 8.05], [1.72874118E12, 7.7], [1.7287434E12, 6.883333333333334], [1.72874202E12, 8.366666666666667], [1.72874424E12, 6.5], [1.72874016E12, 7.716666666666667], [1.72873998E12, 7.216666666666667], [1.72874322E12, 7.616666666666666], [1.72873896E12, 7.85], [1.72873812E12, 4.983333333333333], [1.72874154E12, 7.666666666666667], [1.72874376E12, 7.35], [1.72874034E12, 6.983333333333333], [1.72874274E12, 8.15], [1.72873914E12, 7.116666666666666], [1.72874136E12, 8.666666666666666], [1.7287383E12, 7.833333333333333], [1.72874052E12, 9.15], [1.72874238E12, 8.65], [1.72874256E12, 8.916666666666666], [1.72873932E12, 8.3], [1.72874358E12, 7.25], [1.7287407E12, 8.633333333333333], [1.72873968E12, 7.716666666666667], [1.7287419E12, 8.316666666666666], [1.72874412E12, 7.05], [1.7287395E12, 7.433333333333334], [1.72874208E12, 7.866666666666666], [1.72873848E12, 7.5], [1.7287431E12, 8.6], [1.72874394E12, 6.85], [1.72873986E12, 7.2], [1.72874172E12, 8.016666666666667], [1.72874292E12, 8.083333333333334], [1.72873866E12, 7.75], [1.72874088E12, 8.566666666666666], [1.72874346E12, 7.333333333333333], [1.72874004E12, 7.65], [1.72874124E12, 8.416666666666666], [1.72873884E12, 7.083333333333333], [1.72874106E12, 8.366666666666667], [1.72874244E12, 8.966666666666667], [1.72874022E12, 8.583333333333334], [1.72874328E12, 7.866666666666666], [1.7287443E12, 6.9], [1.7287392E12, 7.633333333333334], [1.72873902E12, 7.883333333333334], [1.72874226E12, 8.25], [1.728738E12, 2.4166666666666665], [1.7287428E12, 8.166666666666666], [1.72873938E12, 7.316666666666666], [1.72874382E12, 7.483333333333333], [1.72874178E12, 8.566666666666666], [1.728744E12, 7.583333333333333], [1.72873818E12, 4.9], [1.7287404E12, 8.133333333333333], [1.72873956E12, 8.15], [1.72874142E12, 7.833333333333333], [1.72874364E12, 7.133333333333334], [1.72873836E12, 7.933333333333334], [1.7287416E12, 7.916666666666667], [1.72874058E12, 8.566666666666666], [1.72874262E12, 8.666666666666666], [1.72873974E12, 7.55], [1.72873872E12, 7.733333333333333], [1.72874316E12, 7.633333333333334], [1.72874112E12, 8.833333333333334], [1.72873854E12, 7.366666666666666], [1.72874076E12, 8.35], [1.72874436E12, 6.016666666666667], [1.72874214E12, 7.733333333333333], [1.72874298E12, 8.483333333333333], [1.7287389E12, 7.466666666666667], [1.72874094E12, 7.866666666666666], [1.72874418E12, 7.0], [1.72874196E12, 8.75], [1.72873992E12, 7.216666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72874442E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

