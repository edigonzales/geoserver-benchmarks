/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 27.0, "minX": 0.0, "maxY": 4190.0, "series": [{"data": [[0.0, 27.0], [0.1, 42.0], [0.2, 44.0], [0.3, 46.0], [0.4, 48.0], [0.5, 49.0], [0.6, 50.0], [0.7, 52.0], [0.8, 52.0], [0.9, 53.0], [1.0, 54.0], [1.1, 55.0], [1.2, 56.0], [1.3, 57.0], [1.4, 57.0], [1.5, 58.0], [1.6, 59.0], [1.7, 59.0], [1.8, 60.0], [1.9, 61.0], [2.0, 61.0], [2.1, 62.0], [2.2, 62.0], [2.3, 63.0], [2.4, 64.0], [2.5, 64.0], [2.6, 65.0], [2.7, 65.0], [2.8, 66.0], [2.9, 66.0], [3.0, 66.0], [3.1, 67.0], [3.2, 67.0], [3.3, 68.0], [3.4, 68.0], [3.5, 69.0], [3.6, 69.0], [3.7, 70.0], [3.8, 70.0], [3.9, 70.0], [4.0, 71.0], [4.1, 71.0], [4.2, 72.0], [4.3, 72.0], [4.4, 73.0], [4.5, 73.0], [4.6, 74.0], [4.7, 74.0], [4.8, 75.0], [4.9, 75.0], [5.0, 75.0], [5.1, 76.0], [5.2, 76.0], [5.3, 77.0], [5.4, 77.0], [5.5, 77.0], [5.6, 78.0], [5.7, 78.0], [5.8, 79.0], [5.9, 79.0], [6.0, 79.0], [6.1, 80.0], [6.2, 80.0], [6.3, 81.0], [6.4, 81.0], [6.5, 81.0], [6.6, 82.0], [6.7, 82.0], [6.8, 82.0], [6.9, 83.0], [7.0, 83.0], [7.1, 83.0], [7.2, 84.0], [7.3, 84.0], [7.4, 84.0], [7.5, 85.0], [7.6, 85.0], [7.7, 86.0], [7.8, 86.0], [7.9, 86.0], [8.0, 87.0], [8.1, 87.0], [8.2, 87.0], [8.3, 88.0], [8.4, 88.0], [8.5, 88.0], [8.6, 89.0], [8.7, 89.0], [8.8, 89.0], [8.9, 90.0], [9.0, 90.0], [9.1, 90.0], [9.2, 91.0], [9.3, 91.0], [9.4, 92.0], [9.5, 92.0], [9.6, 92.0], [9.7, 93.0], [9.8, 93.0], [9.9, 93.0], [10.0, 94.0], [10.1, 94.0], [10.2, 94.0], [10.3, 95.0], [10.4, 95.0], [10.5, 95.0], [10.6, 96.0], [10.7, 96.0], [10.8, 97.0], [10.9, 97.0], [11.0, 97.0], [11.1, 98.0], [11.2, 98.0], [11.3, 98.0], [11.4, 99.0], [11.5, 99.0], [11.6, 99.0], [11.7, 100.0], [11.8, 100.0], [11.9, 100.0], [12.0, 101.0], [12.1, 101.0], [12.2, 101.0], [12.3, 102.0], [12.4, 102.0], [12.5, 102.0], [12.6, 103.0], [12.7, 103.0], [12.8, 104.0], [12.9, 104.0], [13.0, 104.0], [13.1, 105.0], [13.2, 105.0], [13.3, 105.0], [13.4, 106.0], [13.5, 106.0], [13.6, 106.0], [13.7, 107.0], [13.8, 107.0], [13.9, 107.0], [14.0, 108.0], [14.1, 108.0], [14.2, 108.0], [14.3, 109.0], [14.4, 109.0], [14.5, 110.0], [14.6, 110.0], [14.7, 110.0], [14.8, 111.0], [14.9, 111.0], [15.0, 111.0], [15.1, 112.0], [15.2, 112.0], [15.3, 112.0], [15.4, 113.0], [15.5, 113.0], [15.6, 113.0], [15.7, 114.0], [15.8, 114.0], [15.9, 115.0], [16.0, 115.0], [16.1, 115.0], [16.2, 116.0], [16.3, 116.0], [16.4, 116.0], [16.5, 117.0], [16.6, 117.0], [16.7, 118.0], [16.8, 118.0], [16.9, 118.0], [17.0, 119.0], [17.1, 119.0], [17.2, 119.0], [17.3, 120.0], [17.4, 120.0], [17.5, 121.0], [17.6, 121.0], [17.7, 122.0], [17.8, 122.0], [17.9, 122.0], [18.0, 123.0], [18.1, 123.0], [18.2, 123.0], [18.3, 124.0], [18.4, 124.0], [18.5, 125.0], [18.6, 125.0], [18.7, 126.0], [18.8, 126.0], [18.9, 126.0], [19.0, 127.0], [19.1, 127.0], [19.2, 128.0], [19.3, 128.0], [19.4, 129.0], [19.5, 129.0], [19.6, 129.0], [19.7, 130.0], [19.8, 130.0], [19.9, 131.0], [20.0, 131.0], [20.1, 131.0], [20.2, 132.0], [20.3, 132.0], [20.4, 133.0], [20.5, 133.0], [20.6, 133.0], [20.7, 134.0], [20.8, 134.0], [20.9, 135.0], [21.0, 135.0], [21.1, 135.0], [21.2, 136.0], [21.3, 136.0], [21.4, 137.0], [21.5, 137.0], [21.6, 138.0], [21.7, 138.0], [21.8, 139.0], [21.9, 139.0], [22.0, 139.0], [22.1, 140.0], [22.2, 140.0], [22.3, 141.0], [22.4, 141.0], [22.5, 142.0], [22.6, 142.0], [22.7, 143.0], [22.8, 143.0], [22.9, 144.0], [23.0, 144.0], [23.1, 144.0], [23.2, 145.0], [23.3, 145.0], [23.4, 146.0], [23.5, 146.0], [23.6, 147.0], [23.7, 147.0], [23.8, 148.0], [23.9, 148.0], [24.0, 149.0], [24.1, 149.0], [24.2, 149.0], [24.3, 150.0], [24.4, 150.0], [24.5, 151.0], [24.6, 151.0], [24.7, 152.0], [24.8, 152.0], [24.9, 153.0], [25.0, 153.0], [25.1, 154.0], [25.2, 154.0], [25.3, 155.0], [25.4, 155.0], [25.5, 156.0], [25.6, 156.0], [25.7, 157.0], [25.8, 157.0], [25.9, 158.0], [26.0, 158.0], [26.1, 159.0], [26.2, 159.0], [26.3, 160.0], [26.4, 160.0], [26.5, 161.0], [26.6, 161.0], [26.7, 162.0], [26.8, 163.0], [26.9, 163.0], [27.0, 163.0], [27.1, 164.0], [27.2, 165.0], [27.3, 165.0], [27.4, 166.0], [27.5, 166.0], [27.6, 167.0], [27.7, 167.0], [27.8, 168.0], [27.9, 168.0], [28.0, 169.0], [28.1, 169.0], [28.2, 170.0], [28.3, 171.0], [28.4, 171.0], [28.5, 172.0], [28.6, 172.0], [28.7, 173.0], [28.8, 173.0], [28.9, 174.0], [29.0, 175.0], [29.1, 175.0], [29.2, 176.0], [29.3, 177.0], [29.4, 177.0], [29.5, 178.0], [29.6, 178.0], [29.7, 179.0], [29.8, 179.0], [29.9, 180.0], [30.0, 181.0], [30.1, 181.0], [30.2, 182.0], [30.3, 182.0], [30.4, 183.0], [30.5, 183.0], [30.6, 184.0], [30.7, 185.0], [30.8, 186.0], [30.9, 186.0], [31.0, 187.0], [31.1, 187.0], [31.2, 188.0], [31.3, 189.0], [31.4, 190.0], [31.5, 190.0], [31.6, 191.0], [31.7, 191.0], [31.8, 192.0], [31.9, 193.0], [32.0, 194.0], [32.1, 194.0], [32.2, 195.0], [32.3, 196.0], [32.4, 197.0], [32.5, 198.0], [32.6, 198.0], [32.7, 199.0], [32.8, 200.0], [32.9, 200.0], [33.0, 201.0], [33.1, 202.0], [33.2, 203.0], [33.3, 204.0], [33.4, 204.0], [33.5, 205.0], [33.6, 206.0], [33.7, 207.0], [33.8, 208.0], [33.9, 209.0], [34.0, 210.0], [34.1, 210.0], [34.2, 211.0], [34.3, 212.0], [34.4, 213.0], [34.5, 214.0], [34.6, 215.0], [34.7, 216.0], [34.8, 217.0], [34.9, 218.0], [35.0, 219.0], [35.1, 219.0], [35.2, 221.0], [35.3, 222.0], [35.4, 222.0], [35.5, 223.0], [35.6, 225.0], [35.7, 226.0], [35.8, 227.0], [35.9, 228.0], [36.0, 229.0], [36.1, 230.0], [36.2, 231.0], [36.3, 232.0], [36.4, 233.0], [36.5, 234.0], [36.6, 235.0], [36.7, 236.0], [36.8, 238.0], [36.9, 239.0], [37.0, 240.0], [37.1, 241.0], [37.2, 242.0], [37.3, 244.0], [37.4, 245.0], [37.5, 246.0], [37.6, 247.0], [37.7, 248.0], [37.8, 250.0], [37.9, 251.0], [38.0, 252.0], [38.1, 254.0], [38.2, 255.0], [38.3, 256.0], [38.4, 258.0], [38.5, 259.0], [38.6, 261.0], [38.7, 262.0], [38.8, 264.0], [38.9, 265.0], [39.0, 267.0], [39.1, 268.0], [39.2, 270.0], [39.3, 272.0], [39.4, 273.0], [39.5, 275.0], [39.6, 277.0], [39.7, 278.0], [39.8, 280.0], [39.9, 282.0], [40.0, 284.0], [40.1, 286.0], [40.2, 288.0], [40.3, 290.0], [40.4, 292.0], [40.5, 294.0], [40.6, 296.0], [40.7, 298.0], [40.8, 300.0], [40.9, 302.0], [41.0, 304.0], [41.1, 306.0], [41.2, 309.0], [41.3, 311.0], [41.4, 314.0], [41.5, 316.0], [41.6, 318.0], [41.7, 320.0], [41.8, 323.0], [41.9, 325.0], [42.0, 328.0], [42.1, 331.0], [42.2, 334.0], [42.3, 336.0], [42.4, 339.0], [42.5, 341.0], [42.6, 344.0], [42.7, 346.0], [42.8, 349.0], [42.9, 352.0], [43.0, 355.0], [43.1, 357.0], [43.2, 360.0], [43.3, 363.0], [43.4, 366.0], [43.5, 368.0], [43.6, 371.0], [43.7, 374.0], [43.8, 378.0], [43.9, 381.0], [44.0, 384.0], [44.1, 387.0], [44.2, 390.0], [44.3, 393.0], [44.4, 396.0], [44.5, 399.0], [44.6, 402.0], [44.7, 406.0], [44.8, 409.0], [44.9, 412.0], [45.0, 415.0], [45.1, 418.0], [45.2, 421.0], [45.3, 424.0], [45.4, 427.0], [45.5, 430.0], [45.6, 433.0], [45.7, 436.0], [45.8, 440.0], [45.9, 443.0], [46.0, 445.0], [46.1, 449.0], [46.2, 452.0], [46.3, 454.0], [46.4, 457.0], [46.5, 460.0], [46.6, 463.0], [46.7, 466.0], [46.8, 469.0], [46.9, 472.0], [47.0, 475.0], [47.1, 478.0], [47.2, 481.0], [47.3, 484.0], [47.4, 487.0], [47.5, 490.0], [47.6, 493.0], [47.7, 496.0], [47.8, 499.0], [47.9, 502.0], [48.0, 505.0], [48.1, 507.0], [48.2, 510.0], [48.3, 513.0], [48.4, 516.0], [48.5, 518.0], [48.6, 521.0], [48.7, 524.0], [48.8, 527.0], [48.9, 529.0], [49.0, 531.0], [49.1, 534.0], [49.2, 536.0], [49.3, 539.0], [49.4, 542.0], [49.5, 544.0], [49.6, 547.0], [49.7, 549.0], [49.8, 552.0], [49.9, 554.0], [50.0, 557.0], [50.1, 559.0], [50.2, 561.0], [50.3, 564.0], [50.4, 567.0], [50.5, 569.0], [50.6, 571.0], [50.7, 574.0], [50.8, 577.0], [50.9, 579.0], [51.0, 582.0], [51.1, 584.0], [51.2, 586.0], [51.3, 589.0], [51.4, 591.0], [51.5, 593.0], [51.6, 596.0], [51.7, 598.0], [51.8, 601.0], [51.9, 603.0], [52.0, 605.0], [52.1, 608.0], [52.2, 610.0], [52.3, 613.0], [52.4, 615.0], [52.5, 617.0], [52.6, 619.0], [52.7, 622.0], [52.8, 624.0], [52.9, 626.0], [53.0, 628.0], [53.1, 630.0], [53.2, 632.0], [53.3, 635.0], [53.4, 637.0], [53.5, 640.0], [53.6, 642.0], [53.7, 644.0], [53.8, 646.0], [53.9, 648.0], [54.0, 650.0], [54.1, 653.0], [54.2, 655.0], [54.3, 657.0], [54.4, 659.0], [54.5, 661.0], [54.6, 664.0], [54.7, 666.0], [54.8, 669.0], [54.9, 671.0], [55.0, 673.0], [55.1, 675.0], [55.2, 677.0], [55.3, 679.0], [55.4, 681.0], [55.5, 683.0], [55.6, 685.0], [55.7, 687.0], [55.8, 690.0], [55.9, 691.0], [56.0, 694.0], [56.1, 696.0], [56.2, 698.0], [56.3, 700.0], [56.4, 702.0], [56.5, 704.0], [56.6, 707.0], [56.7, 709.0], [56.8, 712.0], [56.9, 714.0], [57.0, 715.0], [57.1, 717.0], [57.2, 720.0], [57.3, 722.0], [57.4, 723.0], [57.5, 726.0], [57.6, 728.0], [57.7, 729.0], [57.8, 731.0], [57.9, 734.0], [58.0, 736.0], [58.1, 738.0], [58.2, 740.0], [58.3, 742.0], [58.4, 744.0], [58.5, 746.0], [58.6, 748.0], [58.7, 750.0], [58.8, 752.0], [58.9, 754.0], [59.0, 756.0], [59.1, 758.0], [59.2, 760.0], [59.3, 761.0], [59.4, 763.0], [59.5, 766.0], [59.6, 768.0], [59.7, 770.0], [59.8, 772.0], [59.9, 774.0], [60.0, 777.0], [60.1, 779.0], [60.2, 781.0], [60.3, 783.0], [60.4, 785.0], [60.5, 786.0], [60.6, 788.0], [60.7, 790.0], [60.8, 792.0], [60.9, 794.0], [61.0, 797.0], [61.1, 799.0], [61.2, 801.0], [61.3, 803.0], [61.4, 805.0], [61.5, 807.0], [61.6, 809.0], [61.7, 811.0], [61.8, 813.0], [61.9, 815.0], [62.0, 818.0], [62.1, 820.0], [62.2, 822.0], [62.3, 824.0], [62.4, 826.0], [62.5, 828.0], [62.6, 830.0], [62.7, 833.0], [62.8, 835.0], [62.9, 837.0], [63.0, 839.0], [63.1, 841.0], [63.2, 843.0], [63.3, 845.0], [63.4, 847.0], [63.5, 850.0], [63.6, 851.0], [63.7, 853.0], [63.8, 855.0], [63.9, 857.0], [64.0, 860.0], [64.1, 861.0], [64.2, 863.0], [64.3, 865.0], [64.4, 867.0], [64.5, 869.0], [64.6, 871.0], [64.7, 873.0], [64.8, 875.0], [64.9, 877.0], [65.0, 879.0], [65.1, 881.0], [65.2, 883.0], [65.3, 885.0], [65.4, 887.0], [65.5, 889.0], [65.6, 892.0], [65.7, 894.0], [65.8, 896.0], [65.9, 898.0], [66.0, 899.0], [66.1, 901.0], [66.2, 904.0], [66.3, 906.0], [66.4, 908.0], [66.5, 910.0], [66.6, 912.0], [66.7, 914.0], [66.8, 916.0], [66.9, 918.0], [67.0, 920.0], [67.1, 922.0], [67.2, 924.0], [67.3, 925.0], [67.4, 927.0], [67.5, 929.0], [67.6, 931.0], [67.7, 934.0], [67.8, 936.0], [67.9, 937.0], [68.0, 939.0], [68.1, 942.0], [68.2, 944.0], [68.3, 946.0], [68.4, 948.0], [68.5, 950.0], [68.6, 952.0], [68.7, 954.0], [68.8, 956.0], [68.9, 958.0], [69.0, 960.0], [69.1, 962.0], [69.2, 965.0], [69.3, 967.0], [69.4, 969.0], [69.5, 971.0], [69.6, 974.0], [69.7, 976.0], [69.8, 978.0], [69.9, 980.0], [70.0, 982.0], [70.1, 984.0], [70.2, 986.0], [70.3, 988.0], [70.4, 990.0], [70.5, 992.0], [70.6, 994.0], [70.7, 996.0], [70.8, 998.0], [70.9, 1000.0], [71.0, 1003.0], [71.1, 1005.0], [71.2, 1007.0], [71.3, 1009.0], [71.4, 1011.0], [71.5, 1014.0], [71.6, 1016.0], [71.7, 1018.0], [71.8, 1020.0], [71.9, 1022.0], [72.0, 1024.0], [72.1, 1026.0], [72.2, 1028.0], [72.3, 1030.0], [72.4, 1033.0], [72.5, 1035.0], [72.6, 1038.0], [72.7, 1040.0], [72.8, 1042.0], [72.9, 1045.0], [73.0, 1047.0], [73.1, 1049.0], [73.2, 1051.0], [73.3, 1053.0], [73.4, 1056.0], [73.5, 1058.0], [73.6, 1060.0], [73.7, 1062.0], [73.8, 1064.0], [73.9, 1066.0], [74.0, 1069.0], [74.1, 1070.0], [74.2, 1073.0], [74.3, 1075.0], [74.4, 1077.0], [74.5, 1080.0], [74.6, 1083.0], [74.7, 1085.0], [74.8, 1088.0], [74.9, 1090.0], [75.0, 1093.0], [75.1, 1095.0], [75.2, 1098.0], [75.3, 1100.0], [75.4, 1102.0], [75.5, 1104.0], [75.6, 1106.0], [75.7, 1108.0], [75.8, 1110.0], [75.9, 1113.0], [76.0, 1115.0], [76.1, 1118.0], [76.2, 1120.0], [76.3, 1123.0], [76.4, 1126.0], [76.5, 1128.0], [76.6, 1130.0], [76.7, 1132.0], [76.8, 1135.0], [76.9, 1137.0], [77.0, 1140.0], [77.1, 1142.0], [77.2, 1145.0], [77.3, 1147.0], [77.4, 1150.0], [77.5, 1152.0], [77.6, 1155.0], [77.7, 1157.0], [77.8, 1160.0], [77.9, 1163.0], [78.0, 1165.0], [78.1, 1167.0], [78.2, 1170.0], [78.3, 1172.0], [78.4, 1175.0], [78.5, 1178.0], [78.6, 1180.0], [78.7, 1183.0], [78.8, 1186.0], [78.9, 1189.0], [79.0, 1192.0], [79.1, 1194.0], [79.2, 1197.0], [79.3, 1200.0], [79.4, 1203.0], [79.5, 1205.0], [79.6, 1208.0], [79.7, 1211.0], [79.8, 1213.0], [79.9, 1216.0], [80.0, 1218.0], [80.1, 1221.0], [80.2, 1224.0], [80.3, 1227.0], [80.4, 1229.0], [80.5, 1232.0], [80.6, 1235.0], [80.7, 1239.0], [80.8, 1242.0], [80.9, 1245.0], [81.0, 1248.0], [81.1, 1251.0], [81.2, 1254.0], [81.3, 1257.0], [81.4, 1260.0], [81.5, 1262.0], [81.6, 1266.0], [81.7, 1268.0], [81.8, 1271.0], [81.9, 1274.0], [82.0, 1277.0], [82.1, 1280.0], [82.2, 1283.0], [82.3, 1285.0], [82.4, 1289.0], [82.5, 1291.0], [82.6, 1294.0], [82.7, 1297.0], [82.8, 1300.0], [82.9, 1303.0], [83.0, 1306.0], [83.1, 1309.0], [83.2, 1312.0], [83.3, 1316.0], [83.4, 1319.0], [83.5, 1322.0], [83.6, 1325.0], [83.7, 1327.0], [83.8, 1331.0], [83.9, 1334.0], [84.0, 1337.0], [84.1, 1340.0], [84.2, 1343.0], [84.3, 1347.0], [84.4, 1349.0], [84.5, 1353.0], [84.6, 1356.0], [84.7, 1359.0], [84.8, 1363.0], [84.9, 1366.0], [85.0, 1370.0], [85.1, 1373.0], [85.2, 1377.0], [85.3, 1381.0], [85.4, 1385.0], [85.5, 1388.0], [85.6, 1392.0], [85.7, 1395.0], [85.8, 1398.0], [85.9, 1402.0], [86.0, 1405.0], [86.1, 1408.0], [86.2, 1412.0], [86.3, 1416.0], [86.4, 1419.0], [86.5, 1423.0], [86.6, 1427.0], [86.7, 1432.0], [86.8, 1435.0], [86.9, 1439.0], [87.0, 1443.0], [87.1, 1447.0], [87.2, 1451.0], [87.3, 1454.0], [87.4, 1458.0], [87.5, 1462.0], [87.6, 1466.0], [87.7, 1470.0], [87.8, 1474.0], [87.9, 1478.0], [88.0, 1482.0], [88.1, 1486.0], [88.2, 1490.0], [88.3, 1494.0], [88.4, 1498.0], [88.5, 1503.0], [88.6, 1507.0], [88.7, 1510.0], [88.8, 1514.0], [88.9, 1519.0], [89.0, 1523.0], [89.1, 1527.0], [89.2, 1531.0], [89.3, 1536.0], [89.4, 1540.0], [89.5, 1545.0], [89.6, 1550.0], [89.7, 1554.0], [89.8, 1559.0], [89.9, 1564.0], [90.0, 1568.0], [90.1, 1574.0], [90.2, 1578.0], [90.3, 1584.0], [90.4, 1588.0], [90.5, 1593.0], [90.6, 1597.0], [90.7, 1603.0], [90.8, 1607.0], [90.9, 1612.0], [91.0, 1617.0], [91.1, 1621.0], [91.2, 1627.0], [91.3, 1631.0], [91.4, 1636.0], [91.5, 1642.0], [91.6, 1647.0], [91.7, 1652.0], [91.8, 1657.0], [91.9, 1663.0], [92.0, 1669.0], [92.1, 1676.0], [92.2, 1681.0], [92.3, 1687.0], [92.4, 1693.0], [92.5, 1699.0], [92.6, 1705.0], [92.7, 1710.0], [92.8, 1716.0], [92.9, 1722.0], [93.0, 1729.0], [93.1, 1736.0], [93.2, 1743.0], [93.3, 1750.0], [93.4, 1757.0], [93.5, 1763.0], [93.6, 1771.0], [93.7, 1778.0], [93.8, 1786.0], [93.9, 1793.0], [94.0, 1800.0], [94.1, 1807.0], [94.2, 1815.0], [94.3, 1822.0], [94.4, 1829.0], [94.5, 1837.0], [94.6, 1845.0], [94.7, 1853.0], [94.8, 1861.0], [94.9, 1870.0], [95.0, 1878.0], [95.1, 1886.0], [95.2, 1894.0], [95.3, 1902.0], [95.4, 1910.0], [95.5, 1919.0], [95.6, 1929.0], [95.7, 1938.0], [95.8, 1947.0], [95.9, 1957.0], [96.0, 1965.0], [96.1, 1976.0], [96.2, 1988.0], [96.3, 1998.0], [96.4, 2010.0], [96.5, 2021.0], [96.6, 2034.0], [96.7, 2047.0], [96.8, 2061.0], [96.9, 2073.0], [97.0, 2087.0], [97.1, 2101.0], [97.2, 2114.0], [97.3, 2125.0], [97.4, 2139.0], [97.5, 2156.0], [97.6, 2173.0], [97.7, 2190.0], [97.8, 2208.0], [97.9, 2225.0], [98.0, 2246.0], [98.1, 2261.0], [98.2, 2280.0], [98.3, 2300.0], [98.4, 2321.0], [98.5, 2341.0], [98.6, 2367.0], [98.7, 2394.0], [98.8, 2420.0], [98.9, 2452.0], [99.0, 2486.0], [99.1, 2524.0], [99.2, 2559.0], [99.3, 2604.0], [99.4, 2655.0], [99.5, 2719.0], [99.6, 2787.0], [99.7, 2867.0], [99.8, 2995.0], [99.9, 3166.0], [100.0, 4190.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24813.0, "series": [{"data": [[0.0, 13616.0], [600.0, 5294.0], [700.0, 5696.0], [800.0, 5702.0], [900.0, 5691.0], [1000.0, 5195.0], [1100.0, 4668.0], [1200.0, 4093.0], [1300.0, 3589.0], [1400.0, 3046.0], [1500.0, 2594.0], [1600.0, 2186.0], [100.0, 24813.0], [1700.0, 1747.0], [1800.0, 1495.0], [1900.0, 1209.0], [2000.0, 925.0], [2100.0, 769.0], [2200.0, 636.0], [2300.0, 504.0], [2400.0, 366.0], [2500.0, 295.0], [2600.0, 217.0], [2700.0, 169.0], [2800.0, 131.0], [2900.0, 89.0], [3000.0, 75.0], [3100.0, 49.0], [200.0, 9370.0], [3200.0, 33.0], [3300.0, 24.0], [3400.0, 17.0], [3500.0, 10.0], [3700.0, 7.0], [3600.0, 7.0], [3800.0, 4.0], [3900.0, 2.0], [4100.0, 1.0], [300.0, 4363.0], [400.0, 3874.0], [500.0, 4629.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 13530.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 56072.0, "series": [{"data": [[0.0, 56072.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 47598.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 13530.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72849962E12, "maxY": 16.0, "series": [{"data": [[1.7285055E12, 12.0], [1.7285058E12, 12.0], [1.7285061E12, 12.0], [1.72850418E12, 12.0], [1.72850448E12, 12.0], [1.72850622E12, 7.3177304964539065], [1.7285043E12, 12.0], [1.7285046E12, 12.0], [1.7285049E12, 12.0], [1.72850628E12, 2.344444444444444], [1.7285052E12, 12.0], [1.72850598E12, 12.0], [1.72850406E12, 11.950053134962785], [1.72850436E12, 12.0], [1.72850466E12, 12.0], [1.72850496E12, 12.0], [1.72850478E12, 12.0], [1.72850508E12, 12.0], [1.72850538E12, 12.0], [1.72850568E12, 12.0], [1.72850454E12, 12.0], [1.72850484E12, 12.0], [1.72850514E12, 12.0], [1.72850544E12, 12.0], [1.72850526E12, 12.0], [1.72850556E12, 12.0], [1.72850586E12, 12.0], [1.72850616E12, 11.41507430997878], [1.72850424E12, 12.0], [1.72850502E12, 12.0], [1.72850532E12, 12.0], [1.72850562E12, 12.0], [1.72850592E12, 12.0], [1.72850412E12, 12.0], [1.72850574E12, 12.0], [1.72850604E12, 12.0], [1.72850442E12, 12.0], [1.72850472E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72849968E12, 2.0], [1.72849986E12, 1.9872340425531914], [1.72849974E12, 2.0], [1.72849962E12, 2.0], [1.7284998E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72850034E12, 4.0], [1.72850064E12, 4.0], [1.72850166E12, 4.0], [1.72850004E12, 4.0], [1.72850106E12, 4.0], [1.72850136E12, 4.0], [1.72850046E12, 4.0], [1.72850076E12, 4.0], [1.72850082E12, 4.0], [1.72850112E12, 4.0], [1.72850022E12, 4.0], [1.72850052E12, 4.0], [1.72849992E12, 4.0], [1.72850154E12, 4.0], [1.72850094E12, 4.0], [1.72850124E12, 4.0], [1.7285013E12, 4.0], [1.7285016E12, 4.0], [1.7285007E12, 4.0], [1.728501E12, 4.0], [1.7285001E12, 4.0], [1.7285004E12, 4.0], [1.72850142E12, 4.0], [1.72850172E12, 3.7890625000000004], [1.72850178E12, 2.488281249999998], [1.72849986E12, 3.9859154929577465], [1.72850016E12, 4.0], [1.72850118E12, 4.0], [1.72850148E12, 4.0], [1.72850058E12, 4.0], [1.72850088E12, 4.0], [1.72849998E12, 4.0], [1.72850028E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.7285076E12, 16.0], [1.7285073E12, 16.0], [1.728507E12, 16.0], [1.7285067E12, 16.0], [1.72850688E12, 16.0], [1.72850658E12, 16.0], [1.7285082E12, 1.0], [1.72850628E12, 15.9315866084425], [1.7285079E12, 16.0], [1.72850712E12, 16.0], [1.72850682E12, 16.0], [1.72850652E12, 16.0], [1.72850814E12, 9.729428172942809], [1.7285064E12, 16.0], [1.72850802E12, 16.0], [1.72850772E12, 16.0], [1.72850742E12, 16.0], [1.72850664E12, 16.0], [1.72850634E12, 16.0], [1.72850796E12, 16.0], [1.72850766E12, 16.0], [1.72850784E12, 16.0], [1.72850754E12, 16.0], [1.72850724E12, 16.0], [1.72850694E12, 16.0], [1.72850808E12, 15.731939163498096], [1.72850778E12, 16.0], [1.72850748E12, 16.0], [1.72850718E12, 16.0], [1.72850736E12, 16.0], [1.72850706E12, 16.0], [1.72850676E12, 16.0], [1.72850646E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.72850388E12, 8.0], [1.72850358E12, 8.0], [1.72850256E12, 8.0], [1.72850196E12, 8.0], [1.72850226E12, 8.0], [1.72850268E12, 8.0], [1.72850238E12, 8.0], [1.72850328E12, 8.0], [1.72850298E12, 8.0], [1.72850244E12, 8.0], [1.72850406E12, 1.0], [1.72850214E12, 8.0], [1.72850304E12, 8.0], [1.72850274E12, 8.0], [1.72850316E12, 8.0], [1.72850184E12, 8.0], [1.72850286E12, 8.0], [1.72850376E12, 8.0], [1.72850346E12, 8.0], [1.72850292E12, 8.0], [1.72850262E12, 8.0], [1.72850352E12, 8.0], [1.72850322E12, 8.0], [1.72850202E12, 8.0], [1.72850364E12, 8.0], [1.72850334E12, 8.0], [1.72850232E12, 8.0], [1.72850394E12, 7.662259615384616], [1.72850178E12, 7.927710843373494], [1.7285034E12, 8.0], [1.7285031E12, 8.0], [1.728504E12, 4.635108481262334], [1.72850208E12, 8.0], [1.7285037E12, 8.0], [1.7285022E12, 8.0], [1.72850382E12, 8.0], [1.7285019E12, 8.0], [1.7285028E12, 8.0], [1.7285025E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7285082E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 444.38603696098556, "minX": 1.0, "maxY": 1033.9761904761901, "series": [{"data": [[2.0, 459.96298984034826], [8.0, 549.7290529389383], [9.0, 460.5416666666667], [10.0, 666.0652741514361], [11.0, 684.8528864059591], [3.0, 444.38603696098556], [12.0, 734.2204849113085], [13.0, 1033.9761904761901], [14.0, 772.7509578544061], [15.0, 755.3608247422679], [1.0, 549.2666666666667], [4.0, 473.97224680743534], [16.0, 940.8363045436951], [5.0, 489.43661971830977], [6.0, 511.81756756756755], [7.0, 511.20470588235327]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.70064846416377, 697.906160409557]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72849962E12, "maxY": 5.39090632E7, "series": [{"data": [[1.72850034E12, 2.6605188383333333E7], [1.72850358E12, 4.537783046666667E7], [1.7285058E12, 5.0453428733333334E7], [1.72850256E12, 4.4566921E7], [1.728507E12, 5.088255325E7], [1.72850136E12, 2.6790307416666668E7], [1.72850238E12, 4.2752160666666664E7], [1.7285046E12, 5.0655708016666666E7], [1.7285082E12, 675867.8166666667], [1.72850598E12, 4.9497403516666666E7], [1.72850682E12, 5.13415108E7], [1.72850052E12, 2.606710395E7], [1.72850274E12, 4.34989224E7], [1.72850496E12, 4.957178278333333E7], [1.72850154E12, 2.4912652366666667E7], [1.72850478E12, 5.08807756E7], [1.72850802E12, 5.082745735E7], [1.72850376E12, 4.482092243333333E7], [1.72850664E12, 5.071187803333333E7], [1.728501E12, 2.6509100716666665E7], [1.72850322E12, 4.5836722833333336E7], [1.72850544E12, 4.890709293333333E7], [1.72850766E12, 5.164923546666667E7], [1.72850202E12, 4.593834793333333E7], [1.72850526E12, 4.77219392E7], [1.72850784E12, 5.0960641333333336E7], [1.7284998E12, 1.34066445E7], [1.72850424E12, 5.024749255E7], [1.7285034E12, 4.50212812E7], [1.72850016E12, 2.6485456533333335E7], [1.72850118E12, 2.5108296616666667E7], [1.72850562E12, 4.811353971666667E7], [1.72850748E12, 5.257004065E7], [1.7285022E12, 4.487365615E7], [1.72849998E12, 2.5744484416666668E7], [1.72850442E12, 5.17242274E7], [1.72850646E12, 5.233647128333333E7], [1.7285055E12, 5.131873825E7], [1.72850004E12, 2.6293911283333335E7], [1.72850226E12, 4.4074717083333336E7], [1.72850448E12, 5.021988495E7], [1.7285067E12, 5.39090632E7], [1.72850106E12, 2.7011632116666667E7], [1.7285043E12, 4.9991604266666666E7], [1.72850688E12, 5.2404408516666666E7], [1.72850328E12, 4.434164821666667E7], [1.7285079E12, 5.311425165E7], [1.72850244E12, 4.409096106666667E7], [1.72850022E12, 2.67581017E7], [1.72850466E12, 4.892128256666667E7], [1.72850652E12, 5.0974873916666664E7], [1.72850772E12, 5.008210096666667E7], [1.72850124E12, 2.5993380533333335E7], [1.72850346E12, 4.295850263333333E7], [1.72850568E12, 4.8760302233333334E7], [1.72849968E12, 1.3279501233333332E7], [1.72850292E12, 4.4695804233333334E7], [1.72850634E12, 5.0206010583333336E7], [1.7285007E12, 2.6371365383333333E7], [1.72850514E12, 4.92619626E7], [1.72850754E12, 5.292400986666667E7], [1.72850172E12, 2.3182689016666666E7], [1.72850394E12, 4.452870356666667E7], [1.72850616E12, 4.994611556666667E7], [1.72849986E12, 1.3628838433333334E7], [1.7285031E12, 4.301366893333333E7], [1.72850532E12, 5.194938913333333E7], [1.72850208E12, 4.39249333E7], [1.72850718E12, 5.206443431666667E7], [1.72850412E12, 4.902668961666667E7], [1.72850736E12, 5.3823802666666664E7], [1.72850088E12, 2.4793483016666666E7], [1.7285019E12, 4.251994163333333E7], [1.7285076E12, 5.21628606E7], [1.72850418E12, 4.910287765E7], [1.72849974E12, 1.304052015E7], [1.72850196E12, 4.4979716083333336E7], [1.72850622E12, 3.6596282483333334E7], [1.72850658E12, 5.233792115E7], [1.7285052E12, 4.9796809233333334E7], [1.72850076E12, 2.591286065E7], [1.72850298E12, 4.3769950233333334E7], [1.72850112E12, 2.572537885E7], [1.72850214E12, 4.3484451916666664E7], [1.72850436E12, 5.043718536666667E7], [1.72849992E12, 2.5122061583333332E7], [1.72850316E12, 4.365516071666667E7], [1.7285064E12, 5.2852673016666666E7], [1.72850538E12, 5.02563726E7], [1.72850094E12, 2.5070049316666666E7], [1.72850742E12, 5.211466756666667E7], [1.7285016E12, 2.63161014E7], [1.72850262E12, 4.520966743333333E7], [1.72850484E12, 4.9450217666666664E7], [1.72850364E12, 4.5331552266666666E7], [1.7285004E12, 2.6272813216666665E7], [1.72850142E12, 2.5727787616666667E7], [1.72850586E12, 5.0351330666666664E7], [1.72850724E12, 5.086020793333333E7], [1.72850178E12, 1.75587195E7], [1.72850808E12, 5.135016118333333E7], [1.72850502E12, 4.85115984E7], [1.728504E12, 2.5773914583333332E7], [1.72850058E12, 2.6367704883333333E7], [1.72850382E12, 4.5028082733333334E7], [1.72850604E12, 5.02668393E7], [1.72850706E12, 5.2811057666666664E7], [1.7285028E12, 4.543004655E7], [1.72850388E12, 4.410247606666667E7], [1.7285073E12, 5.186465853333333E7], [1.72850064E12, 2.593720295E7], [1.72850166E12, 2.50570168E7], [1.7285061E12, 4.889145163333333E7], [1.72850268E12, 4.384369206666667E7], [1.72850046E12, 2.6417423333333332E7], [1.7285049E12, 5.0450540516666666E7], [1.72850628E12, 3.678634186666667E7], [1.72850082E12, 2.591759705E7], [1.72850712E12, 5.1951640916666664E7], [1.72850406E12, 4.6459074983333334E7], [1.72850304E12, 4.431926106666667E7], [1.72850814E12, 3.519860155E7], [1.72849962E12, 9821205.85], [1.72850184E12, 4.5165269266666666E7], [1.72850286E12, 4.350964731666667E7], [1.72850508E12, 4.860287238333333E7], [1.7285013E12, 2.655676445E7], [1.72850454E12, 4.92056106E7], [1.72850352E12, 4.580992463333333E7], [1.72850796E12, 5.214650571666667E7], [1.7285001E12, 2.524621425E7], [1.72850334E12, 4.258366313333333E7], [1.72850556E12, 4.8424573E7], [1.72850232E12, 4.237559021666667E7], [1.72850694E12, 5.3142753916666664E7], [1.72850778E12, 5.288000671666667E7], [1.72850148E12, 2.55277423E7], [1.7285037E12, 4.291191285E7], [1.72850592E12, 4.945214843333333E7], [1.72850574E12, 5.009725813333333E7], [1.72850676E12, 5.2418270766666666E7], [1.72850028E12, 2.5456071566666666E7], [1.7285025E12, 4.34053356E7], [1.72850472E12, 4.931668746666667E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72850034E12, 0.0], [1.72850358E12, 0.0], [1.7285058E12, 0.0], [1.72850256E12, 0.0], [1.728507E12, 0.0], [1.72850136E12, 0.0], [1.72850238E12, 0.0], [1.7285046E12, 0.0], [1.7285082E12, 0.0], [1.72850598E12, 0.0], [1.72850682E12, 0.0], [1.72850052E12, 0.0], [1.72850274E12, 0.0], [1.72850496E12, 0.0], [1.72850154E12, 0.0], [1.72850478E12, 0.0], [1.72850802E12, 0.0], [1.72850376E12, 0.0], [1.72850664E12, 0.0], [1.728501E12, 0.0], [1.72850322E12, 0.0], [1.72850544E12, 0.0], [1.72850766E12, 0.0], [1.72850202E12, 0.0], [1.72850526E12, 0.0], [1.72850784E12, 0.0], [1.7284998E12, 0.0], [1.72850424E12, 0.0], [1.7285034E12, 0.0], [1.72850016E12, 0.0], [1.72850118E12, 0.0], [1.72850562E12, 0.0], [1.72850748E12, 0.0], [1.7285022E12, 0.0], [1.72849998E12, 0.0], [1.72850442E12, 0.0], [1.72850646E12, 0.0], [1.7285055E12, 0.0], [1.72850004E12, 0.0], [1.72850226E12, 0.0], [1.72850448E12, 0.0], [1.7285067E12, 0.0], [1.72850106E12, 0.0], [1.7285043E12, 0.0], [1.72850688E12, 0.0], [1.72850328E12, 0.0], [1.7285079E12, 0.0], [1.72850244E12, 0.0], [1.72850022E12, 0.0], [1.72850466E12, 0.0], [1.72850652E12, 0.0], [1.72850772E12, 0.0], [1.72850124E12, 0.0], [1.72850346E12, 0.0], [1.72850568E12, 0.0], [1.72849968E12, 0.0], [1.72850292E12, 0.0], [1.72850634E12, 0.0], [1.7285007E12, 0.0], [1.72850514E12, 0.0], [1.72850754E12, 0.0], [1.72850172E12, 0.0], [1.72850394E12, 0.0], [1.72850616E12, 0.0], [1.72849986E12, 0.0], [1.7285031E12, 0.0], [1.72850532E12, 0.0], [1.72850208E12, 0.0], [1.72850718E12, 0.0], [1.72850412E12, 0.0], [1.72850736E12, 0.0], [1.72850088E12, 0.0], [1.7285019E12, 0.0], [1.7285076E12, 0.0], [1.72850418E12, 0.0], [1.72849974E12, 0.0], [1.72850196E12, 0.0], [1.72850622E12, 0.0], [1.72850658E12, 0.0], [1.7285052E12, 0.0], [1.72850076E12, 0.0], [1.72850298E12, 0.0], [1.72850112E12, 0.0], [1.72850214E12, 0.0], [1.72850436E12, 0.0], [1.72849992E12, 0.0], [1.72850316E12, 0.0], [1.7285064E12, 0.0], [1.72850538E12, 0.0], [1.72850094E12, 0.0], [1.72850742E12, 0.0], [1.7285016E12, 0.0], [1.72850262E12, 0.0], [1.72850484E12, 0.0], [1.72850364E12, 0.0], [1.7285004E12, 0.0], [1.72850142E12, 0.0], [1.72850586E12, 0.0], [1.72850724E12, 0.0], [1.72850178E12, 0.0], [1.72850808E12, 0.0], [1.72850502E12, 0.0], [1.728504E12, 0.0], [1.72850058E12, 0.0], [1.72850382E12, 0.0], [1.72850604E12, 0.0], [1.72850706E12, 0.0], [1.7285028E12, 0.0], [1.72850388E12, 0.0], [1.7285073E12, 0.0], [1.72850064E12, 0.0], [1.72850166E12, 0.0], [1.7285061E12, 0.0], [1.72850268E12, 0.0], [1.72850046E12, 0.0], [1.7285049E12, 0.0], [1.72850628E12, 0.0], [1.72850082E12, 0.0], [1.72850712E12, 0.0], [1.72850406E12, 0.0], [1.72850304E12, 0.0], [1.72850814E12, 0.0], [1.72849962E12, 0.0], [1.72850184E12, 0.0], [1.72850286E12, 0.0], [1.72850508E12, 0.0], [1.7285013E12, 0.0], [1.72850454E12, 0.0], [1.72850352E12, 0.0], [1.72850796E12, 0.0], [1.7285001E12, 0.0], [1.72850334E12, 0.0], [1.72850556E12, 0.0], [1.72850232E12, 0.0], [1.72850694E12, 0.0], [1.72850778E12, 0.0], [1.72850148E12, 0.0], [1.7285037E12, 0.0], [1.72850592E12, 0.0], [1.72850574E12, 0.0], [1.72850676E12, 0.0], [1.72850028E12, 0.0], [1.7285025E12, 0.0], [1.72850472E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7285082E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 428.71886120996453, "minX": 1.72849962E12, "maxY": 1028.469387755105, "series": [{"data": [[1.72850034E12, 491.7163265306127], [1.72850358E12, 551.2098623853207], [1.7285058E12, 743.7574819401443], [1.72850256E12, 553.8910776361521], [1.728507E12, 948.2656716417907], [1.72850136E12, 493.3995901639343], [1.72850238E12, 540.2277339346119], [1.7285046E12, 746.6224066390042], [1.7285082E12, 624.1000000000001], [1.72850598E12, 698.5130940834142], [1.72850682E12, 936.4980468750009], [1.72850052E12, 468.2304687500001], [1.72850274E12, 524.9748083242052], [1.72850496E12, 781.3896103896117], [1.72850154E12, 491.85626283367515], [1.72850478E12, 735.1997961264021], [1.72850802E12, 958.3888888888887], [1.72850376E12, 549.5195402298842], [1.72850664E12, 925.5217391304346], [1.728501E12, 472.83104125736764], [1.72850322E12, 544.2124293785312], [1.72850544E12, 737.8117283950626], [1.72850766E12, 912.7986641221371], [1.72850202E12, 537.2564389697651], [1.72850526E12, 721.7009063444106], [1.72850784E12, 940.2694965449158], [1.7284998E12, 470.63137254901966], [1.72850424E12, 731.1346153846143], [1.7285034E12, 560.7086247086243], [1.72850016E12, 499.6409185803761], [1.72850118E12, 465.0678294573643], [1.72850562E12, 699.5644531249994], [1.72850748E12, 1028.469387755105], [1.7285022E12, 541.8002270147556], [1.72849998E12, 466.3105468749998], [1.72850442E12, 774.343010752688], [1.72850646E12, 925.5996150144364], [1.7285055E12, 703.2383268482504], [1.72850004E12, 480.2080000000002], [1.72850226E12, 543.4208144796386], [1.72850448E12, 747.158385093167], [1.7285067E12, 966.1903807615216], [1.72850106E12, 475.6811881188118], [1.7285043E12, 772.7408602150538], [1.72850688E12, 946.430678466076], [1.72850328E12, 537.0915178571435], [1.7285079E12, 901.4058380414316], [1.72850244E12, 568.8299643281804], [1.72850022E12, 476.9105367793244], [1.72850466E12, 694.5380173243501], [1.72850652E12, 906.189443920829], [1.72850772E12, 924.043144774688], [1.72850124E12, 470.2829076620823], [1.72850346E12, 534.7267637178047], [1.72850568E12, 731.637195121951], [1.72849968E12, 428.71886120996453], [1.72850292E12, 578.425659472422], [1.72850634E12, 937.2142857142858], [1.7285007E12, 474.6086956521741], [1.72850514E12, 727.9594320486817], [1.72850754E12, 934.936647173491], [1.72850172E12, 443.3749999999999], [1.72850394E12, 551.6514423076928], [1.72850616E12, 730.9256900212308], [1.72849986E12, 428.8398692810456], [1.7285031E12, 523.1803278688536], [1.72850532E12, 716.6776447105798], [1.72850208E12, 544.5936435868337], [1.72850718E12, 914.6372269705604], [1.72850412E12, 729.0254065040659], [1.72850736E12, 980.8638211382112], [1.72850088E12, 446.42037037037045], [1.7285019E12, 526.129527991218], [1.7285076E12, 969.7069486404829], [1.72850418E12, 707.4537401574806], [1.72849974E12, 473.418972332016], [1.72850196E12, 552.3306451612909], [1.72850622E12, 568.541843971631], [1.72850658E12, 928.9563953488359], [1.7285052E12, 758.7932843651631], [1.72850076E12, 464.98259187620886], [1.72850298E12, 562.1477139507617], [1.72850112E12, 468.06653620352245], [1.72850214E12, 560.1821345707657], [1.72850436E12, 744.0475206611568], [1.72849992E12, 460.3773946360153], [1.72850316E12, 560.557511737089], [1.7285064E12, 932.0387596899216], [1.72850538E12, 723.896896896897], [1.72850094E12, 479.81199999999995], [1.72850742E12, 928.797284190107], [1.7285016E12, 473.7544204322202], [1.72850262E12, 555.2416570771011], [1.72850484E12, 735.7135575942914], [1.72850364E12, 566.18224852071], [1.7285004E12, 518.9804347826083], [1.72850142E12, 520.0827886710242], [1.72850586E12, 733.8593272171253], [1.72850724E12, 917.9173076923084], [1.72850178E12, 484.76401179940996], [1.72850808E12, 898.5446768060838], [1.72850502E12, 765.0947816826417], [1.728504E12, 485.1834319526633], [1.72850058E12, 469.56164383561656], [1.72850382E12, 567.3548766157477], [1.72850604E12, 751.1041666666672], [1.72850706E12, 973.341759352881], [1.7285028E12, 564.3591549295774], [1.72850388E12, 555.1562500000002], [1.7285073E12, 946.4970355731225], [1.72850064E12, 493.917695473251], [1.72850166E12, 444.6078066914495], [1.7285061E12, 751.9487447698752], [1.72850268E12, 533.5566666666663], [1.72850046E12, 510.1440677966096], [1.7285049E12, 719.6713567839201], [1.72850628E12, 827.1750321750325], [1.72850082E12, 446.6866791744839], [1.72850712E12, 919.0926456542504], [1.72850406E12, 702.8481012658231], [1.72850304E12, 554.9480369515007], [1.72850814E12, 648.7475592747554], [1.72849962E12, 486.3238636363635], [1.72850184E12, 578.0698795180714], [1.72850286E12, 551.8530092592598], [1.72850508E12, 698.8662790697681], [1.7285013E12, 438.1499085923221], [1.72850454E12, 747.8957247132428], [1.72850352E12, 560.753504672897], [1.72850796E12, 1020.2033898305078], [1.7285001E12, 481.9360000000002], [1.72850334E12, 521.3991323210411], [1.72850556E12, 753.8738269030231], [1.72850232E12, 537.3832402234639], [1.72850694E12, 941.8266405484816], [1.72850778E12, 938.2078048780486], [1.72850148E12, 470.7128906250002], [1.7285037E12, 543.7703619909502], [1.72850592E12, 710.9434523809527], [1.72850574E12, 755.3357817418686], [1.72850676E12, 956.6946946946935], [1.72850028E12, 453.09280303030346], [1.7285025E12, 557.9988385598144], [1.72850472E12, 742.0867768595044]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7285082E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 281.16725978647713, "minX": 1.72849962E12, "maxY": 697.5037593984958, "series": [{"data": [[1.72850034E12, 321.28979591836725], [1.72850358E12, 367.74770642201776], [1.7285058E12, 500.20949432404547], [1.72850256E12, 369.7601390498261], [1.728507E12, 645.2776119402985], [1.72850136E12, 321.5122950819676], [1.72850238E12, 363.34723788049615], [1.7285046E12, 499.30705394190846], [1.7285082E12, 413.2], [1.72850598E12, 469.55480116391885], [1.72850682E12, 638.4150390624999], [1.72850052E12, 307.6542968749998], [1.72850274E12, 352.6659364731654], [1.72850496E12, 525.0670995671012], [1.72850154E12, 329.0595482546203], [1.72850478E12, 493.1202854230374], [1.72850802E12, 653.3621031746028], [1.72850376E12, 365.6804597701148], [1.72850664E12, 628.3391304347828], [1.728501E12, 310.76620825147353], [1.72850322E12, 363.501694915254], [1.72850544E12, 499.3940329218104], [1.72850766E12, 617.2318702290075], [1.72850202E12, 356.2665173572224], [1.72850526E12, 490.4521651560925], [1.72850784E12, 642.0345508390922], [1.7284998E12, 311.33725490196093], [1.72850424E12, 490.92004048583004], [1.7285034E12, 376.20279720279694], [1.72850016E12, 327.04175365344446], [1.72850118E12, 309.71317829457365], [1.72850562E12, 476.3623046874999], [1.72850748E12, 697.5037593984958], [1.7285022E12, 358.5902383654938], [1.72849998E12, 306.86523437500034], [1.72850442E12, 517.1236559139783], [1.72850646E12, 623.8229066410005], [1.7285055E12, 467.89785992217827], [1.72850004E12, 315.51199999999983], [1.72850226E12, 363.3619909502266], [1.72850448E12, 504.6086956521734], [1.7285067E12, 649.6132264529053], [1.72850106E12, 310.15247524752465], [1.7285043E12, 520.9774193548378], [1.72850688E12, 639.9803343166171], [1.72850328E12, 357.5345982142854], [1.7285079E12, 608.8549905838036], [1.72850244E12, 381.63495838287736], [1.72850022E12, 312.01590457256464], [1.72850466E12, 469.6833493743984], [1.72850652E12, 617.1743638077278], [1.72850772E12, 633.0776605944387], [1.72850124E12, 309.68958742632634], [1.72850346E12, 358.3023516237406], [1.72850568E12, 495.1453252032518], [1.72849968E12, 281.16725978647713], [1.72850292E12, 386.5707434052752], [1.72850634E12, 640.9011741682976], [1.7285007E12, 309.9624505928855], [1.72850514E12, 488.75253549695725], [1.72850754E12, 632.1861598440546], [1.72850172E12, 294.13085937500006], [1.72850394E12, 365.7812500000003], [1.72850616E12, 490.6210191082804], [1.72849986E12, 284.53594771241865], [1.7285031E12, 352.1344262295085], [1.72850532E12, 477.3133732534929], [1.72850208E12, 363.83541430192975], [1.72850718E12, 618.0636277302938], [1.72850412E12, 490.24695121951237], [1.72850736E12, 661.6290650406496], [1.72850088E12, 297.0388888888892], [1.7285019E12, 356.4237102085624], [1.7285076E12, 658.5186304128895], [1.72850418E12, 476.2952755905513], [1.72849974E12, 312.5612648221345], [1.72850196E12, 368.7776497695852], [1.72850622E12, 380.50921985815603], [1.72850658E12, 631.3633720930227], [1.7285052E12, 514.3053515215105], [1.72850076E12, 303.74274661508724], [1.72850298E12, 375.08792497069203], [1.72850112E12, 309.187866927593], [1.72850214E12, 377.3921113689096], [1.72850436E12, 501.77892561983475], [1.72849992E12, 304.6168582375476], [1.72850316E12, 373.67605633802793], [1.7285064E12, 628.5988372093013], [1.72850538E12, 488.13213213213197], [1.72850094E12, 317.7019999999999], [1.72850742E12, 629.2677012609121], [1.7285016E12, 311.5618860510811], [1.72850262E12, 370.4959723820484], [1.72850484E12, 497.9938837920488], [1.72850364E12, 377.08520710059196], [1.7285004E12, 340.6065217391303], [1.72850142E12, 342.5816993464059], [1.72850586E12, 496.4943934760454], [1.72850724E12, 624.079807692308], [1.72850178E12, 319.99410029498506], [1.72850808E12, 607.6777566539922], [1.72850502E12, 517.3365282215113], [1.728504E12, 321.00197238658785], [1.72850058E12, 306.8845401174169], [1.72850382E12, 379.19976498237395], [1.72850604E12, 504.99687500000044], [1.72850706E12, 655.3174924165828], [1.7285028E12, 373.9870892018777], [1.72850388E12, 371.6261574074072], [1.7285073E12, 642.64723320158], [1.72850064E12, 325.56995884773687], [1.72850166E12, 292.6598513011153], [1.7285061E12, 510.2970711297075], [1.72850268E12, 357.4577777777782], [1.72850046E12, 336.42796610169506], [1.7285049E12, 480.83316582914597], [1.72850628E12, 562.9124839124838], [1.72850082E12, 291.85365853658516], [1.72850712E12, 620.8156638013379], [1.72850406E12, 473.565400843882], [1.72850304E12, 372.30254041570436], [1.72850814E12, 436.5216178521619], [1.72849962E12, 319.1988636363636], [1.72850184E12, 387.40361445783134], [1.72850286E12, 371.34027777777754], [1.72850508E12, 471.4651162790696], [1.7285013E12, 284.970749542962], [1.72850454E12, 505.0875912408759], [1.72850352E12, 371.3901869158884], [1.72850796E12, 688.5052966101698], [1.7285001E12, 319.9899999999999], [1.72850334E12, 352.1225596529286], [1.72850556E12, 509.4535974973928], [1.72850232E12, 361.8234636871507], [1.72850694E12, 638.2164544564151], [1.72850778E12, 634.9092682926826], [1.72850148E12, 310.7832031250002], [1.7285037E12, 367.30203619909474], [1.72850592E12, 480.03472222222183], [1.72850574E12, 508.27911857292764], [1.72850676E12, 648.5645645645644], [1.72850028E12, 298.42992424242414], [1.7285025E12, 374.84668989547026], [1.72850472E12, 500.9421487603304]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7285082E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72849962E12, "maxY": 4.9E-324, "series": [{"data": [[1.72850034E12, 0.0], [1.72850358E12, 0.0], [1.7285058E12, 0.0], [1.72850256E12, 0.0], [1.728507E12, 0.0], [1.72850136E12, 0.0], [1.72850238E12, 0.0], [1.7285046E12, 0.0], [1.7285082E12, 0.0], [1.72850598E12, 0.0], [1.72850682E12, 0.0], [1.72850052E12, 0.0], [1.72850274E12, 0.0], [1.72850496E12, 0.0], [1.72850154E12, 0.0], [1.72850478E12, 0.0], [1.72850802E12, 0.0], [1.72850376E12, 0.0], [1.72850664E12, 0.0], [1.728501E12, 0.0], [1.72850322E12, 0.0], [1.72850544E12, 0.0], [1.72850766E12, 0.0], [1.72850202E12, 0.0], [1.72850526E12, 0.0], [1.72850784E12, 0.0], [1.7284998E12, 0.0], [1.72850424E12, 0.0], [1.7285034E12, 0.0], [1.72850016E12, 0.0], [1.72850118E12, 0.0], [1.72850562E12, 0.0], [1.72850748E12, 0.0], [1.7285022E12, 0.0], [1.72849998E12, 0.0], [1.72850442E12, 0.0], [1.72850646E12, 0.0], [1.7285055E12, 0.0], [1.72850004E12, 0.0], [1.72850226E12, 0.0], [1.72850448E12, 0.0], [1.7285067E12, 0.0], [1.72850106E12, 0.0], [1.7285043E12, 0.0], [1.72850688E12, 0.0], [1.72850328E12, 0.0], [1.7285079E12, 0.0], [1.72850244E12, 0.0], [1.72850022E12, 0.0], [1.72850466E12, 0.0], [1.72850652E12, 0.0], [1.72850772E12, 0.0], [1.72850124E12, 0.0], [1.72850346E12, 0.0], [1.72850568E12, 0.0], [1.72849968E12, 0.0], [1.72850292E12, 0.0], [1.72850634E12, 0.0], [1.7285007E12, 0.0], [1.72850514E12, 0.0], [1.72850754E12, 0.0], [1.72850172E12, 0.0], [1.72850394E12, 0.0], [1.72850616E12, 0.0], [1.72849986E12, 0.0], [1.7285031E12, 0.0], [1.72850532E12, 0.0], [1.72850208E12, 0.0], [1.72850718E12, 0.0], [1.72850412E12, 0.0], [1.72850736E12, 0.0], [1.72850088E12, 0.0], [1.7285019E12, 0.0], [1.7285076E12, 0.0], [1.72850418E12, 0.0], [1.72849974E12, 0.0], [1.72850196E12, 0.0], [1.72850622E12, 0.0], [1.72850658E12, 0.0], [1.7285052E12, 0.0], [1.72850076E12, 0.0], [1.72850298E12, 0.0], [1.72850112E12, 0.0], [1.72850214E12, 0.0], [1.72850436E12, 0.0], [1.72849992E12, 0.0], [1.72850316E12, 0.0], [1.7285064E12, 0.0], [1.72850538E12, 0.0], [1.72850094E12, 0.0], [1.72850742E12, 0.0], [1.7285016E12, 0.0], [1.72850262E12, 0.0], [1.72850484E12, 0.0], [1.72850364E12, 0.0], [1.7285004E12, 0.0], [1.72850142E12, 0.0], [1.72850586E12, 0.0], [1.72850724E12, 0.0], [1.72850178E12, 0.0], [1.72850808E12, 0.0], [1.72850502E12, 0.0], [1.728504E12, 0.0], [1.72850058E12, 0.0], [1.72850382E12, 0.0], [1.72850604E12, 0.0], [1.72850706E12, 0.0], [1.7285028E12, 0.0], [1.72850388E12, 0.0], [1.7285073E12, 0.0], [1.72850064E12, 0.0], [1.72850166E12, 0.0], [1.7285061E12, 0.0], [1.72850268E12, 0.0], [1.72850046E12, 0.0], [1.7285049E12, 0.0], [1.72850628E12, 0.0], [1.72850082E12, 0.0], [1.72850712E12, 0.0], [1.72850406E12, 0.0], [1.72850304E12, 0.0], [1.72850814E12, 0.0], [1.72849962E12, 0.0], [1.72850184E12, 0.0], [1.72850286E12, 0.0], [1.72850508E12, 0.0], [1.7285013E12, 0.0], [1.72850454E12, 0.0], [1.72850352E12, 0.0], [1.72850796E12, 0.0], [1.7285001E12, 0.0], [1.72850334E12, 0.0], [1.72850556E12, 0.0], [1.72850232E12, 0.0], [1.72850694E12, 0.0], [1.72850778E12, 0.0], [1.72850148E12, 0.0], [1.7285037E12, 0.0], [1.72850592E12, 0.0], [1.72850574E12, 0.0], [1.72850676E12, 0.0], [1.72850028E12, 0.0], [1.7285025E12, 0.0], [1.72850472E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7285082E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.72849962E12, "maxY": 4190.0, "series": [{"data": [[1.72850034E12, 1687.0], [1.72850358E12, 2201.0], [1.7285058E12, 2618.0], [1.72850256E12, 1953.0], [1.728507E12, 3622.0], [1.72850136E12, 1899.0], [1.72850238E12, 2095.0], [1.7285046E12, 3044.0], [1.7285082E12, 1113.0], [1.72850598E12, 2749.0], [1.72850682E12, 3381.0], [1.72850052E12, 1641.0], [1.72850274E12, 1969.0], [1.72850496E12, 3099.0], [1.72850154E12, 1988.0], [1.72850478E12, 2760.0], [1.72850802E12, 3945.0], [1.72850376E12, 1984.0], [1.72850664E12, 3290.0], [1.728501E12, 1927.0], [1.72850322E12, 2256.0], [1.72850544E12, 2845.0], [1.72850766E12, 3574.0], [1.72850202E12, 2019.0], [1.72850526E12, 2865.0], [1.72850784E12, 3315.0], [1.7284998E12, 1488.0], [1.72850424E12, 2650.0], [1.7285034E12, 2123.0], [1.72850016E12, 1687.0], [1.72850118E12, 1637.0], [1.72850562E12, 2825.0], [1.72850748E12, 3768.0], [1.7285022E12, 2179.0], [1.72849998E12, 1716.0], [1.72850442E12, 3124.0], [1.72850646E12, 3406.0], [1.7285055E12, 3128.0], [1.72850004E12, 1674.0], [1.72850226E12, 2154.0], [1.72850448E12, 2803.0], [1.7285067E12, 3714.0], [1.72850106E12, 1640.0], [1.7285043E12, 2679.0], [1.72850688E12, 3738.0], [1.72850328E12, 1966.0], [1.7285079E12, 3162.0], [1.72850244E12, 2087.0], [1.72850022E12, 1908.0], [1.72850466E12, 2856.0], [1.72850652E12, 3456.0], [1.72850772E12, 3537.0], [1.72850124E12, 1601.0], [1.72850346E12, 2058.0], [1.72850568E12, 2769.0], [1.72849968E12, 1594.0], [1.72850292E12, 2137.0], [1.72850634E12, 3525.0], [1.7285007E12, 1769.0], [1.72850514E12, 2689.0], [1.72850754E12, 3790.0], [1.72850172E12, 1978.0], [1.72850394E12, 2192.0], [1.72850616E12, 2445.0], [1.72849986E12, 1629.0], [1.7285031E12, 2129.0], [1.72850532E12, 2902.0], [1.72850208E12, 2203.0], [1.72850718E12, 3846.0], [1.72850412E12, 3161.0], [1.72850736E12, 3602.0], [1.72850088E12, 1796.0], [1.7285019E12, 2123.0], [1.7285076E12, 3603.0], [1.72850418E12, 2890.0], [1.72849974E12, 1856.0], [1.72850196E12, 1926.0], [1.72850622E12, 2773.0], [1.72850658E12, 3710.0], [1.7285052E12, 3232.0], [1.72850076E12, 1911.0], [1.72850298E12, 2193.0], [1.72850112E12, 1675.0], [1.72850214E12, 2072.0], [1.72850436E12, 2652.0], [1.72849992E12, 1641.0], [1.72850316E12, 2001.0], [1.7285064E12, 3499.0], [1.72850538E12, 2975.0], [1.72850094E12, 1571.0], [1.72850742E12, 3317.0], [1.7285016E12, 1647.0], [1.72850262E12, 2066.0], [1.72850484E12, 2658.0], [1.72850364E12, 1927.0], [1.7285004E12, 1901.0], [1.72850142E12, 1715.0], [1.72850586E12, 2902.0], [1.72850724E12, 3317.0], [1.72850178E12, 1636.0], [1.72850808E12, 3483.0], [1.72850502E12, 3057.0], [1.728504E12, 1987.0], [1.72850058E12, 1947.0], [1.72850382E12, 2220.0], [1.72850604E12, 2900.0], [1.72850706E12, 4190.0], [1.7285028E12, 2130.0], [1.72850388E12, 2066.0], [1.7285073E12, 3111.0], [1.72850064E12, 1974.0], [1.72850166E12, 1697.0], [1.7285061E12, 2930.0], [1.72850268E12, 1945.0], [1.72850046E12, 1644.0], [1.7285049E12, 3037.0], [1.72850628E12, 3817.0], [1.72850082E12, 1819.0], [1.72850712E12, 3309.0], [1.72850406E12, 2706.0], [1.72850304E12, 1932.0], [1.72850814E12, 2985.0], [1.72849962E12, 1781.0], [1.72850184E12, 2024.0], [1.72850286E12, 2074.0], [1.72850508E12, 3149.0], [1.7285013E12, 1599.0], [1.72850454E12, 3067.0], [1.72850352E12, 2225.0], [1.72850796E12, 3884.0], [1.7285001E12, 1556.0], [1.72850334E12, 1988.0], [1.72850556E12, 3033.0], [1.72850232E12, 2226.0], [1.72850694E12, 3943.0], [1.72850778E12, 3614.0], [1.72850148E12, 1837.0], [1.7285037E12, 2256.0], [1.72850592E12, 2738.0], [1.72850574E12, 2606.0], [1.72850676E12, 3570.0], [1.72850028E12, 1744.0], [1.7285025E12, 2272.0], [1.72850472E12, 3176.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72850034E12, 1070.4], [1.72850358E12, 1198.1000000000001], [1.7285058E12, 1607.0], [1.72850256E12, 1189.2], [1.728507E12, 1962.7999999999997], [1.72850136E12, 1068.6000000000004], [1.72850238E12, 1171.6000000000001], [1.7285046E12, 1599.0], [1.7285082E12, 1109.8], [1.72850598E12, 1542.8000000000002], [1.72850682E12, 1996.5], [1.72850052E12, 1038.1], [1.72850274E12, 1130.2], [1.72850496E12, 1701.0], [1.72850154E12, 1005.0], [1.72850478E12, 1612.6000000000001], [1.72850802E12, 2030.8000000000002], [1.72850376E12, 1189.6999999999998], [1.72850664E12, 1965.6], [1.728501E12, 1005.0], [1.72850322E12, 1210.7999999999997], [1.72850544E12, 1558.0000000000005], [1.72850766E12, 1997.1], [1.72850202E12, 1167.6], [1.72850526E12, 1568.2000000000003], [1.72850784E12, 1969.2], [1.7284998E12, 996.8000000000001], [1.72850424E12, 1624.6000000000001], [1.7285034E12, 1204.7000000000003], [1.72850016E12, 1018.0], [1.72850118E12, 985.7], [1.72850562E12, 1525.0], [1.72850748E12, 2115.4], [1.7285022E12, 1217.8000000000002], [1.72849998E12, 1024.8], [1.72850442E12, 1651.8], [1.72850646E12, 1995.0], [1.7285055E12, 1585.7000000000003], [1.72850004E12, 1032.9], [1.72850226E12, 1164.5], [1.72850448E12, 1626.3000000000002], [1.7285067E12, 2078.2], [1.72850106E12, 1066.0000000000002], [1.7285043E12, 1601.6999999999998], [1.72850688E12, 1975.6000000000004], [1.72850328E12, 1117.0], [1.7285079E12, 1954.5000000000002], [1.72850244E12, 1152.8000000000002], [1.72850022E12, 1023.0], [1.72850466E12, 1569.0], [1.72850652E12, 1933.4], [1.72850772E12, 2022.2], [1.72850124E12, 1036.0], [1.72850346E12, 1130.6], [1.72850568E12, 1587.0], [1.72849968E12, 977.2000000000002], [1.72850292E12, 1220.0], [1.72850634E12, 2019.7], [1.7285007E12, 990.2], [1.72850514E12, 1585.6000000000001], [1.72850754E12, 1998.0], [1.72850172E12, 973.0], [1.72850394E12, 1185.4], [1.72850616E12, 1544.6000000000008], [1.72849986E12, 963.0000000000001], [1.7285031E12, 1178.4], [1.72850532E12, 1583.5000000000002], [1.72850208E12, 1197.2000000000003], [1.72850718E12, 2019.6], [1.72850412E12, 1586.0], [1.72850736E12, 2056.0], [1.72850088E12, 1003.1000000000004], [1.7285019E12, 1131.4], [1.7285076E12, 2000.0], [1.72850418E12, 1577.3000000000002], [1.72849974E12, 1062.6], [1.72850196E12, 1176.5], [1.72850622E12, 1270.0], [1.72850658E12, 2017.1000000000001], [1.7285052E12, 1612.4], [1.72850076E12, 1015.0], [1.72850298E12, 1188.4], [1.72850112E12, 1018.8], [1.72850214E12, 1142.7], [1.72850436E12, 1623.1], [1.72849992E12, 990.0999999999999], [1.72850316E12, 1172.2000000000003], [1.7285064E12, 1989.8000000000002], [1.72850538E12, 1602.0], [1.72850094E12, 1059.9], [1.72850742E12, 2042.8000000000004], [1.7285016E12, 1017.0], [1.72850262E12, 1206.0], [1.72850484E12, 1604.0], [1.72850364E12, 1215.1999999999998], [1.7285004E12, 1099.9], [1.72850142E12, 1078.0], [1.72850586E12, 1580.0], [1.72850724E12, 1988.0], [1.72850178E12, 1086.0], [1.72850808E12, 1975.7], [1.72850502E12, 1585.0], [1.728504E12, 1075.0], [1.72850058E12, 1029.8000000000002], [1.72850382E12, 1214.8000000000004], [1.72850604E12, 1574.9], [1.72850706E12, 2076.0], [1.7285028E12, 1213.6000000000004], [1.72850388E12, 1135.0], [1.7285073E12, 2011.0], [1.72850064E12, 1037.4], [1.72850166E12, 986.0], [1.7285061E12, 1651.4000000000005], [1.72850268E12, 1162.9], [1.72850046E12, 1054.6], [1.7285049E12, 1591.8], [1.72850628E12, 1842.6000000000004], [1.72850082E12, 1004.2], [1.72850712E12, 2076.6000000000004], [1.72850406E12, 1581.3000000000002], [1.72850304E12, 1190.6000000000001], [1.72850814E12, 1450.2], [1.72849962E12, 1048.4000000000005], [1.72850184E12, 1232.5], [1.72850286E12, 1167.5], [1.72850508E12, 1582.8000000000002], [1.7285013E12, 933.4], [1.72850454E12, 1589.0], [1.72850352E12, 1190.0], [1.72850796E12, 2172.0], [1.7285001E12, 1046.1000000000004], [1.72850334E12, 1156.0], [1.72850556E12, 1604.0], [1.72850232E12, 1130.4], [1.72850694E12, 1983.4], [1.72850778E12, 2016.7999999999997], [1.72850148E12, 1033.5], [1.7285037E12, 1138.0], [1.72850592E12, 1563.3000000000002], [1.72850574E12, 1613.0], [1.72850676E12, 2065.0], [1.72850028E12, 994.3000000000001], [1.7285025E12, 1177.4], [1.72850472E12, 1604.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72850034E12, 1492.6699999999985], [1.72850358E12, 1871.27], [1.7285058E12, 2353.2999999999993], [1.72850256E12, 1742.44], [1.728507E12, 2823.159999999999], [1.72850136E12, 1618.8300000000008], [1.72850238E12, 1649.6400000000003], [1.7285046E12, 2437.8500000000004], [1.7285082E12, 1113.0], [1.72850598E12, 2214.7599999999998], [1.72850682E12, 2903.25], [1.72850052E12, 1324.87], [1.72850274E12, 1610.7400000000002], [1.72850496E12, 2399.25], [1.72850154E12, 1474.3200000000006], [1.72850478E12, 2182.579999999996], [1.72850802E12, 2875.9199999999996], [1.72850376E12, 1734.3199999999997], [1.72850664E12, 2902.28000000001], [1.728501E12, 1579.8999999999996], [1.72850322E12, 1659.2599999999993], [1.72850544E12, 2283.54], [1.72850766E12, 3088.4199999999996], [1.72850202E12, 1671.5399999999995], [1.72850526E12, 2267.18], [1.72850784E12, 2922.2000000000003], [1.7284998E12, 1470.88], [1.72850424E12, 2260.11], [1.7285034E12, 1713.0999999999997], [1.72850016E12, 1580.3999999999999], [1.72850118E12, 1513.32], [1.72850562E12, 2244.0], [1.72850748E12, 2937.199999999998], [1.7285022E12, 1761.36], [1.72849998E12, 1428.19], [1.72850442E12, 2341.6299999999983], [1.72850646E12, 2938.599999999999], [1.7285055E12, 2434.1500000000024], [1.72850004E12, 1450.7700000000002], [1.72850226E12, 1686.7499999999995], [1.72850448E12, 2241.110000000003], [1.7285067E12, 2935.569999999999], [1.72850106E12, 1386.76], [1.7285043E12, 2394.9799999999977], [1.72850688E12, 2927.479999999999], [1.72850328E12, 1720.4499999999996], [1.7285079E12, 2675.74], [1.72850244E12, 1670.16], [1.72850022E12, 1535.3999999999996], [1.72850466E12, 2311.9999999999986], [1.72850652E12, 2861.039999999999], [1.72850772E12, 2757.3599999999997], [1.72850124E12, 1490.6999999999994], [1.72850346E12, 1765.0399999999981], [1.72850568E12, 2277.249999999999], [1.72849968E12, 1445.1200000000003], [1.72850292E12, 1696.25], [1.72850634E12, 2900.7799999999997], [1.7285007E12, 1525.79], [1.72850514E12, 2197.0299999999997], [1.72850754E12, 2796.2200000000003], [1.72850172E12, 1513.31], [1.72850394E12, 1614.3699999999994], [1.72850616E12, 2279.219999999997], [1.72849986E12, 1410.72], [1.7285031E12, 1631.88], [1.72850532E12, 2239.7300000000005], [1.72850208E12, 1755.6199999999994], [1.72850718E12, 2834.960000000001], [1.72850412E12, 2270.399999999999], [1.72850736E12, 3095.0499999999993], [1.72850088E12, 1457.4200000000012], [1.7285019E12, 1856.08], [1.7285076E12, 3057.119999999997], [1.72850418E12, 2267.410000000001], [1.72849974E12, 1441.0400000000009], [1.72850196E12, 1675.3699999999985], [1.72850622E12, 1954.8599999999988], [1.72850658E12, 2808.3599999999997], [1.7285052E12, 2431.76], [1.72850076E12, 1470.3600000000024], [1.72850298E12, 1709.8400000000001], [1.72850112E12, 1414.3599999999997], [1.72850214E12, 1680.73], [1.72850436E12, 2353.869999999996], [1.72849992E12, 1333.3999999999996], [1.72850316E12, 1761.7300000000016], [1.7285064E12, 2931.509999999998], [1.72850538E12, 2270.0], [1.72850094E12, 1393.89], [1.72850742E12, 2887.279999999998], [1.7285016E12, 1548.1999999999985], [1.72850262E12, 1675.6], [1.72850484E12, 2397.8999999999996], [1.72850364E12, 1688.0], [1.7285004E12, 1460.12], [1.72850142E12, 1466.199999999999], [1.72850586E12, 2309.5599999999977], [1.72850724E12, 2693.3099999999995], [1.72850178E12, 1430.8000000000004], [1.72850808E12, 2810.05], [1.72850502E12, 2322.000000000001], [1.728504E12, 1569.8400000000001], [1.72850058E12, 1449.4], [1.72850382E12, 1756.3600000000015], [1.72850604E12, 2480.17], [1.72850706E12, 3005.3], [1.7285028E12, 1749.9800000000037], [1.72850388E12, 1676.9500000000003], [1.7285073E12, 2818.67], [1.72850064E12, 1638.81], [1.72850166E12, 1389.6100000000001], [1.7285061E12, 2361.29], [1.72850268E12, 1655.96], [1.72850046E12, 1447.4199999999992], [1.7285049E12, 2279.5599999999995], [1.72850628E12, 2670.7000000000025], [1.72850082E12, 1640.0599999999972], [1.72850712E12, 2941.56], [1.72850406E12, 2317.14], [1.72850304E12, 1712.8800000000015], [1.72850814E12, 2420.320000000006], [1.72849962E12, 1734.7999999999993], [1.72850184E12, 1759.459999999998], [1.72850286E12, 1796.2000000000003], [1.72850508E12, 2294.1199999999985], [1.7285013E12, 1345.7599999999993], [1.72850454E12, 2414.199999999999], [1.72850352E12, 1626.7799999999977], [1.72850796E12, 3053.199999999997], [1.7285001E12, 1428.98], [1.72850334E12, 1736.4799999999996], [1.72850556E12, 2356.199999999999], [1.72850232E12, 1744.4399999999978], [1.72850694E12, 2934.199999999999], [1.72850778E12, 2838.1800000000003], [1.72850148E12, 1489.88], [1.7285037E12, 1651.6999999999991], [1.72850592E12, 2214.379999999999], [1.72850574E12, 2265.6800000000003], [1.72850676E12, 2915.0], [1.72850028E12, 1470.2600000000002], [1.7285025E12, 1701.9999999999998], [1.72850472E12, 2234.959999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72850034E12, 1195.45], [1.72850358E12, 1373.6999999999998], [1.7285058E12, 1833.5], [1.72850256E12, 1426.6], [1.728507E12, 2280.2], [1.72850136E12, 1252.2999999999997], [1.72850238E12, 1332.7999999999997], [1.7285046E12, 1868.0], [1.7285082E12, 1113.0], [1.72850598E12, 1759.4], [1.72850682E12, 2314.25], [1.72850052E12, 1155.4499999999998], [1.72850274E12, 1337.8999999999999], [1.72850496E12, 1912.25], [1.72850154E12, 1152.9999999999995], [1.72850478E12, 1855.6], [1.72850802E12, 2301.1], [1.72850376E12, 1355.0], [1.72850664E12, 2270.6], [1.728501E12, 1173.0], [1.72850322E12, 1423.2999999999993], [1.72850544E12, 1831.8999999999987], [1.72850766E12, 2279.3999999999996], [1.72850202E12, 1344.8999999999999], [1.72850526E12, 1797.1999999999994], [1.72850784E12, 2286.3999999999996], [1.7284998E12, 1172.2], [1.72850424E12, 1840.3999999999996], [1.7285034E12, 1377.05], [1.72850016E12, 1248.0], [1.72850118E12, 1196.8999999999999], [1.72850562E12, 1766.0], [1.72850748E12, 2415.0], [1.7285022E12, 1403.5], [1.72849998E12, 1192.1], [1.72850442E12, 1859.35], [1.72850646E12, 2263.0], [1.7285055E12, 1812.7499999999998], [1.72850004E12, 1144.0], [1.72850226E12, 1329.75], [1.72850448E12, 1847.65], [1.7285067E12, 2385.1], [1.72850106E12, 1213.3999999999996], [1.7285043E12, 1861.8999999999999], [1.72850688E12, 2245.399999999998], [1.72850328E12, 1266.1999999999998], [1.7285079E12, 2235.649999999999], [1.72850244E12, 1372.9], [1.72850022E12, 1190.9999999999986], [1.72850466E12, 1834.0], [1.72850652E12, 2343.7], [1.72850772E12, 2255.0], [1.72850124E12, 1188.5], [1.72850346E12, 1305.9999999999995], [1.72850568E12, 1823.0], [1.72849968E12, 1160.1999999999994], [1.72850292E12, 1411.25], [1.72850634E12, 2323.7], [1.7285007E12, 1131.25], [1.72850514E12, 1842.1499999999996], [1.72850754E12, 2278.95], [1.72850172E12, 1106.799999999999], [1.72850394E12, 1363.0999999999995], [1.72850616E12, 1789.4499999999985], [1.72849986E12, 1115.8999999999999], [1.7285031E12, 1337.9999999999995], [1.72850532E12, 1870.5499999999997], [1.72850208E12, 1385.1], [1.72850718E12, 2331.7999999999997], [1.72850412E12, 1854.75], [1.72850736E12, 2366.5], [1.72850088E12, 1145.6999999999996], [1.7285019E12, 1342.8], [1.7285076E12, 2311.7], [1.72850418E12, 1774.8999999999994], [1.72849974E12, 1177.3999999999992], [1.72850196E12, 1380.4999999999995], [1.72850622E12, 1497.3999999999999], [1.72850658E12, 2364.7], [1.7285052E12, 1904.7999999999997], [1.72850076E12, 1166.1999999999998], [1.72850298E12, 1379.3], [1.72850112E12, 1162.3999999999999], [1.72850214E12, 1346.3999999999996], [1.72850436E12, 1875.1499999999994], [1.72849992E12, 1142.7999999999997], [1.72850316E12, 1388.0], [1.7285064E12, 2338.7], [1.72850538E12, 1894.0], [1.72850094E12, 1178.6999999999998], [1.72850742E12, 2299.4], [1.7285016E12, 1207.5], [1.72850262E12, 1391.0], [1.72850484E12, 1901.9999999999998], [1.72850364E12, 1402.6999999999998], [1.7285004E12, 1224.85], [1.72850142E12, 1198.0], [1.72850586E12, 1817.0], [1.72850724E12, 2270.8499999999985], [1.72850178E12, 1205.0], [1.72850808E12, 2350.4499999999975], [1.72850502E12, 1847.0], [1.728504E12, 1173.1999999999998], [1.72850058E12, 1184.3999999999999], [1.72850382E12, 1408.5999999999997], [1.72850604E12, 1832.7999999999997], [1.72850706E12, 2316.5], [1.7285028E12, 1393.6999999999998], [1.72850388E12, 1339.5], [1.7285073E12, 2269.849999999999], [1.72850064E12, 1198.5499999999997], [1.72850166E12, 1196.1999999999998], [1.7285061E12, 1892.0], [1.72850268E12, 1368.7999999999997], [1.72850046E12, 1228.6499999999994], [1.7285049E12, 1832.0], [1.72850628E12, 2173.5999999999995], [1.72850082E12, 1178.3], [1.72850712E12, 2385.599999999997], [1.72850406E12, 1874.1], [1.72850304E12, 1390.9499999999998], [1.72850814E12, 1666.2000000000005], [1.72849962E12, 1191.65], [1.72850184E12, 1395.4499999999998], [1.72850286E12, 1345.75], [1.72850508E12, 1830.0], [1.7285013E12, 1109.4], [1.72850454E12, 1884.0], [1.72850352E12, 1358.4999999999998], [1.72850796E12, 2486.75], [1.7285001E12, 1202.2999999999997], [1.72850334E12, 1361.0], [1.72850556E12, 1865.0], [1.72850232E12, 1316.1999999999996], [1.72850694E12, 2337.4999999999995], [1.72850778E12, 2319.299999999999], [1.72850148E12, 1236.05], [1.7285037E12, 1327.5], [1.72850592E12, 1837.1999999999998], [1.72850574E12, 1842.7999999999997], [1.72850676E12, 2341.0], [1.72850028E12, 1174.9499999999996], [1.7285025E12, 1349.5], [1.72850472E12, 1841.3999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72850034E12, 44.0], [1.72850358E12, 40.0], [1.7285058E12, 49.0], [1.72850256E12, 40.0], [1.728507E12, 64.0], [1.72850136E12, 43.0], [1.72850238E12, 40.0], [1.7285046E12, 53.0], [1.7285082E12, 93.0], [1.72850598E12, 38.0], [1.72850682E12, 67.0], [1.72850052E12, 41.0], [1.72850274E12, 45.0], [1.72850496E12, 50.0], [1.72850154E12, 36.0], [1.72850478E12, 38.0], [1.72850802E12, 27.0], [1.72850376E12, 41.0], [1.72850664E12, 68.0], [1.728501E12, 33.0], [1.72850322E12, 36.0], [1.72850544E12, 46.0], [1.72850766E12, 63.0], [1.72850202E12, 36.0], [1.72850526E12, 45.0], [1.72850784E12, 68.0], [1.7284998E12, 41.0], [1.72850424E12, 41.0], [1.7285034E12, 39.0], [1.72850016E12, 39.0], [1.72850118E12, 38.0], [1.72850562E12, 41.0], [1.72850748E12, 69.0], [1.7285022E12, 39.0], [1.72849998E12, 43.0], [1.72850442E12, 47.0], [1.72850646E12, 65.0], [1.7285055E12, 45.0], [1.72850004E12, 39.0], [1.72850226E12, 39.0], [1.72850448E12, 50.0], [1.7285067E12, 74.0], [1.72850106E12, 36.0], [1.7285043E12, 38.0], [1.72850688E12, 68.0], [1.72850328E12, 44.0], [1.7285079E12, 67.0], [1.72850244E12, 44.0], [1.72850022E12, 37.0], [1.72850466E12, 42.0], [1.72850652E12, 71.0], [1.72850772E12, 71.0], [1.72850124E12, 39.0], [1.72850346E12, 42.0], [1.72850568E12, 42.0], [1.72849968E12, 43.0], [1.72850292E12, 37.0], [1.72850634E12, 66.0], [1.7285007E12, 39.0], [1.72850514E12, 45.0], [1.72850754E12, 39.0], [1.72850172E12, 41.0], [1.72850394E12, 40.0], [1.72850616E12, 39.0], [1.72849986E12, 38.0], [1.7285031E12, 41.0], [1.72850532E12, 45.0], [1.72850208E12, 41.0], [1.72850718E12, 67.0], [1.72850412E12, 49.0], [1.72850736E12, 66.0], [1.72850088E12, 40.0], [1.7285019E12, 39.0], [1.7285076E12, 67.0], [1.72850418E12, 44.0], [1.72849974E12, 40.0], [1.72850196E12, 44.0], [1.72850622E12, 39.0], [1.72850658E12, 64.0], [1.7285052E12, 43.0], [1.72850076E12, 39.0], [1.72850298E12, 41.0], [1.72850112E12, 43.0], [1.72850214E12, 45.0], [1.72850436E12, 39.0], [1.72849992E12, 37.0], [1.72850316E12, 44.0], [1.7285064E12, 67.0], [1.72850538E12, 51.0], [1.72850094E12, 40.0], [1.72850742E12, 66.0], [1.7285016E12, 35.0], [1.72850262E12, 39.0], [1.72850484E12, 40.0], [1.72850364E12, 35.0], [1.7285004E12, 35.0], [1.72850142E12, 41.0], [1.72850586E12, 46.0], [1.72850724E12, 60.0], [1.72850178E12, 43.0], [1.72850808E12, 66.0], [1.72850502E12, 43.0], [1.728504E12, 39.0], [1.72850058E12, 36.0], [1.72850382E12, 39.0], [1.72850604E12, 45.0], [1.72850706E12, 70.0], [1.7285028E12, 36.0], [1.72850388E12, 37.0], [1.7285073E12, 63.0], [1.72850064E12, 40.0], [1.72850166E12, 42.0], [1.7285061E12, 49.0], [1.72850268E12, 43.0], [1.72850046E12, 40.0], [1.7285049E12, 46.0], [1.72850628E12, 50.0], [1.72850082E12, 35.0], [1.72850712E12, 67.0], [1.72850406E12, 42.0], [1.72850304E12, 41.0], [1.72850814E12, 47.0], [1.72849962E12, 46.0], [1.72850184E12, 36.0], [1.72850286E12, 37.0], [1.72850508E12, 44.0], [1.7285013E12, 37.0], [1.72850454E12, 51.0], [1.72850352E12, 44.0], [1.72850796E12, 66.0], [1.7285001E12, 42.0], [1.72850334E12, 37.0], [1.72850556E12, 37.0], [1.72850232E12, 42.0], [1.72850694E12, 62.0], [1.72850778E12, 62.0], [1.72850148E12, 42.0], [1.7285037E12, 35.0], [1.72850592E12, 42.0], [1.72850574E12, 50.0], [1.72850676E12, 55.0], [1.72850028E12, 36.0], [1.7285025E12, 48.0], [1.72850472E12, 45.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72850034E12, 447.0], [1.72850358E12, 456.5], [1.7285058E12, 668.0], [1.72850256E12, 495.0], [1.728507E12, 916.0], [1.72850136E12, 449.0], [1.72850238E12, 465.0], [1.7285046E12, 662.5], [1.7285082E12, 713.0], [1.72850598E12, 582.0], [1.72850682E12, 806.0], [1.72850052E12, 419.5], [1.72850274E12, 436.0], [1.72850496E12, 703.0], [1.72850154E12, 480.0], [1.72850478E12, 648.0], [1.72850802E12, 905.5], [1.72850376E12, 479.5], [1.72850664E12, 847.0], [1.728501E12, 426.0], [1.72850322E12, 461.0], [1.72850544E12, 712.0], [1.72850766E12, 788.0], [1.72850202E12, 445.0], [1.72850526E12, 609.0], [1.72850784E12, 896.0], [1.7284998E12, 457.0], [1.72850424E12, 644.0], [1.7285034E12, 514.0], [1.72850016E12, 483.0], [1.72850118E12, 411.5], [1.72850562E12, 584.5], [1.72850748E12, 1023.0], [1.7285022E12, 460.0], [1.72849998E12, 407.0], [1.72850442E12, 734.0], [1.72850646E12, 837.0], [1.7285055E12, 516.0], [1.72850004E12, 470.0], [1.72850226E12, 485.0], [1.72850448E12, 691.0], [1.7285067E12, 878.0], [1.72850106E12, 419.0], [1.7285043E12, 717.0], [1.72850688E12, 874.0], [1.72850328E12, 489.5], [1.7285079E12, 784.0], [1.72850244E12, 538.0], [1.72850022E12, 415.0], [1.72850466E12, 546.0], [1.72850652E12, 746.0], [1.72850772E12, 826.0], [1.72850124E12, 427.0], [1.72850346E12, 481.0], [1.72850568E12, 673.0], [1.72849968E12, 278.0], [1.72850292E12, 559.0], [1.72850634E12, 812.0], [1.7285007E12, 453.0], [1.72850514E12, 654.5], [1.72850754E12, 865.5], [1.72850172E12, 347.0], [1.72850394E12, 520.5], [1.72850616E12, 697.0], [1.72849986E12, 333.5], [1.7285031E12, 407.0], [1.72850532E12, 546.5], [1.72850208E12, 454.0], [1.72850718E12, 740.0], [1.72850412E12, 592.5], [1.72850736E12, 941.5], [1.72850088E12, 367.5], [1.7285019E12, 438.0], [1.7285076E12, 915.0], [1.72850418E12, 613.0], [1.72849974E12, 428.0], [1.72850196E12, 497.0], [1.72850622E12, 482.0], [1.72850658E12, 811.5], [1.7285052E12, 708.0], [1.72850076E12, 433.0], [1.72850298E12, 537.0], [1.72850112E12, 423.0], [1.72850214E12, 560.0], [1.72850436E12, 671.0], [1.72849992E12, 419.0], [1.72850316E12, 499.0], [1.7285064E12, 795.5], [1.72850538E12, 584.0], [1.72850094E12, 447.0], [1.72850742E12, 811.0], [1.7285016E12, 413.0], [1.72850262E12, 501.0], [1.72850484E12, 664.0], [1.72850364E12, 527.0], [1.7285004E12, 511.0], [1.72850142E12, 516.0], [1.72850586E12, 653.0], [1.72850724E12, 837.0], [1.72850178E12, 472.0], [1.72850808E12, 739.0], [1.72850502E12, 717.0], [1.728504E12, 428.0], [1.72850058E12, 427.0], [1.72850382E12, 520.0], [1.72850604E12, 670.5], [1.72850706E12, 873.0], [1.7285028E12, 513.5], [1.72850388E12, 511.5], [1.7285073E12, 877.5], [1.72850064E12, 464.5], [1.72850166E12, 343.5], [1.7285061E12, 654.5], [1.72850268E12, 445.5], [1.72850046E12, 520.0], [1.7285049E12, 609.0], [1.72850628E12, 583.0], [1.72850082E12, 372.0], [1.72850712E12, 719.0], [1.72850406E12, 533.5], [1.72850304E12, 503.0], [1.72850814E12, 552.0], [1.72849962E12, 417.0], [1.72850184E12, 550.5], [1.72850286E12, 510.5], [1.72850508E12, 519.5], [1.7285013E12, 343.0], [1.72850454E12, 694.0], [1.72850352E12, 537.5], [1.72850796E12, 984.5], [1.7285001E12, 442.0], [1.72850334E12, 414.0], [1.72850556E12, 685.0], [1.72850232E12, 475.0], [1.72850694E12, 884.0], [1.72850778E12, 818.0], [1.72850148E12, 430.0], [1.7285037E12, 487.5], [1.72850592E12, 593.5], [1.72850574E12, 699.0], [1.72850676E12, 894.0], [1.72850028E12, 392.5], [1.7285025E12, 529.0], [1.72850472E12, 678.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7285082E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 233.5, "minX": 1.0, "maxY": 845.5, "series": [{"data": [[2.0, 732.5], [33.0, 247.0], [32.0, 332.0], [3.0, 678.0], [4.0, 635.0], [5.0, 635.5], [6.0, 598.0], [7.0, 574.0], [8.0, 550.5], [9.0, 533.0], [10.0, 571.0], [11.0, 619.5], [12.0, 640.0], [13.0, 690.0], [14.0, 646.0], [15.0, 622.0], [1.0, 845.5], [16.0, 591.0], [17.0, 550.0], [18.0, 480.0], [19.0, 467.0], [20.0, 418.5], [21.0, 411.0], [22.0, 371.5], [23.0, 309.0], [24.0, 306.5], [25.0, 294.5], [26.0, 287.5], [27.0, 286.0], [28.0, 233.5], [29.0, 236.0], [30.0, 274.5], [31.0, 248.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 141.0, "minX": 1.0, "maxY": 550.0, "series": [{"data": [[2.0, 505.5], [33.0, 174.0], [32.0, 204.5], [3.0, 445.0], [4.0, 441.0], [5.0, 421.5], [6.0, 416.0], [7.0, 394.0], [8.0, 385.0], [9.0, 377.0], [10.0, 406.0], [11.0, 436.0], [12.0, 452.0], [13.0, 483.0], [14.0, 460.5], [15.0, 449.5], [1.0, 550.0], [16.0, 429.0], [17.0, 398.0], [18.0, 349.0], [19.0, 332.0], [20.0, 292.0], [21.0, 294.0], [22.0, 255.0], [23.0, 189.0], [24.0, 192.0], [25.0, 182.0], [26.0, 175.0], [27.0, 177.0], [28.0, 148.0], [29.0, 141.0], [30.0, 166.0], [31.0, 146.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.72849962E12, "maxY": 17.7, "series": [{"data": [[1.72850034E12, 8.166666666666666], [1.72850358E12, 14.533333333333333], [1.7285058E12, 16.15], [1.72850256E12, 14.383333333333333], [1.728507E12, 16.75], [1.72850136E12, 8.133333333333333], [1.72850238E12, 14.783333333333333], [1.7285046E12, 16.066666666666666], [1.7285082E12, 0.16666666666666666], [1.72850598E12, 17.183333333333334], [1.72850682E12, 17.066666666666666], [1.72850052E12, 8.533333333333333], [1.72850274E12, 15.216666666666667], [1.72850496E12, 15.4], [1.72850154E12, 8.116666666666667], [1.72850478E12, 16.35], [1.72850802E12, 16.8], [1.72850376E12, 14.5], [1.72850664E12, 17.25], [1.728501E12, 8.483333333333333], [1.72850322E12, 14.75], [1.72850544E12, 16.2], [1.72850766E12, 17.466666666666665], [1.72850202E12, 14.883333333333333], [1.72850526E12, 16.55], [1.72850784E12, 16.883333333333333], [1.7284998E12, 4.25], [1.72850424E12, 16.466666666666665], [1.7285034E12, 14.3], [1.72850016E12, 7.983333333333333], [1.72850118E12, 8.6], [1.72850562E12, 17.066666666666666], [1.72850748E12, 15.516666666666667], [1.7285022E12, 14.683333333333334], [1.72849998E12, 8.533333333333333], [1.72850442E12, 15.5], [1.72850646E12, 17.316666666666666], [1.7285055E12, 17.133333333333333], [1.72850004E12, 8.333333333333334], [1.72850226E12, 14.733333333333333], [1.72850448E12, 16.1], [1.7285067E12, 16.633333333333333], [1.72850106E12, 8.416666666666666], [1.7285043E12, 15.5], [1.72850688E12, 16.95], [1.72850328E12, 14.933333333333334], [1.7285079E12, 17.7], [1.72850244E12, 14.016666666666667], [1.72850022E12, 8.383333333333333], [1.72850466E12, 17.316666666666666], [1.72850652E12, 17.683333333333334], [1.72850772E12, 17.383333333333333], [1.72850124E12, 8.483333333333333], [1.72850346E12, 14.883333333333333], [1.72850568E12, 16.4], [1.72849968E12, 4.683333333333334], [1.72850292E12, 13.9], [1.72850634E12, 17.033333333333335], [1.7285007E12, 8.433333333333334], [1.72850514E12, 16.433333333333334], [1.72850754E12, 17.1], [1.72850172E12, 8.516666666666667], [1.72850394E12, 13.85], [1.72850616E12, 15.666666666666666], [1.72849986E12, 5.133333333333334], [1.7285031E12, 15.25], [1.72850532E12, 16.7], [1.72850208E12, 14.683333333333334], [1.72850718E12, 17.55], [1.72850412E12, 16.4], [1.72850736E12, 16.4], [1.72850088E12, 9.0], [1.7285019E12, 15.183333333333334], [1.7285076E12, 16.55], [1.72850418E12, 16.933333333333334], [1.72849974E12, 4.216666666666667], [1.72850196E12, 14.466666666666667], [1.72850622E12, 11.633333333333333], [1.72850658E12, 17.2], [1.7285052E12, 15.883333333333333], [1.72850076E12, 8.616666666666667], [1.72850298E12, 14.216666666666667], [1.72850112E12, 8.516666666666667], [1.72850214E12, 14.366666666666667], [1.72850436E12, 16.133333333333333], [1.72849992E12, 8.7], [1.72850316E12, 14.2], [1.7285064E12, 17.2], [1.72850538E12, 16.65], [1.72850094E12, 8.333333333333334], [1.72850742E12, 17.183333333333334], [1.7285016E12, 8.483333333333333], [1.72850262E12, 14.483333333333333], [1.72850484E12, 16.35], [1.72850364E12, 14.083333333333334], [1.7285004E12, 7.666666666666667], [1.72850142E12, 7.65], [1.72850586E12, 16.35], [1.72850724E12, 17.333333333333332], [1.72850178E12, 5.733333333333333], [1.72850808E12, 17.5], [1.72850502E12, 15.65], [1.728504E12, 8.35], [1.72850058E12, 8.516666666666667], [1.72850382E12, 14.183333333333334], [1.72850604E12, 16.0], [1.72850706E12, 16.483333333333334], [1.7285028E12, 14.2], [1.72850388E12, 14.4], [1.7285073E12, 16.866666666666667], [1.72850064E12, 8.1], [1.72850166E12, 8.966666666666667], [1.7285061E12, 15.933333333333334], [1.72850268E12, 15.0], [1.72850046E12, 7.866666666666666], [1.7285049E12, 16.583333333333332], [1.72850628E12, 13.166666666666666], [1.72850082E12, 8.883333333333333], [1.72850712E12, 17.45], [1.72850406E12, 15.983333333333333], [1.72850304E12, 14.433333333333334], [1.72850814E12, 11.716666666666667], [1.72849962E12, 2.966666666666667], [1.72850184E12, 13.833333333333334], [1.72850286E12, 14.4], [1.72850508E12, 17.2], [1.7285013E12, 9.116666666666667], [1.72850454E12, 15.983333333333333], [1.72850352E12, 14.266666666666667], [1.72850796E12, 15.733333333333333], [1.7285001E12, 8.333333333333334], [1.72850334E12, 15.366666666666667], [1.72850556E12, 15.983333333333333], [1.72850232E12, 14.916666666666666], [1.72850694E12, 17.016666666666666], [1.72850778E12, 17.083333333333332], [1.72850148E12, 8.533333333333333], [1.7285037E12, 14.733333333333333], [1.72850592E12, 16.8], [1.72850574E12, 15.883333333333333], [1.72850676E12, 16.65], [1.72850028E12, 8.8], [1.7285025E12, 14.35], [1.72850472E12, 16.133333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7285082E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.72849962E12, "maxY": 17.7, "series": [{"data": [[1.72850034E12, 8.166666666666666], [1.72850358E12, 14.533333333333333], [1.7285058E12, 16.15], [1.72850256E12, 14.383333333333333], [1.728507E12, 16.75], [1.72850136E12, 8.133333333333333], [1.72850238E12, 14.783333333333333], [1.7285046E12, 16.066666666666666], [1.7285082E12, 0.16666666666666666], [1.72850598E12, 17.183333333333334], [1.72850682E12, 17.066666666666666], [1.72850052E12, 8.533333333333333], [1.72850274E12, 15.216666666666667], [1.72850496E12, 15.4], [1.72850154E12, 8.116666666666667], [1.72850478E12, 16.35], [1.72850802E12, 16.8], [1.72850376E12, 14.5], [1.72850664E12, 17.25], [1.728501E12, 8.483333333333333], [1.72850322E12, 14.75], [1.72850544E12, 16.2], [1.72850766E12, 17.466666666666665], [1.72850202E12, 14.883333333333333], [1.72850526E12, 16.55], [1.72850784E12, 16.883333333333333], [1.7284998E12, 4.25], [1.72850424E12, 16.466666666666665], [1.7285034E12, 14.3], [1.72850016E12, 7.983333333333333], [1.72850118E12, 8.6], [1.72850562E12, 17.066666666666666], [1.72850748E12, 15.516666666666667], [1.7285022E12, 14.683333333333334], [1.72849998E12, 8.533333333333333], [1.72850442E12, 15.5], [1.72850646E12, 17.316666666666666], [1.7285055E12, 17.133333333333333], [1.72850004E12, 8.333333333333334], [1.72850226E12, 14.733333333333333], [1.72850448E12, 16.1], [1.7285067E12, 16.633333333333333], [1.72850106E12, 8.416666666666666], [1.7285043E12, 15.5], [1.72850688E12, 16.95], [1.72850328E12, 14.933333333333334], [1.7285079E12, 17.7], [1.72850244E12, 14.016666666666667], [1.72850022E12, 8.383333333333333], [1.72850466E12, 17.316666666666666], [1.72850652E12, 17.683333333333334], [1.72850772E12, 17.383333333333333], [1.72850124E12, 8.483333333333333], [1.72850346E12, 14.883333333333333], [1.72850568E12, 16.4], [1.72849968E12, 4.683333333333334], [1.72850292E12, 13.9], [1.72850634E12, 17.033333333333335], [1.7285007E12, 8.433333333333334], [1.72850514E12, 16.433333333333334], [1.72850754E12, 17.1], [1.72850172E12, 8.533333333333333], [1.72850394E12, 13.866666666666667], [1.72850616E12, 15.7], [1.72849986E12, 5.1], [1.7285031E12, 15.25], [1.72850532E12, 16.7], [1.72850208E12, 14.683333333333334], [1.72850718E12, 17.55], [1.72850412E12, 16.4], [1.72850736E12, 16.4], [1.72850088E12, 9.0], [1.7285019E12, 15.183333333333334], [1.7285076E12, 16.55], [1.72850418E12, 16.933333333333334], [1.72849974E12, 4.216666666666667], [1.72850196E12, 14.466666666666667], [1.72850622E12, 11.75], [1.72850658E12, 17.2], [1.7285052E12, 15.883333333333333], [1.72850076E12, 8.616666666666667], [1.72850298E12, 14.216666666666667], [1.72850112E12, 8.516666666666667], [1.72850214E12, 14.366666666666667], [1.72850436E12, 16.133333333333333], [1.72849992E12, 8.7], [1.72850316E12, 14.2], [1.7285064E12, 17.2], [1.72850538E12, 16.65], [1.72850094E12, 8.333333333333334], [1.72850742E12, 17.183333333333334], [1.7285016E12, 8.483333333333333], [1.72850262E12, 14.483333333333333], [1.72850484E12, 16.35], [1.72850364E12, 14.083333333333334], [1.7285004E12, 7.666666666666667], [1.72850142E12, 7.65], [1.72850586E12, 16.35], [1.72850724E12, 17.333333333333332], [1.72850178E12, 5.65], [1.72850808E12, 17.533333333333335], [1.72850502E12, 15.65], [1.728504E12, 8.45], [1.72850058E12, 8.516666666666667], [1.72850382E12, 14.183333333333334], [1.72850604E12, 16.0], [1.72850706E12, 16.483333333333334], [1.7285028E12, 14.2], [1.72850388E12, 14.4], [1.7285073E12, 16.866666666666667], [1.72850064E12, 8.1], [1.72850166E12, 8.966666666666667], [1.7285061E12, 15.933333333333334], [1.72850268E12, 15.0], [1.72850046E12, 7.866666666666666], [1.7285049E12, 16.583333333333332], [1.72850628E12, 12.95], [1.72850082E12, 8.883333333333333], [1.72850712E12, 17.45], [1.72850406E12, 15.8], [1.72850304E12, 14.433333333333334], [1.72850814E12, 11.95], [1.72849962E12, 2.933333333333333], [1.72850184E12, 13.833333333333334], [1.72850286E12, 14.4], [1.72850508E12, 17.2], [1.7285013E12, 9.116666666666667], [1.72850454E12, 15.983333333333333], [1.72850352E12, 14.266666666666667], [1.72850796E12, 15.733333333333333], [1.7285001E12, 8.333333333333334], [1.72850334E12, 15.366666666666667], [1.72850556E12, 15.983333333333333], [1.72850232E12, 14.916666666666666], [1.72850694E12, 17.016666666666666], [1.72850778E12, 17.083333333333332], [1.72850148E12, 8.533333333333333], [1.7285037E12, 14.733333333333333], [1.72850592E12, 16.8], [1.72850574E12, 15.883333333333333], [1.72850676E12, 16.65], [1.72850028E12, 8.8], [1.7285025E12, 14.35], [1.72850472E12, 16.133333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7285082E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.72849962E12, "maxY": 17.7, "series": [{"data": [[1.72850034E12, 8.166666666666666], [1.72850358E12, 14.533333333333333], [1.7285058E12, 16.15], [1.72850256E12, 14.383333333333333], [1.728507E12, 16.75], [1.72850136E12, 8.133333333333333], [1.72850238E12, 14.783333333333333], [1.7285046E12, 16.066666666666666], [1.7285082E12, 0.16666666666666666], [1.72850598E12, 17.183333333333334], [1.72850682E12, 17.066666666666666], [1.72850052E12, 8.533333333333333], [1.72850274E12, 15.216666666666667], [1.72850496E12, 15.4], [1.72850154E12, 8.116666666666667], [1.72850478E12, 16.35], [1.72850802E12, 16.8], [1.72850376E12, 14.5], [1.72850664E12, 17.25], [1.728501E12, 8.483333333333333], [1.72850322E12, 14.75], [1.72850544E12, 16.2], [1.72850766E12, 17.466666666666665], [1.72850202E12, 14.883333333333333], [1.72850526E12, 16.55], [1.72850784E12, 16.883333333333333], [1.7284998E12, 4.25], [1.72850424E12, 16.466666666666665], [1.7285034E12, 14.3], [1.72850016E12, 7.983333333333333], [1.72850118E12, 8.6], [1.72850562E12, 17.066666666666666], [1.72850748E12, 15.516666666666667], [1.7285022E12, 14.683333333333334], [1.72849998E12, 8.533333333333333], [1.72850442E12, 15.5], [1.72850646E12, 17.316666666666666], [1.7285055E12, 17.133333333333333], [1.72850004E12, 8.333333333333334], [1.72850226E12, 14.733333333333333], [1.72850448E12, 16.1], [1.7285067E12, 16.633333333333333], [1.72850106E12, 8.416666666666666], [1.7285043E12, 15.5], [1.72850688E12, 16.95], [1.72850328E12, 14.933333333333334], [1.7285079E12, 17.7], [1.72850244E12, 14.016666666666667], [1.72850022E12, 8.383333333333333], [1.72850466E12, 17.316666666666666], [1.72850652E12, 17.683333333333334], [1.72850772E12, 17.383333333333333], [1.72850124E12, 8.483333333333333], [1.72850346E12, 14.883333333333333], [1.72850568E12, 16.4], [1.72849968E12, 4.683333333333334], [1.72850292E12, 13.9], [1.72850634E12, 17.033333333333335], [1.7285007E12, 8.433333333333334], [1.72850514E12, 16.433333333333334], [1.72850754E12, 17.1], [1.72850172E12, 8.533333333333333], [1.72850394E12, 13.866666666666667], [1.72850616E12, 15.7], [1.72849986E12, 5.1], [1.7285031E12, 15.25], [1.72850532E12, 16.7], [1.72850208E12, 14.683333333333334], [1.72850718E12, 17.55], [1.72850412E12, 16.4], [1.72850736E12, 16.4], [1.72850088E12, 9.0], [1.7285019E12, 15.183333333333334], [1.7285076E12, 16.55], [1.72850418E12, 16.933333333333334], [1.72849974E12, 4.216666666666667], [1.72850196E12, 14.466666666666667], [1.72850622E12, 11.75], [1.72850658E12, 17.2], [1.7285052E12, 15.883333333333333], [1.72850076E12, 8.616666666666667], [1.72850298E12, 14.216666666666667], [1.72850112E12, 8.516666666666667], [1.72850214E12, 14.366666666666667], [1.72850436E12, 16.133333333333333], [1.72849992E12, 8.7], [1.72850316E12, 14.2], [1.7285064E12, 17.2], [1.72850538E12, 16.65], [1.72850094E12, 8.333333333333334], [1.72850742E12, 17.183333333333334], [1.7285016E12, 8.483333333333333], [1.72850262E12, 14.483333333333333], [1.72850484E12, 16.35], [1.72850364E12, 14.083333333333334], [1.7285004E12, 7.666666666666667], [1.72850142E12, 7.65], [1.72850586E12, 16.35], [1.72850724E12, 17.333333333333332], [1.72850178E12, 5.65], [1.72850808E12, 17.533333333333335], [1.72850502E12, 15.65], [1.728504E12, 8.45], [1.72850058E12, 8.516666666666667], [1.72850382E12, 14.183333333333334], [1.72850604E12, 16.0], [1.72850706E12, 16.483333333333334], [1.7285028E12, 14.2], [1.72850388E12, 14.4], [1.7285073E12, 16.866666666666667], [1.72850064E12, 8.1], [1.72850166E12, 8.966666666666667], [1.7285061E12, 15.933333333333334], [1.72850268E12, 15.0], [1.72850046E12, 7.866666666666666], [1.7285049E12, 16.583333333333332], [1.72850628E12, 12.95], [1.72850082E12, 8.883333333333333], [1.72850712E12, 17.45], [1.72850406E12, 15.8], [1.72850304E12, 14.433333333333334], [1.72850814E12, 11.95], [1.72849962E12, 2.933333333333333], [1.72850184E12, 13.833333333333334], [1.72850286E12, 14.4], [1.72850508E12, 17.2], [1.7285013E12, 9.116666666666667], [1.72850454E12, 15.983333333333333], [1.72850352E12, 14.266666666666667], [1.72850796E12, 15.733333333333333], [1.7285001E12, 8.333333333333334], [1.72850334E12, 15.366666666666667], [1.72850556E12, 15.983333333333333], [1.72850232E12, 14.916666666666666], [1.72850694E12, 17.016666666666666], [1.72850778E12, 17.083333333333332], [1.72850148E12, 8.533333333333333], [1.7285037E12, 14.733333333333333], [1.72850592E12, 16.8], [1.72850574E12, 15.883333333333333], [1.72850676E12, 16.65], [1.72850028E12, 8.8], [1.7285025E12, 14.35], [1.72850472E12, 16.133333333333333]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7285082E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.72849962E12, "maxY": 17.7, "series": [{"data": [[1.72850034E12, 8.166666666666666], [1.72850358E12, 14.533333333333333], [1.7285058E12, 16.15], [1.72850256E12, 14.383333333333333], [1.728507E12, 16.75], [1.72850136E12, 8.133333333333333], [1.72850238E12, 14.783333333333333], [1.7285046E12, 16.066666666666666], [1.7285082E12, 0.16666666666666666], [1.72850598E12, 17.183333333333334], [1.72850682E12, 17.066666666666666], [1.72850052E12, 8.533333333333333], [1.72850274E12, 15.216666666666667], [1.72850496E12, 15.4], [1.72850154E12, 8.116666666666667], [1.72850478E12, 16.35], [1.72850802E12, 16.8], [1.72850376E12, 14.5], [1.72850664E12, 17.25], [1.728501E12, 8.483333333333333], [1.72850322E12, 14.75], [1.72850544E12, 16.2], [1.72850766E12, 17.466666666666665], [1.72850202E12, 14.883333333333333], [1.72850526E12, 16.55], [1.72850784E12, 16.883333333333333], [1.7284998E12, 4.25], [1.72850424E12, 16.466666666666665], [1.7285034E12, 14.3], [1.72850016E12, 7.983333333333333], [1.72850118E12, 8.6], [1.72850562E12, 17.066666666666666], [1.72850748E12, 15.516666666666667], [1.7285022E12, 14.683333333333334], [1.72849998E12, 8.533333333333333], [1.72850442E12, 15.5], [1.72850646E12, 17.316666666666666], [1.7285055E12, 17.133333333333333], [1.72850004E12, 8.333333333333334], [1.72850226E12, 14.733333333333333], [1.72850448E12, 16.1], [1.7285067E12, 16.633333333333333], [1.72850106E12, 8.416666666666666], [1.7285043E12, 15.5], [1.72850688E12, 16.95], [1.72850328E12, 14.933333333333334], [1.7285079E12, 17.7], [1.72850244E12, 14.016666666666667], [1.72850022E12, 8.383333333333333], [1.72850466E12, 17.316666666666666], [1.72850652E12, 17.683333333333334], [1.72850772E12, 17.383333333333333], [1.72850124E12, 8.483333333333333], [1.72850346E12, 14.883333333333333], [1.72850568E12, 16.4], [1.72849968E12, 4.683333333333334], [1.72850292E12, 13.9], [1.72850634E12, 17.033333333333335], [1.7285007E12, 8.433333333333334], [1.72850514E12, 16.433333333333334], [1.72850754E12, 17.1], [1.72850172E12, 8.533333333333333], [1.72850394E12, 13.866666666666667], [1.72850616E12, 15.7], [1.72849986E12, 5.1], [1.7285031E12, 15.25], [1.72850532E12, 16.7], [1.72850208E12, 14.683333333333334], [1.72850718E12, 17.55], [1.72850412E12, 16.4], [1.72850736E12, 16.4], [1.72850088E12, 9.0], [1.7285019E12, 15.183333333333334], [1.7285076E12, 16.55], [1.72850418E12, 16.933333333333334], [1.72849974E12, 4.216666666666667], [1.72850196E12, 14.466666666666667], [1.72850622E12, 11.75], [1.72850658E12, 17.2], [1.7285052E12, 15.883333333333333], [1.72850076E12, 8.616666666666667], [1.72850298E12, 14.216666666666667], [1.72850112E12, 8.516666666666667], [1.72850214E12, 14.366666666666667], [1.72850436E12, 16.133333333333333], [1.72849992E12, 8.7], [1.72850316E12, 14.2], [1.7285064E12, 17.2], [1.72850538E12, 16.65], [1.72850094E12, 8.333333333333334], [1.72850742E12, 17.183333333333334], [1.7285016E12, 8.483333333333333], [1.72850262E12, 14.483333333333333], [1.72850484E12, 16.35], [1.72850364E12, 14.083333333333334], [1.7285004E12, 7.666666666666667], [1.72850142E12, 7.65], [1.72850586E12, 16.35], [1.72850724E12, 17.333333333333332], [1.72850178E12, 5.65], [1.72850808E12, 17.533333333333335], [1.72850502E12, 15.65], [1.728504E12, 8.45], [1.72850058E12, 8.516666666666667], [1.72850382E12, 14.183333333333334], [1.72850604E12, 16.0], [1.72850706E12, 16.483333333333334], [1.7285028E12, 14.2], [1.72850388E12, 14.4], [1.7285073E12, 16.866666666666667], [1.72850064E12, 8.1], [1.72850166E12, 8.966666666666667], [1.7285061E12, 15.933333333333334], [1.72850268E12, 15.0], [1.72850046E12, 7.866666666666666], [1.7285049E12, 16.583333333333332], [1.72850628E12, 12.95], [1.72850082E12, 8.883333333333333], [1.72850712E12, 17.45], [1.72850406E12, 15.8], [1.72850304E12, 14.433333333333334], [1.72850814E12, 11.95], [1.72849962E12, 2.933333333333333], [1.72850184E12, 13.833333333333334], [1.72850286E12, 14.4], [1.72850508E12, 17.2], [1.7285013E12, 9.116666666666667], [1.72850454E12, 15.983333333333333], [1.72850352E12, 14.266666666666667], [1.72850796E12, 15.733333333333333], [1.7285001E12, 8.333333333333334], [1.72850334E12, 15.366666666666667], [1.72850556E12, 15.983333333333333], [1.72850232E12, 14.916666666666666], [1.72850694E12, 17.016666666666666], [1.72850778E12, 17.083333333333332], [1.72850148E12, 8.533333333333333], [1.7285037E12, 14.733333333333333], [1.72850592E12, 16.8], [1.72850574E12, 15.883333333333333], [1.72850676E12, 16.65], [1.72850028E12, 8.8], [1.7285025E12, 14.35], [1.72850472E12, 16.133333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7285082E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

