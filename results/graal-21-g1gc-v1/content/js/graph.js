/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 21.0, "minX": 0.0, "maxY": 3689.0, "series": [{"data": [[0.0, 21.0], [0.1, 31.0], [0.2, 33.0], [0.3, 35.0], [0.4, 36.0], [0.5, 37.0], [0.6, 38.0], [0.7, 39.0], [0.8, 40.0], [0.9, 41.0], [1.0, 42.0], [1.1, 42.0], [1.2, 43.0], [1.3, 44.0], [1.4, 44.0], [1.5, 45.0], [1.6, 46.0], [1.7, 46.0], [1.8, 47.0], [1.9, 47.0], [2.0, 48.0], [2.1, 48.0], [2.2, 49.0], [2.3, 49.0], [2.4, 50.0], [2.5, 50.0], [2.6, 50.0], [2.7, 51.0], [2.8, 51.0], [2.9, 52.0], [3.0, 52.0], [3.1, 52.0], [3.2, 53.0], [3.3, 53.0], [3.4, 54.0], [3.5, 54.0], [3.6, 54.0], [3.7, 55.0], [3.8, 55.0], [3.9, 56.0], [4.0, 56.0], [4.1, 56.0], [4.2, 57.0], [4.3, 57.0], [4.4, 57.0], [4.5, 58.0], [4.6, 58.0], [4.7, 58.0], [4.8, 59.0], [4.9, 59.0], [5.0, 59.0], [5.1, 60.0], [5.2, 60.0], [5.3, 60.0], [5.4, 61.0], [5.5, 61.0], [5.6, 61.0], [5.7, 62.0], [5.8, 62.0], [5.9, 62.0], [6.0, 62.0], [6.1, 63.0], [6.2, 63.0], [6.3, 63.0], [6.4, 64.0], [6.5, 64.0], [6.6, 64.0], [6.7, 65.0], [6.8, 65.0], [6.9, 65.0], [7.0, 65.0], [7.1, 66.0], [7.2, 66.0], [7.3, 66.0], [7.4, 67.0], [7.5, 67.0], [7.6, 67.0], [7.7, 68.0], [7.8, 68.0], [7.9, 68.0], [8.0, 68.0], [8.1, 69.0], [8.2, 69.0], [8.3, 69.0], [8.4, 70.0], [8.5, 70.0], [8.6, 70.0], [8.7, 70.0], [8.8, 71.0], [8.9, 71.0], [9.0, 71.0], [9.1, 71.0], [9.2, 72.0], [9.3, 72.0], [9.4, 72.0], [9.5, 73.0], [9.6, 73.0], [9.7, 73.0], [9.8, 73.0], [9.9, 74.0], [10.0, 74.0], [10.1, 74.0], [10.2, 74.0], [10.3, 75.0], [10.4, 75.0], [10.5, 75.0], [10.6, 76.0], [10.7, 76.0], [10.8, 76.0], [10.9, 76.0], [11.0, 77.0], [11.1, 77.0], [11.2, 77.0], [11.3, 78.0], [11.4, 78.0], [11.5, 78.0], [11.6, 78.0], [11.7, 79.0], [11.8, 79.0], [11.9, 79.0], [12.0, 80.0], [12.1, 80.0], [12.2, 80.0], [12.3, 80.0], [12.4, 81.0], [12.5, 81.0], [12.6, 81.0], [12.7, 81.0], [12.8, 82.0], [12.9, 82.0], [13.0, 82.0], [13.1, 83.0], [13.2, 83.0], [13.3, 83.0], [13.4, 84.0], [13.5, 84.0], [13.6, 84.0], [13.7, 84.0], [13.8, 85.0], [13.9, 85.0], [14.0, 85.0], [14.1, 85.0], [14.2, 86.0], [14.3, 86.0], [14.4, 86.0], [14.5, 87.0], [14.6, 87.0], [14.7, 87.0], [14.8, 88.0], [14.9, 88.0], [15.0, 88.0], [15.1, 88.0], [15.2, 89.0], [15.3, 89.0], [15.4, 89.0], [15.5, 89.0], [15.6, 90.0], [15.7, 90.0], [15.8, 90.0], [15.9, 91.0], [16.0, 91.0], [16.1, 91.0], [16.2, 92.0], [16.3, 92.0], [16.4, 92.0], [16.5, 92.0], [16.6, 93.0], [16.7, 93.0], [16.8, 93.0], [16.9, 94.0], [17.0, 94.0], [17.1, 94.0], [17.2, 95.0], [17.3, 95.0], [17.4, 95.0], [17.5, 96.0], [17.6, 96.0], [17.7, 96.0], [17.8, 96.0], [17.9, 97.0], [18.0, 97.0], [18.1, 97.0], [18.2, 98.0], [18.3, 98.0], [18.4, 98.0], [18.5, 99.0], [18.6, 99.0], [18.7, 99.0], [18.8, 100.0], [18.9, 100.0], [19.0, 100.0], [19.1, 101.0], [19.2, 101.0], [19.3, 101.0], [19.4, 102.0], [19.5, 102.0], [19.6, 102.0], [19.7, 103.0], [19.8, 103.0], [19.9, 103.0], [20.0, 104.0], [20.1, 104.0], [20.2, 104.0], [20.3, 105.0], [20.4, 105.0], [20.5, 105.0], [20.6, 106.0], [20.7, 106.0], [20.8, 106.0], [20.9, 107.0], [21.0, 107.0], [21.1, 108.0], [21.2, 108.0], [21.3, 108.0], [21.4, 109.0], [21.5, 109.0], [21.6, 109.0], [21.7, 110.0], [21.8, 110.0], [21.9, 110.0], [22.0, 111.0], [22.1, 111.0], [22.2, 112.0], [22.3, 112.0], [22.4, 112.0], [22.5, 113.0], [22.6, 113.0], [22.7, 114.0], [22.8, 114.0], [22.9, 114.0], [23.0, 115.0], [23.1, 115.0], [23.2, 115.0], [23.3, 116.0], [23.4, 116.0], [23.5, 117.0], [23.6, 117.0], [23.7, 117.0], [23.8, 118.0], [23.9, 118.0], [24.0, 119.0], [24.1, 119.0], [24.2, 119.0], [24.3, 120.0], [24.4, 120.0], [24.5, 121.0], [24.6, 121.0], [24.7, 121.0], [24.8, 122.0], [24.9, 122.0], [25.0, 123.0], [25.1, 123.0], [25.2, 124.0], [25.3, 124.0], [25.4, 124.0], [25.5, 125.0], [25.6, 125.0], [25.7, 126.0], [25.8, 126.0], [25.9, 127.0], [26.0, 127.0], [26.1, 127.0], [26.2, 128.0], [26.3, 128.0], [26.4, 129.0], [26.5, 129.0], [26.6, 130.0], [26.7, 130.0], [26.8, 131.0], [26.9, 131.0], [27.0, 131.0], [27.1, 132.0], [27.2, 132.0], [27.3, 133.0], [27.4, 133.0], [27.5, 134.0], [27.6, 134.0], [27.7, 135.0], [27.8, 135.0], [27.9, 136.0], [28.0, 136.0], [28.1, 137.0], [28.2, 137.0], [28.3, 138.0], [28.4, 138.0], [28.5, 139.0], [28.6, 139.0], [28.7, 140.0], [28.8, 140.0], [28.9, 141.0], [29.0, 141.0], [29.1, 142.0], [29.2, 142.0], [29.3, 143.0], [29.4, 143.0], [29.5, 144.0], [29.6, 144.0], [29.7, 145.0], [29.8, 145.0], [29.9, 146.0], [30.0, 146.0], [30.1, 147.0], [30.2, 148.0], [30.3, 148.0], [30.4, 148.0], [30.5, 149.0], [30.6, 150.0], [30.7, 150.0], [30.8, 151.0], [30.9, 151.0], [31.0, 152.0], [31.1, 153.0], [31.2, 153.0], [31.3, 154.0], [31.4, 154.0], [31.5, 155.0], [31.6, 156.0], [31.7, 156.0], [31.8, 157.0], [31.9, 158.0], [32.0, 158.0], [32.1, 159.0], [32.2, 159.0], [32.3, 160.0], [32.4, 161.0], [32.5, 161.0], [32.6, 162.0], [32.7, 163.0], [32.8, 163.0], [32.9, 164.0], [33.0, 165.0], [33.1, 165.0], [33.2, 166.0], [33.3, 167.0], [33.4, 167.0], [33.5, 168.0], [33.6, 169.0], [33.7, 169.0], [33.8, 170.0], [33.9, 171.0], [34.0, 172.0], [34.1, 172.0], [34.2, 173.0], [34.3, 174.0], [34.4, 175.0], [34.5, 175.0], [34.6, 176.0], [34.7, 177.0], [34.8, 178.0], [34.9, 178.0], [35.0, 179.0], [35.1, 180.0], [35.2, 181.0], [35.3, 182.0], [35.4, 183.0], [35.5, 184.0], [35.6, 184.0], [35.7, 185.0], [35.8, 186.0], [35.9, 187.0], [36.0, 188.0], [36.1, 189.0], [36.2, 189.0], [36.3, 190.0], [36.4, 191.0], [36.5, 192.0], [36.6, 193.0], [36.7, 194.0], [36.8, 195.0], [36.9, 196.0], [37.0, 197.0], [37.1, 198.0], [37.2, 198.0], [37.3, 200.0], [37.4, 200.0], [37.5, 201.0], [37.6, 203.0], [37.7, 204.0], [37.8, 205.0], [37.9, 206.0], [38.0, 207.0], [38.1, 208.0], [38.2, 209.0], [38.3, 210.0], [38.4, 211.0], [38.5, 212.0], [38.6, 213.0], [38.7, 214.0], [38.8, 215.0], [38.9, 216.0], [39.0, 218.0], [39.1, 219.0], [39.2, 220.0], [39.3, 221.0], [39.4, 222.0], [39.5, 224.0], [39.6, 225.0], [39.7, 226.0], [39.8, 227.0], [39.9, 229.0], [40.0, 230.0], [40.1, 231.0], [40.2, 232.0], [40.3, 234.0], [40.4, 235.0], [40.5, 237.0], [40.6, 238.0], [40.7, 239.0], [40.8, 241.0], [40.9, 242.0], [41.0, 244.0], [41.1, 245.0], [41.2, 247.0], [41.3, 248.0], [41.4, 250.0], [41.5, 251.0], [41.6, 253.0], [41.7, 254.0], [41.8, 256.0], [41.9, 257.0], [42.0, 259.0], [42.1, 261.0], [42.2, 263.0], [42.3, 264.0], [42.4, 266.0], [42.5, 268.0], [42.6, 270.0], [42.7, 272.0], [42.8, 274.0], [42.9, 275.0], [43.0, 277.0], [43.1, 279.0], [43.2, 281.0], [43.3, 283.0], [43.4, 285.0], [43.5, 287.0], [43.6, 289.0], [43.7, 291.0], [43.8, 293.0], [43.9, 295.0], [44.0, 297.0], [44.1, 299.0], [44.2, 302.0], [44.3, 304.0], [44.4, 306.0], [44.5, 308.0], [44.6, 310.0], [44.7, 312.0], [44.8, 315.0], [44.9, 317.0], [45.0, 319.0], [45.1, 322.0], [45.2, 324.0], [45.3, 326.0], [45.4, 328.0], [45.5, 331.0], [45.6, 333.0], [45.7, 335.0], [45.8, 337.0], [45.9, 339.0], [46.0, 341.0], [46.1, 343.0], [46.2, 345.0], [46.3, 347.0], [46.4, 350.0], [46.5, 352.0], [46.6, 355.0], [46.7, 357.0], [46.8, 360.0], [46.9, 362.0], [47.0, 365.0], [47.1, 367.0], [47.2, 370.0], [47.3, 372.0], [47.4, 375.0], [47.5, 377.0], [47.6, 380.0], [47.7, 382.0], [47.8, 384.0], [47.9, 386.0], [48.0, 388.0], [48.1, 391.0], [48.2, 394.0], [48.3, 396.0], [48.4, 398.0], [48.5, 401.0], [48.6, 403.0], [48.7, 406.0], [48.8, 408.0], [48.9, 410.0], [49.0, 412.0], [49.1, 414.0], [49.2, 416.0], [49.3, 419.0], [49.4, 421.0], [49.5, 423.0], [49.6, 425.0], [49.7, 428.0], [49.8, 430.0], [49.9, 432.0], [50.0, 434.0], [50.1, 436.0], [50.2, 439.0], [50.3, 441.0], [50.4, 443.0], [50.5, 445.0], [50.6, 447.0], [50.7, 450.0], [50.8, 452.0], [50.9, 454.0], [51.0, 456.0], [51.1, 458.0], [51.2, 460.0], [51.3, 462.0], [51.4, 464.0], [51.5, 467.0], [51.6, 469.0], [51.7, 471.0], [51.8, 473.0], [51.9, 475.0], [52.0, 477.0], [52.1, 479.0], [52.2, 481.0], [52.3, 483.0], [52.4, 485.0], [52.5, 487.0], [52.6, 489.0], [52.7, 491.0], [52.8, 493.0], [52.9, 495.0], [53.0, 497.0], [53.1, 500.0], [53.2, 501.0], [53.3, 503.0], [53.4, 506.0], [53.5, 508.0], [53.6, 510.0], [53.7, 512.0], [53.8, 513.0], [53.9, 515.0], [54.0, 517.0], [54.1, 519.0], [54.2, 521.0], [54.3, 523.0], [54.4, 524.0], [54.5, 526.0], [54.6, 528.0], [54.7, 530.0], [54.8, 531.0], [54.9, 533.0], [55.0, 535.0], [55.1, 537.0], [55.2, 539.0], [55.3, 541.0], [55.4, 543.0], [55.5, 545.0], [55.6, 547.0], [55.7, 549.0], [55.8, 551.0], [55.9, 552.0], [56.0, 554.0], [56.1, 556.0], [56.2, 558.0], [56.3, 559.0], [56.4, 561.0], [56.5, 563.0], [56.6, 565.0], [56.7, 566.0], [56.8, 568.0], [56.9, 570.0], [57.0, 572.0], [57.1, 574.0], [57.2, 576.0], [57.3, 578.0], [57.4, 579.0], [57.5, 581.0], [57.6, 583.0], [57.7, 585.0], [57.8, 587.0], [57.9, 589.0], [58.0, 591.0], [58.1, 592.0], [58.2, 594.0], [58.3, 596.0], [58.4, 598.0], [58.5, 600.0], [58.6, 601.0], [58.7, 603.0], [58.8, 605.0], [58.9, 607.0], [59.0, 608.0], [59.1, 610.0], [59.2, 612.0], [59.3, 613.0], [59.4, 615.0], [59.5, 617.0], [59.6, 619.0], [59.7, 621.0], [59.8, 623.0], [59.9, 625.0], [60.0, 627.0], [60.1, 628.0], [60.2, 630.0], [60.3, 632.0], [60.4, 633.0], [60.5, 635.0], [60.6, 637.0], [60.7, 638.0], [60.8, 640.0], [60.9, 642.0], [61.0, 644.0], [61.1, 645.0], [61.2, 647.0], [61.3, 649.0], [61.4, 651.0], [61.5, 653.0], [61.6, 654.0], [61.7, 656.0], [61.8, 657.0], [61.9, 659.0], [62.0, 661.0], [62.1, 662.0], [62.2, 664.0], [62.3, 666.0], [62.4, 668.0], [62.5, 670.0], [62.6, 672.0], [62.7, 673.0], [62.8, 675.0], [62.9, 677.0], [63.0, 678.0], [63.1, 680.0], [63.2, 682.0], [63.3, 683.0], [63.4, 685.0], [63.5, 687.0], [63.6, 688.0], [63.7, 690.0], [63.8, 691.0], [63.9, 693.0], [64.0, 695.0], [64.1, 697.0], [64.2, 699.0], [64.3, 700.0], [64.4, 702.0], [64.5, 703.0], [64.6, 705.0], [64.7, 707.0], [64.8, 709.0], [64.9, 710.0], [65.0, 712.0], [65.1, 714.0], [65.2, 716.0], [65.3, 718.0], [65.4, 719.0], [65.5, 721.0], [65.6, 723.0], [65.7, 725.0], [65.8, 727.0], [65.9, 728.0], [66.0, 730.0], [66.1, 732.0], [66.2, 734.0], [66.3, 736.0], [66.4, 738.0], [66.5, 739.0], [66.6, 741.0], [66.7, 743.0], [66.8, 745.0], [66.9, 746.0], [67.0, 748.0], [67.1, 750.0], [67.2, 751.0], [67.3, 753.0], [67.4, 755.0], [67.5, 757.0], [67.6, 759.0], [67.7, 760.0], [67.8, 762.0], [67.9, 764.0], [68.0, 766.0], [68.1, 768.0], [68.2, 769.0], [68.3, 771.0], [68.4, 773.0], [68.5, 775.0], [68.6, 777.0], [68.7, 778.0], [68.8, 780.0], [68.9, 782.0], [69.0, 783.0], [69.1, 785.0], [69.2, 787.0], [69.3, 789.0], [69.4, 791.0], [69.5, 792.0], [69.6, 794.0], [69.7, 797.0], [69.8, 798.0], [69.9, 800.0], [70.0, 802.0], [70.1, 804.0], [70.2, 806.0], [70.3, 808.0], [70.4, 809.0], [70.5, 811.0], [70.6, 813.0], [70.7, 815.0], [70.8, 817.0], [70.9, 818.0], [71.0, 820.0], [71.1, 822.0], [71.2, 824.0], [71.3, 826.0], [71.4, 827.0], [71.5, 829.0], [71.6, 831.0], [71.7, 833.0], [71.8, 835.0], [71.9, 837.0], [72.0, 838.0], [72.1, 840.0], [72.2, 842.0], [72.3, 844.0], [72.4, 846.0], [72.5, 848.0], [72.6, 849.0], [72.7, 851.0], [72.8, 853.0], [72.9, 855.0], [73.0, 857.0], [73.1, 859.0], [73.2, 861.0], [73.3, 863.0], [73.4, 865.0], [73.5, 867.0], [73.6, 868.0], [73.7, 870.0], [73.8, 872.0], [73.9, 874.0], [74.0, 876.0], [74.1, 878.0], [74.2, 880.0], [74.3, 881.0], [74.4, 883.0], [74.5, 885.0], [74.6, 887.0], [74.7, 889.0], [74.8, 891.0], [74.9, 894.0], [75.0, 896.0], [75.1, 898.0], [75.2, 900.0], [75.3, 902.0], [75.4, 903.0], [75.5, 905.0], [75.6, 907.0], [75.7, 909.0], [75.8, 911.0], [75.9, 913.0], [76.0, 915.0], [76.1, 917.0], [76.2, 919.0], [76.3, 921.0], [76.4, 923.0], [76.5, 924.0], [76.6, 926.0], [76.7, 928.0], [76.8, 931.0], [76.9, 933.0], [77.0, 935.0], [77.1, 937.0], [77.2, 939.0], [77.3, 941.0], [77.4, 943.0], [77.5, 946.0], [77.6, 948.0], [77.7, 950.0], [77.8, 952.0], [77.9, 955.0], [78.0, 957.0], [78.1, 959.0], [78.2, 961.0], [78.3, 964.0], [78.4, 966.0], [78.5, 968.0], [78.6, 970.0], [78.7, 972.0], [78.8, 975.0], [78.9, 977.0], [79.0, 979.0], [79.1, 982.0], [79.2, 984.0], [79.3, 986.0], [79.4, 988.0], [79.5, 990.0], [79.6, 993.0], [79.7, 995.0], [79.8, 997.0], [79.9, 1000.0], [80.0, 1002.0], [80.1, 1004.0], [80.2, 1006.0], [80.3, 1008.0], [80.4, 1011.0], [80.5, 1013.0], [80.6, 1016.0], [80.7, 1018.0], [80.8, 1021.0], [80.9, 1023.0], [81.0, 1025.0], [81.1, 1028.0], [81.2, 1030.0], [81.3, 1032.0], [81.4, 1034.0], [81.5, 1037.0], [81.6, 1040.0], [81.7, 1042.0], [81.8, 1045.0], [81.9, 1048.0], [82.0, 1050.0], [82.1, 1052.0], [82.2, 1055.0], [82.3, 1058.0], [82.4, 1060.0], [82.5, 1063.0], [82.6, 1065.0], [82.7, 1067.0], [82.8, 1070.0], [82.9, 1072.0], [83.0, 1074.0], [83.1, 1077.0], [83.2, 1080.0], [83.3, 1083.0], [83.4, 1085.0], [83.5, 1088.0], [83.6, 1091.0], [83.7, 1094.0], [83.8, 1097.0], [83.9, 1099.0], [84.0, 1102.0], [84.1, 1105.0], [84.2, 1108.0], [84.3, 1111.0], [84.4, 1114.0], [84.5, 1116.0], [84.6, 1119.0], [84.7, 1122.0], [84.8, 1125.0], [84.9, 1128.0], [85.0, 1131.0], [85.1, 1133.0], [85.2, 1136.0], [85.3, 1139.0], [85.4, 1142.0], [85.5, 1146.0], [85.6, 1148.0], [85.7, 1152.0], [85.8, 1154.0], [85.9, 1157.0], [86.0, 1160.0], [86.1, 1164.0], [86.2, 1167.0], [86.3, 1170.0], [86.4, 1173.0], [86.5, 1177.0], [86.6, 1179.0], [86.7, 1183.0], [86.8, 1186.0], [86.9, 1189.0], [87.0, 1192.0], [87.1, 1195.0], [87.2, 1199.0], [87.3, 1202.0], [87.4, 1205.0], [87.5, 1210.0], [87.6, 1213.0], [87.7, 1216.0], [87.8, 1219.0], [87.9, 1222.0], [88.0, 1226.0], [88.1, 1230.0], [88.2, 1234.0], [88.3, 1237.0], [88.4, 1241.0], [88.5, 1245.0], [88.6, 1248.0], [88.7, 1252.0], [88.8, 1256.0], [88.9, 1260.0], [89.0, 1264.0], [89.1, 1268.0], [89.2, 1271.0], [89.3, 1275.0], [89.4, 1278.0], [89.5, 1283.0], [89.6, 1287.0], [89.7, 1290.0], [89.8, 1294.0], [89.9, 1298.0], [90.0, 1301.0], [90.1, 1305.0], [90.2, 1309.0], [90.3, 1314.0], [90.4, 1318.0], [90.5, 1321.0], [90.6, 1326.0], [90.7, 1330.0], [90.8, 1335.0], [90.9, 1339.0], [91.0, 1344.0], [91.1, 1348.0], [91.2, 1353.0], [91.3, 1357.0], [91.4, 1362.0], [91.5, 1367.0], [91.6, 1371.0], [91.7, 1376.0], [91.8, 1382.0], [91.9, 1387.0], [92.0, 1392.0], [92.1, 1397.0], [92.2, 1402.0], [92.3, 1407.0], [92.4, 1412.0], [92.5, 1417.0], [92.6, 1422.0], [92.7, 1427.0], [92.8, 1433.0], [92.9, 1439.0], [93.0, 1444.0], [93.1, 1450.0], [93.2, 1455.0], [93.3, 1462.0], [93.4, 1467.0], [93.5, 1473.0], [93.6, 1478.0], [93.7, 1485.0], [93.8, 1492.0], [93.9, 1499.0], [94.0, 1505.0], [94.1, 1510.0], [94.2, 1518.0], [94.3, 1524.0], [94.4, 1531.0], [94.5, 1537.0], [94.6, 1544.0], [94.7, 1549.0], [94.8, 1555.0], [94.9, 1563.0], [95.0, 1570.0], [95.1, 1578.0], [95.2, 1588.0], [95.3, 1596.0], [95.4, 1603.0], [95.5, 1611.0], [95.6, 1618.0], [95.7, 1627.0], [95.8, 1635.0], [95.9, 1644.0], [96.0, 1652.0], [96.1, 1662.0], [96.2, 1672.0], [96.3, 1682.0], [96.4, 1693.0], [96.5, 1704.0], [96.6, 1715.0], [96.7, 1727.0], [96.8, 1736.0], [96.9, 1746.0], [97.0, 1756.0], [97.1, 1767.0], [97.2, 1778.0], [97.3, 1793.0], [97.4, 1805.0], [97.5, 1818.0], [97.6, 1832.0], [97.7, 1846.0], [97.8, 1863.0], [97.9, 1881.0], [98.0, 1897.0], [98.1, 1914.0], [98.2, 1934.0], [98.3, 1955.0], [98.4, 1974.0], [98.5, 1994.0], [98.6, 2017.0], [98.7, 2039.0], [98.8, 2065.0], [98.9, 2090.0], [99.0, 2121.0], [99.1, 2151.0], [99.2, 2191.0], [99.3, 2230.0], [99.4, 2270.0], [99.5, 2323.0], [99.6, 2394.0], [99.7, 2483.0], [99.8, 2597.0], [99.9, 2780.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 22005.0, "series": [{"data": [[0.0, 22005.0], [600.0, 6752.0], [700.0, 6590.0], [800.0, 6219.0], [900.0, 5529.0], [1000.0, 4717.0], [1100.0, 3878.0], [1200.0, 3195.0], [1300.0, 2585.0], [1400.0, 2044.0], [1500.0, 1700.0], [100.0, 21708.0], [1600.0, 1293.0], [1700.0, 1037.0], [1800.0, 783.0], [1900.0, 609.0], [2000.0, 473.0], [2100.0, 345.0], [2200.0, 263.0], [2300.0, 179.0], [2400.0, 123.0], [2500.0, 105.0], [2600.0, 65.0], [2700.0, 60.0], [2800.0, 46.0], [2900.0, 19.0], [3000.0, 17.0], [3100.0, 6.0], [200.0, 7980.0], [3300.0, 5.0], [3200.0, 7.0], [3400.0, 2.0], [3500.0, 3.0], [3600.0, 2.0], [300.0, 5078.0], [400.0, 5460.0], [500.0, 6318.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7122.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 62285.0, "series": [{"data": [[0.0, 62285.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 47793.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7122.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72875402E12, "maxY": 16.0, "series": [{"data": [[1.72875864E12, 12.0], [1.72875834E12, 12.0], [1.72875804E12, 12.0], [1.72875792E12, 12.0], [1.72875954E12, 9.223782771535591], [1.72875786E12, 12.0], [1.72875924E12, 12.0], [1.72875894E12, 12.0], [1.72875912E12, 12.0], [1.72875882E12, 12.0], [1.72875852E12, 12.0], [1.72875822E12, 12.0], [1.7287584E12, 12.0], [1.7287581E12, 12.0], [1.72875942E12, 12.0], [1.7287596E12, 2.838709677419356], [1.7287578E12, 11.954545454545451], [1.7287593E12, 12.0], [1.728759E12, 12.0], [1.7287587E12, 12.0], [1.72875888E12, 12.0], [1.72875858E12, 12.0], [1.72875828E12, 12.0], [1.72875798E12, 12.0], [1.72875816E12, 12.0], [1.72875948E12, 11.679553264604808], [1.72875918E12, 12.0], [1.72875936E12, 12.0], [1.72875906E12, 12.0], [1.72875876E12, 12.0], [1.72875846E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72875414E12, 2.0], [1.72875408E12, 2.0], [1.72875426E12, 1.9767441860465116], [1.7287542E12, 2.0], [1.72875402E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72875492E12, 4.0], [1.72875462E12, 4.0], [1.72875552E12, 4.0], [1.72875522E12, 4.0], [1.72875564E12, 4.0], [1.72875534E12, 4.0], [1.72875432E12, 4.0], [1.72875594E12, 1.0], [1.72875444E12, 4.0], [1.72875504E12, 4.0], [1.72875474E12, 4.0], [1.72875516E12, 4.0], [1.72875486E12, 4.0], [1.72875576E12, 4.0], [1.72875546E12, 4.0], [1.72875558E12, 4.0], [1.72875588E12, 2.4115853658536586], [1.72875456E12, 4.0], [1.72875426E12, 3.971428571428572], [1.72875468E12, 4.0], [1.72875438E12, 4.0], [1.72875528E12, 4.0], [1.72875498E12, 4.0], [1.7287554E12, 4.0], [1.7287551E12, 4.0], [1.7287557E12, 4.0], [1.72875582E12, 3.89406099518459], [1.7287548E12, 4.0], [1.7287545E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72876026E12, 16.0], [1.72876056E12, 16.0], [1.72875996E12, 16.0], [1.72875966E12, 16.0], [1.72875984E12, 16.0], [1.72876086E12, 16.0], [1.72876116E12, 1.0833333333333335], [1.72876074E12, 16.0], [1.72876104E12, 15.758259468170824], [1.72876014E12, 16.0], [1.72876044E12, 16.0], [1.72876002E12, 16.0], [1.72876032E12, 16.0], [1.72875972E12, 16.0], [1.7287596E12, 15.936073059360728], [1.72876062E12, 16.0], [1.72876092E12, 16.0], [1.7287605E12, 16.0], [1.7287608E12, 16.0], [1.7287599E12, 16.0], [1.7287602E12, 16.0], [1.72875978E12, 16.0], [1.72876008E12, 16.0], [1.7287611E12, 11.32267168391346], [1.72876098E12, 16.0], [1.72876038E12, 16.0], [1.72876068E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.72875654E12, 8.0], [1.72875684E12, 8.0], [1.72875714E12, 8.0], [1.72875744E12, 8.0], [1.72875726E12, 8.0], [1.72875756E12, 8.0], [1.72875594E12, 7.982378854625551], [1.72875624E12, 8.0], [1.72875606E12, 8.0], [1.72875636E12, 8.0], [1.72875666E12, 8.0], [1.72875696E12, 8.0], [1.72875678E12, 8.0], [1.72875708E12, 8.0], [1.72875738E12, 8.0], [1.72875768E12, 7.971456692913385], [1.7287575E12, 8.0], [1.7287578E12, 1.8888888888888888], [1.72875618E12, 8.0], [1.72875648E12, 8.0], [1.7287563E12, 8.0], [1.7287566E12, 8.0], [1.7287569E12, 8.0], [1.7287572E12, 8.0], [1.72875702E12, 8.0], [1.72875732E12, 8.0], [1.72875762E12, 8.0], [1.728756E12, 8.0], [1.72875774E12, 5.335644937586685], [1.72875612E12, 8.0], [1.72875642E12, 8.0], [1.72875672E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72876116E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 368.1077441077444, "minX": 1.0, "maxY": 765.7644368957399, "series": [{"data": [[2.0, 392.22042253521107], [8.0, 455.91840061367276], [9.0, 516.2777777777776], [10.0, 508.25645756457544], [11.0, 572.3528505392911], [3.0, 368.1077441077444], [12.0, 597.2866471254026], [13.0, 646.4360655737701], [14.0, 600.2407407407406], [15.0, 678.5525291828795], [1.0, 426.40869565217383], [4.0, 401.0350243840654], [16.0, 765.7644368957399], [5.0, 410.0675324675325], [6.0, 416.4487179487179], [7.0, 428.97894736842113]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.69560580204781, 572.2987201365222]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72875402E12, "maxY": 6.0520123766666666E7, "series": [{"data": [[1.72876026E12, 5.893972905E7], [1.72875462E12, 3.058914585E7], [1.72875684E12, 5.161603671666667E7], [1.72875804E12, 5.7870173733333334E7], [1.72875564E12, 2.9923091E7], [1.72875786E12, 5.6118648233333334E7], [1.72875924E12, 5.85246972E7], [1.72875444E12, 3.0434288933333334E7], [1.72875666E12, 5.18281829E7], [1.72875822E12, 5.691131988333333E7], [1.72876044E12, 5.884837365E7], [1.7287584E12, 5.554520295E7], [1.72875546E12, 3.0878066166666668E7], [1.72875768E12, 5.22865586E7], [1.72875942E12, 5.6492379916666664E7], [1.72875618E12, 5.068495868333333E7], [1.7287587E12, 5.739252678333333E7], [1.72876092E12, 6.017144555E7], [1.72875888E12, 5.636467003333333E7], [1.72875498E12, 3.0419972833333332E7], [1.7287572E12, 4.994399656666667E7], [1.7287599E12, 5.679070611666667E7], [1.72875702E12, 4.97427781E7], [1.72876008E12, 5.8190921583333336E7], [1.7287611E12, 4.833367463333333E7], [1.728756E12, 4.96107548E7], [1.72875582E12, 2.767537035E7], [1.72875906E12, 5.4932768983333334E7], [1.7287548E12, 3.1233275916666668E7], [1.72875654E12, 5.13438749E7], [1.72875552E12, 3.16552941E7], [1.72875996E12, 5.930102188333333E7], [1.72875792E12, 5.68544814E7], [1.72875534E12, 3.0798420866666667E7], [1.72875756E12, 5.205565685E7], [1.72875432E12, 2.9447304033333335E7], [1.72875894E12, 5.63195649E7], [1.72876116E12, 792010.9], [1.72875912E12, 5.676540718333333E7], [1.72875414E12, 1.5054011266666668E7], [1.72875636E12, 4.969870421666667E7], [1.72876014E12, 5.880498186666667E7], [1.72875516E12, 2.9311697866666667E7], [1.7287581E12, 5.801294075E7], [1.72876032E12, 5.9061784733333334E7], [1.72875738E12, 5.279847768333333E7], [1.7287596E12, 4.484596706666667E7], [1.72875588E12, 1.6444678116666667E7], [1.72876062E12, 5.796416178333333E7], [1.72875468E12, 3.0300738933333334E7], [1.72875858E12, 5.5631387083333336E7], [1.7287608E12, 5.903815213333333E7], [1.7287569E12, 5.194323375E7], [1.72875978E12, 5.750861878333333E7], [1.7287557E12, 3.0070880616666667E7], [1.72875774E12, 3.650422125E7], [1.72876098E12, 5.875014713333333E7], [1.72875876E12, 5.55230405E7], [1.7287545E12, 3.0525464966666665E7], [1.72875672E12, 5.097717725E7], [1.72875864E12, 5.584114203333333E7], [1.72875522E12, 3.1215721316666666E7], [1.72875744E12, 5.229011813333333E7], [1.72875966E12, 5.669079593333333E7], [1.72875726E12, 5.1492409766666666E7], [1.72875984E12, 5.8409985516666666E7], [1.72876086E12, 5.836275086666667E7], [1.72875402E12, 1385148.15], [1.72875624E12, 5.14814942E7], [1.72875606E12, 5.1933432916666664E7], [1.72876104E12, 5.883672596666667E7], [1.72875882E12, 5.957639356666667E7], [1.72875504E12, 3.079813395E7], [1.72876002E12, 5.945530338333333E7], [1.72875486E12, 3.1062027516666666E7], [1.72875708E12, 5.2947599016666666E7], [1.72875558E12, 3.0589381416666668E7], [1.7287578E12, 5.310309518333333E7], [1.7287593E12, 5.718187621666667E7], [1.72875456E12, 3.1498823133333333E7], [1.7287605E12, 6.0520123766666666E7], [1.72875438E12, 3.0410776033333335E7], [1.7287566E12, 5.129121461666667E7], [1.72875828E12, 5.558240695E7], [1.7287554E12, 3.0199433916666668E7], [1.72875762E12, 5.238182828333333E7], [1.72875948E12, 5.6830426016666666E7], [1.7287542E12, 1.5951719983333332E7], [1.72875642E12, 5.0267683583333336E7], [1.72875846E12, 5.829483113333333E7], [1.72876068E12, 5.954584086666667E7], [1.72875492E12, 3.0070358383333333E7], [1.72875834E12, 5.699663586666667E7], [1.72876056E12, 5.9006039266666666E7], [1.72875714E12, 5.2096434016666666E7], [1.72875954E12, 5.248386218333333E7], [1.72875594E12, 3.850814435E7], [1.72876074E12, 5.734199736666667E7], [1.72875852E12, 5.67401027E7], [1.72875696E12, 5.12246306E7], [1.72875474E12, 3.1372737133333333E7], [1.72875678E12, 5.172689888333333E7], [1.72875576E12, 3.1216704016666666E7], [1.72875972E12, 6.033645711666667E7], [1.7287575E12, 5.102122936666667E7], [1.728759E12, 5.689641971666667E7], [1.72875426E12, 1.7362665116666667E7], [1.72875648E12, 5.157915305E7], [1.7287563E12, 5.277623753333333E7], [1.72875528E12, 3.066969385E7], [1.72875798E12, 5.633393588333333E7], [1.7287602E12, 5.98378624E7], [1.72875816E12, 5.85421809E7], [1.7287551E12, 2.9718690633333333E7], [1.72875732E12, 5.095711631666667E7], [1.72875408E12, 1.5873239583333334E7], [1.72875918E12, 5.5524013483333334E7], [1.72875936E12, 5.8006876233333334E7], [1.72875612E12, 5.277936035E7], [1.72876038E12, 5.7735032E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72876026E12, 0.0], [1.72875462E12, 0.0], [1.72875684E12, 0.0], [1.72875804E12, 0.0], [1.72875564E12, 0.0], [1.72875786E12, 0.0], [1.72875924E12, 0.0], [1.72875444E12, 0.0], [1.72875666E12, 0.0], [1.72875822E12, 0.0], [1.72876044E12, 0.0], [1.7287584E12, 0.0], [1.72875546E12, 0.0], [1.72875768E12, 0.0], [1.72875942E12, 0.0], [1.72875618E12, 0.0], [1.7287587E12, 0.0], [1.72876092E12, 0.0], [1.72875888E12, 0.0], [1.72875498E12, 0.0], [1.7287572E12, 0.0], [1.7287599E12, 0.0], [1.72875702E12, 0.0], [1.72876008E12, 0.0], [1.7287611E12, 0.0], [1.728756E12, 0.0], [1.72875582E12, 0.0], [1.72875906E12, 0.0], [1.7287548E12, 0.0], [1.72875654E12, 0.0], [1.72875552E12, 0.0], [1.72875996E12, 0.0], [1.72875792E12, 0.0], [1.72875534E12, 0.0], [1.72875756E12, 0.0], [1.72875432E12, 0.0], [1.72875894E12, 0.0], [1.72876116E12, 0.0], [1.72875912E12, 0.0], [1.72875414E12, 0.0], [1.72875636E12, 0.0], [1.72876014E12, 0.0], [1.72875516E12, 0.0], [1.7287581E12, 0.0], [1.72876032E12, 0.0], [1.72875738E12, 0.0], [1.7287596E12, 0.0], [1.72875588E12, 0.0], [1.72876062E12, 0.0], [1.72875468E12, 0.0], [1.72875858E12, 0.0], [1.7287608E12, 0.0], [1.7287569E12, 0.0], [1.72875978E12, 0.0], [1.7287557E12, 0.0], [1.72875774E12, 0.0], [1.72876098E12, 0.0], [1.72875876E12, 0.0], [1.7287545E12, 0.0], [1.72875672E12, 0.0], [1.72875864E12, 0.0], [1.72875522E12, 0.0], [1.72875744E12, 0.0], [1.72875966E12, 0.0], [1.72875726E12, 0.0], [1.72875984E12, 0.0], [1.72876086E12, 0.0], [1.72875402E12, 0.0], [1.72875624E12, 0.0], [1.72875606E12, 0.0], [1.72876104E12, 0.0], [1.72875882E12, 0.0], [1.72875504E12, 0.0], [1.72876002E12, 0.0], [1.72875486E12, 0.0], [1.72875708E12, 0.0], [1.72875558E12, 0.0], [1.7287578E12, 0.0], [1.7287593E12, 0.0], [1.72875456E12, 0.0], [1.7287605E12, 0.0], [1.72875438E12, 0.0], [1.7287566E12, 0.0], [1.72875828E12, 0.0], [1.7287554E12, 0.0], [1.72875762E12, 0.0], [1.72875948E12, 0.0], [1.7287542E12, 0.0], [1.72875642E12, 0.0], [1.72875846E12, 0.0], [1.72876068E12, 0.0], [1.72875492E12, 0.0], [1.72875834E12, 0.0], [1.72876056E12, 0.0], [1.72875714E12, 0.0], [1.72875954E12, 0.0], [1.72875594E12, 0.0], [1.72876074E12, 0.0], [1.72875852E12, 0.0], [1.72875696E12, 0.0], [1.72875474E12, 0.0], [1.72875678E12, 0.0], [1.72875576E12, 0.0], [1.72875972E12, 0.0], [1.7287575E12, 0.0], [1.728759E12, 0.0], [1.72875426E12, 0.0], [1.72875648E12, 0.0], [1.7287563E12, 0.0], [1.72875528E12, 0.0], [1.72875798E12, 0.0], [1.7287602E12, 0.0], [1.72875816E12, 0.0], [1.7287551E12, 0.0], [1.72875732E12, 0.0], [1.72875408E12, 0.0], [1.72875918E12, 0.0], [1.72875936E12, 0.0], [1.72875612E12, 0.0], [1.72876038E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72876116E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 373.3515248796149, "minX": 1.72875402E12, "maxY": 809.4957983193269, "series": [{"data": [[1.72876026E12, 752.544600938967], [1.72875462E12, 393.70559210526346], [1.72875684E12, 468.74584555229757], [1.72875804E12, 611.3285229202039], [1.72875564E12, 390.73778501628664], [1.72875786E12, 585.452244897959], [1.72875924E12, 594.933388157895], [1.72875444E12, 389.4636510500801], [1.72875666E12, 447.5279329608941], [1.72875822E12, 620.2074330164207], [1.72876044E12, 776.1095008051524], [1.7287584E12, 578.9774193548393], [1.72875546E12, 381.48722044728424], [1.72875768E12, 469.5954724409448], [1.72875942E12, 607.0084175084168], [1.72875618E12, 464.3278529980652], [1.7287587E12, 609.8604060913706], [1.72876092E12, 749.5424785658604], [1.72875888E12, 595.4148760330577], [1.72875498E12, 413.5704467353955], [1.7287572E12, 437.30438756855574], [1.7287599E12, 765.9976076555021], [1.72875702E12, 451.2757318224742], [1.72876008E12, 764.584725536993], [1.7287611E12, 572.9557855127002], [1.728756E12, 444.2969472710449], [1.72875582E12, 373.3515248796149], [1.72875906E12, 562.0677042801556], [1.7287548E12, 410.59726962457313], [1.72875654E12, 460.5129682997115], [1.72875552E12, 412.4965635738831], [1.72875996E12, 773.9000805801769], [1.72875792E12, 595.7060280759702], [1.72875534E12, 404.6208053691277], [1.72875756E12, 450.51127819548924], [1.72875432E12, 392.30130293159584], [1.72875894E12, 606.8141891891885], [1.72876116E12, 538.9999999999999], [1.72875912E12, 616.0463121783869], [1.72875414E12, 383.75241157556246], [1.72875636E12, 449.1750936329589], [1.72876014E12, 770.5530546623781], [1.72875516E12, 401.30434782608677], [1.7287581E12, 641.0250223413765], [1.72876032E12, 757.5445232466516], [1.72875738E12, 467.9319066147858], [1.7287596E12, 679.3490000000006], [1.72875588E12, 379.07317073170753], [1.72876062E12, 770.4388083735913], [1.72875468E12, 419.5332167832169], [1.72875858E12, 610.153198653199], [1.7287608E12, 773.3642224012901], [1.7287569E12, 464.1803278688528], [1.72875978E12, 738.7908045977009], [1.7287557E12, 419.96847635726795], [1.72875774E12, 413.915395284327], [1.72876098E12, 802.4870075440061], [1.72875876E12, 584.373170731708], [1.7287545E12, 434.9038112522684], [1.72875672E12, 438.30236794171265], [1.72875864E12, 575.331189710611], [1.72875522E12, 399.06333333333373], [1.72875744E12, 464.12427184465986], [1.72875966E12, 787.814814814815], [1.72875726E12, 455.2005703422054], [1.72875984E12, 743.589743589743], [1.72876086E12, 752.4697564807533], [1.72875402E12, 594.0999999999999], [1.72875624E12, 456.13523809523804], [1.72875606E12, 451.79962370649093], [1.72876104E12, 764.226430298147], [1.72875882E12, 594.6968698517294], [1.72875504E12, 387.451298701299], [1.72876002E12, 764.3785942492011], [1.72875486E12, 395.2092257001654], [1.72875708E12, 453.22556390977405], [1.72875558E12, 427.21492007104837], [1.7287578E12, 568.6266318537854], [1.7287593E12, 594.3380049464143], [1.72875456E12, 401.43718592964814], [1.7287605E12, 757.6003159557661], [1.72875438E12, 404.81324278438035], [1.7287566E12, 459.17771373679216], [1.72875828E12, 570.0936507936501], [1.7287554E12, 388.3042071197408], [1.72875762E12, 459.5867689357621], [1.72875948E12, 602.5670103092796], [1.7287542E12, 398.47176079734226], [1.72875642E12, 444.6573816155994], [1.72875846E12, 585.7998379254448], [1.72876068E12, 788.3628173628167], [1.72875492E12, 406.2318104906933], [1.72875834E12, 611.9643463497459], [1.72876056E12, 809.4957983193269], [1.72875714E12, 448.2583955223881], [1.72875954E12, 511.9073033707866], [1.72875594E12, 480.0582524271846], [1.72876074E12, 728.9384030418246], [1.72875852E12, 610.8250853242322], [1.72875696E12, 445.8623255813958], [1.72875474E12, 443.0074074074077], [1.72875678E12, 471.48228346456705], [1.72875576E12, 388.5640194489465], [1.72875972E12, 763.7090620031789], [1.7287575E12, 452.88993414863603], [1.728759E12, 588.076986076986], [1.72875426E12, 379.28099173553704], [1.72875648E12, 481.87875751502963], [1.7287563E12, 452.5860771401694], [1.72875528E12, 396.8195364238412], [1.72875798E12, 611.7156196943964], [1.7287602E12, 796.0049833887055], [1.72875816E12, 591.7214052287578], [1.7287551E12, 374.1772939346813], [1.72875732E12, 449.50420954162763], [1.72875408E12, 386.232258064516], [1.72875918E12, 610.9030612244906], [1.72875936E12, 582.5500406834822], [1.72875612E12, 444.91187384044514], [1.72876038E12, 746.8184663536772]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72876116E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 249.1981707317074, "minX": 1.72875402E12, "maxY": 559.125210084033, "series": [{"data": [[1.72876026E12, 517.690923317684], [1.72875462E12, 260.6348684210526], [1.72875684E12, 317.67253176930586], [1.72875804E12, 418.62648556876024], [1.72875564E12, 259.9299674267098], [1.72875786E12, 401.7616326530609], [1.72875924E12, 405.62006578947376], [1.72875444E12, 258.7415185783524], [1.72875666E12, 302.3594040968341], [1.72875822E12, 425.2385479688848], [1.72876044E12, 535.7326892109503], [1.7287584E12, 402.01370967741894], [1.72875546E12, 252.13738019169315], [1.72875768E12, 316.5147637795275], [1.72875942E12, 415.58670033670074], [1.72875618E12, 315.1634429400384], [1.7287587E12, 417.8959390862948], [1.72876092E12, 513.1808261886212], [1.72875888E12, 409.38925619834714], [1.72875498E12, 275.33676975945025], [1.7287572E12, 296.892138939671], [1.7287599E12, 528.3596491228064], [1.72875702E12, 308.23890462700706], [1.72876008E12, 525.5457438345272], [1.7287611E12, 393.7300094073377], [1.728756E12, 303.34967622571753], [1.72875582E12, 251.69341894061], [1.72875906E12, 387.47237354085627], [1.7287548E12, 271.30034129692854], [1.72875654E12, 311.5523535062441], [1.72875552E12, 271.24398625429603], [1.72875996E12, 531.4955680902495], [1.72875792E12, 407.38150289017307], [1.72875534E12, 269.5469798657723], [1.72875756E12, 302.9718045112785], [1.72875432E12, 261.9690553745927], [1.72875894E12, 416.57347972972946], [1.72876116E12, 371.5833333333333], [1.72875912E12, 422.32332761578044], [1.72875414E12, 255.87138263665597], [1.72875636E12, 306.13951310861387], [1.72876014E12, 531.0008038585206], [1.72875516E12, 269.1020066889633], [1.7287581E12, 437.51474530831115], [1.72876032E12, 521.2253743104815], [1.72875738E12, 316.0787937743187], [1.7287596E12, 469.14999999999964], [1.72875588E12, 249.1981707317074], [1.72876062E12, 532.7254428341369], [1.72875468E12, 279.4510489510492], [1.72875858E12, 422.9974747474747], [1.7287608E12, 534.9234488315878], [1.7287569E12, 313.66345226615294], [1.72875978E12, 510.05210727969285], [1.7287557E12, 281.15236427320485], [1.72875774E12, 275.0540915395281], [1.72876098E12, 549.6345347862535], [1.72875876E12, 403.79430894308905], [1.7287545E12, 290.3067150635209], [1.72875672E12, 294.98087431694006], [1.72875864E12, 392.73231511254056], [1.72875522E12, 262.72333333333387], [1.72875744E12, 313.020388349515], [1.72875966E12, 546.4930041152272], [1.72875726E12, 308.53422053231935], [1.72875984E12, 514.6309246309245], [1.72876086E12, 518.3519245875884], [1.72875402E12, 413.3500000000001], [1.72875624E12, 308.16476190476163], [1.72875606E12, 305.8494825964247], [1.72876104E12, 528.2586623690574], [1.72875882E12, 403.9489291598023], [1.72875504E12, 254.7662337662338], [1.72876002E12, 526.6821086261988], [1.72875486E12, 261.0823723228996], [1.72875708E12, 303.62312030075185], [1.72875558E12, 283.5612788632325], [1.7287578E12, 385.0931244560483], [1.7287593E12, 409.33800494641395], [1.72875456E12, 263.4070351758792], [1.7287605E12, 516.5624012638228], [1.72875438E12, 269.0509337860781], [1.7287566E12, 310.9788664745435], [1.72875828E12, 391.4142857142859], [1.7287554E12, 258.80420711974085], [1.72875762E12, 310.48513902205127], [1.72875948E12, 414.2534364261167], [1.7287542E12, 263.9568106312292], [1.72875642E12, 301.24976787372293], [1.72875846E12, 399.70907617504105], [1.72876068E12, 542.6429156429156], [1.72875492E12, 271.3891708967851], [1.72875834E12, 419.34550084889645], [1.72876056E12, 559.125210084033], [1.72875714E12, 301.29664179104503], [1.72875954E12, 347.61797752808997], [1.72875594E12, 323.4604715672674], [1.72876074E12, 506.05551330798437], [1.72875852E12, 416.4334470989761], [1.72875696E12, 301.8000000000003], [1.72875474E12, 293.25740740740747], [1.72875678E12, 318.3375984251973], [1.72875576E12, 254.49108589951365], [1.72875972E12, 524.277424483307], [1.7287575E12, 308.14863593603025], [1.728759E12, 401.7723177723177], [1.72875426E12, 253.4958677685951], [1.72875648E12, 327.20641282565174], [1.7287563E12, 304.73000940733823], [1.72875528E12, 263.3923841059601], [1.72875798E12, 420.1366723259769], [1.7287602E12, 543.3039867109626], [1.72875816E12, 403.17238562091455], [1.7287551E12, 249.27993779160204], [1.72875732E12, 303.1206735266603], [1.72875408E12, 255.09032258064514], [1.72875918E12, 421.1777210884354], [1.72875936E12, 395.7632221318144], [1.72875612E12, 299.4257884972167], [1.72876038E12, 516.5805946791851]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72876116E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72875402E12, "maxY": 4.9E-324, "series": [{"data": [[1.72876026E12, 0.0], [1.72875462E12, 0.0], [1.72875684E12, 0.0], [1.72875804E12, 0.0], [1.72875564E12, 0.0], [1.72875786E12, 0.0], [1.72875924E12, 0.0], [1.72875444E12, 0.0], [1.72875666E12, 0.0], [1.72875822E12, 0.0], [1.72876044E12, 0.0], [1.7287584E12, 0.0], [1.72875546E12, 0.0], [1.72875768E12, 0.0], [1.72875942E12, 0.0], [1.72875618E12, 0.0], [1.7287587E12, 0.0], [1.72876092E12, 0.0], [1.72875888E12, 0.0], [1.72875498E12, 0.0], [1.7287572E12, 0.0], [1.7287599E12, 0.0], [1.72875702E12, 0.0], [1.72876008E12, 0.0], [1.7287611E12, 0.0], [1.728756E12, 0.0], [1.72875582E12, 0.0], [1.72875906E12, 0.0], [1.7287548E12, 0.0], [1.72875654E12, 0.0], [1.72875552E12, 0.0], [1.72875996E12, 0.0], [1.72875792E12, 0.0], [1.72875534E12, 0.0], [1.72875756E12, 0.0], [1.72875432E12, 0.0], [1.72875894E12, 0.0], [1.72876116E12, 0.0], [1.72875912E12, 0.0], [1.72875414E12, 0.0], [1.72875636E12, 0.0], [1.72876014E12, 0.0], [1.72875516E12, 0.0], [1.7287581E12, 0.0], [1.72876032E12, 0.0], [1.72875738E12, 0.0], [1.7287596E12, 0.0], [1.72875588E12, 0.0], [1.72876062E12, 0.0], [1.72875468E12, 0.0], [1.72875858E12, 0.0], [1.7287608E12, 0.0], [1.7287569E12, 0.0], [1.72875978E12, 0.0], [1.7287557E12, 0.0], [1.72875774E12, 0.0], [1.72876098E12, 0.0], [1.72875876E12, 0.0], [1.7287545E12, 0.0], [1.72875672E12, 0.0], [1.72875864E12, 0.0], [1.72875522E12, 0.0], [1.72875744E12, 0.0], [1.72875966E12, 0.0], [1.72875726E12, 0.0], [1.72875984E12, 0.0], [1.72876086E12, 0.0], [1.72875402E12, 0.0], [1.72875624E12, 0.0], [1.72875606E12, 0.0], [1.72876104E12, 0.0], [1.72875882E12, 0.0], [1.72875504E12, 0.0], [1.72876002E12, 0.0], [1.72875486E12, 0.0], [1.72875708E12, 0.0], [1.72875558E12, 0.0], [1.7287578E12, 0.0], [1.7287593E12, 0.0], [1.72875456E12, 0.0], [1.7287605E12, 0.0], [1.72875438E12, 0.0], [1.7287566E12, 0.0], [1.72875828E12, 0.0], [1.7287554E12, 0.0], [1.72875762E12, 0.0], [1.72875948E12, 0.0], [1.7287542E12, 0.0], [1.72875642E12, 0.0], [1.72875846E12, 0.0], [1.72876068E12, 0.0], [1.72875492E12, 0.0], [1.72875834E12, 0.0], [1.72876056E12, 0.0], [1.72875714E12, 0.0], [1.72875954E12, 0.0], [1.72875594E12, 0.0], [1.72876074E12, 0.0], [1.72875852E12, 0.0], [1.72875696E12, 0.0], [1.72875474E12, 0.0], [1.72875678E12, 0.0], [1.72875576E12, 0.0], [1.72875972E12, 0.0], [1.7287575E12, 0.0], [1.728759E12, 0.0], [1.72875426E12, 0.0], [1.72875648E12, 0.0], [1.7287563E12, 0.0], [1.72875528E12, 0.0], [1.72875798E12, 0.0], [1.7287602E12, 0.0], [1.72875816E12, 0.0], [1.7287551E12, 0.0], [1.72875732E12, 0.0], [1.72875408E12, 0.0], [1.72875918E12, 0.0], [1.72875936E12, 0.0], [1.72875612E12, 0.0], [1.72876038E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72876116E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.72875402E12, "maxY": 3689.0, "series": [{"data": [[1.72876026E12, 3262.0], [1.72875462E12, 1472.0], [1.72875684E12, 1866.0], [1.72875804E12, 2678.0], [1.72875564E12, 1738.0], [1.72875786E12, 2617.0], [1.72875924E12, 2240.0], [1.72875444E12, 1399.0], [1.72875666E12, 2015.0], [1.72875822E12, 2601.0], [1.72876044E12, 2848.0], [1.7287584E12, 2291.0], [1.72875546E12, 1469.0], [1.72875768E12, 1905.0], [1.72875942E12, 2510.0], [1.72875618E12, 1855.0], [1.7287587E12, 2690.0], [1.72876092E12, 2971.0], [1.72875888E12, 2407.0], [1.72875498E12, 1547.0], [1.7287572E12, 1690.0], [1.7287599E12, 3065.0], [1.72875702E12, 1828.0], [1.72876008E12, 3223.0], [1.7287611E12, 2590.0], [1.728756E12, 1987.0], [1.72875582E12, 1645.0], [1.72875906E12, 2750.0], [1.7287548E12, 1455.0], [1.72875654E12, 1819.0], [1.72875552E12, 1695.0], [1.72875996E12, 3313.0], [1.72875792E12, 2506.0], [1.72875534E12, 1443.0], [1.72875756E12, 2172.0], [1.72875432E12, 1327.0], [1.72875894E12, 2357.0], [1.72876116E12, 959.0], [1.72875912E12, 2407.0], [1.72875414E12, 1596.0], [1.72875636E12, 2046.0], [1.72876014E12, 3119.0], [1.72875516E12, 1422.0], [1.7287581E12, 2569.0], [1.72876032E12, 3519.0], [1.72875738E12, 1942.0], [1.7287596E12, 2968.0], [1.72875588E12, 1375.0], [1.72876062E12, 3424.0], [1.72875468E12, 1733.0], [1.72875858E12, 2411.0], [1.7287608E12, 3328.0], [1.7287569E12, 1860.0], [1.72875978E12, 3049.0], [1.7287557E12, 1408.0], [1.72875774E12, 1617.0], [1.72876098E12, 3061.0], [1.72875876E12, 2365.0], [1.7287545E12, 1470.0], [1.72875672E12, 1799.0], [1.72875864E12, 2583.0], [1.72875522E12, 1799.0], [1.72875744E12, 1982.0], [1.72875966E12, 3002.0], [1.72875726E12, 1824.0], [1.72875984E12, 3569.0], [1.72876086E12, 3100.0], [1.72875402E12, 1570.0], [1.72875624E12, 1911.0], [1.72875606E12, 1575.0], [1.72876104E12, 2807.0], [1.72875882E12, 2399.0], [1.72875504E12, 1561.0], [1.72876002E12, 2885.0], [1.72875486E12, 1708.0], [1.72875708E12, 1791.0], [1.72875558E12, 1410.0], [1.7287578E12, 2342.0], [1.7287593E12, 2451.0], [1.72875456E12, 1631.0], [1.7287605E12, 3584.0], [1.72875438E12, 1439.0], [1.7287566E12, 1848.0], [1.72875828E12, 2502.0], [1.7287554E12, 1436.0], [1.72875762E12, 1608.0], [1.72875948E12, 2812.0], [1.7287542E12, 1316.0], [1.72875642E12, 1992.0], [1.72875846E12, 2249.0], [1.72876068E12, 3689.0], [1.72875492E12, 1680.0], [1.72875834E12, 2896.0], [1.72876056E12, 3202.0], [1.72875714E12, 1744.0], [1.72875954E12, 2376.0], [1.72875594E12, 1817.0], [1.72876074E12, 3375.0], [1.72875852E12, 2528.0], [1.72875696E12, 1654.0], [1.72875474E12, 1297.0], [1.72875678E12, 1868.0], [1.72875576E12, 1423.0], [1.72875972E12, 3040.0], [1.7287575E12, 1923.0], [1.728759E12, 2571.0], [1.72875426E12, 1371.0], [1.72875648E12, 1688.0], [1.7287563E12, 1941.0], [1.72875528E12, 1464.0], [1.72875798E12, 2420.0], [1.7287602E12, 3623.0], [1.72875816E12, 2708.0], [1.7287551E12, 1523.0], [1.72875732E12, 1746.0], [1.72875408E12, 1420.0], [1.72875918E12, 2564.0], [1.72875936E12, 2541.0], [1.72875612E12, 1871.0], [1.72876038E12, 2913.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72876026E12, 55.0], [1.72875462E12, 30.0], [1.72875684E12, 25.0], [1.72875804E12, 31.0], [1.72875564E12, 29.0], [1.72875786E12, 33.0], [1.72875924E12, 31.0], [1.72875444E12, 31.0], [1.72875666E12, 21.0], [1.72875822E12, 39.0], [1.72876044E12, 52.0], [1.7287584E12, 36.0], [1.72875546E12, 31.0], [1.72875768E12, 28.0], [1.72875942E12, 35.0], [1.72875618E12, 32.0], [1.7287587E12, 38.0], [1.72876092E12, 52.0], [1.72875888E12, 37.0], [1.72875498E12, 29.0], [1.7287572E12, 31.0], [1.7287599E12, 47.0], [1.72875702E12, 23.0], [1.72876008E12, 49.0], [1.7287611E12, 35.0], [1.728756E12, 33.0], [1.72875582E12, 29.0], [1.72875906E12, 31.0], [1.7287548E12, 31.0], [1.72875654E12, 24.0], [1.72875552E12, 29.0], [1.72875996E12, 53.0], [1.72875792E12, 38.0], [1.72875534E12, 34.0], [1.72875756E12, 29.0], [1.72875432E12, 34.0], [1.72875894E12, 32.0], [1.72876116E12, 75.0], [1.72875912E12, 31.0], [1.72875414E12, 31.0], [1.72875636E12, 27.0], [1.72876014E12, 50.0], [1.72875516E12, 32.0], [1.7287581E12, 34.0], [1.72876032E12, 54.0], [1.72875738E12, 34.0], [1.7287596E12, 33.0], [1.72875588E12, 32.0], [1.72876062E12, 54.0], [1.72875468E12, 36.0], [1.72875858E12, 31.0], [1.7287608E12, 46.0], [1.7287569E12, 27.0], [1.72875978E12, 34.0], [1.7287557E12, 27.0], [1.72875774E12, 32.0], [1.72876098E12, 54.0], [1.72875876E12, 34.0], [1.7287545E12, 31.0], [1.72875672E12, 25.0], [1.72875864E12, 40.0], [1.72875522E12, 25.0], [1.72875744E12, 26.0], [1.72875966E12, 57.0], [1.72875726E12, 33.0], [1.72875984E12, 50.0], [1.72876086E12, 48.0], [1.72875402E12, 59.0], [1.72875624E12, 27.0], [1.72875606E12, 34.0], [1.72876104E12, 34.0], [1.72875882E12, 38.0], [1.72875504E12, 24.0], [1.72876002E12, 48.0], [1.72875486E12, 29.0], [1.72875708E12, 28.0], [1.72875558E12, 28.0], [1.7287578E12, 33.0], [1.7287593E12, 34.0], [1.72875456E12, 30.0], [1.7287605E12, 51.0], [1.72875438E12, 33.0], [1.7287566E12, 30.0], [1.72875828E12, 26.0], [1.7287554E12, 30.0], [1.72875762E12, 27.0], [1.72875948E12, 29.0], [1.7287542E12, 32.0], [1.72875642E12, 28.0], [1.72875846E12, 33.0], [1.72876068E12, 49.0], [1.72875492E12, 33.0], [1.72875834E12, 34.0], [1.72876056E12, 48.0], [1.72875714E12, 32.0], [1.72875954E12, 27.0], [1.72875594E12, 26.0], [1.72876074E12, 54.0], [1.72875852E12, 31.0], [1.72875696E12, 26.0], [1.72875474E12, 30.0], [1.72875678E12, 24.0], [1.72875576E12, 26.0], [1.72875972E12, 52.0], [1.7287575E12, 29.0], [1.728759E12, 36.0], [1.72875426E12, 31.0], [1.72875648E12, 27.0], [1.7287563E12, 29.0], [1.72875528E12, 31.0], [1.72875798E12, 31.0], [1.7287602E12, 39.0], [1.72875816E12, 33.0], [1.7287551E12, 31.0], [1.72875732E12, 28.0], [1.72875408E12, 38.0], [1.72875918E12, 35.0], [1.72875936E12, 32.0], [1.72875612E12, 23.0], [1.72876038E12, 51.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72876026E12, 1696.2000000000003], [1.72875462E12, 874.1], [1.72875684E12, 997.0], [1.72875804E12, 1365.5000000000007], [1.72875564E12, 860.5], [1.72875786E12, 1319.8000000000002], [1.72875924E12, 1360.4999999999993], [1.72875444E12, 881.0], [1.72875666E12, 988.0], [1.72875822E12, 1304.8000000000002], [1.72876044E12, 1684.1000000000001], [1.7287584E12, 1294.9], [1.72875546E12, 840.9000000000002], [1.72875768E12, 1010.0], [1.72875942E12, 1338.1000000000001], [1.72875618E12, 1015.0], [1.7287587E12, 1348.1000000000001], [1.72876092E12, 1676.0], [1.72875888E12, 1350.0], [1.72875498E12, 849.7000000000005], [1.7287572E12, 951.0], [1.7287599E12, 1671.5], [1.72875702E12, 1012.0], [1.72876008E12, 1696.4000000000003], [1.7287611E12, 1293.6], [1.728756E12, 957.8000000000001], [1.72875582E12, 820.6], [1.72875906E12, 1264.4], [1.7287548E12, 919.5000000000003], [1.72875654E12, 984.0], [1.72875552E12, 899.4000000000001], [1.72875996E12, 1733.0], [1.72875792E12, 1323.8], [1.72875534E12, 878.3000000000001], [1.72875756E12, 973.5], [1.72875432E12, 842.0], [1.72875894E12, 1364.0], [1.72876116E12, 950.9], [1.72875912E12, 1326.8999999999999], [1.72875414E12, 860.4000000000001], [1.72875636E12, 939.9000000000002], [1.72876014E12, 1639.5], [1.72875516E12, 878.4000000000003], [1.7287581E12, 1399.0], [1.72876032E12, 1730.0], [1.72875738E12, 1003.1], [1.7287596E12, 1552.9], [1.72875588E12, 851.5000000000001], [1.72876062E12, 1696.0], [1.72875468E12, 906.5000000000002], [1.72875858E12, 1347.1000000000001], [1.7287608E12, 1724.6], [1.7287569E12, 1002.6000000000001], [1.72875978E12, 1602.4], [1.7287557E12, 863.8000000000008], [1.72875774E12, 911.6000000000005], [1.72876098E12, 1786.000000000002], [1.72875876E12, 1320.9], [1.7287545E12, 878.0000000000001], [1.72875672E12, 958.2], [1.72875864E12, 1297.0], [1.72875522E12, 868.2999999999998], [1.72875744E12, 999.8], [1.72875966E12, 1729.6000000000004], [1.72875726E12, 994.0], [1.72875984E12, 1659.2], [1.72876086E12, 1692.6000000000001], [1.72875402E12, 1543.2000000000003], [1.72875624E12, 1003.8], [1.72875606E12, 981.8000000000001], [1.72876104E12, 1670.3999999999999], [1.72875882E12, 1332.5], [1.72875504E12, 868.8000000000004], [1.72876002E12, 1686.5000000000002], [1.72875486E12, 871.2], [1.72875708E12, 995.0], [1.72875558E12, 923.6000000000001], [1.7287578E12, 1355.0], [1.7287593E12, 1326.0000000000007], [1.72875456E12, 879.2], [1.7287605E12, 1717.7999999999997], [1.72875438E12, 869.0], [1.7287566E12, 992.8000000000001], [1.72875828E12, 1332.4000000000005], [1.7287554E12, 853.2], [1.72875762E12, 959.0000000000001], [1.72875948E12, 1297.0], [1.7287542E12, 865.4000000000001], [1.72875642E12, 972.0], [1.72875846E12, 1318.5], [1.72876068E12, 1676.0], [1.72875492E12, 882.0000000000003], [1.72875834E12, 1343.1000000000001], [1.72876056E12, 1746.9], [1.72875714E12, 989.1000000000001], [1.72875954E12, 1125.5], [1.72875594E12, 1028.2000000000003], [1.72876074E12, 1627.800000000001], [1.72875852E12, 1373.7], [1.72875696E12, 972.4], [1.72875474E12, 902.6000000000001], [1.72875678E12, 1016.0], [1.72875576E12, 869.4000000000001], [1.72875972E12, 1693.2000000000003], [1.7287575E12, 977.2000000000002], [1.728759E12, 1335.1999999999998], [1.72875426E12, 840.6], [1.72875648E12, 1019.1], [1.7287563E12, 998.0], [1.72875528E12, 908.0], [1.72875798E12, 1347.0], [1.7287602E12, 1775.0], [1.72875816E12, 1317.5], [1.7287551E12, 830.6000000000003], [1.72875732E12, 973.0], [1.72875408E12, 859.1000000000004], [1.72875918E12, 1306.3], [1.72875936E12, 1300.0], [1.72875612E12, 976.0], [1.72876038E12, 1680.3000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72876026E12, 2507.930000000001], [1.72875462E12, 1252.7699999999986], [1.72875684E12, 1441.0], [1.72875804E12, 2052.0300000000016], [1.72875564E12, 1256.7000000000005], [1.72875786E12, 1941.22], [1.72875924E12, 1988.449999999999], [1.72875444E12, 1246.3999999999985], [1.72875666E12, 1389.75], [1.72875822E12, 2051.0800000000017], [1.72876044E12, 2449.6799999999985], [1.7287584E12, 1772.7199999999993], [1.72875546E12, 1212.0300000000002], [1.72875768E12, 1506.9400000000007], [1.72875942E12, 2172.4399999999996], [1.72875618E12, 1477.300000000002], [1.7287587E12, 2071.8900000000012], [1.72876092E12, 2509.6400000000003], [1.72875888E12, 1933.910000000002], [1.72875498E12, 1321.229999999999], [1.7287572E12, 1495.6999999999994], [1.7287599E12, 2445.4000000000005], [1.72875702E12, 1405.400000000001], [1.72876008E12, 2508.6600000000017], [1.7287611E12, 2134.599999999999], [1.728756E12, 1540.580000000002], [1.72875582E12, 1211.12], [1.72875906E12, 1927.14], [1.7287548E12, 1240.7299999999996], [1.72875654E12, 1497.1599999999999], [1.72875552E12, 1304.8999999999971], [1.72875996E12, 2618.5799999999963], [1.72875792E12, 1887.7999999999988], [1.72875534E12, 1308.169999999999], [1.72875756E12, 1544.0499999999997], [1.72875432E12, 1155.65], [1.72875894E12, 1970.4500000000003], [1.72876116E12, 959.0], [1.72875912E12, 1931.9699999999993], [1.72875414E12, 1274.5999999999995], [1.72875636E12, 1523.2399999999998], [1.72876014E12, 2486.149999999997], [1.72875516E12, 1271.2799999999997], [1.7287581E12, 1997.3999999999987], [1.72876032E12, 2551.699999999998], [1.72875738E12, 1480.6200000000008], [1.7287596E12, 2321.55], [1.72875588E12, 1220.7499999999995], [1.72876062E12, 2559.099999999998], [1.72875468E12, 1288.8799999999992], [1.72875858E12, 1971.4399999999996], [1.7287608E12, 2459.6199999999935], [1.7287569E12, 1499.8799999999974], [1.72875978E12, 2429.1000000000035], [1.7287557E12, 1220.84], [1.72875774E12, 1357.9199999999996], [1.72876098E12, 2591.899999999999], [1.72875876E12, 2020.0500000000025], [1.7287545E12, 1315.3600000000006], [1.72875672E12, 1408.3099999999997], [1.72875864E12, 1938.55], [1.72875522E12, 1328.89], [1.72875744E12, 1419.5899999999992], [1.72875966E12, 2546.399999999999], [1.72875726E12, 1433.1700000000003], [1.72875984E12, 2469.319999999999], [1.72876086E12, 2517.0], [1.72875402E12, 1570.0], [1.72875624E12, 1547.2100000000003], [1.72875606E12, 1373.3999999999985], [1.72876104E12, 2363.899999999996], [1.72875882E12, 2059.349999999999], [1.72875504E12, 1465.8700000000035], [1.72876002E12, 2472.970000000001], [1.72875486E12, 1267.999999999999], [1.72875708E12, 1397.199999999999], [1.72875558E12, 1230.400000000001], [1.7287578E12, 2016.5], [1.7287593E12, 1914.199999999998], [1.72875456E12, 1354.1799999999998], [1.7287605E12, 2500.4599999999955], [1.72875438E12, 1240.2000000000007], [1.7287566E12, 1406.699999999999], [1.72875828E12, 2044.4800000000032], [1.7287554E12, 1290.579999999999], [1.72875762E12, 1441.0399999999995], [1.72875948E12, 1963.0999999999995], [1.7287542E12, 1264.7400000000002], [1.72875642E12, 1394.2000000000003], [1.72875846E12, 1952.9000000000024], [1.72876068E12, 2622.2799999999993], [1.72875492E12, 1373.5600000000013], [1.72875834E12, 2021.5700000000006], [1.72876056E12, 2516.45], [1.72875714E12, 1470.1599999999999], [1.72875954E12, 1678.6499999999992], [1.72875594E12, 1615.2799999999993], [1.72876074E12, 2731.239999999993], [1.72875852E12, 1965.9399999999996], [1.72875696E12, 1452.96], [1.72875474E12, 1181.7200000000003], [1.72875678E12, 1541.66], [1.72875576E12, 1309.860000000001], [1.72875972E12, 2561.4600000000005], [1.7287575E12, 1479.199999999998], [1.728759E12, 1918.159999999998], [1.72875426E12, 1186.6800000000005], [1.72875648E12, 1462.08], [1.7287563E12, 1397.0799999999997], [1.72875528E12, 1239.5000000000005], [1.72875798E12, 1934.21], [1.7287602E12, 2535.75], [1.72875816E12, 1848.5], [1.7287551E12, 1192.0], [1.72875732E12, 1452.6999999999987], [1.72875408E12, 1345.3199999999988], [1.72875918E12, 1976.5200000000004], [1.72875936E12, 1906.5000000000011], [1.72875612E12, 1415.1900000000014], [1.72876038E12, 2383.26]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72876026E12, 581.0], [1.72875462E12, 345.5], [1.72875684E12, 439.0], [1.72875804E12, 513.0], [1.72875564E12, 345.0], [1.72875786E12, 431.0], [1.72875924E12, 470.5], [1.72875444E12, 330.0], [1.72875666E12, 368.5], [1.72875822E12, 511.0], [1.72876044E12, 668.5], [1.7287584E12, 454.0], [1.72875546E12, 314.5], [1.72875768E12, 423.5], [1.72875942E12, 509.5], [1.72875618E12, 414.5], [1.7287587E12, 510.5], [1.72876092E12, 562.0], [1.72875888E12, 494.5], [1.72875498E12, 376.0], [1.7287572E12, 342.5], [1.7287599E12, 617.0], [1.72875702E12, 384.0], [1.72876008E12, 572.0], [1.7287611E12, 425.0], [1.728756E12, 372.0], [1.72875582E12, 291.0], [1.72875906E12, 388.0], [1.7287548E12, 381.0], [1.72875654E12, 421.0], [1.72875552E12, 369.0], [1.72875996E12, 608.0], [1.72875792E12, 505.0], [1.72875534E12, 364.5], [1.72875756E12, 376.5], [1.72875432E12, 360.0], [1.72875894E12, 523.0], [1.72876116E12, 586.5], [1.72875912E12, 539.0], [1.72875414E12, 287.0], [1.72875636E12, 379.0], [1.72876014E12, 687.0], [1.72875516E12, 353.5], [1.7287581E12, 587.0], [1.72876032E12, 542.0], [1.72875738E12, 422.0], [1.7287596E12, 437.5], [1.72875588E12, 341.0], [1.72876062E12, 645.5], [1.72875468E12, 380.5], [1.72875858E12, 531.0], [1.7287608E12, 617.0], [1.7287569E12, 428.0], [1.72875978E12, 543.0], [1.7287557E12, 404.0], [1.72875774E12, 345.0], [1.72876098E12, 666.0], [1.72875876E12, 457.0], [1.7287545E12, 430.0], [1.72875672E12, 353.5], [1.72875864E12, 407.5], [1.72875522E12, 356.5], [1.72875744E12, 418.0], [1.72875966E12, 622.0], [1.72875726E12, 395.0], [1.72875984E12, 552.0], [1.72876086E12, 586.0], [1.72875402E12, 484.5], [1.72875624E12, 388.5], [1.72875606E12, 387.0], [1.72876104E12, 654.0], [1.72875882E12, 421.5], [1.72875504E12, 338.5], [1.72876002E12, 626.0], [1.72875486E12, 348.0], [1.72875708E12, 370.0], [1.72875558E12, 393.0], [1.7287578E12, 380.0], [1.7287593E12, 463.0], [1.72875456E12, 340.0], [1.7287605E12, 573.0], [1.72875438E12, 361.0], [1.7287566E12, 395.0], [1.72875828E12, 393.5], [1.7287554E12, 333.5], [1.72875762E12, 430.0], [1.72875948E12, 530.0], [1.7287542E12, 376.0], [1.72875642E12, 373.0], [1.72875846E12, 472.5], [1.72876068E12, 664.0], [1.72875492E12, 363.0], [1.72875834E12, 521.0], [1.72876056E12, 713.5], [1.72875714E12, 393.5], [1.72875954E12, 416.5], [1.72875594E12, 450.0], [1.72876074E12, 518.0], [1.72875852E12, 497.5], [1.72875696E12, 360.0], [1.72875474E12, 454.0], [1.72875678E12, 424.5], [1.72875576E12, 307.0], [1.72875972E12, 606.5], [1.7287575E12, 382.0], [1.728759E12, 439.0], [1.72875426E12, 315.0], [1.72875648E12, 454.0], [1.7287563E12, 388.0], [1.72875528E12, 331.0], [1.72875798E12, 524.0], [1.7287602E12, 663.0], [1.72875816E12, 482.0], [1.7287551E12, 319.0], [1.72875732E12, 396.0], [1.72875408E12, 294.5], [1.72875918E12, 538.0], [1.72875936E12, 442.0], [1.72875612E12, 352.0], [1.72876038E12, 620.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72876026E12, 1949.1], [1.72875462E12, 1000.55], [1.72875684E12, 1193.6], [1.72875804E12, 1579.2999999999997], [1.72875564E12, 1031.25], [1.72875786E12, 1549.9000000000003], [1.72875924E12, 1589.5999999999995], [1.72875444E12, 990.0], [1.72875666E12, 1158.75], [1.72875822E12, 1531.0], [1.72876044E12, 1966.6999999999998], [1.7287584E12, 1484.8000000000002], [1.72875546E12, 974.7999999999997], [1.72875768E12, 1178.0499999999997], [1.72875942E12, 1529.7499999999998], [1.72875618E12, 1180.25], [1.7287587E12, 1573.85], [1.72876092E12, 1954.7999999999995], [1.72875888E12, 1579.45], [1.72875498E12, 1017.9500000000002], [1.7287572E12, 1141.25], [1.7287599E12, 1948.0], [1.72875702E12, 1163.0], [1.72876008E12, 1951.1999999999998], [1.7287611E12, 1547.3999999999996], [1.728756E12, 1128.5999999999995], [1.72875582E12, 926.8], [1.72875906E12, 1465.2000000000003], [1.7287548E12, 1006.5499999999998], [1.72875654E12, 1158.6999999999998], [1.72875552E12, 1041.0000000000005], [1.72875996E12, 2014.7999999999984], [1.72875792E12, 1514.9999999999993], [1.72875534E12, 990.3], [1.72875756E12, 1130.0], [1.72875432E12, 962.75], [1.72875894E12, 1556.25], [1.72876116E12, 959.0], [1.72875912E12, 1560.8499999999988], [1.72875414E12, 1017.7999999999996], [1.72875636E12, 1124.8499999999997], [1.72876014E12, 1923.75], [1.72875516E12, 972.05], [1.7287581E12, 1606.0], [1.72876032E12, 2004.5], [1.72875738E12, 1165.1], [1.7287596E12, 1837.8999999999999], [1.72875588E12, 981.8500000000001], [1.72876062E12, 1974.0], [1.72875468E12, 1044.0500000000002], [1.72875858E12, 1559.1], [1.7287608E12, 1941.8999999999999], [1.7287569E12, 1158.4999999999986], [1.72875978E12, 1902.1000000000001], [1.7287557E12, 1004.4], [1.72875774E12, 1006.8], [1.72876098E12, 2093.3], [1.72875876E12, 1546.8000000000002], [1.7287545E12, 1046.6], [1.72875672E12, 1114.2499999999998], [1.72875864E12, 1520.25], [1.72875522E12, 1001.7999999999997], [1.72875744E12, 1153.8999999999999], [1.72875966E12, 2041.6000000000001], [1.72875726E12, 1148.0499999999997], [1.72875984E12, 1976.7999999999997], [1.72876086E12, 1939.3], [1.72875402E12, 1569.4], [1.72875624E12, 1153.2499999999995], [1.72875606E12, 1173.7999999999995], [1.72876104E12, 1972.4999999999993], [1.72875882E12, 1558.0], [1.72875504E12, 986.5999999999999], [1.72876002E12, 1960.6999999999998], [1.72875486E12, 985.2], [1.72875708E12, 1135.5], [1.72875558E12, 1045.8], [1.7287578E12, 1550.0], [1.7287593E12, 1556.4999999999998], [1.72875456E12, 976.2000000000005], [1.7287605E12, 2000.4999999999986], [1.72875438E12, 1019.5], [1.7287566E12, 1171.9], [1.72875828E12, 1527.9], [1.7287554E12, 1025.2999999999997], [1.72875762E12, 1133.1999999999998], [1.72875948E12, 1508.75], [1.7287542E12, 991.3999999999999], [1.72875642E12, 1122.1999999999998], [1.72875846E12, 1544.0], [1.72876068E12, 1983.8999999999999], [1.72875492E12, 996.1999999999999], [1.72875834E12, 1583.2499999999998], [1.72876056E12, 1998.0500000000004], [1.72875714E12, 1141.35], [1.72875954E12, 1315.6499999999999], [1.72875594E12, 1186.2999999999997], [1.72876074E12, 1904.0], [1.72875852E12, 1614.0499999999997], [1.72875696E12, 1134.9999999999995], [1.72875474E12, 1010.9499999999999], [1.72875678E12, 1166.0], [1.72875576E12, 1051.6000000000001], [1.72875972E12, 2002.5999999999995], [1.7287575E12, 1142.8], [1.728759E12, 1562.3999999999992], [1.72875426E12, 966.4000000000001], [1.72875648E12, 1171.4999999999995], [1.7287563E12, 1140.8], [1.72875528E12, 1001.75], [1.72875798E12, 1518.4499999999996], [1.7287602E12, 2026.5], [1.72875816E12, 1542.25], [1.7287551E12, 949.3999999999999], [1.72875732E12, 1117.5], [1.72875408E12, 1004.5499999999997], [1.72875918E12, 1546.0], [1.72875936E12, 1506.5], [1.72875612E12, 1144.4499999999996], [1.72876038E12, 1913.05]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72876116E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 182.0, "minX": 1.0, "maxY": 801.0, "series": [{"data": [[2.0, 665.0], [32.0, 223.5], [33.0, 196.0], [34.0, 221.5], [35.0, 218.0], [36.0, 223.0], [39.0, 281.0], [40.0, 182.0], [3.0, 548.0], [4.0, 502.0], [5.0, 542.0], [6.0, 524.0], [7.0, 500.0], [8.0, 473.5], [9.0, 427.0], [10.0, 413.5], [11.0, 408.0], [12.0, 423.5], [13.0, 456.5], [14.0, 504.0], [15.0, 510.0], [1.0, 801.0], [16.0, 512.0], [17.0, 506.0], [18.0, 524.5], [19.0, 484.5], [20.0, 432.5], [21.0, 417.5], [22.0, 397.0], [23.0, 358.0], [24.0, 332.5], [25.0, 327.0], [26.0, 297.0], [27.0, 257.0], [28.0, 251.5], [29.0, 246.0], [30.0, 255.0], [31.0, 224.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 107.5, "minX": 1.0, "maxY": 484.0, "series": [{"data": [[2.0, 464.5], [32.0, 130.5], [33.0, 125.0], [34.0, 153.5], [35.0, 147.0], [36.0, 133.5], [39.0, 192.5], [40.0, 107.5], [3.0, 369.5], [4.0, 352.0], [5.0, 365.0], [6.0, 353.5], [7.0, 344.0], [8.0, 332.0], [9.0, 310.0], [10.0, 299.5], [11.0, 292.0], [12.0, 308.0], [13.0, 327.5], [14.0, 359.0], [15.0, 369.0], [1.0, 484.0], [16.0, 365.0], [17.0, 373.0], [18.0, 379.0], [19.0, 351.0], [20.0, 316.0], [21.0, 306.0], [22.0, 289.0], [23.0, 257.5], [24.0, 238.0], [25.0, 231.5], [26.0, 207.0], [27.0, 171.0], [28.0, 168.5], [29.0, 165.5], [30.0, 173.5], [31.0, 144.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.16666666666666666, "minX": 1.72875402E12, "maxY": 21.916666666666668, "series": [{"data": [[1.72876026E12, 21.3], [1.72875462E12, 10.133333333333333], [1.72875684E12, 17.05], [1.72875804E12, 19.633333333333333], [1.72875564E12, 10.233333333333333], [1.72875786E12, 20.416666666666668], [1.72875924E12, 20.266666666666666], [1.72875444E12, 10.316666666666666], [1.72875666E12, 17.9], [1.72875822E12, 19.283333333333335], [1.72876044E12, 20.7], [1.7287584E12, 20.666666666666668], [1.72875546E12, 10.433333333333334], [1.72875768E12, 16.916666666666668], [1.72875942E12, 19.8], [1.72875618E12, 17.233333333333334], [1.7287587E12, 19.7], [1.72876092E12, 21.383333333333333], [1.72875888E12, 20.166666666666668], [1.72875498E12, 9.7], [1.7287572E12, 18.233333333333334], [1.7287599E12, 20.9], [1.72875702E12, 17.65], [1.72876008E12, 20.933333333333334], [1.7287611E12, 17.5], [1.728756E12, 18.016666666666666], [1.72875582E12, 10.366666666666667], [1.72875906E12, 21.416666666666668], [1.7287548E12, 9.766666666666667], [1.72875654E12, 17.35], [1.72875552E12, 9.7], [1.72875996E12, 20.683333333333334], [1.72875792E12, 20.183333333333334], [1.72875534E12, 9.933333333333334], [1.72875756E12, 17.733333333333334], [1.72875432E12, 10.233333333333333], [1.72875894E12, 19.733333333333334], [1.72876116E12, 0.16666666666666666], [1.72875912E12, 19.433333333333334], [1.72875414E12, 5.183333333333334], [1.72875636E12, 17.8], [1.72876014E12, 20.75], [1.72875516E12, 9.966666666666667], [1.7287581E12, 18.65], [1.72876032E12, 21.15], [1.72875738E12, 17.133333333333333], [1.7287596E12, 16.866666666666667], [1.72875588E12, 5.433333333333334], [1.72876062E12, 20.7], [1.72875468E12, 9.533333333333333], [1.72875858E12, 19.8], [1.7287608E12, 20.683333333333334], [1.7287569E12, 17.283333333333335], [1.72875978E12, 21.75], [1.7287557E12, 9.516666666666667], [1.72875774E12, 11.933333333333334], [1.72876098E12, 19.883333333333333], [1.72875876E12, 20.5], [1.7287545E12, 9.183333333333334], [1.72875672E12, 18.3], [1.72875864E12, 20.733333333333334], [1.72875522E12, 10.0], [1.72875744E12, 17.166666666666668], [1.72875966E12, 20.25], [1.72875726E12, 17.533333333333335], [1.72875984E12, 21.45], [1.72876086E12, 21.216666666666665], [1.72875402E12, 0.36666666666666664], [1.72875624E12, 17.5], [1.72875606E12, 17.716666666666665], [1.72876104E12, 20.666666666666668], [1.72875882E12, 20.233333333333334], [1.72875504E12, 10.266666666666667], [1.72876002E12, 20.866666666666667], [1.72875486E12, 10.116666666666667], [1.72875708E12, 17.733333333333334], [1.72875558E12, 9.383333333333333], [1.7287578E12, 19.316666666666666], [1.7287593E12, 20.216666666666665], [1.72875456E12, 9.95], [1.7287605E12, 21.1], [1.72875438E12, 9.816666666666666], [1.7287566E12, 17.35], [1.72875828E12, 21.0], [1.7287554E12, 10.3], [1.72875762E12, 17.383333333333333], [1.72875948E12, 19.383333333333333], [1.7287542E12, 5.016666666666667], [1.72875642E12, 17.95], [1.72875846E12, 20.566666666666666], [1.72876068E12, 20.35], [1.72875492E12, 9.85], [1.72875834E12, 19.633333333333333], [1.72876056E12, 19.833333333333332], [1.72875714E12, 17.866666666666667], [1.72875954E12, 17.683333333333334], [1.72875594E12, 12.133333333333333], [1.72876074E12, 21.916666666666668], [1.72875852E12, 19.533333333333335], [1.72875696E12, 17.916666666666668], [1.72875474E12, 9.0], [1.72875678E12, 16.933333333333334], [1.72875576E12, 10.283333333333333], [1.72875972E12, 20.966666666666665], [1.7287575E12, 17.716666666666665], [1.728759E12, 20.35], [1.72875426E12, 6.083333333333333], [1.72875648E12, 16.633333333333333], [1.7287563E12, 17.716666666666665], [1.72875528E12, 10.066666666666666], [1.72875798E12, 19.633333333333333], [1.7287602E12, 20.066666666666666], [1.72875816E12, 20.4], [1.7287551E12, 10.716666666666667], [1.72875732E12, 17.816666666666666], [1.72875408E12, 5.166666666666667], [1.72875918E12, 19.6], [1.72875936E12, 20.483333333333334], [1.72875612E12, 17.966666666666665], [1.72876038E12, 21.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72876116E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.72875402E12, "maxY": 21.916666666666668, "series": [{"data": [[1.72876026E12, 21.3], [1.72875462E12, 10.133333333333333], [1.72875684E12, 17.05], [1.72875804E12, 19.633333333333333], [1.72875564E12, 10.233333333333333], [1.72875786E12, 20.416666666666668], [1.72875924E12, 20.266666666666666], [1.72875444E12, 10.316666666666666], [1.72875666E12, 17.9], [1.72875822E12, 19.283333333333335], [1.72876044E12, 20.7], [1.7287584E12, 20.666666666666668], [1.72875546E12, 10.433333333333334], [1.72875768E12, 16.933333333333334], [1.72875942E12, 19.8], [1.72875618E12, 17.233333333333334], [1.7287587E12, 19.7], [1.72876092E12, 21.383333333333333], [1.72875888E12, 20.166666666666668], [1.72875498E12, 9.7], [1.7287572E12, 18.233333333333334], [1.7287599E12, 20.9], [1.72875702E12, 17.65], [1.72876008E12, 20.95], [1.7287611E12, 17.716666666666665], [1.728756E12, 18.016666666666666], [1.72875582E12, 10.383333333333333], [1.72875906E12, 21.416666666666668], [1.7287548E12, 9.766666666666667], [1.72875654E12, 17.35], [1.72875552E12, 9.7], [1.72875996E12, 20.683333333333334], [1.72875792E12, 20.183333333333334], [1.72875534E12, 9.933333333333334], [1.72875756E12, 17.733333333333334], [1.72875432E12, 10.233333333333333], [1.72875894E12, 19.733333333333334], [1.72876116E12, 0.2], [1.72875912E12, 19.433333333333334], [1.72875414E12, 5.183333333333334], [1.72875636E12, 17.8], [1.72876014E12, 20.733333333333334], [1.72875516E12, 9.966666666666667], [1.7287581E12, 18.65], [1.72876032E12, 21.15], [1.72875738E12, 17.133333333333333], [1.7287596E12, 16.666666666666668], [1.72875588E12, 5.466666666666667], [1.72876062E12, 20.7], [1.72875468E12, 9.533333333333333], [1.72875858E12, 19.8], [1.7287608E12, 20.683333333333334], [1.7287569E12, 17.283333333333335], [1.72875978E12, 21.75], [1.7287557E12, 9.516666666666667], [1.72875774E12, 12.016666666666667], [1.72876098E12, 19.883333333333333], [1.72875876E12, 20.5], [1.7287545E12, 9.183333333333334], [1.72875672E12, 18.3], [1.72875864E12, 20.733333333333334], [1.72875522E12, 10.0], [1.72875744E12, 17.166666666666668], [1.72875966E12, 20.25], [1.72875726E12, 17.533333333333335], [1.72875984E12, 21.45], [1.72876086E12, 21.216666666666665], [1.72875402E12, 0.3333333333333333], [1.72875624E12, 17.5], [1.72875606E12, 17.716666666666665], [1.72876104E12, 20.683333333333334], [1.72875882E12, 20.233333333333334], [1.72875504E12, 10.266666666666667], [1.72876002E12, 20.866666666666667], [1.72875486E12, 10.116666666666667], [1.72875708E12, 17.733333333333334], [1.72875558E12, 9.383333333333333], [1.7287578E12, 19.15], [1.7287593E12, 20.216666666666665], [1.72875456E12, 9.95], [1.7287605E12, 21.1], [1.72875438E12, 9.816666666666666], [1.7287566E12, 17.35], [1.72875828E12, 21.0], [1.7287554E12, 10.3], [1.72875762E12, 17.383333333333333], [1.72875948E12, 19.4], [1.7287542E12, 5.016666666666667], [1.72875642E12, 17.95], [1.72875846E12, 20.566666666666666], [1.72876068E12, 20.35], [1.72875492E12, 9.85], [1.72875834E12, 19.633333333333333], [1.72876056E12, 19.833333333333332], [1.72875714E12, 17.866666666666667], [1.72875954E12, 17.8], [1.72875594E12, 12.016666666666667], [1.72876074E12, 21.916666666666668], [1.72875852E12, 19.533333333333335], [1.72875696E12, 17.916666666666668], [1.72875474E12, 9.0], [1.72875678E12, 16.933333333333334], [1.72875576E12, 10.283333333333333], [1.72875972E12, 20.966666666666665], [1.7287575E12, 17.716666666666665], [1.728759E12, 20.35], [1.72875426E12, 6.05], [1.72875648E12, 16.633333333333333], [1.7287563E12, 17.716666666666665], [1.72875528E12, 10.066666666666666], [1.72875798E12, 19.633333333333333], [1.7287602E12, 20.066666666666666], [1.72875816E12, 20.4], [1.7287551E12, 10.716666666666667], [1.72875732E12, 17.816666666666666], [1.72875408E12, 5.166666666666667], [1.72875918E12, 19.6], [1.72875936E12, 20.483333333333334], [1.72875612E12, 17.966666666666665], [1.72876038E12, 21.3]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72876116E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.72875402E12, "maxY": 21.916666666666668, "series": [{"data": [[1.72876026E12, 21.3], [1.72875462E12, 10.133333333333333], [1.72875684E12, 17.05], [1.72875804E12, 19.633333333333333], [1.72875564E12, 10.233333333333333], [1.72875786E12, 20.416666666666668], [1.72875924E12, 20.266666666666666], [1.72875444E12, 10.316666666666666], [1.72875666E12, 17.9], [1.72875822E12, 19.283333333333335], [1.72876044E12, 20.7], [1.7287584E12, 20.666666666666668], [1.72875546E12, 10.433333333333334], [1.72875768E12, 16.933333333333334], [1.72875942E12, 19.8], [1.72875618E12, 17.233333333333334], [1.7287587E12, 19.7], [1.72876092E12, 21.383333333333333], [1.72875888E12, 20.166666666666668], [1.72875498E12, 9.7], [1.7287572E12, 18.233333333333334], [1.7287599E12, 20.9], [1.72875702E12, 17.65], [1.72876008E12, 20.95], [1.7287611E12, 17.716666666666665], [1.728756E12, 18.016666666666666], [1.72875582E12, 10.383333333333333], [1.72875906E12, 21.416666666666668], [1.7287548E12, 9.766666666666667], [1.72875654E12, 17.35], [1.72875552E12, 9.7], [1.72875996E12, 20.683333333333334], [1.72875792E12, 20.183333333333334], [1.72875534E12, 9.933333333333334], [1.72875756E12, 17.733333333333334], [1.72875432E12, 10.233333333333333], [1.72875894E12, 19.733333333333334], [1.72876116E12, 0.2], [1.72875912E12, 19.433333333333334], [1.72875414E12, 5.183333333333334], [1.72875636E12, 17.8], [1.72876014E12, 20.733333333333334], [1.72875516E12, 9.966666666666667], [1.7287581E12, 18.65], [1.72876032E12, 21.15], [1.72875738E12, 17.133333333333333], [1.7287596E12, 16.666666666666668], [1.72875588E12, 5.466666666666667], [1.72876062E12, 20.7], [1.72875468E12, 9.533333333333333], [1.72875858E12, 19.8], [1.7287608E12, 20.683333333333334], [1.7287569E12, 17.283333333333335], [1.72875978E12, 21.75], [1.7287557E12, 9.516666666666667], [1.72875774E12, 12.016666666666667], [1.72876098E12, 19.883333333333333], [1.72875876E12, 20.5], [1.7287545E12, 9.183333333333334], [1.72875672E12, 18.3], [1.72875864E12, 20.733333333333334], [1.72875522E12, 10.0], [1.72875744E12, 17.166666666666668], [1.72875966E12, 20.25], [1.72875726E12, 17.533333333333335], [1.72875984E12, 21.45], [1.72876086E12, 21.216666666666665], [1.72875402E12, 0.3333333333333333], [1.72875624E12, 17.5], [1.72875606E12, 17.716666666666665], [1.72876104E12, 20.683333333333334], [1.72875882E12, 20.233333333333334], [1.72875504E12, 10.266666666666667], [1.72876002E12, 20.866666666666667], [1.72875486E12, 10.116666666666667], [1.72875708E12, 17.733333333333334], [1.72875558E12, 9.383333333333333], [1.7287578E12, 19.15], [1.7287593E12, 20.216666666666665], [1.72875456E12, 9.95], [1.7287605E12, 21.1], [1.72875438E12, 9.816666666666666], [1.7287566E12, 17.35], [1.72875828E12, 21.0], [1.7287554E12, 10.3], [1.72875762E12, 17.383333333333333], [1.72875948E12, 19.4], [1.7287542E12, 5.016666666666667], [1.72875642E12, 17.95], [1.72875846E12, 20.566666666666666], [1.72876068E12, 20.35], [1.72875492E12, 9.85], [1.72875834E12, 19.633333333333333], [1.72876056E12, 19.833333333333332], [1.72875714E12, 17.866666666666667], [1.72875954E12, 17.8], [1.72875594E12, 12.016666666666667], [1.72876074E12, 21.916666666666668], [1.72875852E12, 19.533333333333335], [1.72875696E12, 17.916666666666668], [1.72875474E12, 9.0], [1.72875678E12, 16.933333333333334], [1.72875576E12, 10.283333333333333], [1.72875972E12, 20.966666666666665], [1.7287575E12, 17.716666666666665], [1.728759E12, 20.35], [1.72875426E12, 6.05], [1.72875648E12, 16.633333333333333], [1.7287563E12, 17.716666666666665], [1.72875528E12, 10.066666666666666], [1.72875798E12, 19.633333333333333], [1.7287602E12, 20.066666666666666], [1.72875816E12, 20.4], [1.7287551E12, 10.716666666666667], [1.72875732E12, 17.816666666666666], [1.72875408E12, 5.166666666666667], [1.72875918E12, 19.6], [1.72875936E12, 20.483333333333334], [1.72875612E12, 17.966666666666665], [1.72876038E12, 21.3]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72876116E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.72875402E12, "maxY": 21.916666666666668, "series": [{"data": [[1.72876026E12, 21.3], [1.72875462E12, 10.133333333333333], [1.72875684E12, 17.05], [1.72875804E12, 19.633333333333333], [1.72875564E12, 10.233333333333333], [1.72875786E12, 20.416666666666668], [1.72875924E12, 20.266666666666666], [1.72875444E12, 10.316666666666666], [1.72875666E12, 17.9], [1.72875822E12, 19.283333333333335], [1.72876044E12, 20.7], [1.7287584E12, 20.666666666666668], [1.72875546E12, 10.433333333333334], [1.72875768E12, 16.933333333333334], [1.72875942E12, 19.8], [1.72875618E12, 17.233333333333334], [1.7287587E12, 19.7], [1.72876092E12, 21.383333333333333], [1.72875888E12, 20.166666666666668], [1.72875498E12, 9.7], [1.7287572E12, 18.233333333333334], [1.7287599E12, 20.9], [1.72875702E12, 17.65], [1.72876008E12, 20.95], [1.7287611E12, 17.716666666666665], [1.728756E12, 18.016666666666666], [1.72875582E12, 10.383333333333333], [1.72875906E12, 21.416666666666668], [1.7287548E12, 9.766666666666667], [1.72875654E12, 17.35], [1.72875552E12, 9.7], [1.72875996E12, 20.683333333333334], [1.72875792E12, 20.183333333333334], [1.72875534E12, 9.933333333333334], [1.72875756E12, 17.733333333333334], [1.72875432E12, 10.233333333333333], [1.72875894E12, 19.733333333333334], [1.72876116E12, 0.2], [1.72875912E12, 19.433333333333334], [1.72875414E12, 5.183333333333334], [1.72875636E12, 17.8], [1.72876014E12, 20.733333333333334], [1.72875516E12, 9.966666666666667], [1.7287581E12, 18.65], [1.72876032E12, 21.15], [1.72875738E12, 17.133333333333333], [1.7287596E12, 16.666666666666668], [1.72875588E12, 5.466666666666667], [1.72876062E12, 20.7], [1.72875468E12, 9.533333333333333], [1.72875858E12, 19.8], [1.7287608E12, 20.683333333333334], [1.7287569E12, 17.283333333333335], [1.72875978E12, 21.75], [1.7287557E12, 9.516666666666667], [1.72875774E12, 12.016666666666667], [1.72876098E12, 19.883333333333333], [1.72875876E12, 20.5], [1.7287545E12, 9.183333333333334], [1.72875672E12, 18.3], [1.72875864E12, 20.733333333333334], [1.72875522E12, 10.0], [1.72875744E12, 17.166666666666668], [1.72875966E12, 20.25], [1.72875726E12, 17.533333333333335], [1.72875984E12, 21.45], [1.72876086E12, 21.216666666666665], [1.72875402E12, 0.3333333333333333], [1.72875624E12, 17.5], [1.72875606E12, 17.716666666666665], [1.72876104E12, 20.683333333333334], [1.72875882E12, 20.233333333333334], [1.72875504E12, 10.266666666666667], [1.72876002E12, 20.866666666666667], [1.72875486E12, 10.116666666666667], [1.72875708E12, 17.733333333333334], [1.72875558E12, 9.383333333333333], [1.7287578E12, 19.15], [1.7287593E12, 20.216666666666665], [1.72875456E12, 9.95], [1.7287605E12, 21.1], [1.72875438E12, 9.816666666666666], [1.7287566E12, 17.35], [1.72875828E12, 21.0], [1.7287554E12, 10.3], [1.72875762E12, 17.383333333333333], [1.72875948E12, 19.4], [1.7287542E12, 5.016666666666667], [1.72875642E12, 17.95], [1.72875846E12, 20.566666666666666], [1.72876068E12, 20.35], [1.72875492E12, 9.85], [1.72875834E12, 19.633333333333333], [1.72876056E12, 19.833333333333332], [1.72875714E12, 17.866666666666667], [1.72875954E12, 17.8], [1.72875594E12, 12.016666666666667], [1.72876074E12, 21.916666666666668], [1.72875852E12, 19.533333333333335], [1.72875696E12, 17.916666666666668], [1.72875474E12, 9.0], [1.72875678E12, 16.933333333333334], [1.72875576E12, 10.283333333333333], [1.72875972E12, 20.966666666666665], [1.7287575E12, 17.716666666666665], [1.728759E12, 20.35], [1.72875426E12, 6.05], [1.72875648E12, 16.633333333333333], [1.7287563E12, 17.716666666666665], [1.72875528E12, 10.066666666666666], [1.72875798E12, 19.633333333333333], [1.7287602E12, 20.066666666666666], [1.72875816E12, 20.4], [1.7287551E12, 10.716666666666667], [1.72875732E12, 17.816666666666666], [1.72875408E12, 5.166666666666667], [1.72875918E12, 19.6], [1.72875936E12, 20.483333333333334], [1.72875612E12, 17.966666666666665], [1.72876038E12, 21.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72876116E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

