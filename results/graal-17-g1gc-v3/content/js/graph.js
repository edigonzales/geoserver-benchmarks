/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 3566.0, "series": [{"data": [[0.0, 29.0], [0.1, 37.0], [0.2, 39.0], [0.3, 41.0], [0.4, 42.0], [0.5, 44.0], [0.6, 45.0], [0.7, 46.0], [0.8, 47.0], [0.9, 48.0], [1.0, 48.0], [1.1, 49.0], [1.2, 50.0], [1.3, 50.0], [1.4, 51.0], [1.5, 52.0], [1.6, 52.0], [1.7, 53.0], [1.8, 54.0], [1.9, 54.0], [2.0, 55.0], [2.1, 55.0], [2.2, 56.0], [2.3, 56.0], [2.4, 57.0], [2.5, 57.0], [2.6, 58.0], [2.7, 58.0], [2.8, 58.0], [2.9, 59.0], [3.0, 59.0], [3.1, 60.0], [3.2, 60.0], [3.3, 61.0], [3.4, 61.0], [3.5, 62.0], [3.6, 62.0], [3.7, 62.0], [3.8, 63.0], [3.9, 63.0], [4.0, 64.0], [4.1, 64.0], [4.2, 64.0], [4.3, 65.0], [4.4, 65.0], [4.5, 65.0], [4.6, 66.0], [4.7, 66.0], [4.8, 67.0], [4.9, 67.0], [5.0, 67.0], [5.1, 68.0], [5.2, 68.0], [5.3, 68.0], [5.4, 69.0], [5.5, 69.0], [5.6, 69.0], [5.7, 70.0], [5.8, 70.0], [5.9, 71.0], [6.0, 71.0], [6.1, 71.0], [6.2, 72.0], [6.3, 72.0], [6.4, 72.0], [6.5, 73.0], [6.6, 73.0], [6.7, 73.0], [6.8, 74.0], [6.9, 74.0], [7.0, 74.0], [7.1, 75.0], [7.2, 75.0], [7.3, 75.0], [7.4, 76.0], [7.5, 76.0], [7.6, 76.0], [7.7, 77.0], [7.8, 77.0], [7.9, 77.0], [8.0, 78.0], [8.1, 78.0], [8.2, 78.0], [8.3, 79.0], [8.4, 79.0], [8.5, 79.0], [8.6, 80.0], [8.7, 80.0], [8.8, 80.0], [8.9, 80.0], [9.0, 81.0], [9.1, 81.0], [9.2, 81.0], [9.3, 82.0], [9.4, 82.0], [9.5, 82.0], [9.6, 83.0], [9.7, 83.0], [9.8, 83.0], [9.9, 84.0], [10.0, 84.0], [10.1, 84.0], [10.2, 85.0], [10.3, 85.0], [10.4, 85.0], [10.5, 86.0], [10.6, 86.0], [10.7, 86.0], [10.8, 87.0], [10.9, 87.0], [11.0, 87.0], [11.1, 87.0], [11.2, 88.0], [11.3, 88.0], [11.4, 88.0], [11.5, 89.0], [11.6, 89.0], [11.7, 89.0], [11.8, 90.0], [11.9, 90.0], [12.0, 90.0], [12.1, 91.0], [12.2, 91.0], [12.3, 91.0], [12.4, 92.0], [12.5, 92.0], [12.6, 92.0], [12.7, 92.0], [12.8, 93.0], [12.9, 93.0], [13.0, 93.0], [13.1, 94.0], [13.2, 94.0], [13.3, 94.0], [13.4, 95.0], [13.5, 95.0], [13.6, 95.0], [13.7, 95.0], [13.8, 96.0], [13.9, 96.0], [14.0, 96.0], [14.1, 97.0], [14.2, 97.0], [14.3, 97.0], [14.4, 98.0], [14.5, 98.0], [14.6, 98.0], [14.7, 99.0], [14.8, 99.0], [14.9, 99.0], [15.0, 100.0], [15.1, 100.0], [15.2, 100.0], [15.3, 101.0], [15.4, 101.0], [15.5, 101.0], [15.6, 102.0], [15.7, 102.0], [15.8, 102.0], [15.9, 103.0], [16.0, 103.0], [16.1, 103.0], [16.2, 104.0], [16.3, 104.0], [16.4, 104.0], [16.5, 105.0], [16.6, 105.0], [16.7, 105.0], [16.8, 106.0], [16.9, 106.0], [17.0, 106.0], [17.1, 107.0], [17.2, 107.0], [17.3, 107.0], [17.4, 108.0], [17.5, 108.0], [17.6, 108.0], [17.7, 109.0], [17.8, 109.0], [17.9, 109.0], [18.0, 110.0], [18.1, 110.0], [18.2, 110.0], [18.3, 111.0], [18.4, 111.0], [18.5, 111.0], [18.6, 112.0], [18.7, 112.0], [18.8, 112.0], [18.9, 113.0], [19.0, 113.0], [19.1, 113.0], [19.2, 114.0], [19.3, 114.0], [19.4, 114.0], [19.5, 115.0], [19.6, 115.0], [19.7, 115.0], [19.8, 116.0], [19.9, 116.0], [20.0, 117.0], [20.1, 117.0], [20.2, 117.0], [20.3, 118.0], [20.4, 118.0], [20.5, 119.0], [20.6, 119.0], [20.7, 119.0], [20.8, 120.0], [20.9, 120.0], [21.0, 120.0], [21.1, 121.0], [21.2, 121.0], [21.3, 122.0], [21.4, 122.0], [21.5, 122.0], [21.6, 123.0], [21.7, 123.0], [21.8, 124.0], [21.9, 124.0], [22.0, 124.0], [22.1, 125.0], [22.2, 125.0], [22.3, 125.0], [22.4, 126.0], [22.5, 126.0], [22.6, 127.0], [22.7, 127.0], [22.8, 127.0], [22.9, 128.0], [23.0, 128.0], [23.1, 129.0], [23.2, 129.0], [23.3, 129.0], [23.4, 130.0], [23.5, 130.0], [23.6, 131.0], [23.7, 131.0], [23.8, 131.0], [23.9, 132.0], [24.0, 132.0], [24.1, 133.0], [24.2, 133.0], [24.3, 134.0], [24.4, 134.0], [24.5, 134.0], [24.6, 135.0], [24.7, 135.0], [24.8, 136.0], [24.9, 136.0], [25.0, 136.0], [25.1, 137.0], [25.2, 137.0], [25.3, 138.0], [25.4, 138.0], [25.5, 139.0], [25.6, 139.0], [25.7, 140.0], [25.8, 140.0], [25.9, 141.0], [26.0, 141.0], [26.1, 142.0], [26.2, 142.0], [26.3, 143.0], [26.4, 143.0], [26.5, 143.0], [26.6, 144.0], [26.7, 144.0], [26.8, 145.0], [26.9, 145.0], [27.0, 146.0], [27.1, 146.0], [27.2, 147.0], [27.3, 147.0], [27.4, 148.0], [27.5, 148.0], [27.6, 149.0], [27.7, 149.0], [27.8, 150.0], [27.9, 150.0], [28.0, 151.0], [28.1, 151.0], [28.2, 152.0], [28.3, 152.0], [28.4, 153.0], [28.5, 153.0], [28.6, 154.0], [28.7, 154.0], [28.8, 155.0], [28.9, 155.0], [29.0, 156.0], [29.1, 156.0], [29.2, 157.0], [29.3, 157.0], [29.4, 158.0], [29.5, 158.0], [29.6, 159.0], [29.7, 160.0], [29.8, 160.0], [29.9, 161.0], [30.0, 161.0], [30.1, 162.0], [30.2, 162.0], [30.3, 163.0], [30.4, 163.0], [30.5, 164.0], [30.6, 164.0], [30.7, 165.0], [30.8, 166.0], [30.9, 166.0], [31.0, 167.0], [31.1, 167.0], [31.2, 168.0], [31.3, 168.0], [31.4, 169.0], [31.5, 170.0], [31.6, 170.0], [31.7, 171.0], [31.8, 172.0], [31.9, 172.0], [32.0, 173.0], [32.1, 174.0], [32.2, 174.0], [32.3, 175.0], [32.4, 176.0], [32.5, 176.0], [32.6, 177.0], [32.7, 178.0], [32.8, 178.0], [32.9, 179.0], [33.0, 180.0], [33.1, 180.0], [33.2, 181.0], [33.3, 182.0], [33.4, 183.0], [33.5, 183.0], [33.6, 184.0], [33.7, 185.0], [33.8, 186.0], [33.9, 186.0], [34.0, 187.0], [34.1, 188.0], [34.2, 189.0], [34.3, 189.0], [34.4, 190.0], [34.5, 191.0], [34.6, 192.0], [34.7, 193.0], [34.8, 194.0], [34.9, 194.0], [35.0, 195.0], [35.1, 196.0], [35.2, 197.0], [35.3, 198.0], [35.4, 198.0], [35.5, 199.0], [35.6, 200.0], [35.7, 201.0], [35.8, 202.0], [35.9, 203.0], [36.0, 204.0], [36.1, 205.0], [36.2, 206.0], [36.3, 207.0], [36.4, 208.0], [36.5, 209.0], [36.6, 210.0], [36.7, 211.0], [36.8, 212.0], [36.9, 213.0], [37.0, 214.0], [37.1, 215.0], [37.2, 216.0], [37.3, 217.0], [37.4, 218.0], [37.5, 220.0], [37.6, 221.0], [37.7, 222.0], [37.8, 223.0], [37.9, 224.0], [38.0, 225.0], [38.1, 227.0], [38.2, 228.0], [38.3, 229.0], [38.4, 230.0], [38.5, 231.0], [38.6, 232.0], [38.7, 234.0], [38.8, 235.0], [38.9, 237.0], [39.0, 238.0], [39.1, 239.0], [39.2, 241.0], [39.3, 242.0], [39.4, 244.0], [39.5, 245.0], [39.6, 247.0], [39.7, 249.0], [39.8, 250.0], [39.9, 252.0], [40.0, 253.0], [40.1, 255.0], [40.2, 257.0], [40.3, 258.0], [40.4, 260.0], [40.5, 261.0], [40.6, 263.0], [40.7, 265.0], [40.8, 266.0], [40.9, 268.0], [41.0, 270.0], [41.1, 272.0], [41.2, 274.0], [41.3, 276.0], [41.4, 278.0], [41.5, 280.0], [41.6, 282.0], [41.7, 284.0], [41.8, 285.0], [41.9, 288.0], [42.0, 290.0], [42.1, 292.0], [42.2, 294.0], [42.3, 296.0], [42.4, 298.0], [42.5, 301.0], [42.6, 303.0], [42.7, 305.0], [42.8, 307.0], [42.9, 309.0], [43.0, 311.0], [43.1, 313.0], [43.2, 315.0], [43.3, 317.0], [43.4, 319.0], [43.5, 321.0], [43.6, 324.0], [43.7, 326.0], [43.8, 329.0], [43.9, 332.0], [44.0, 334.0], [44.1, 336.0], [44.2, 338.0], [44.3, 341.0], [44.4, 344.0], [44.5, 346.0], [44.6, 349.0], [44.7, 351.0], [44.8, 353.0], [44.9, 356.0], [45.0, 358.0], [45.1, 360.0], [45.2, 363.0], [45.3, 366.0], [45.4, 368.0], [45.5, 371.0], [45.6, 374.0], [45.7, 376.0], [45.8, 378.0], [45.9, 381.0], [46.0, 383.0], [46.1, 386.0], [46.2, 389.0], [46.3, 391.0], [46.4, 393.0], [46.5, 396.0], [46.6, 398.0], [46.7, 400.0], [46.8, 403.0], [46.9, 405.0], [47.0, 408.0], [47.1, 411.0], [47.2, 413.0], [47.3, 415.0], [47.4, 418.0], [47.5, 420.0], [47.6, 422.0], [47.7, 424.0], [47.8, 427.0], [47.9, 429.0], [48.0, 431.0], [48.1, 434.0], [48.2, 436.0], [48.3, 438.0], [48.4, 440.0], [48.5, 443.0], [48.6, 445.0], [48.7, 448.0], [48.8, 450.0], [48.9, 452.0], [49.0, 454.0], [49.1, 456.0], [49.2, 458.0], [49.3, 460.0], [49.4, 463.0], [49.5, 465.0], [49.6, 467.0], [49.7, 469.0], [49.8, 471.0], [49.9, 474.0], [50.0, 475.0], [50.1, 478.0], [50.2, 480.0], [50.3, 482.0], [50.4, 484.0], [50.5, 486.0], [50.6, 488.0], [50.7, 490.0], [50.8, 492.0], [50.9, 494.0], [51.0, 496.0], [51.1, 498.0], [51.2, 500.0], [51.3, 502.0], [51.4, 504.0], [51.5, 506.0], [51.6, 508.0], [51.7, 510.0], [51.8, 511.0], [51.9, 513.0], [52.0, 515.0], [52.1, 517.0], [52.2, 519.0], [52.3, 521.0], [52.4, 524.0], [52.5, 525.0], [52.6, 527.0], [52.7, 529.0], [52.8, 531.0], [52.9, 533.0], [53.0, 534.0], [53.1, 536.0], [53.2, 538.0], [53.3, 541.0], [53.4, 543.0], [53.5, 545.0], [53.6, 547.0], [53.7, 549.0], [53.8, 551.0], [53.9, 553.0], [54.0, 555.0], [54.1, 557.0], [54.2, 559.0], [54.3, 560.0], [54.4, 562.0], [54.5, 564.0], [54.6, 565.0], [54.7, 567.0], [54.8, 570.0], [54.9, 571.0], [55.0, 573.0], [55.1, 575.0], [55.2, 576.0], [55.3, 579.0], [55.4, 580.0], [55.5, 582.0], [55.6, 584.0], [55.7, 586.0], [55.8, 588.0], [55.9, 590.0], [56.0, 591.0], [56.1, 593.0], [56.2, 596.0], [56.3, 597.0], [56.4, 599.0], [56.5, 601.0], [56.6, 603.0], [56.7, 604.0], [56.8, 606.0], [56.9, 608.0], [57.0, 610.0], [57.1, 611.0], [57.2, 613.0], [57.3, 615.0], [57.4, 617.0], [57.5, 618.0], [57.6, 620.0], [57.7, 621.0], [57.8, 623.0], [57.9, 625.0], [58.0, 627.0], [58.1, 628.0], [58.2, 630.0], [58.3, 632.0], [58.4, 634.0], [58.5, 636.0], [58.6, 637.0], [58.7, 639.0], [58.8, 641.0], [58.9, 643.0], [59.0, 645.0], [59.1, 647.0], [59.2, 648.0], [59.3, 650.0], [59.4, 652.0], [59.5, 654.0], [59.6, 656.0], [59.7, 658.0], [59.8, 659.0], [59.9, 661.0], [60.0, 663.0], [60.1, 665.0], [60.2, 666.0], [60.3, 668.0], [60.4, 670.0], [60.5, 672.0], [60.6, 673.0], [60.7, 675.0], [60.8, 677.0], [60.9, 679.0], [61.0, 681.0], [61.1, 682.0], [61.2, 684.0], [61.3, 686.0], [61.4, 688.0], [61.5, 689.0], [61.6, 691.0], [61.7, 693.0], [61.8, 694.0], [61.9, 696.0], [62.0, 698.0], [62.1, 700.0], [62.2, 702.0], [62.3, 703.0], [62.4, 705.0], [62.5, 706.0], [62.6, 708.0], [62.7, 710.0], [62.8, 711.0], [62.9, 713.0], [63.0, 715.0], [63.1, 717.0], [63.2, 719.0], [63.3, 720.0], [63.4, 722.0], [63.5, 724.0], [63.6, 725.0], [63.7, 727.0], [63.8, 729.0], [63.9, 731.0], [64.0, 732.0], [64.1, 734.0], [64.2, 736.0], [64.3, 738.0], [64.4, 740.0], [64.5, 742.0], [64.6, 743.0], [64.7, 745.0], [64.8, 747.0], [64.9, 748.0], [65.0, 750.0], [65.1, 751.0], [65.2, 753.0], [65.3, 755.0], [65.4, 756.0], [65.5, 758.0], [65.6, 760.0], [65.7, 761.0], [65.8, 763.0], [65.9, 765.0], [66.0, 767.0], [66.1, 769.0], [66.2, 771.0], [66.3, 772.0], [66.4, 774.0], [66.5, 776.0], [66.6, 777.0], [66.7, 779.0], [66.8, 781.0], [66.9, 783.0], [67.0, 785.0], [67.1, 787.0], [67.2, 788.0], [67.3, 790.0], [67.4, 792.0], [67.5, 793.0], [67.6, 795.0], [67.7, 797.0], [67.8, 799.0], [67.9, 801.0], [68.0, 802.0], [68.1, 804.0], [68.2, 805.0], [68.3, 807.0], [68.4, 809.0], [68.5, 811.0], [68.6, 813.0], [68.7, 815.0], [68.8, 816.0], [68.9, 818.0], [69.0, 820.0], [69.1, 822.0], [69.2, 824.0], [69.3, 826.0], [69.4, 828.0], [69.5, 830.0], [69.6, 831.0], [69.7, 833.0], [69.8, 835.0], [69.9, 837.0], [70.0, 838.0], [70.1, 840.0], [70.2, 842.0], [70.3, 844.0], [70.4, 846.0], [70.5, 848.0], [70.6, 849.0], [70.7, 851.0], [70.8, 853.0], [70.9, 855.0], [71.0, 857.0], [71.1, 859.0], [71.2, 861.0], [71.3, 863.0], [71.4, 865.0], [71.5, 867.0], [71.6, 869.0], [71.7, 870.0], [71.8, 872.0], [71.9, 874.0], [72.0, 876.0], [72.1, 878.0], [72.2, 880.0], [72.3, 881.0], [72.4, 883.0], [72.5, 885.0], [72.6, 887.0], [72.7, 889.0], [72.8, 891.0], [72.9, 893.0], [73.0, 894.0], [73.1, 897.0], [73.2, 899.0], [73.3, 901.0], [73.4, 903.0], [73.5, 905.0], [73.6, 907.0], [73.7, 909.0], [73.8, 911.0], [73.9, 913.0], [74.0, 915.0], [74.1, 917.0], [74.2, 919.0], [74.3, 921.0], [74.4, 923.0], [74.5, 924.0], [74.6, 926.0], [74.7, 928.0], [74.8, 931.0], [74.9, 932.0], [75.0, 934.0], [75.1, 936.0], [75.2, 938.0], [75.3, 941.0], [75.4, 943.0], [75.5, 945.0], [75.6, 946.0], [75.7, 948.0], [75.8, 951.0], [75.9, 953.0], [76.0, 955.0], [76.1, 957.0], [76.2, 960.0], [76.3, 962.0], [76.4, 964.0], [76.5, 966.0], [76.6, 967.0], [76.7, 970.0], [76.8, 972.0], [76.9, 974.0], [77.0, 977.0], [77.1, 979.0], [77.2, 981.0], [77.3, 983.0], [77.4, 985.0], [77.5, 987.0], [77.6, 989.0], [77.7, 991.0], [77.8, 994.0], [77.9, 996.0], [78.0, 998.0], [78.1, 1000.0], [78.2, 1003.0], [78.3, 1005.0], [78.4, 1007.0], [78.5, 1009.0], [78.6, 1011.0], [78.7, 1013.0], [78.8, 1016.0], [78.9, 1018.0], [79.0, 1020.0], [79.1, 1023.0], [79.2, 1025.0], [79.3, 1027.0], [79.4, 1029.0], [79.5, 1032.0], [79.6, 1034.0], [79.7, 1036.0], [79.8, 1039.0], [79.9, 1041.0], [80.0, 1044.0], [80.1, 1046.0], [80.2, 1048.0], [80.3, 1050.0], [80.4, 1053.0], [80.5, 1055.0], [80.6, 1058.0], [80.7, 1061.0], [80.8, 1063.0], [80.9, 1066.0], [81.0, 1068.0], [81.1, 1071.0], [81.2, 1074.0], [81.3, 1076.0], [81.4, 1078.0], [81.5, 1081.0], [81.6, 1083.0], [81.7, 1086.0], [81.8, 1089.0], [81.9, 1091.0], [82.0, 1093.0], [82.1, 1096.0], [82.2, 1098.0], [82.3, 1101.0], [82.4, 1104.0], [82.5, 1106.0], [82.6, 1109.0], [82.7, 1112.0], [82.8, 1114.0], [82.9, 1117.0], [83.0, 1119.0], [83.1, 1122.0], [83.2, 1125.0], [83.3, 1128.0], [83.4, 1131.0], [83.5, 1134.0], [83.6, 1137.0], [83.7, 1139.0], [83.8, 1142.0], [83.9, 1145.0], [84.0, 1148.0], [84.1, 1150.0], [84.2, 1153.0], [84.3, 1156.0], [84.4, 1159.0], [84.5, 1162.0], [84.6, 1165.0], [84.7, 1167.0], [84.8, 1170.0], [84.9, 1173.0], [85.0, 1175.0], [85.1, 1177.0], [85.2, 1181.0], [85.3, 1184.0], [85.4, 1186.0], [85.5, 1189.0], [85.6, 1192.0], [85.7, 1195.0], [85.8, 1198.0], [85.9, 1201.0], [86.0, 1204.0], [86.1, 1207.0], [86.2, 1210.0], [86.3, 1214.0], [86.4, 1217.0], [86.5, 1220.0], [86.6, 1223.0], [86.7, 1226.0], [86.8, 1229.0], [86.9, 1232.0], [87.0, 1236.0], [87.1, 1239.0], [87.2, 1243.0], [87.3, 1246.0], [87.4, 1250.0], [87.5, 1253.0], [87.6, 1257.0], [87.7, 1261.0], [87.8, 1264.0], [87.9, 1267.0], [88.0, 1271.0], [88.1, 1274.0], [88.2, 1277.0], [88.3, 1281.0], [88.4, 1285.0], [88.5, 1288.0], [88.6, 1292.0], [88.7, 1296.0], [88.8, 1300.0], [88.9, 1303.0], [89.0, 1307.0], [89.1, 1311.0], [89.2, 1314.0], [89.3, 1318.0], [89.4, 1322.0], [89.5, 1326.0], [89.6, 1330.0], [89.7, 1334.0], [89.8, 1338.0], [89.9, 1342.0], [90.0, 1347.0], [90.1, 1351.0], [90.2, 1355.0], [90.3, 1359.0], [90.4, 1363.0], [90.5, 1368.0], [90.6, 1372.0], [90.7, 1376.0], [90.8, 1380.0], [90.9, 1384.0], [91.0, 1389.0], [91.1, 1393.0], [91.2, 1398.0], [91.3, 1402.0], [91.4, 1406.0], [91.5, 1412.0], [91.6, 1416.0], [91.7, 1421.0], [91.8, 1426.0], [91.9, 1430.0], [92.0, 1434.0], [92.1, 1439.0], [92.2, 1445.0], [92.3, 1451.0], [92.4, 1456.0], [92.5, 1461.0], [92.6, 1466.0], [92.7, 1472.0], [92.8, 1477.0], [92.9, 1483.0], [93.0, 1489.0], [93.1, 1494.0], [93.2, 1500.0], [93.3, 1506.0], [93.4, 1512.0], [93.5, 1518.0], [93.6, 1524.0], [93.7, 1530.0], [93.8, 1536.0], [93.9, 1541.0], [94.0, 1547.0], [94.1, 1553.0], [94.2, 1560.0], [94.3, 1566.0], [94.4, 1573.0], [94.5, 1580.0], [94.6, 1587.0], [94.7, 1594.0], [94.8, 1602.0], [94.9, 1609.0], [95.0, 1617.0], [95.1, 1625.0], [95.2, 1634.0], [95.3, 1641.0], [95.4, 1649.0], [95.5, 1657.0], [95.6, 1666.0], [95.7, 1674.0], [95.8, 1683.0], [95.9, 1691.0], [96.0, 1700.0], [96.1, 1708.0], [96.2, 1716.0], [96.3, 1725.0], [96.4, 1735.0], [96.5, 1746.0], [96.6, 1756.0], [96.7, 1765.0], [96.8, 1776.0], [96.9, 1788.0], [97.0, 1798.0], [97.1, 1809.0], [97.2, 1820.0], [97.3, 1833.0], [97.4, 1847.0], [97.5, 1862.0], [97.6, 1877.0], [97.7, 1890.0], [97.8, 1905.0], [97.9, 1922.0], [98.0, 1938.0], [98.1, 1955.0], [98.2, 1972.0], [98.3, 1994.0], [98.4, 2012.0], [98.5, 2030.0], [98.6, 2053.0], [98.7, 2075.0], [98.8, 2103.0], [98.9, 2126.0], [99.0, 2153.0], [99.1, 2185.0], [99.2, 2217.0], [99.3, 2254.0], [99.4, 2303.0], [99.5, 2358.0], [99.6, 2417.0], [99.7, 2501.0], [99.8, 2609.0], [99.9, 2769.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 24124.0, "series": [{"data": [[0.0, 17497.0], [600.0, 6645.0], [700.0, 6718.0], [800.0, 6341.0], [900.0, 5661.0], [1000.0, 4906.0], [1100.0, 4233.0], [1200.0, 3438.0], [1300.0, 2869.0], [1400.0, 2292.0], [1500.0, 1841.0], [100.0, 24124.0], [1600.0, 1438.0], [1700.0, 1185.0], [1800.0, 882.0], [1900.0, 667.0], [2000.0, 523.0], [2100.0, 434.0], [2200.0, 288.0], [2300.0, 214.0], [2400.0, 144.0], [2500.0, 106.0], [2600.0, 92.0], [2700.0, 55.0], [2800.0, 28.0], [2900.0, 33.0], [3000.0, 17.0], [3100.0, 5.0], [200.0, 8127.0], [3200.0, 4.0], [3300.0, 4.0], [3400.0, 5.0], [3500.0, 5.0], [300.0, 4937.0], [400.0, 5290.0], [500.0, 6152.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7945.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 60030.0, "series": [{"data": [[0.0, 60030.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 49225.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7945.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72849218E12, "maxY": 16.0, "series": [{"data": [[1.72849662E12, 12.0], [1.72849692E12, 12.0], [1.72849722E12, 12.0], [1.72849752E12, 12.0], [1.72849782E12, 10.643646408839771], [1.7284962E12, 12.0], [1.7284965E12, 12.0], [1.7284968E12, 12.0], [1.7284971E12, 12.0], [1.7284974E12, 12.0], [1.7284977E12, 12.0], [1.72849608E12, 12.0], [1.72849638E12, 12.0], [1.72849668E12, 12.0], [1.72849698E12, 12.0], [1.72849728E12, 12.0], [1.72849758E12, 12.0], [1.72849596E12, 11.907547169811329], [1.72849626E12, 12.0], [1.72849656E12, 12.0], [1.72849686E12, 12.0], [1.72849716E12, 12.0], [1.72849746E12, 12.0], [1.72849788E12, 4.42982456140351], [1.72849776E12, 12.0], [1.72849614E12, 12.0], [1.72849644E12, 12.0], [1.72849674E12, 12.0], [1.72849704E12, 12.0], [1.72849734E12, 12.0], [1.72849764E12, 12.0], [1.72849602E12, 12.0], [1.72849632E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72849242E12, 1.0], [1.72849224E12, 2.0], [1.7284923E12, 2.0], [1.72849218E12, 2.0], [1.72849236E12, 1.9679715302491103]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72849338E12, 4.0], [1.72849278E12, 4.0], [1.72849368E12, 4.0], [1.72849308E12, 4.0], [1.72849266E12, 4.0], [1.72849296E12, 4.0], [1.72849398E12, 3.990275526742302], [1.72849326E12, 4.0], [1.72849356E12, 4.0], [1.72849386E12, 4.0], [1.72849314E12, 4.0], [1.72849344E12, 4.0], [1.72849254E12, 4.0], [1.72849284E12, 4.0], [1.72849242E12, 3.994328922495274], [1.72849404E12, 2.478571428571428], [1.72849272E12, 4.0], [1.72849374E12, 4.0], [1.72849362E12, 4.0], [1.72849302E12, 4.0], [1.72849392E12, 4.0], [1.72849332E12, 4.0], [1.7284929E12, 4.0], [1.7284932E12, 4.0], [1.7284926E12, 4.0], [1.7284938E12, 4.0], [1.72849248E12, 4.0], [1.7284935E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72849872E12, 16.0], [1.72849842E12, 16.0], [1.72849812E12, 16.0], [1.72849944E12, 13.78777869529314], [1.72849914E12, 16.0], [1.72849884E12, 16.0], [1.72849854E12, 16.0], [1.7284992E12, 16.0], [1.7284989E12, 16.0], [1.7284986E12, 16.0], [1.7284983E12, 16.0], [1.728498E12, 16.0], [1.72849932E12, 16.0], [1.72849902E12, 16.0], [1.72849938E12, 16.0], [1.72849908E12, 16.0], [1.72849878E12, 16.0], [1.72849848E12, 16.0], [1.72849818E12, 16.0], [1.72849788E12, 15.94583333333334], [1.7284995E12, 3.7253521126760565], [1.72849824E12, 16.0], [1.72849794E12, 16.0], [1.72849926E12, 16.0], [1.72849896E12, 16.0], [1.72849866E12, 16.0], [1.72849836E12, 16.0], [1.72849806E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.728495E12, 8.0], [1.7284947E12, 8.0], [1.7284956E12, 8.0], [1.7284953E12, 8.0], [1.72849428E12, 8.0], [1.7284959E12, 7.920781893004118], [1.72849488E12, 8.0], [1.72849458E12, 8.0], [1.72849548E12, 8.0], [1.72849518E12, 8.0], [1.72849416E12, 8.0], [1.72849578E12, 8.0], [1.72849476E12, 8.0], [1.72849446E12, 8.0], [1.72849536E12, 8.0], [1.72849506E12, 8.0], [1.72849404E12, 7.983114446529087], [1.72849566E12, 8.0], [1.72849596E12, 4.522033898305084], [1.72849464E12, 8.0], [1.72849434E12, 8.0], [1.72849524E12, 8.0], [1.72849494E12, 8.0], [1.72849554E12, 8.0], [1.72849584E12, 8.0], [1.72849452E12, 8.0], [1.72849422E12, 8.0], [1.72849512E12, 8.0], [1.72849482E12, 8.0], [1.72849572E12, 8.0], [1.72849542E12, 8.0], [1.7284944E12, 8.0], [1.7284941E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7284995E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 396.32608695652186, "minX": 1.0, "maxY": 835.5254237288138, "series": [{"data": [[2.0, 396.33764135702677], [8.0, 477.50927152317877], [9.0, 498.4354066985646], [10.0, 500.93548387096797], [11.0, 598.5722222222217], [3.0, 403.87317073170743], [12.0, 630.0621077627627], [13.0, 672.9583333333336], [14.0, 835.5254237288138], [15.0, 699.3481012658231], [1.0, 396.32608695652186], [4.0, 405.8996117234467], [16.0, 806.2482486020988], [5.0, 438.6057692307693], [6.0, 403.02325581395337], [7.0, 434.16666666666663]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.73518771331058, 600.9360324232066]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72849218E12, "maxY": 6.219524993333333E7, "series": [{"data": [[1.7284947E12, 5.2024892983333334E7], [1.72849692E12, 5.829771353333333E7], [1.72849368E12, 3.0707100466666665E7], [1.72849812E12, 6.03986728E7], [1.72849266E12, 3.0667017883333333E7], [1.7284959E12, 5.2266098766666666E7], [1.72849914E12, 6.1776589416666664E7], [1.72849488E12, 5.129714971666667E7], [1.7284971E12, 5.9122236016666666E7], [1.72849386E12, 3.02574538E7], [1.72849608E12, 5.6901643983333334E7], [1.7284983E12, 6.172542655E7], [1.72849932E12, 6.090860156666667E7], [1.72849284E12, 3.074122465E7], [1.72849506E12, 5.0963064833333336E7], [1.72849728E12, 5.593697931666667E7], [1.72849758E12, 5.781273285E7], [1.72849434E12, 5.074158593333333E7], [1.72849656E12, 5.854902596666667E7], [1.72849878E12, 6.0422074E7], [1.72849332E12, 2.9958824266666666E7], [1.72849554E12, 5.289995721666667E7], [1.72849776E12, 5.769438365E7], [1.72849452E12, 4.97035837E7], [1.72849794E12, 5.9780422983333334E7], [1.7284923E12, 1.5995606683333334E7], [1.72849674E12, 5.886733625E7], [1.72849572E12, 5.150793653333333E7], [1.72849896E12, 6.1272224333333336E7], [1.72849248E12, 2.977816815E7], [1.7284935E12, 2.9769433216666665E7], [1.72849338E12, 3.1833679783333335E7], [1.72849662E12, 5.742243636666667E7], [1.7284956E12, 5.208621505E7], [1.72849782E12, 5.6297326083333336E7], [1.72849884E12, 6.17768991E7], [1.7284968E12, 5.5878542983333334E7], [1.72849236E12, 1.4521595483333332E7], [1.72849458E12, 5.101917896666667E7], [1.7284992E12, 5.967519371666667E7], [1.72849578E12, 5.1359286666666664E7], [1.72849356E12, 3.0588068516666666E7], [1.72849476E12, 5.037380586666667E7], [1.728498E12, 6.118202988333333E7], [1.72849698E12, 5.635353735E7], [1.72849254E12, 3.0285436566666666E7], [1.72849902E12, 6.12148035E7], [1.72849404E12, 3.53507289E7], [1.72849626E12, 5.807479755E7], [1.72849524E12, 5.164525796666667E7], [1.72849848E12, 6.0251102516666666E7], [1.72849302E12, 2.96459285E7], [1.72849746E12, 5.751059915E7], [1.7284995E12, 8162874.45], [1.7284932E12, 3.039220045E7], [1.72849422E12, 5.336134961666667E7], [1.72849644E12, 5.829377868333333E7], [1.72849218E12, 1.33818928E7], [1.72849542E12, 5.071229553333333E7], [1.72849764E12, 5.851872585E7], [1.72849866E12, 5.935826013333333E7], [1.7284944E12, 5.1539613583333336E7], [1.72849872E12, 6.040354581666667E7], [1.72849308E12, 3.1333534333333332E7], [1.7284953E12, 5.1498545483333334E7], [1.72849752E12, 5.865610495E7], [1.72849428E12, 5.048486065E7], [1.7284965E12, 5.677757746666667E7], [1.72849854E12, 6.152847631666667E7], [1.72849548E12, 4.942035456666667E7], [1.7284989E12, 6.164631186666667E7], [1.72849224E12, 1.5359810816666666E7], [1.72849326E12, 2.86183833E7], [1.7284977E12, 5.759882856666667E7], [1.72849344E12, 2.947198485E7], [1.72849446E12, 4.93538209E7], [1.72849668E12, 5.950842168333333E7], [1.72849272E12, 3.1002357183333334E7], [1.72849938E12, 5.948773486666667E7], [1.72849374E12, 3.088688335E7], [1.72849596E12, 3.994367543333333E7], [1.72849494E12, 5.07908547E7], [1.72849716E12, 5.701870805E7], [1.72849818E12, 5.9951794083333336E7], [1.72849392E12, 2.9309781633333333E7], [1.7284929E12, 3.06368882E7], [1.72849614E12, 5.8043138416666664E7], [1.72849512E12, 5.021771785E7], [1.72849734E12, 5.667369321666667E7], [1.72849836E12, 5.95982808E7], [1.7284941E12, 5.00949847E7], [1.72849632E12, 5.9235301333333336E7], [1.728495E12, 5.09177801E7], [1.72849842E12, 6.103122855E7], [1.72849278E12, 3.0542980783333335E7], [1.72849722E12, 5.899839175E7], [1.72849944E12, 5.6599139416666664E7], [1.72849296E12, 3.0861480866666667E7], [1.72849398E12, 2.8786800166666668E7], [1.7284962E12, 5.9597071666666664E7], [1.72849518E12, 4.95681235E7], [1.7284974E12, 5.833777265E7], [1.72849416E12, 4.994277168333333E7], [1.7284986E12, 6.05819328E7], [1.72849314E12, 2.9914258633333333E7], [1.72849638E12, 5.88131243E7], [1.72849536E12, 5.0215368016666666E7], [1.72849242E12, 2.5477800133333333E7], [1.72849566E12, 5.08404983E7], [1.72849908E12, 5.897612788333333E7], [1.72849464E12, 5.020554456666667E7], [1.72849362E12, 3.0785336766666666E7], [1.72849686E12, 5.6781385E7], [1.72849788E12, 5.11356547E7], [1.72849584E12, 5.091505196666667E7], [1.72849824E12, 6.142155105E7], [1.72849482E12, 5.1298599E7], [1.72849704E12, 5.94839494E7], [1.72849926E12, 6.219524993333333E7], [1.7284926E12, 3.02051574E7], [1.7284938E12, 2.87805688E7], [1.72849602E12, 5.920901845E7], [1.72849806E12, 6.025778693333333E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7284947E12, 0.0], [1.72849692E12, 0.0], [1.72849368E12, 0.0], [1.72849812E12, 0.0], [1.72849266E12, 0.0], [1.7284959E12, 0.0], [1.72849914E12, 0.0], [1.72849488E12, 0.0], [1.7284971E12, 0.0], [1.72849386E12, 0.0], [1.72849608E12, 0.0], [1.7284983E12, 0.0], [1.72849932E12, 0.0], [1.72849284E12, 0.0], [1.72849506E12, 0.0], [1.72849728E12, 0.0], [1.72849758E12, 0.0], [1.72849434E12, 0.0], [1.72849656E12, 0.0], [1.72849878E12, 0.0], [1.72849332E12, 0.0], [1.72849554E12, 0.0], [1.72849776E12, 0.0], [1.72849452E12, 0.0], [1.72849794E12, 0.0], [1.7284923E12, 0.0], [1.72849674E12, 0.0], [1.72849572E12, 0.0], [1.72849896E12, 0.0], [1.72849248E12, 0.0], [1.7284935E12, 0.0], [1.72849338E12, 0.0], [1.72849662E12, 0.0], [1.7284956E12, 0.0], [1.72849782E12, 0.0], [1.72849884E12, 0.0], [1.7284968E12, 0.0], [1.72849236E12, 0.0], [1.72849458E12, 0.0], [1.7284992E12, 0.0], [1.72849578E12, 0.0], [1.72849356E12, 0.0], [1.72849476E12, 0.0], [1.728498E12, 0.0], [1.72849698E12, 0.0], [1.72849254E12, 0.0], [1.72849902E12, 0.0], [1.72849404E12, 0.0], [1.72849626E12, 0.0], [1.72849524E12, 0.0], [1.72849848E12, 0.0], [1.72849302E12, 0.0], [1.72849746E12, 0.0], [1.7284995E12, 0.0], [1.7284932E12, 0.0], [1.72849422E12, 0.0], [1.72849644E12, 0.0], [1.72849218E12, 0.0], [1.72849542E12, 0.0], [1.72849764E12, 0.0], [1.72849866E12, 0.0], [1.7284944E12, 0.0], [1.72849872E12, 0.0], [1.72849308E12, 0.0], [1.7284953E12, 0.0], [1.72849752E12, 0.0], [1.72849428E12, 0.0], [1.7284965E12, 0.0], [1.72849854E12, 0.0], [1.72849548E12, 0.0], [1.7284989E12, 0.0], [1.72849224E12, 0.0], [1.72849326E12, 0.0], [1.7284977E12, 0.0], [1.72849344E12, 0.0], [1.72849446E12, 0.0], [1.72849668E12, 0.0], [1.72849272E12, 0.0], [1.72849938E12, 0.0], [1.72849374E12, 0.0], [1.72849596E12, 0.0], [1.72849494E12, 0.0], [1.72849716E12, 0.0], [1.72849818E12, 0.0], [1.72849392E12, 0.0], [1.7284929E12, 0.0], [1.72849614E12, 0.0], [1.72849512E12, 0.0], [1.72849734E12, 0.0], [1.72849836E12, 0.0], [1.7284941E12, 0.0], [1.72849632E12, 0.0], [1.728495E12, 0.0], [1.72849842E12, 0.0], [1.72849278E12, 0.0], [1.72849722E12, 0.0], [1.72849944E12, 0.0], [1.72849296E12, 0.0], [1.72849398E12, 0.0], [1.7284962E12, 0.0], [1.72849518E12, 0.0], [1.7284974E12, 0.0], [1.72849416E12, 0.0], [1.7284986E12, 0.0], [1.72849314E12, 0.0], [1.72849638E12, 0.0], [1.72849536E12, 0.0], [1.72849242E12, 0.0], [1.72849566E12, 0.0], [1.72849908E12, 0.0], [1.72849464E12, 0.0], [1.72849362E12, 0.0], [1.72849686E12, 0.0], [1.72849788E12, 0.0], [1.72849584E12, 0.0], [1.72849824E12, 0.0], [1.72849482E12, 0.0], [1.72849704E12, 0.0], [1.72849926E12, 0.0], [1.7284926E12, 0.0], [1.7284938E12, 0.0], [1.72849602E12, 0.0], [1.72849806E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7284995E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 374.5150976909414, "minX": 1.72849218E12, "maxY": 871.4692585895109, "series": [{"data": [[1.7284947E12, 488.3296032553408], [1.72849692E12, 644.654986522911], [1.72849368E12, 426.2322695035464], [1.72849812E12, 769.6632000000011], [1.72849266E12, 404.7363945578229], [1.7284959E12, 488.09670781892993], [1.72849914E12, 816.7521222410867], [1.72849488E12, 478.7208374875375], [1.7284971E12, 619.2274678111594], [1.72849386E12, 417.95979020979024], [1.72849608E12, 611.1061120543299], [1.7284983E12, 810.5156118143452], [1.72849932E12, 856.4094982078851], [1.72849284E12, 437.2285191956123], [1.72849506E12, 487.2284263959393], [1.72849728E12, 642.1065719360581], [1.72849758E12, 622.1167820069204], [1.72849434E12, 476.30387288977164], [1.72849656E12, 644.2841726618705], [1.72849878E12, 836.3473315835532], [1.72849332E12, 404.7441077441079], [1.72849554E12, 495.1857585139322], [1.72849776E12, 650.0862851952762], [1.72849452E12, 464.91111111111167], [1.72849794E12, 811.1223628691989], [1.7284923E12, 383.52076677316285], [1.72849674E12, 678.5721017907622], [1.72849572E12, 473.8356435643564], [1.72849896E12, 788.1810699588488], [1.72849248E12, 410.0651801029157], [1.7284935E12, 395.7801652892563], [1.72849338E12, 421.115384615385], [1.72849662E12, 607.0767932489443], [1.7284956E12, 490.1726251276813], [1.72849782E12, 592.4327808471439], [1.72849884E12, 810.0497051390058], [1.7284968E12, 644.7032374100717], [1.72849236E12, 415.10676156583634], [1.72849458E12, 496.4948132780082], [1.7284992E12, 783.3385118560915], [1.72849578E12, 483.7693856998993], [1.72849356E12, 409.6598290598289], [1.72849476E12, 474.17757936507917], [1.728498E12, 802.8888888888879], [1.72849698E12, 610.3276740237691], [1.72849254E12, 403.9411764705879], [1.72849902E12, 823.6245704467352], [1.72849404E12, 469.87964338781563], [1.72849626E12, 633.079225352112], [1.72849524E12, 474.5639246778992], [1.72849848E12, 809.5812973883728], [1.72849302E12, 403.68581081081095], [1.72849746E12, 636.6381288614297], [1.7284995E12, 440.89436619718293], [1.7284932E12, 386.0516129032255], [1.72849422E12, 467.85116731517513], [1.72849644E12, 641.6366874443446], [1.72849218E12, 399.36046511627893], [1.72849542E12, 474.61204343534087], [1.72849764E12, 614.8659265584967], [1.72849866E12, 789.4032786885238], [1.7284944E12, 452.7835538752363], [1.72849872E12, 806.9267059814669], [1.72849308E12, 425.7362831858412], [1.7284953E12, 476.5272547076309], [1.72849752E12, 624.2015638575153], [1.72849428E12, 478.0478564307083], [1.7284965E12, 611.4400337837841], [1.72849854E12, 831.9001736111097], [1.72849548E12, 461.670849420849], [1.7284989E12, 871.4692585895109], [1.72849224E12, 381.2961783439492], [1.72849326E12, 388.60162601625996], [1.7284977E12, 640.2001779359446], [1.72849344E12, 387.8109854604197], [1.72849446E12, 478.8265204386845], [1.72849668E12, 617.2119658119653], [1.72849272E12, 402.0585284280938], [1.72849938E12, 827.9734361610961], [1.72849374E12, 419.7863397548163], [1.72849596E12, 536.1745454545451], [1.72849494E12, 481.39759036144574], [1.72849716E12, 634.6077738515903], [1.72849818E12, 797.8356964136783], [1.72849392E12, 380.11269841269825], [1.7284929E12, 428.78214285714245], [1.72849614E12, 639.4019607843126], [1.72849512E12, 460.7497603068074], [1.72849734E12, 608.8157894736847], [1.72849836E12, 805.0218120805371], [1.7284941E12, 483.3802816901412], [1.72849632E12, 665.6349353049904], [1.728495E12, 499.9208333333336], [1.72849842E12, 812.9839119390352], [1.72849278E12, 411.9215017064848], [1.72849722E12, 602.2920502092046], [1.72849944E12, 677.7737407101566], [1.72849296E12, 400.7233333333335], [1.72849398E12, 388.49756888168594], [1.7284962E12, 656.9809090909085], [1.72849518E12, 479.5884115884114], [1.7284974E12, 646.9721723518854], [1.72849416E12, 476.03379721669995], [1.7284986E12, 775.2794830371571], [1.72849314E12, 400.2479201331112], [1.72849638E12, 629.5689201053548], [1.72849536E12, 463.78993223620483], [1.72849242E12, 374.5150976909414], [1.72849566E12, 478.71044776119436], [1.72849908E12, 775.0991136180502], [1.72849464E12, 480.21878121878126], [1.72849362E12, 389.14518760195733], [1.72849686E12, 605.6090604026845], [1.72849788E12, 722.8324022346369], [1.72849584E12, 480.9689689689688], [1.72849824E12, 838.265091863516], [1.72849482E12, 450.67010309278305], [1.72849704E12, 624.8415584415587], [1.72849926E12, 789.577649958915], [1.7284926E12, 435.1905626134302], [1.7284938E12, 410.3401360544218], [1.72849602E12, 609.0532994923855], [1.72849806E12, 789.889621087314]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7284995E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 246.77797513321497, "minX": 1.72849218E12, "maxY": 584.1654611211569, "series": [{"data": [[1.7284947E12, 322.80264496439474], [1.72849692E12, 430.3944294699004], [1.72849368E12, 276.74113475177273], [1.72849812E12, 519.0328000000007], [1.72849266E12, 262.64965986394554], [1.7284959E12, 321.95987654321], [1.72849914E12, 546.3522920203725], [1.72849488E12, 315.9760717846456], [1.7284971E12, 410.56394849785414], [1.72849386E12, 272.47552447552425], [1.72849608E12, 411.50424448217353], [1.7284983E12, 542.9291139240503], [1.72849932E12, 570.094086021506], [1.72849284E12, 284.7879341864717], [1.72849506E12, 322.64263959390894], [1.72849728E12, 430.76998223801013], [1.72849758E12, 415.339965397924], [1.72849434E12, 315.69215491559066], [1.72849656E12, 429.0449640287768], [1.72849878E12, 561.8932633420822], [1.72849332E12, 264.5084175084179], [1.72849554E12, 323.24355005159964], [1.72849776E12, 435.3841961852866], [1.72849452E12, 309.6782608695648], [1.72849794E12, 546.1527426160337], [1.7284923E12, 247.9137380191694], [1.72849674E12, 450.2591894439212], [1.72849572E12, 314.94950495049494], [1.72849896E12, 529.5489711934163], [1.72849248E12, 269.7718696397943], [1.7284935E12, 259.0561983471077], [1.72849338E12, 272.00699300699284], [1.72849662E12, 406.7687763713078], [1.7284956E12, 325.0234933605716], [1.72849782E12, 395.4631675874768], [1.72849884E12, 542.5442291491155], [1.7284968E12, 435.16636690647465], [1.72849236E12, 275.17081850533776], [1.72849458E12, 330.2282157676348], [1.7284992E12, 528.4276369582994], [1.72849578E12, 320.76435045317214], [1.72849356E12, 266.1504273504276], [1.72849476E12, 315.2093253968259], [1.728498E12, 537.5187969924805], [1.72849698E12, 411.4219015280134], [1.72849254E12, 264.16974789915986], [1.72849902E12, 551.973367697593], [1.72849404E12, 310.9004457652301], [1.72849626E12, 422.1716549295773], [1.72849524E12, 312.3894945490586], [1.72849848E12, 545.3487784330258], [1.72849302E12, 263.8429054054056], [1.72849746E12, 426.9541041482793], [1.7284995E12, 284.3873239436619], [1.7284932E12, 249.80322580645165], [1.72849422E12, 306.8686770428007], [1.72849644E12, 426.82724844167393], [1.72849218E12, 261.6007751937985], [1.72849542E12, 317.0730503455084], [1.72849764E12, 407.65328778821544], [1.72849866E12, 531.7688524590166], [1.7284944E12, 299.3667296786398], [1.72849872E12, 543.1819713563604], [1.72849308E12, 275.0601769911504], [1.7284953E12, 314.6580773042616], [1.72849752E12, 415.8366637706337], [1.72849428E12, 318.2073778664009], [1.7284965E12, 410.68158783783775], [1.72849854E12, 554.7673611111106], [1.72849548E12, 305.6167953667955], [1.7284989E12, 584.1654611211569], [1.72849224E12, 248.0636942675158], [1.72849326E12, 257.72845528455287], [1.7284977E12, 428.2846975088968], [1.72849344E12, 255.5783521809369], [1.72849446E12, 319.39381854436715], [1.72849668E12, 409.06153846153836], [1.72849272E12, 261.5133779264214], [1.72849938E12, 559.7069408740358], [1.72849374E12, 271.7565674255694], [1.72849596E12, 356.45939393939415], [1.72849494E12, 320.5562248995983], [1.72849716E12, 424.55388692579476], [1.72849818E12, 533.4762301918261], [1.72849392E12, 248.56349206349208], [1.7284929E12, 280.69107142857126], [1.72849614E12, 425.37789661319067], [1.72849512E12, 307.464046021093], [1.72849734E12, 409.904923599321], [1.72849836E12, 542.2114093959723], [1.7284941E12, 324.9014084507042], [1.72849632E12, 443.82624768946397], [1.728495E12, 334.340625], [1.72849842E12, 543.3878069432689], [1.72849278E12, 269.1501706484642], [1.72849722E12, 398.7707112970711], [1.72849944E12, 456.1106523534272], [1.72849296E12, 260.15499999999986], [1.72849398E12, 255.95137763371116], [1.7284962E12, 437.35818181818195], [1.72849518E12, 320.63736263736234], [1.7284974E12, 432.21184919210054], [1.72849416E12, 318.13320079522873], [1.7284986E12, 518.2843295638122], [1.72849314E12, 262.1331114808653], [1.72849638E12, 418.01580333625986], [1.72849536E12, 308.70861568247796], [1.72849242E12, 246.77797513321497], [1.72849566E12, 318.98208955223856], [1.72849908E12, 523.9887187751817], [1.72849464E12, 321.8591408591408], [1.72849362E12, 252.1680261011421], [1.72849686E12, 404.7197986577179], [1.72849788E12, 488.2653631284915], [1.72849584E12, 319.9499499499501], [1.72849824E12, 559.4453193350836], [1.72849482E12, 297.95126522961573], [1.72849704E12, 415.5402597402597], [1.72849926E12, 526.0616269515209], [1.7284926E12, 286.3230490018152], [1.7284938E12, 272.56122448979573], [1.72849602E12, 402.61844331641316], [1.72849806E12, 530.2084019769372]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7284995E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72849218E12, "maxY": 4.9E-324, "series": [{"data": [[1.7284947E12, 0.0], [1.72849692E12, 0.0], [1.72849368E12, 0.0], [1.72849812E12, 0.0], [1.72849266E12, 0.0], [1.7284959E12, 0.0], [1.72849914E12, 0.0], [1.72849488E12, 0.0], [1.7284971E12, 0.0], [1.72849386E12, 0.0], [1.72849608E12, 0.0], [1.7284983E12, 0.0], [1.72849932E12, 0.0], [1.72849284E12, 0.0], [1.72849506E12, 0.0], [1.72849728E12, 0.0], [1.72849758E12, 0.0], [1.72849434E12, 0.0], [1.72849656E12, 0.0], [1.72849878E12, 0.0], [1.72849332E12, 0.0], [1.72849554E12, 0.0], [1.72849776E12, 0.0], [1.72849452E12, 0.0], [1.72849794E12, 0.0], [1.7284923E12, 0.0], [1.72849674E12, 0.0], [1.72849572E12, 0.0], [1.72849896E12, 0.0], [1.72849248E12, 0.0], [1.7284935E12, 0.0], [1.72849338E12, 0.0], [1.72849662E12, 0.0], [1.7284956E12, 0.0], [1.72849782E12, 0.0], [1.72849884E12, 0.0], [1.7284968E12, 0.0], [1.72849236E12, 0.0], [1.72849458E12, 0.0], [1.7284992E12, 0.0], [1.72849578E12, 0.0], [1.72849356E12, 0.0], [1.72849476E12, 0.0], [1.728498E12, 0.0], [1.72849698E12, 0.0], [1.72849254E12, 0.0], [1.72849902E12, 0.0], [1.72849404E12, 0.0], [1.72849626E12, 0.0], [1.72849524E12, 0.0], [1.72849848E12, 0.0], [1.72849302E12, 0.0], [1.72849746E12, 0.0], [1.7284995E12, 0.0], [1.7284932E12, 0.0], [1.72849422E12, 0.0], [1.72849644E12, 0.0], [1.72849218E12, 0.0], [1.72849542E12, 0.0], [1.72849764E12, 0.0], [1.72849866E12, 0.0], [1.7284944E12, 0.0], [1.72849872E12, 0.0], [1.72849308E12, 0.0], [1.7284953E12, 0.0], [1.72849752E12, 0.0], [1.72849428E12, 0.0], [1.7284965E12, 0.0], [1.72849854E12, 0.0], [1.72849548E12, 0.0], [1.7284989E12, 0.0], [1.72849224E12, 0.0], [1.72849326E12, 0.0], [1.7284977E12, 0.0], [1.72849344E12, 0.0], [1.72849446E12, 0.0], [1.72849668E12, 0.0], [1.72849272E12, 0.0], [1.72849938E12, 0.0], [1.72849374E12, 0.0], [1.72849596E12, 0.0], [1.72849494E12, 0.0], [1.72849716E12, 0.0], [1.72849818E12, 0.0], [1.72849392E12, 0.0], [1.7284929E12, 0.0], [1.72849614E12, 0.0], [1.72849512E12, 0.0], [1.72849734E12, 0.0], [1.72849836E12, 0.0], [1.7284941E12, 0.0], [1.72849632E12, 0.0], [1.728495E12, 0.0], [1.72849842E12, 0.0], [1.72849278E12, 0.0], [1.72849722E12, 0.0], [1.72849944E12, 0.0], [1.72849296E12, 0.0], [1.72849398E12, 0.0], [1.7284962E12, 0.0], [1.72849518E12, 0.0], [1.7284974E12, 0.0], [1.72849416E12, 0.0], [1.7284986E12, 0.0], [1.72849314E12, 0.0], [1.72849638E12, 0.0], [1.72849536E12, 0.0], [1.72849242E12, 0.0], [1.72849566E12, 0.0], [1.72849908E12, 0.0], [1.72849464E12, 0.0], [1.72849362E12, 0.0], [1.72849686E12, 0.0], [1.72849788E12, 0.0], [1.72849584E12, 0.0], [1.72849824E12, 0.0], [1.72849482E12, 0.0], [1.72849704E12, 0.0], [1.72849926E12, 0.0], [1.7284926E12, 0.0], [1.7284938E12, 0.0], [1.72849602E12, 0.0], [1.72849806E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7284995E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.72849218E12, "maxY": 3566.0, "series": [{"data": [[1.7284947E12, 1832.0], [1.72849692E12, 2496.0], [1.72849368E12, 1693.0], [1.72849812E12, 3259.0], [1.72849266E12, 1511.0], [1.7284959E12, 2162.0], [1.72849914E12, 3427.0], [1.72849488E12, 1771.0], [1.7284971E12, 2551.0], [1.72849386E12, 1419.0], [1.72849608E12, 2407.0], [1.7284983E12, 3049.0], [1.72849932E12, 3528.0], [1.72849284E12, 1674.0], [1.72849506E12, 1832.0], [1.72849728E12, 2833.0], [1.72849758E12, 2480.0], [1.72849434E12, 1797.0], [1.72849656E12, 2609.0], [1.72849878E12, 3164.0], [1.72849332E12, 1461.0], [1.72849554E12, 1979.0], [1.72849776E12, 2702.0], [1.72849452E12, 1878.0], [1.72849794E12, 3067.0], [1.7284923E12, 1665.0], [1.72849674E12, 2679.0], [1.72849572E12, 1818.0], [1.72849896E12, 3262.0], [1.72849248E12, 1430.0], [1.7284935E12, 1460.0], [1.72849338E12, 1717.0], [1.72849662E12, 2333.0], [1.7284956E12, 1925.0], [1.72849782E12, 2382.0], [1.72849884E12, 3333.0], [1.7284968E12, 2647.0], [1.72849236E12, 1423.0], [1.72849458E12, 1797.0], [1.7284992E12, 2975.0], [1.72849578E12, 2100.0], [1.72849356E12, 1427.0], [1.72849476E12, 1813.0], [1.728498E12, 3054.0], [1.72849698E12, 2609.0], [1.72849254E12, 1487.0], [1.72849902E12, 3478.0], [1.72849404E12, 1600.0], [1.72849626E12, 2367.0], [1.72849524E12, 1699.0], [1.72849848E12, 3185.0], [1.72849302E12, 1759.0], [1.72849746E12, 2618.0], [1.7284995E12, 1286.0], [1.7284932E12, 1616.0], [1.72849422E12, 1812.0], [1.72849644E12, 2664.0], [1.72849218E12, 1620.0], [1.72849542E12, 2004.0], [1.72849764E12, 2434.0], [1.72849866E12, 3566.0], [1.7284944E12, 1964.0], [1.72849872E12, 2866.0], [1.72849308E12, 1649.0], [1.7284953E12, 1797.0], [1.72849752E12, 2646.0], [1.72849428E12, 1832.0], [1.7284965E12, 2576.0], [1.72849854E12, 3505.0], [1.72849548E12, 1990.0], [1.7284989E12, 3297.0], [1.72849224E12, 1319.0], [1.72849326E12, 1563.0], [1.7284977E12, 2680.0], [1.72849344E12, 1445.0], [1.72849446E12, 2019.0], [1.72849668E12, 2266.0], [1.72849272E12, 1700.0], [1.72849938E12, 3326.0], [1.72849374E12, 1396.0], [1.72849596E12, 2414.0], [1.72849494E12, 2014.0], [1.72849716E12, 2703.0], [1.72849818E12, 3129.0], [1.72849392E12, 1486.0], [1.7284929E12, 1458.0], [1.72849614E12, 2415.0], [1.72849512E12, 1949.0], [1.72849734E12, 2427.0], [1.72849836E12, 3406.0], [1.7284941E12, 1871.0], [1.72849632E12, 2514.0], [1.728495E12, 2068.0], [1.72849842E12, 3509.0], [1.72849278E12, 1527.0], [1.72849722E12, 2390.0], [1.72849944E12, 2994.0], [1.72849296E12, 1349.0], [1.72849398E12, 1676.0], [1.7284962E12, 2468.0], [1.72849518E12, 1838.0], [1.7284974E12, 2302.0], [1.72849416E12, 1734.0], [1.7284986E12, 2921.0], [1.72849314E12, 1635.0], [1.72849638E12, 2635.0], [1.72849536E12, 1890.0], [1.72849242E12, 1452.0], [1.72849566E12, 1927.0], [1.72849908E12, 3349.0], [1.72849464E12, 1847.0], [1.72849362E12, 1285.0], [1.72849686E12, 2614.0], [1.72849788E12, 2958.0], [1.72849584E12, 1758.0], [1.72849824E12, 3566.0], [1.72849482E12, 1733.0], [1.72849704E12, 2445.0], [1.72849926E12, 2921.0], [1.7284926E12, 1447.0], [1.7284938E12, 1836.0], [1.72849602E12, 2482.0], [1.72849806E12, 2993.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7284947E12, 1061.4], [1.72849692E12, 1403.6], [1.72849368E12, 898.0], [1.72849812E12, 1704.0], [1.72849266E12, 854.1], [1.7284959E12, 1030.6000000000004], [1.72849914E12, 1793.0], [1.72849488E12, 1013.0], [1.7284971E12, 1358.4], [1.72849386E12, 885.3000000000004], [1.72849608E12, 1336.1000000000001], [1.7284983E12, 1751.4], [1.72849932E12, 1853.9], [1.72849284E12, 927.5999999999999], [1.72849506E12, 1044.1999999999998], [1.72849728E12, 1382.6000000000001], [1.72849758E12, 1364.8999999999999], [1.72849434E12, 1011.2], [1.72849656E12, 1416.3000000000004], [1.72849878E12, 1742.6000000000001], [1.72849332E12, 910.5], [1.72849554E12, 1079.0], [1.72849776E12, 1379.6000000000001], [1.72849452E12, 1002.8], [1.72849794E12, 1711.6000000000004], [1.7284923E12, 845.2000000000003], [1.72849674E12, 1448.8000000000002], [1.72849572E12, 994.9], [1.72849896E12, 1698.4], [1.72849248E12, 882.4000000000002], [1.7284935E12, 874.0], [1.72849338E12, 909.5000000000002], [1.72849662E12, 1349.6000000000004], [1.7284956E12, 1055.0], [1.72849782E12, 1299.9], [1.72849884E12, 1769.4], [1.7284968E12, 1370.7], [1.72849236E12, 900.6000000000003], [1.72849458E12, 1036.0], [1.7284992E12, 1715.0], [1.72849578E12, 1032.0], [1.72849356E12, 905.1999999999999], [1.72849476E12, 1030.1], [1.728498E12, 1713.6000000000001], [1.72849698E12, 1349.3000000000004], [1.72849254E12, 880.8], [1.72849902E12, 1715.0], [1.72849404E12, 1052.2000000000003], [1.72849626E12, 1391.3000000000002], [1.72849524E12, 1009.0], [1.72849848E12, 1673.0], [1.72849302E12, 880.1000000000001], [1.72849746E12, 1324.0], [1.7284995E12, 950.6000000000006], [1.7284932E12, 859.5999999999999], [1.72849422E12, 1032.0], [1.72849644E12, 1383.6], [1.72849218E12, 889.1], [1.72849542E12, 1053.8000000000002], [1.72849764E12, 1339.6], [1.72849866E12, 1712.8000000000002], [1.7284944E12, 994.0], [1.72849872E12, 1736.4], [1.72849308E12, 890.4000000000002], [1.7284953E12, 1024.0], [1.72849752E12, 1374.3999999999999], [1.72849428E12, 1061.0], [1.7284965E12, 1353.0], [1.72849854E12, 1806.0], [1.72849548E12, 996.3000000000001], [1.7284989E12, 1824.2000000000003], [1.72849224E12, 855.5], [1.72849326E12, 856.5999999999998], [1.7284977E12, 1364.5], [1.72849344E12, 863.0], [1.72849446E12, 1045.0], [1.72849668E12, 1366.8000000000002], [1.72849272E12, 879.1], [1.72849938E12, 1725.0000000000005], [1.72849374E12, 918.0000000000003], [1.72849596E12, 1200.8], [1.72849494E12, 1011.0], [1.72849716E12, 1353.9000000000003], [1.72849818E12, 1698.0], [1.72849392E12, 846.6999999999999], [1.7284929E12, 897.6000000000001], [1.72849614E12, 1382.7], [1.72849512E12, 990.0000000000001], [1.72849734E12, 1359.1000000000001], [1.72849836E12, 1707.7], [1.7284941E12, 1032.0], [1.72849632E12, 1397.4], [1.728495E12, 1041.6999999999998], [1.72849842E12, 1753.3999999999999], [1.72849278E12, 914.3000000000001], [1.72849722E12, 1341.4], [1.72849944E12, 1538.1999999999998], [1.72849296E12, 892.6999999999999], [1.72849398E12, 858.2], [1.7284962E12, 1386.2999999999997], [1.72849518E12, 1043.6000000000001], [1.7284974E12, 1355.5], [1.72849416E12, 1012.7000000000013], [1.7284986E12, 1732.3000000000004], [1.72849314E12, 850.0], [1.72849638E12, 1394.0], [1.72849536E12, 1000.8000000000001], [1.72849242E12, 859.6], [1.72849566E12, 1027.1999999999998], [1.72849908E12, 1683.8], [1.72849464E12, 1015.8000000000004], [1.72849362E12, 836.0000000000002], [1.72849686E12, 1350.2000000000003], [1.72849788E12, 1624.0], [1.72849584E12, 1005.0], [1.72849824E12, 1799.6000000000008], [1.72849482E12, 993.4000000000001], [1.72849704E12, 1373.6000000000004], [1.72849926E12, 1706.8000000000002], [1.7284926E12, 911.8000000000002], [1.7284938E12, 849.2], [1.72849602E12, 1377.0], [1.72849806E12, 1691.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7284947E12, 1570.2399999999996], [1.72849692E12, 2041.7199999999998], [1.72849368E12, 1371.9500000000012], [1.72849812E12, 2455.88], [1.72849266E12, 1286.140000000001], [1.7284959E12, 1472.8599999999997], [1.72849914E12, 2470.7300000000005], [1.72849488E12, 1510.92], [1.7284971E12, 1999.6799999999998], [1.72849386E12, 1324.3399999999992], [1.72849608E12, 1893.6800000000003], [1.7284983E12, 2548.920000000003], [1.72849932E12, 2535.199999999997], [1.72849284E12, 1284.8399999999997], [1.72849506E12, 1517.7999999999997], [1.72849728E12, 2066.0], [1.72849758E12, 2024.8600000000001], [1.72849434E12, 1489.5199999999998], [1.72849656E12, 2089.829999999999], [1.72849878E12, 2525.9199999999983], [1.72849332E12, 1232.249999999998], [1.72849554E12, 1518.3], [1.72849776E12, 2004.8600000000001], [1.72849452E12, 1534.7200000000048], [1.72849794E12, 2589.7000000000007], [1.7284923E12, 1256.3200000000008], [1.72849674E12, 1987.499999999997], [1.72849572E12, 1517.0], [1.72849896E12, 2330.879999999999], [1.72849248E12, 1240.479999999999], [1.7284935E12, 1302.3399999999992], [1.72849338E12, 1348.7799999999997], [1.72849662E12, 1929.5200000000018], [1.7284956E12, 1584.8000000000013], [1.72849782E12, 2040.1199999999972], [1.72849884E12, 2558.24], [1.7284968E12, 2060.529999999998], [1.72849236E12, 1291.0000000000007], [1.72849458E12, 1463.5000000000002], [1.7284992E12, 2450.2799999999997], [1.72849578E12, 1536.3199999999988], [1.72849356E12, 1341.12], [1.72849476E12, 1513.299999999999], [1.728498E12, 2519.16], [1.72849698E12, 1925.880000000001], [1.72849254E12, 1249.1599999999999], [1.72849902E12, 2768.7499999999977], [1.72849404E12, 1428.4199999999998], [1.72849626E12, 2014.669999999999], [1.72849524E12, 1495.5999999999997], [1.72849848E12, 2450.7999999999984], [1.72849302E12, 1343.990000000003], [1.72849746E12, 2012.1800000000019], [1.7284995E12, 1281.6999999999998], [1.7284932E12, 1437.0599999999959], [1.72849422E12, 1487.5500000000002], [1.72849644E12, 2080.08], [1.72849218E12, 1519.9700000000005], [1.72849542E12, 1450.0], [1.72849764E12, 1963.2399999999998], [1.72849866E12, 2465.659999999998], [1.7284944E12, 1507.9900000000032], [1.72849872E12, 2443.079999999999], [1.72849308E12, 1414.7200000000003], [1.7284953E12, 1525.1999999999996], [1.72849752E12, 2057.920000000001], [1.72849428E12, 1568.880000000001], [1.7284965E12, 2104.600000000002], [1.72849854E12, 2544.2300000000005], [1.72849548E12, 1516.8199999999983], [1.7284989E12, 2509.1600000000008], [1.72849224E12, 1243.1000000000015], [1.72849326E12, 1246.2000000000003], [1.7284977E12, 2114.25], [1.72849344E12, 1198.1999999999978], [1.72849446E12, 1521.88], [1.72849668E12, 2005.3199999999997], [1.72849272E12, 1301.03], [1.72849938E12, 2572.8399999999974], [1.72849374E12, 1235.8799999999987], [1.72849596E12, 1893.8400000000001], [1.72849494E12, 1610.03], [1.72849716E12, 1967.3700000000008], [1.72849818E12, 2527.0], [1.72849392E12, 1213.4499999999998], [1.7284929E12, 1279.4899999999989], [1.72849614E12, 1949.54], [1.72849512E12, 1478.9999999999986], [1.72849734E12, 1987.8300000000008], [1.72849836E12, 2601.2999999999943], [1.7284941E12, 1620.3499999999979], [1.72849632E12, 1966.3400000000001], [1.728495E12, 1502.9499999999998], [1.72849842E12, 2582.36], [1.72849278E12, 1302.3], [1.72849722E12, 2121.0], [1.72849944E12, 2306.5199999999995], [1.72849296E12, 1182.91], [1.72849398E12, 1317.400000000001], [1.7284962E12, 2100.76], [1.72849518E12, 1482.6600000000003], [1.7284974E12, 2002.2499999999977], [1.72849416E12, 1473.0899999999992], [1.7284986E12, 2556.2699999999995], [1.72849314E12, 1285.2400000000007], [1.72849638E12, 1936.7999999999993], [1.72849536E12, 1481.2399999999996], [1.72849242E12, 1153.8400000000001], [1.72849566E12, 1533.8199999999997], [1.72849908E12, 2585.3199999999997], [1.72849464E12, 1464.88], [1.72849362E12, 1171.6000000000001], [1.72849686E12, 2023.4899999999996], [1.72849788E12, 2313.5], [1.72849584E12, 1473.0], [1.72849824E12, 2573.1199999999944], [1.72849482E12, 1445.2399999999996], [1.72849704E12, 1973.7600000000043], [1.72849926E12, 2509.74], [1.7284926E12, 1281.6800000000003], [1.7284938E12, 1293.1900000000005], [1.72849602E12, 2042.8700000000008], [1.72849806E12, 2618.999999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7284947E12, 1273.6], [1.72849692E12, 1617.6], [1.72849368E12, 1033.5], [1.72849812E12, 1981.2500000000002], [1.72849266E12, 982.7499999999998], [1.7284959E12, 1189.35], [1.72849914E12, 2024.05], [1.72849488E12, 1180.6], [1.7284971E12, 1567.1000000000001], [1.72849386E12, 1064.35], [1.72849608E12, 1550.05], [1.7284983E12, 2015.1000000000006], [1.72849932E12, 2090.949999999998], [1.72849284E12, 1046.8000000000002], [1.72849506E12, 1193.0], [1.72849728E12, 1609.6499999999999], [1.72849758E12, 1630.8999999999992], [1.72849434E12, 1192.9999999999995], [1.72849656E12, 1605.0], [1.72849878E12, 2001.9999999999998], [1.72849332E12, 1008.5], [1.72849554E12, 1213.0], [1.72849776E12, 1642.8999999999999], [1.72849452E12, 1154.3999999999999], [1.72849794E12, 2025.7], [1.7284923E12, 1013.0000000000001], [1.72849674E12, 1654.6999999999998], [1.72849572E12, 1136.7999999999997], [1.72849896E12, 1939.6000000000001], [1.72849248E12, 1011.5999999999995], [1.7284935E12, 997.6999999999999], [1.72849338E12, 1049.8500000000004], [1.72849662E12, 1539.8000000000002], [1.7284956E12, 1201.0], [1.72849782E12, 1492.6499999999999], [1.72849884E12, 2031.3999999999996], [1.7284968E12, 1592.0499999999997], [1.72849236E12, 1018.6999999999999], [1.72849458E12, 1182.0], [1.7284992E12, 1930.7999999999997], [1.72849578E12, 1200.6999999999996], [1.72849356E12, 1049.4999999999995], [1.72849476E12, 1236.1999999999998], [1.728498E12, 2045.0], [1.72849698E12, 1539.1999999999998], [1.72849254E12, 979.5999999999998], [1.72849902E12, 2001.0], [1.72849404E12, 1189.4999999999998], [1.72849626E12, 1601.1499999999999], [1.72849524E12, 1198.0], [1.72849848E12, 1963.7999999999997], [1.72849302E12, 990.35], [1.72849746E12, 1494.7999999999997], [1.7284995E12, 1130.05], [1.7284932E12, 996.0], [1.72849422E12, 1207.1], [1.72849644E12, 1598.1999999999998], [1.72849218E12, 1010.3499999999996], [1.72849542E12, 1181.1999999999998], [1.72849764E12, 1579.3999999999999], [1.72849866E12, 2020.9], [1.7284944E12, 1170.05], [1.72849872E12, 1997.7999999999993], [1.72849308E12, 1032.1], [1.7284953E12, 1175.5], [1.72849752E12, 1624.199999999999], [1.72849428E12, 1214.9999999999998], [1.7284965E12, 1543.0], [1.72849854E12, 1997.35], [1.72849548E12, 1141.15], [1.7284989E12, 2045.9499999999996], [1.72849224E12, 1026.25], [1.72849326E12, 993.1999999999986], [1.7284977E12, 1591.25], [1.72849344E12, 981.0], [1.72849446E12, 1175.3999999999996], [1.72849668E12, 1579.0], [1.72849272E12, 1022.1999999999998], [1.72849938E12, 2056.2], [1.72849374E12, 1063.1999999999998], [1.72849596E12, 1494.2999999999988], [1.72849494E12, 1200.3], [1.72849716E12, 1594.7499999999995], [1.72849818E12, 1950.0], [1.72849392E12, 998.6499999999988], [1.7284929E12, 1043.5499999999993], [1.72849614E12, 1598.7499999999986], [1.72849512E12, 1164.6], [1.72849734E12, 1530.1499999999999], [1.72849836E12, 1994.199999999999], [1.7284941E12, 1214.25], [1.72849632E12, 1604.9499999999994], [1.728495E12, 1232.85], [1.72849842E12, 2014.299999999999], [1.72849278E12, 1023.5999999999999], [1.72849722E12, 1596.6000000000001], [1.72849944E12, 1770.1999999999982], [1.72849296E12, 997.6999999999996], [1.72849398E12, 970.1], [1.7284962E12, 1632.000000000001], [1.72849518E12, 1203.9], [1.7284974E12, 1629.0], [1.72849416E12, 1169.65], [1.7284986E12, 2045.1499999999999], [1.72849314E12, 996.4999999999999], [1.72849638E12, 1566.0], [1.72849536E12, 1194.0999999999997], [1.72849242E12, 952.5999999999999], [1.72849566E12, 1209.3999999999999], [1.72849908E12, 1955.8999999999999], [1.72849464E12, 1168.9], [1.72849362E12, 993.1999999999994], [1.72849686E12, 1561.35], [1.72849788E12, 1877.5], [1.72849584E12, 1167.0], [1.72849824E12, 2087.2], [1.72849482E12, 1146.6], [1.72849704E12, 1580.4], [1.72849926E12, 2001.6999999999994], [1.7284926E12, 1053.3999999999999], [1.7284938E12, 1016.3499999999992], [1.72849602E12, 1610.3999999999996], [1.72849806E12, 1991.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7284947E12, 33.0], [1.72849692E12, 39.0], [1.72849368E12, 34.0], [1.72849812E12, 54.0], [1.72849266E12, 32.0], [1.7284959E12, 31.0], [1.72849914E12, 56.0], [1.72849488E12, 39.0], [1.7284971E12, 40.0], [1.72849386E12, 30.0], [1.72849608E12, 36.0], [1.7284983E12, 54.0], [1.72849932E12, 59.0], [1.72849284E12, 33.0], [1.72849506E12, 39.0], [1.72849728E12, 40.0], [1.72849758E12, 39.0], [1.72849434E12, 37.0], [1.72849656E12, 37.0], [1.72849878E12, 59.0], [1.72849332E12, 35.0], [1.72849554E12, 36.0], [1.72849776E12, 39.0], [1.72849452E12, 37.0], [1.72849794E12, 53.0], [1.7284923E12, 36.0], [1.72849674E12, 42.0], [1.72849572E12, 33.0], [1.72849896E12, 58.0], [1.72849248E12, 35.0], [1.7284935E12, 34.0], [1.72849338E12, 29.0], [1.72849662E12, 41.0], [1.7284956E12, 35.0], [1.72849782E12, 39.0], [1.72849884E12, 51.0], [1.7284968E12, 40.0], [1.72849236E12, 39.0], [1.72849458E12, 40.0], [1.7284992E12, 55.0], [1.72849578E12, 34.0], [1.72849356E12, 36.0], [1.72849476E12, 32.0], [1.728498E12, 58.0], [1.72849698E12, 38.0], [1.72849254E12, 34.0], [1.72849902E12, 54.0], [1.72849404E12, 33.0], [1.72849626E12, 34.0], [1.72849524E12, 33.0], [1.72849848E12, 54.0], [1.72849302E12, 35.0], [1.72849746E12, 42.0], [1.7284995E12, 39.0], [1.7284932E12, 32.0], [1.72849422E12, 34.0], [1.72849644E12, 39.0], [1.72849218E12, 43.0], [1.72849542E12, 33.0], [1.72849764E12, 49.0], [1.72849866E12, 55.0], [1.7284944E12, 36.0], [1.72849872E12, 62.0], [1.72849308E12, 34.0], [1.7284953E12, 35.0], [1.72849752E12, 39.0], [1.72849428E12, 34.0], [1.7284965E12, 37.0], [1.72849854E12, 58.0], [1.72849548E12, 33.0], [1.7284989E12, 67.0], [1.72849224E12, 36.0], [1.72849326E12, 36.0], [1.7284977E12, 41.0], [1.72849344E12, 36.0], [1.72849446E12, 33.0], [1.72849668E12, 38.0], [1.72849272E12, 34.0], [1.72849938E12, 56.0], [1.72849374E12, 35.0], [1.72849596E12, 38.0], [1.72849494E12, 32.0], [1.72849716E12, 37.0], [1.72849818E12, 58.0], [1.72849392E12, 32.0], [1.7284929E12, 34.0], [1.72849614E12, 41.0], [1.72849512E12, 32.0], [1.72849734E12, 36.0], [1.72849836E12, 69.0], [1.7284941E12, 36.0], [1.72849632E12, 36.0], [1.728495E12, 36.0], [1.72849842E12, 59.0], [1.72849278E12, 37.0], [1.72849722E12, 40.0], [1.72849944E12, 39.0], [1.72849296E12, 38.0], [1.72849398E12, 34.0], [1.7284962E12, 43.0], [1.72849518E12, 34.0], [1.7284974E12, 41.0], [1.72849416E12, 39.0], [1.7284986E12, 61.0], [1.72849314E12, 33.0], [1.72849638E12, 38.0], [1.72849536E12, 36.0], [1.72849242E12, 34.0], [1.72849566E12, 35.0], [1.72849908E12, 61.0], [1.72849464E12, 40.0], [1.72849362E12, 34.0], [1.72849686E12, 38.0], [1.72849788E12, 38.0], [1.72849584E12, 32.0], [1.72849824E12, 61.0], [1.72849482E12, 36.0], [1.72849704E12, 45.0], [1.72849926E12, 54.0], [1.7284926E12, 38.0], [1.7284938E12, 37.0], [1.72849602E12, 40.0], [1.72849806E12, 64.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7284947E12, 434.0], [1.72849692E12, 588.0], [1.72849368E12, 393.0], [1.72849812E12, 635.5], [1.72849266E12, 366.5], [1.7284959E12, 439.0], [1.72849914E12, 723.5], [1.72849488E12, 408.0], [1.7284971E12, 511.0], [1.72849386E12, 376.5], [1.72849608E12, 534.5], [1.7284983E12, 696.0], [1.72849932E12, 790.5], [1.72849284E12, 418.0], [1.72849506E12, 446.0], [1.72849728E12, 566.0], [1.72849758E12, 508.5], [1.72849434E12, 446.0], [1.72849656E12, 577.5], [1.72849878E12, 775.0], [1.72849332E12, 365.0], [1.72849554E12, 436.0], [1.72849776E12, 608.0], [1.72849452E12, 384.0], [1.72849794E12, 678.0], [1.7284923E12, 333.0], [1.72849674E12, 633.0], [1.72849572E12, 431.0], [1.72849896E12, 702.0], [1.72849248E12, 373.0], [1.7284935E12, 320.0], [1.72849338E12, 379.0], [1.72849662E12, 509.0], [1.7284956E12, 436.0], [1.72849782E12, 502.0], [1.72849884E12, 709.0], [1.7284968E12, 589.0], [1.72849236E12, 409.0], [1.72849458E12, 459.0], [1.7284992E12, 680.0], [1.72849578E12, 432.0], [1.72849356E12, 351.0], [1.72849476E12, 410.5], [1.728498E12, 688.0], [1.72849698E12, 501.0], [1.72849254E12, 378.0], [1.72849902E12, 760.0], [1.72849404E12, 428.0], [1.72849626E12, 545.5], [1.72849524E12, 402.0], [1.72849848E12, 761.0], [1.72849302E12, 338.0], [1.72849746E12, 584.0], [1.7284995E12, 428.5], [1.7284932E12, 318.0], [1.72849422E12, 358.5], [1.72849644E12, 581.0], [1.72849218E12, 310.0], [1.72849542E12, 404.0], [1.72849764E12, 512.0], [1.72849866E12, 673.5], [1.7284944E12, 355.0], [1.72849872E12, 736.0], [1.72849308E12, 405.0], [1.7284953E12, 443.0], [1.72849752E12, 505.0], [1.72849428E12, 421.0], [1.7284965E12, 487.5], [1.72849854E12, 716.0], [1.72849548E12, 411.0], [1.7284989E12, 852.0], [1.72849224E12, 272.0], [1.72849326E12, 325.0], [1.7284977E12, 573.0], [1.72849344E12, 318.0], [1.72849446E12, 411.0], [1.72849668E12, 519.5], [1.72849272E12, 349.5], [1.72849938E12, 752.0], [1.72849374E12, 375.0], [1.72849596E12, 398.0], [1.72849494E12, 440.5], [1.72849716E12, 593.5], [1.72849818E12, 709.0], [1.72849392E12, 291.0], [1.7284929E12, 423.0], [1.72849614E12, 586.5], [1.72849512E12, 370.0], [1.72849734E12, 521.0], [1.72849836E12, 692.0], [1.7284941E12, 432.0], [1.72849632E12, 631.5], [1.728495E12, 476.0], [1.72849842E12, 729.0], [1.72849278E12, 369.0], [1.72849722E12, 452.0], [1.72849944E12, 517.0], [1.72849296E12, 352.0], [1.72849398E12, 315.0], [1.7284962E12, 596.5], [1.72849518E12, 410.0], [1.7284974E12, 589.0], [1.72849416E12, 423.0], [1.7284986E12, 623.0], [1.72849314E12, 356.0], [1.72849638E12, 541.0], [1.72849536E12, 385.0], [1.72849242E12, 313.0], [1.72849566E12, 411.0], [1.72849908E12, 645.0], [1.72849464E12, 432.0], [1.72849362E12, 321.0], [1.72849686E12, 471.5], [1.72849788E12, 544.0], [1.72849584E12, 452.0], [1.72849824E12, 768.0], [1.72849482E12, 355.0], [1.72849704E12, 524.0], [1.72849926E12, 681.0], [1.7284926E12, 409.0], [1.7284938E12, 394.5], [1.72849602E12, 459.0], [1.72849806E12, 665.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7284995E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 182.0, "minX": 1.0, "maxY": 873.0, "series": [{"data": [[2.0, 873.0], [32.0, 224.5], [33.0, 182.0], [35.0, 223.0], [37.0, 230.0], [38.0, 241.5], [43.0, 214.0], [3.0, 601.5], [4.0, 464.5], [5.0, 563.0], [6.0, 513.5], [7.0, 517.0], [8.0, 462.5], [9.0, 443.0], [10.0, 431.0], [11.0, 446.0], [12.0, 491.0], [13.0, 521.5], [14.0, 534.0], [15.0, 557.0], [1.0, 655.0], [16.0, 578.0], [17.0, 540.0], [18.0, 522.0], [19.0, 498.0], [20.0, 495.5], [21.0, 423.5], [22.0, 422.0], [23.0, 389.0], [24.0, 340.0], [25.0, 307.5], [26.0, 283.5], [27.0, 301.0], [28.0, 272.5], [29.0, 257.5], [30.0, 221.0], [31.0, 238.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 43.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 112.0, "minX": 1.0, "maxY": 532.0, "series": [{"data": [[2.0, 532.0], [32.0, 144.5], [33.0, 112.0], [35.0, 141.0], [37.0, 144.5], [38.0, 188.5], [43.0, 124.0], [3.0, 386.5], [4.0, 332.5], [5.0, 385.0], [6.0, 349.0], [7.0, 352.0], [8.0, 325.0], [9.0, 317.0], [10.0, 302.5], [11.0, 310.0], [12.0, 345.0], [13.0, 363.0], [14.0, 378.0], [15.0, 391.0], [1.0, 430.0], [16.0, 409.0], [17.0, 386.0], [18.0, 374.0], [19.0, 361.0], [20.0, 358.0], [21.0, 317.0], [22.0, 303.5], [23.0, 276.0], [24.0, 232.5], [25.0, 203.0], [26.0, 182.0], [27.0, 193.0], [28.0, 171.5], [29.0, 160.0], [30.0, 136.0], [31.0, 147.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 43.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.2666666666666666, "minX": 1.72849218E12, "maxY": 20.833333333333332, "series": [{"data": [[1.7284947E12, 16.383333333333333], [1.72849692E12, 18.55], [1.72849368E12, 9.4], [1.72849812E12, 20.833333333333332], [1.72849266E12, 9.8], [1.7284959E12, 16.183333333333334], [1.72849914E12, 19.633333333333333], [1.72849488E12, 16.716666666666665], [1.7284971E12, 19.416666666666668], [1.72849386E12, 9.533333333333333], [1.72849608E12, 19.633333333333333], [1.7284983E12, 19.75], [1.72849932E12, 18.6], [1.72849284E12, 9.116666666666667], [1.72849506E12, 16.416666666666668], [1.72849728E12, 18.766666666666666], [1.72849758E12, 19.266666666666666], [1.72849434E12, 16.783333333333335], [1.72849656E12, 18.533333333333335], [1.72849878E12, 19.05], [1.72849332E12, 9.9], [1.72849554E12, 16.15], [1.72849776E12, 18.35], [1.72849452E12, 17.25], [1.72849794E12, 19.75], [1.7284923E12, 5.216666666666667], [1.72849674E12, 17.683333333333334], [1.72849572E12, 16.833333333333332], [1.72849896E12, 20.25], [1.72849248E12, 9.716666666666667], [1.7284935E12, 10.083333333333334], [1.72849338E12, 9.533333333333333], [1.72849662E12, 19.75], [1.7284956E12, 16.316666666666666], [1.72849782E12, 18.0], [1.72849884E12, 19.783333333333335], [1.7284968E12, 18.533333333333335], [1.72849236E12, 4.666666666666667], [1.72849458E12, 16.066666666666666], [1.7284992E12, 20.383333333333333], [1.72849578E12, 16.55], [1.72849356E12, 9.75], [1.72849476E12, 16.8], [1.728498E12, 19.95], [1.72849698E12, 19.633333333333333], [1.72849254E12, 9.916666666666666], [1.72849902E12, 19.4], [1.72849404E12, 11.3], [1.72849626E12, 18.933333333333334], [1.72849524E12, 16.816666666666666], [1.72849848E12, 19.783333333333335], [1.72849302E12, 9.866666666666667], [1.72849746E12, 18.883333333333333], [1.7284995E12, 2.2666666666666666], [1.7284932E12, 10.333333333333334], [1.72849422E12, 17.133333333333333], [1.72849644E12, 18.716666666666665], [1.72849218E12, 4.333333333333333], [1.72849542E12, 16.883333333333333], [1.72849764E12, 19.516666666666666], [1.72849866E12, 20.333333333333332], [1.7284944E12, 17.633333333333333], [1.72849872E12, 19.783333333333335], [1.72849308E12, 9.416666666666666], [1.7284953E12, 16.816666666666666], [1.72849752E12, 19.183333333333334], [1.72849428E12, 16.716666666666665], [1.7284965E12, 19.733333333333334], [1.72849854E12, 19.2], [1.72849548E12, 17.266666666666666], [1.7284989E12, 18.433333333333334], [1.72849224E12, 5.233333333333333], [1.72849326E12, 10.25], [1.7284977E12, 18.733333333333334], [1.72849344E12, 10.316666666666666], [1.72849446E12, 16.716666666666665], [1.72849668E12, 19.5], [1.72849272E12, 9.966666666666667], [1.72849938E12, 19.45], [1.72849374E12, 9.516666666666667], [1.72849596E12, 13.833333333333334], [1.72849494E12, 16.6], [1.72849716E12, 18.866666666666667], [1.72849818E12, 19.983333333333334], [1.72849392E12, 10.5], [1.7284929E12, 9.333333333333334], [1.72849614E12, 18.7], [1.72849512E12, 17.383333333333333], [1.72849734E12, 19.633333333333333], [1.72849836E12, 19.866666666666667], [1.7284941E12, 16.566666666666666], [1.72849632E12, 18.033333333333335], [1.728495E12, 16.0], [1.72849842E12, 19.683333333333334], [1.72849278E12, 9.766666666666667], [1.72849722E12, 19.916666666666668], [1.72849944E12, 20.016666666666666], [1.72849296E12, 10.0], [1.72849398E12, 10.266666666666667], [1.7284962E12, 18.333333333333332], [1.72849518E12, 16.683333333333334], [1.7284974E12, 18.566666666666666], [1.72849416E12, 16.766666666666666], [1.7284986E12, 20.633333333333333], [1.72849314E12, 10.016666666666667], [1.72849638E12, 18.983333333333334], [1.72849536E12, 17.216666666666665], [1.72849242E12, 9.433333333333334], [1.72849566E12, 16.75], [1.72849908E12, 20.683333333333334], [1.72849464E12, 16.683333333333334], [1.72849362E12, 10.216666666666667], [1.72849686E12, 19.866666666666667], [1.72849788E12, 18.066666666666666], [1.72849584E12, 16.65], [1.72849824E12, 19.05], [1.72849482E12, 17.783333333333335], [1.72849704E12, 19.25], [1.72849926E12, 20.283333333333335], [1.7284926E12, 9.183333333333334], [1.7284938E12, 9.8], [1.72849602E12, 19.7], [1.72849806E12, 20.233333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7284995E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.3666666666666667, "minX": 1.72849218E12, "maxY": 20.833333333333332, "series": [{"data": [[1.7284947E12, 16.383333333333333], [1.72849692E12, 18.55], [1.72849368E12, 9.4], [1.72849812E12, 20.833333333333332], [1.72849266E12, 9.8], [1.7284959E12, 16.2], [1.72849914E12, 19.633333333333333], [1.72849488E12, 16.716666666666665], [1.7284971E12, 19.416666666666668], [1.72849386E12, 9.533333333333333], [1.72849608E12, 19.633333333333333], [1.7284983E12, 19.75], [1.72849932E12, 18.6], [1.72849284E12, 9.116666666666667], [1.72849506E12, 16.416666666666668], [1.72849728E12, 18.766666666666666], [1.72849758E12, 19.266666666666666], [1.72849434E12, 16.783333333333335], [1.72849656E12, 18.533333333333335], [1.72849878E12, 19.05], [1.72849332E12, 9.9], [1.72849554E12, 16.15], [1.72849776E12, 18.35], [1.72849452E12, 17.25], [1.72849794E12, 19.75], [1.7284923E12, 5.216666666666667], [1.72849674E12, 17.683333333333334], [1.72849572E12, 16.833333333333332], [1.72849896E12, 20.25], [1.72849248E12, 9.716666666666667], [1.7284935E12, 10.083333333333334], [1.72849338E12, 9.533333333333333], [1.72849662E12, 19.75], [1.7284956E12, 16.316666666666666], [1.72849782E12, 18.1], [1.72849884E12, 19.783333333333335], [1.7284968E12, 18.533333333333335], [1.72849236E12, 4.683333333333334], [1.72849458E12, 16.066666666666666], [1.7284992E12, 20.383333333333333], [1.72849578E12, 16.55], [1.72849356E12, 9.75], [1.72849476E12, 16.8], [1.728498E12, 19.95], [1.72849698E12, 19.633333333333333], [1.72849254E12, 9.916666666666666], [1.72849902E12, 19.4], [1.72849404E12, 11.216666666666667], [1.72849626E12, 18.933333333333334], [1.72849524E12, 16.816666666666666], [1.72849848E12, 19.783333333333335], [1.72849302E12, 9.866666666666667], [1.72849746E12, 18.883333333333333], [1.7284995E12, 2.3666666666666667], [1.7284932E12, 10.333333333333334], [1.72849422E12, 17.133333333333333], [1.72849644E12, 18.716666666666665], [1.72849218E12, 4.3], [1.72849542E12, 16.883333333333333], [1.72849764E12, 19.516666666666666], [1.72849866E12, 20.333333333333332], [1.7284944E12, 17.633333333333333], [1.72849872E12, 19.783333333333335], [1.72849308E12, 9.416666666666666], [1.7284953E12, 16.816666666666666], [1.72849752E12, 19.183333333333334], [1.72849428E12, 16.716666666666665], [1.7284965E12, 19.733333333333334], [1.72849854E12, 19.2], [1.72849548E12, 17.266666666666666], [1.7284989E12, 18.433333333333334], [1.72849224E12, 5.233333333333333], [1.72849326E12, 10.25], [1.7284977E12, 18.733333333333334], [1.72849344E12, 10.316666666666666], [1.72849446E12, 16.716666666666665], [1.72849668E12, 19.5], [1.72849272E12, 9.966666666666667], [1.72849938E12, 19.45], [1.72849374E12, 9.516666666666667], [1.72849596E12, 13.75], [1.72849494E12, 16.6], [1.72849716E12, 18.866666666666667], [1.72849818E12, 19.983333333333334], [1.72849392E12, 10.5], [1.7284929E12, 9.333333333333334], [1.72849614E12, 18.7], [1.72849512E12, 17.383333333333333], [1.72849734E12, 19.633333333333333], [1.72849836E12, 19.866666666666667], [1.7284941E12, 16.566666666666666], [1.72849632E12, 18.033333333333335], [1.728495E12, 16.0], [1.72849842E12, 19.683333333333334], [1.72849278E12, 9.766666666666667], [1.72849722E12, 19.916666666666668], [1.72849944E12, 20.183333333333334], [1.72849296E12, 10.0], [1.72849398E12, 10.283333333333333], [1.7284962E12, 18.333333333333332], [1.72849518E12, 16.683333333333334], [1.7284974E12, 18.566666666666666], [1.72849416E12, 16.766666666666666], [1.7284986E12, 20.633333333333333], [1.72849314E12, 10.016666666666667], [1.72849638E12, 18.983333333333334], [1.72849536E12, 17.216666666666665], [1.72849242E12, 9.383333333333333], [1.72849566E12, 16.75], [1.72849908E12, 20.683333333333334], [1.72849464E12, 16.683333333333334], [1.72849362E12, 10.216666666666667], [1.72849686E12, 19.866666666666667], [1.72849788E12, 17.9], [1.72849584E12, 16.65], [1.72849824E12, 19.05], [1.72849482E12, 17.783333333333335], [1.72849704E12, 19.25], [1.72849926E12, 20.283333333333335], [1.7284926E12, 9.183333333333334], [1.7284938E12, 9.8], [1.72849602E12, 19.7], [1.72849806E12, 20.233333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7284995E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.3666666666666667, "minX": 1.72849218E12, "maxY": 20.833333333333332, "series": [{"data": [[1.7284947E12, 16.383333333333333], [1.72849692E12, 18.55], [1.72849368E12, 9.4], [1.72849812E12, 20.833333333333332], [1.72849266E12, 9.8], [1.7284959E12, 16.2], [1.72849914E12, 19.633333333333333], [1.72849488E12, 16.716666666666665], [1.7284971E12, 19.416666666666668], [1.72849386E12, 9.533333333333333], [1.72849608E12, 19.633333333333333], [1.7284983E12, 19.75], [1.72849932E12, 18.6], [1.72849284E12, 9.116666666666667], [1.72849506E12, 16.416666666666668], [1.72849728E12, 18.766666666666666], [1.72849758E12, 19.266666666666666], [1.72849434E12, 16.783333333333335], [1.72849656E12, 18.533333333333335], [1.72849878E12, 19.05], [1.72849332E12, 9.9], [1.72849554E12, 16.15], [1.72849776E12, 18.35], [1.72849452E12, 17.25], [1.72849794E12, 19.75], [1.7284923E12, 5.216666666666667], [1.72849674E12, 17.683333333333334], [1.72849572E12, 16.833333333333332], [1.72849896E12, 20.25], [1.72849248E12, 9.716666666666667], [1.7284935E12, 10.083333333333334], [1.72849338E12, 9.533333333333333], [1.72849662E12, 19.75], [1.7284956E12, 16.316666666666666], [1.72849782E12, 18.1], [1.72849884E12, 19.783333333333335], [1.7284968E12, 18.533333333333335], [1.72849236E12, 4.683333333333334], [1.72849458E12, 16.066666666666666], [1.7284992E12, 20.383333333333333], [1.72849578E12, 16.55], [1.72849356E12, 9.75], [1.72849476E12, 16.8], [1.728498E12, 19.95], [1.72849698E12, 19.633333333333333], [1.72849254E12, 9.916666666666666], [1.72849902E12, 19.4], [1.72849404E12, 11.216666666666667], [1.72849626E12, 18.933333333333334], [1.72849524E12, 16.816666666666666], [1.72849848E12, 19.783333333333335], [1.72849302E12, 9.866666666666667], [1.72849746E12, 18.883333333333333], [1.7284995E12, 2.3666666666666667], [1.7284932E12, 10.333333333333334], [1.72849422E12, 17.133333333333333], [1.72849644E12, 18.716666666666665], [1.72849218E12, 4.3], [1.72849542E12, 16.883333333333333], [1.72849764E12, 19.516666666666666], [1.72849866E12, 20.333333333333332], [1.7284944E12, 17.633333333333333], [1.72849872E12, 19.783333333333335], [1.72849308E12, 9.416666666666666], [1.7284953E12, 16.816666666666666], [1.72849752E12, 19.183333333333334], [1.72849428E12, 16.716666666666665], [1.7284965E12, 19.733333333333334], [1.72849854E12, 19.2], [1.72849548E12, 17.266666666666666], [1.7284989E12, 18.433333333333334], [1.72849224E12, 5.233333333333333], [1.72849326E12, 10.25], [1.7284977E12, 18.733333333333334], [1.72849344E12, 10.316666666666666], [1.72849446E12, 16.716666666666665], [1.72849668E12, 19.5], [1.72849272E12, 9.966666666666667], [1.72849938E12, 19.45], [1.72849374E12, 9.516666666666667], [1.72849596E12, 13.75], [1.72849494E12, 16.6], [1.72849716E12, 18.866666666666667], [1.72849818E12, 19.983333333333334], [1.72849392E12, 10.5], [1.7284929E12, 9.333333333333334], [1.72849614E12, 18.7], [1.72849512E12, 17.383333333333333], [1.72849734E12, 19.633333333333333], [1.72849836E12, 19.866666666666667], [1.7284941E12, 16.566666666666666], [1.72849632E12, 18.033333333333335], [1.728495E12, 16.0], [1.72849842E12, 19.683333333333334], [1.72849278E12, 9.766666666666667], [1.72849722E12, 19.916666666666668], [1.72849944E12, 20.183333333333334], [1.72849296E12, 10.0], [1.72849398E12, 10.283333333333333], [1.7284962E12, 18.333333333333332], [1.72849518E12, 16.683333333333334], [1.7284974E12, 18.566666666666666], [1.72849416E12, 16.766666666666666], [1.7284986E12, 20.633333333333333], [1.72849314E12, 10.016666666666667], [1.72849638E12, 18.983333333333334], [1.72849536E12, 17.216666666666665], [1.72849242E12, 9.383333333333333], [1.72849566E12, 16.75], [1.72849908E12, 20.683333333333334], [1.72849464E12, 16.683333333333334], [1.72849362E12, 10.216666666666667], [1.72849686E12, 19.866666666666667], [1.72849788E12, 17.9], [1.72849584E12, 16.65], [1.72849824E12, 19.05], [1.72849482E12, 17.783333333333335], [1.72849704E12, 19.25], [1.72849926E12, 20.283333333333335], [1.7284926E12, 9.183333333333334], [1.7284938E12, 9.8], [1.72849602E12, 19.7], [1.72849806E12, 20.233333333333334]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7284995E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.3666666666666667, "minX": 1.72849218E12, "maxY": 20.833333333333332, "series": [{"data": [[1.7284947E12, 16.383333333333333], [1.72849692E12, 18.55], [1.72849368E12, 9.4], [1.72849812E12, 20.833333333333332], [1.72849266E12, 9.8], [1.7284959E12, 16.2], [1.72849914E12, 19.633333333333333], [1.72849488E12, 16.716666666666665], [1.7284971E12, 19.416666666666668], [1.72849386E12, 9.533333333333333], [1.72849608E12, 19.633333333333333], [1.7284983E12, 19.75], [1.72849932E12, 18.6], [1.72849284E12, 9.116666666666667], [1.72849506E12, 16.416666666666668], [1.72849728E12, 18.766666666666666], [1.72849758E12, 19.266666666666666], [1.72849434E12, 16.783333333333335], [1.72849656E12, 18.533333333333335], [1.72849878E12, 19.05], [1.72849332E12, 9.9], [1.72849554E12, 16.15], [1.72849776E12, 18.35], [1.72849452E12, 17.25], [1.72849794E12, 19.75], [1.7284923E12, 5.216666666666667], [1.72849674E12, 17.683333333333334], [1.72849572E12, 16.833333333333332], [1.72849896E12, 20.25], [1.72849248E12, 9.716666666666667], [1.7284935E12, 10.083333333333334], [1.72849338E12, 9.533333333333333], [1.72849662E12, 19.75], [1.7284956E12, 16.316666666666666], [1.72849782E12, 18.1], [1.72849884E12, 19.783333333333335], [1.7284968E12, 18.533333333333335], [1.72849236E12, 4.683333333333334], [1.72849458E12, 16.066666666666666], [1.7284992E12, 20.383333333333333], [1.72849578E12, 16.55], [1.72849356E12, 9.75], [1.72849476E12, 16.8], [1.728498E12, 19.95], [1.72849698E12, 19.633333333333333], [1.72849254E12, 9.916666666666666], [1.72849902E12, 19.4], [1.72849404E12, 11.216666666666667], [1.72849626E12, 18.933333333333334], [1.72849524E12, 16.816666666666666], [1.72849848E12, 19.783333333333335], [1.72849302E12, 9.866666666666667], [1.72849746E12, 18.883333333333333], [1.7284995E12, 2.3666666666666667], [1.7284932E12, 10.333333333333334], [1.72849422E12, 17.133333333333333], [1.72849644E12, 18.716666666666665], [1.72849218E12, 4.3], [1.72849542E12, 16.883333333333333], [1.72849764E12, 19.516666666666666], [1.72849866E12, 20.333333333333332], [1.7284944E12, 17.633333333333333], [1.72849872E12, 19.783333333333335], [1.72849308E12, 9.416666666666666], [1.7284953E12, 16.816666666666666], [1.72849752E12, 19.183333333333334], [1.72849428E12, 16.716666666666665], [1.7284965E12, 19.733333333333334], [1.72849854E12, 19.2], [1.72849548E12, 17.266666666666666], [1.7284989E12, 18.433333333333334], [1.72849224E12, 5.233333333333333], [1.72849326E12, 10.25], [1.7284977E12, 18.733333333333334], [1.72849344E12, 10.316666666666666], [1.72849446E12, 16.716666666666665], [1.72849668E12, 19.5], [1.72849272E12, 9.966666666666667], [1.72849938E12, 19.45], [1.72849374E12, 9.516666666666667], [1.72849596E12, 13.75], [1.72849494E12, 16.6], [1.72849716E12, 18.866666666666667], [1.72849818E12, 19.983333333333334], [1.72849392E12, 10.5], [1.7284929E12, 9.333333333333334], [1.72849614E12, 18.7], [1.72849512E12, 17.383333333333333], [1.72849734E12, 19.633333333333333], [1.72849836E12, 19.866666666666667], [1.7284941E12, 16.566666666666666], [1.72849632E12, 18.033333333333335], [1.728495E12, 16.0], [1.72849842E12, 19.683333333333334], [1.72849278E12, 9.766666666666667], [1.72849722E12, 19.916666666666668], [1.72849944E12, 20.183333333333334], [1.72849296E12, 10.0], [1.72849398E12, 10.283333333333333], [1.7284962E12, 18.333333333333332], [1.72849518E12, 16.683333333333334], [1.7284974E12, 18.566666666666666], [1.72849416E12, 16.766666666666666], [1.7284986E12, 20.633333333333333], [1.72849314E12, 10.016666666666667], [1.72849638E12, 18.983333333333334], [1.72849536E12, 17.216666666666665], [1.72849242E12, 9.383333333333333], [1.72849566E12, 16.75], [1.72849908E12, 20.683333333333334], [1.72849464E12, 16.683333333333334], [1.72849362E12, 10.216666666666667], [1.72849686E12, 19.866666666666667], [1.72849788E12, 17.9], [1.72849584E12, 16.65], [1.72849824E12, 19.05], [1.72849482E12, 17.783333333333335], [1.72849704E12, 19.25], [1.72849926E12, 20.283333333333335], [1.7284926E12, 9.183333333333334], [1.7284938E12, 9.8], [1.72849602E12, 19.7], [1.72849806E12, 20.233333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7284995E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

