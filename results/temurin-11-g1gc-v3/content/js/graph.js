/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 4110.0, "series": [{"data": [[0.0, 26.0], [0.1, 43.0], [0.2, 46.0], [0.3, 48.0], [0.4, 49.0], [0.5, 51.0], [0.6, 52.0], [0.7, 53.0], [0.8, 54.0], [0.9, 55.0], [1.0, 56.0], [1.1, 57.0], [1.2, 58.0], [1.3, 59.0], [1.4, 60.0], [1.5, 60.0], [1.6, 61.0], [1.7, 62.0], [1.8, 62.0], [1.9, 63.0], [2.0, 64.0], [2.1, 65.0], [2.2, 65.0], [2.3, 66.0], [2.4, 66.0], [2.5, 67.0], [2.6, 68.0], [2.7, 68.0], [2.8, 69.0], [2.9, 69.0], [3.0, 69.0], [3.1, 70.0], [3.2, 70.0], [3.3, 71.0], [3.4, 71.0], [3.5, 72.0], [3.6, 72.0], [3.7, 73.0], [3.8, 73.0], [3.9, 74.0], [4.0, 74.0], [4.1, 75.0], [4.2, 75.0], [4.3, 76.0], [4.4, 76.0], [4.5, 76.0], [4.6, 77.0], [4.7, 77.0], [4.8, 78.0], [4.9, 78.0], [5.0, 79.0], [5.1, 79.0], [5.2, 80.0], [5.3, 80.0], [5.4, 80.0], [5.5, 81.0], [5.6, 81.0], [5.7, 82.0], [5.8, 82.0], [5.9, 82.0], [6.0, 83.0], [6.1, 83.0], [6.2, 84.0], [6.3, 84.0], [6.4, 84.0], [6.5, 85.0], [6.6, 85.0], [6.7, 86.0], [6.8, 86.0], [6.9, 86.0], [7.0, 87.0], [7.1, 87.0], [7.2, 87.0], [7.3, 88.0], [7.4, 88.0], [7.5, 89.0], [7.6, 89.0], [7.7, 89.0], [7.8, 90.0], [7.9, 90.0], [8.0, 90.0], [8.1, 91.0], [8.2, 91.0], [8.3, 92.0], [8.4, 92.0], [8.5, 92.0], [8.6, 93.0], [8.7, 93.0], [8.8, 93.0], [8.9, 94.0], [9.0, 94.0], [9.1, 95.0], [9.2, 95.0], [9.3, 95.0], [9.4, 95.0], [9.5, 96.0], [9.6, 96.0], [9.7, 97.0], [9.8, 97.0], [9.9, 97.0], [10.0, 98.0], [10.1, 98.0], [10.2, 99.0], [10.3, 99.0], [10.4, 99.0], [10.5, 100.0], [10.6, 100.0], [10.7, 100.0], [10.8, 101.0], [10.9, 101.0], [11.0, 101.0], [11.1, 102.0], [11.2, 102.0], [11.3, 103.0], [11.4, 103.0], [11.5, 103.0], [11.6, 104.0], [11.7, 104.0], [11.8, 104.0], [11.9, 105.0], [12.0, 105.0], [12.1, 106.0], [12.2, 106.0], [12.3, 106.0], [12.4, 107.0], [12.5, 107.0], [12.6, 107.0], [12.7, 108.0], [12.8, 108.0], [12.9, 109.0], [13.0, 109.0], [13.1, 109.0], [13.2, 110.0], [13.3, 110.0], [13.4, 110.0], [13.5, 111.0], [13.6, 111.0], [13.7, 111.0], [13.8, 112.0], [13.9, 112.0], [14.0, 112.0], [14.1, 113.0], [14.2, 113.0], [14.3, 114.0], [14.4, 114.0], [14.5, 114.0], [14.6, 115.0], [14.7, 115.0], [14.8, 116.0], [14.9, 116.0], [15.0, 116.0], [15.1, 117.0], [15.2, 117.0], [15.3, 117.0], [15.4, 118.0], [15.5, 118.0], [15.6, 119.0], [15.7, 119.0], [15.8, 119.0], [15.9, 120.0], [16.0, 120.0], [16.1, 120.0], [16.2, 121.0], [16.3, 121.0], [16.4, 122.0], [16.5, 122.0], [16.6, 122.0], [16.7, 123.0], [16.8, 123.0], [16.9, 123.0], [17.0, 124.0], [17.1, 124.0], [17.2, 125.0], [17.3, 125.0], [17.4, 125.0], [17.5, 126.0], [17.6, 126.0], [17.7, 127.0], [17.8, 127.0], [17.9, 127.0], [18.0, 128.0], [18.1, 128.0], [18.2, 129.0], [18.3, 129.0], [18.4, 129.0], [18.5, 130.0], [18.6, 130.0], [18.7, 130.0], [18.8, 131.0], [18.9, 131.0], [19.0, 132.0], [19.1, 132.0], [19.2, 132.0], [19.3, 133.0], [19.4, 133.0], [19.5, 134.0], [19.6, 134.0], [19.7, 135.0], [19.8, 135.0], [19.9, 135.0], [20.0, 136.0], [20.1, 136.0], [20.2, 137.0], [20.3, 137.0], [20.4, 138.0], [20.5, 138.0], [20.6, 138.0], [20.7, 139.0], [20.8, 139.0], [20.9, 140.0], [21.0, 140.0], [21.1, 141.0], [21.2, 141.0], [21.3, 141.0], [21.4, 142.0], [21.5, 142.0], [21.6, 143.0], [21.7, 143.0], [21.8, 144.0], [21.9, 144.0], [22.0, 145.0], [22.1, 145.0], [22.2, 146.0], [22.3, 146.0], [22.4, 147.0], [22.5, 147.0], [22.6, 148.0], [22.7, 148.0], [22.8, 148.0], [22.9, 149.0], [23.0, 149.0], [23.1, 150.0], [23.2, 150.0], [23.3, 151.0], [23.4, 151.0], [23.5, 152.0], [23.6, 152.0], [23.7, 153.0], [23.8, 153.0], [23.9, 154.0], [24.0, 154.0], [24.1, 155.0], [24.2, 155.0], [24.3, 156.0], [24.4, 156.0], [24.5, 157.0], [24.6, 157.0], [24.7, 158.0], [24.8, 158.0], [24.9, 159.0], [25.0, 159.0], [25.1, 160.0], [25.2, 160.0], [25.3, 161.0], [25.4, 162.0], [25.5, 162.0], [25.6, 163.0], [25.7, 163.0], [25.8, 163.0], [25.9, 164.0], [26.0, 165.0], [26.1, 165.0], [26.2, 166.0], [26.3, 166.0], [26.4, 167.0], [26.5, 167.0], [26.6, 168.0], [26.7, 168.0], [26.8, 169.0], [26.9, 170.0], [27.0, 170.0], [27.1, 171.0], [27.2, 171.0], [27.3, 172.0], [27.4, 172.0], [27.5, 173.0], [27.6, 173.0], [27.7, 174.0], [27.8, 175.0], [27.9, 175.0], [28.0, 176.0], [28.1, 177.0], [28.2, 177.0], [28.3, 178.0], [28.4, 178.0], [28.5, 179.0], [28.6, 180.0], [28.7, 180.0], [28.8, 181.0], [28.9, 181.0], [29.0, 182.0], [29.1, 183.0], [29.2, 183.0], [29.3, 184.0], [29.4, 184.0], [29.5, 185.0], [29.6, 186.0], [29.7, 186.0], [29.8, 187.0], [29.9, 188.0], [30.0, 188.0], [30.1, 189.0], [30.2, 190.0], [30.3, 190.0], [30.4, 191.0], [30.5, 192.0], [30.6, 192.0], [30.7, 193.0], [30.8, 194.0], [30.9, 194.0], [31.0, 195.0], [31.1, 196.0], [31.2, 196.0], [31.3, 197.0], [31.4, 198.0], [31.5, 198.0], [31.6, 199.0], [31.7, 200.0], [31.8, 201.0], [31.9, 201.0], [32.0, 202.0], [32.1, 203.0], [32.2, 204.0], [32.3, 205.0], [32.4, 205.0], [32.5, 206.0], [32.6, 207.0], [32.7, 208.0], [32.8, 209.0], [32.9, 209.0], [33.0, 210.0], [33.1, 211.0], [33.2, 212.0], [33.3, 213.0], [33.4, 214.0], [33.5, 214.0], [33.6, 215.0], [33.7, 216.0], [33.8, 217.0], [33.9, 218.0], [34.0, 219.0], [34.1, 219.0], [34.2, 220.0], [34.3, 221.0], [34.4, 222.0], [34.5, 223.0], [34.6, 224.0], [34.7, 225.0], [34.8, 226.0], [34.9, 227.0], [35.0, 228.0], [35.1, 229.0], [35.2, 230.0], [35.3, 231.0], [35.4, 232.0], [35.5, 233.0], [35.6, 234.0], [35.7, 235.0], [35.8, 236.0], [35.9, 237.0], [36.0, 238.0], [36.1, 239.0], [36.2, 240.0], [36.3, 241.0], [36.4, 242.0], [36.5, 243.0], [36.6, 245.0], [36.7, 246.0], [36.8, 247.0], [36.9, 248.0], [37.0, 249.0], [37.1, 250.0], [37.2, 252.0], [37.3, 253.0], [37.4, 254.0], [37.5, 256.0], [37.6, 257.0], [37.7, 259.0], [37.8, 260.0], [37.9, 261.0], [38.0, 262.0], [38.1, 264.0], [38.2, 265.0], [38.3, 267.0], [38.4, 268.0], [38.5, 270.0], [38.6, 271.0], [38.7, 273.0], [38.8, 275.0], [38.9, 276.0], [39.0, 278.0], [39.1, 280.0], [39.2, 281.0], [39.3, 283.0], [39.4, 285.0], [39.5, 286.0], [39.6, 288.0], [39.7, 289.0], [39.8, 291.0], [39.9, 293.0], [40.0, 295.0], [40.1, 297.0], [40.2, 299.0], [40.3, 301.0], [40.4, 303.0], [40.5, 305.0], [40.6, 307.0], [40.7, 309.0], [40.8, 311.0], [40.9, 313.0], [41.0, 315.0], [41.1, 318.0], [41.2, 320.0], [41.3, 322.0], [41.4, 324.0], [41.5, 326.0], [41.6, 328.0], [41.7, 331.0], [41.8, 333.0], [41.9, 336.0], [42.0, 338.0], [42.1, 341.0], [42.2, 343.0], [42.3, 345.0], [42.4, 348.0], [42.5, 350.0], [42.6, 353.0], [42.7, 355.0], [42.8, 358.0], [42.9, 361.0], [43.0, 364.0], [43.1, 366.0], [43.2, 369.0], [43.3, 371.0], [43.4, 374.0], [43.5, 377.0], [43.6, 380.0], [43.7, 383.0], [43.8, 386.0], [43.9, 389.0], [44.0, 392.0], [44.1, 394.0], [44.2, 397.0], [44.3, 400.0], [44.4, 403.0], [44.5, 406.0], [44.6, 409.0], [44.7, 412.0], [44.8, 415.0], [44.9, 418.0], [45.0, 421.0], [45.1, 423.0], [45.2, 426.0], [45.3, 429.0], [45.4, 432.0], [45.5, 435.0], [45.6, 438.0], [45.7, 441.0], [45.8, 444.0], [45.9, 447.0], [46.0, 450.0], [46.1, 453.0], [46.2, 456.0], [46.3, 459.0], [46.4, 462.0], [46.5, 465.0], [46.6, 467.0], [46.7, 470.0], [46.8, 473.0], [46.9, 477.0], [47.0, 479.0], [47.1, 482.0], [47.2, 485.0], [47.3, 487.0], [47.4, 490.0], [47.5, 492.0], [47.6, 494.0], [47.7, 497.0], [47.8, 500.0], [47.9, 502.0], [48.0, 505.0], [48.1, 507.0], [48.2, 510.0], [48.3, 513.0], [48.4, 515.0], [48.5, 518.0], [48.6, 521.0], [48.7, 523.0], [48.8, 525.0], [48.9, 528.0], [49.0, 531.0], [49.1, 533.0], [49.2, 535.0], [49.3, 537.0], [49.4, 540.0], [49.5, 543.0], [49.6, 545.0], [49.7, 547.0], [49.8, 550.0], [49.9, 552.0], [50.0, 555.0], [50.1, 557.0], [50.2, 560.0], [50.3, 562.0], [50.4, 564.0], [50.5, 566.0], [50.6, 569.0], [50.7, 571.0], [50.8, 573.0], [50.9, 576.0], [51.0, 578.0], [51.1, 581.0], [51.2, 584.0], [51.3, 586.0], [51.4, 588.0], [51.5, 590.0], [51.6, 593.0], [51.7, 595.0], [51.8, 597.0], [51.9, 599.0], [52.0, 602.0], [52.1, 604.0], [52.2, 606.0], [52.3, 608.0], [52.4, 610.0], [52.5, 613.0], [52.6, 615.0], [52.7, 617.0], [52.8, 619.0], [52.9, 621.0], [53.0, 623.0], [53.1, 626.0], [53.2, 628.0], [53.3, 630.0], [53.4, 632.0], [53.5, 635.0], [53.6, 637.0], [53.7, 639.0], [53.8, 641.0], [53.9, 643.0], [54.0, 645.0], [54.1, 647.0], [54.2, 649.0], [54.3, 651.0], [54.4, 654.0], [54.5, 656.0], [54.6, 658.0], [54.7, 660.0], [54.8, 662.0], [54.9, 664.0], [55.0, 666.0], [55.1, 669.0], [55.2, 671.0], [55.3, 673.0], [55.4, 675.0], [55.5, 677.0], [55.6, 680.0], [55.7, 682.0], [55.8, 684.0], [55.9, 686.0], [56.0, 688.0], [56.1, 691.0], [56.2, 693.0], [56.3, 695.0], [56.4, 697.0], [56.5, 699.0], [56.6, 701.0], [56.7, 703.0], [56.8, 705.0], [56.9, 706.0], [57.0, 708.0], [57.1, 711.0], [57.2, 713.0], [57.3, 715.0], [57.4, 717.0], [57.5, 719.0], [57.6, 721.0], [57.7, 723.0], [57.8, 725.0], [57.9, 727.0], [58.0, 728.0], [58.1, 731.0], [58.2, 733.0], [58.3, 735.0], [58.4, 737.0], [58.5, 739.0], [58.6, 741.0], [58.7, 743.0], [58.8, 746.0], [58.9, 748.0], [59.0, 749.0], [59.1, 751.0], [59.2, 754.0], [59.3, 755.0], [59.4, 757.0], [59.5, 759.0], [59.6, 761.0], [59.7, 763.0], [59.8, 765.0], [59.9, 767.0], [60.0, 769.0], [60.1, 771.0], [60.2, 773.0], [60.3, 775.0], [60.4, 777.0], [60.5, 779.0], [60.6, 781.0], [60.7, 784.0], [60.8, 785.0], [60.9, 787.0], [61.0, 789.0], [61.1, 791.0], [61.2, 793.0], [61.3, 795.0], [61.4, 797.0], [61.5, 799.0], [61.6, 801.0], [61.7, 803.0], [61.8, 805.0], [61.9, 808.0], [62.0, 810.0], [62.1, 812.0], [62.2, 814.0], [62.3, 816.0], [62.4, 818.0], [62.5, 820.0], [62.6, 822.0], [62.7, 824.0], [62.8, 826.0], [62.9, 827.0], [63.0, 830.0], [63.1, 832.0], [63.2, 834.0], [63.3, 836.0], [63.4, 838.0], [63.5, 840.0], [63.6, 842.0], [63.7, 844.0], [63.8, 846.0], [63.9, 848.0], [64.0, 850.0], [64.1, 852.0], [64.2, 854.0], [64.3, 856.0], [64.4, 858.0], [64.5, 859.0], [64.6, 862.0], [64.7, 864.0], [64.8, 866.0], [64.9, 868.0], [65.0, 870.0], [65.1, 871.0], [65.2, 873.0], [65.3, 875.0], [65.4, 877.0], [65.5, 880.0], [65.6, 881.0], [65.7, 883.0], [65.8, 885.0], [65.9, 887.0], [66.0, 889.0], [66.1, 891.0], [66.2, 893.0], [66.3, 895.0], [66.4, 897.0], [66.5, 899.0], [66.6, 902.0], [66.7, 904.0], [66.8, 906.0], [66.9, 908.0], [67.0, 910.0], [67.1, 912.0], [67.2, 914.0], [67.3, 916.0], [67.4, 918.0], [67.5, 920.0], [67.6, 922.0], [67.7, 924.0], [67.8, 926.0], [67.9, 928.0], [68.0, 930.0], [68.1, 932.0], [68.2, 934.0], [68.3, 936.0], [68.4, 938.0], [68.5, 940.0], [68.6, 942.0], [68.7, 945.0], [68.8, 947.0], [68.9, 949.0], [69.0, 951.0], [69.1, 953.0], [69.2, 955.0], [69.3, 957.0], [69.4, 959.0], [69.5, 961.0], [69.6, 963.0], [69.7, 965.0], [69.8, 967.0], [69.9, 969.0], [70.0, 971.0], [70.1, 973.0], [70.2, 975.0], [70.3, 977.0], [70.4, 979.0], [70.5, 981.0], [70.6, 983.0], [70.7, 985.0], [70.8, 987.0], [70.9, 989.0], [71.0, 991.0], [71.1, 993.0], [71.2, 995.0], [71.3, 998.0], [71.4, 1000.0], [71.5, 1002.0], [71.6, 1004.0], [71.7, 1006.0], [71.8, 1008.0], [71.9, 1010.0], [72.0, 1012.0], [72.1, 1014.0], [72.2, 1017.0], [72.3, 1019.0], [72.4, 1021.0], [72.5, 1023.0], [72.6, 1026.0], [72.7, 1028.0], [72.8, 1030.0], [72.9, 1033.0], [73.0, 1035.0], [73.1, 1037.0], [73.2, 1040.0], [73.3, 1042.0], [73.4, 1044.0], [73.5, 1046.0], [73.6, 1048.0], [73.7, 1050.0], [73.8, 1053.0], [73.9, 1055.0], [74.0, 1057.0], [74.1, 1059.0], [74.2, 1061.0], [74.3, 1064.0], [74.4, 1066.0], [74.5, 1068.0], [74.6, 1070.0], [74.7, 1073.0], [74.8, 1075.0], [74.9, 1077.0], [75.0, 1080.0], [75.1, 1082.0], [75.2, 1085.0], [75.3, 1087.0], [75.4, 1089.0], [75.5, 1091.0], [75.6, 1093.0], [75.7, 1095.0], [75.8, 1097.0], [75.9, 1099.0], [76.0, 1101.0], [76.1, 1103.0], [76.2, 1106.0], [76.3, 1108.0], [76.4, 1111.0], [76.5, 1113.0], [76.6, 1115.0], [76.7, 1118.0], [76.8, 1120.0], [76.9, 1123.0], [77.0, 1125.0], [77.1, 1128.0], [77.2, 1130.0], [77.3, 1132.0], [77.4, 1135.0], [77.5, 1137.0], [77.6, 1140.0], [77.7, 1143.0], [77.8, 1145.0], [77.9, 1148.0], [78.0, 1151.0], [78.1, 1153.0], [78.2, 1156.0], [78.3, 1158.0], [78.4, 1161.0], [78.5, 1163.0], [78.6, 1166.0], [78.7, 1168.0], [78.8, 1171.0], [78.9, 1174.0], [79.0, 1176.0], [79.1, 1180.0], [79.2, 1183.0], [79.3, 1185.0], [79.4, 1188.0], [79.5, 1191.0], [79.6, 1194.0], [79.7, 1197.0], [79.8, 1200.0], [79.9, 1203.0], [80.0, 1206.0], [80.1, 1208.0], [80.2, 1211.0], [80.3, 1214.0], [80.4, 1217.0], [80.5, 1220.0], [80.6, 1222.0], [80.7, 1225.0], [80.8, 1228.0], [80.9, 1231.0], [81.0, 1234.0], [81.1, 1237.0], [81.2, 1239.0], [81.3, 1242.0], [81.4, 1245.0], [81.5, 1248.0], [81.6, 1251.0], [81.7, 1254.0], [81.8, 1257.0], [81.9, 1260.0], [82.0, 1263.0], [82.1, 1266.0], [82.2, 1269.0], [82.3, 1272.0], [82.4, 1276.0], [82.5, 1279.0], [82.6, 1281.0], [82.7, 1284.0], [82.8, 1287.0], [82.9, 1289.0], [83.0, 1293.0], [83.1, 1296.0], [83.2, 1299.0], [83.3, 1302.0], [83.4, 1305.0], [83.5, 1308.0], [83.6, 1311.0], [83.7, 1313.0], [83.8, 1317.0], [83.9, 1320.0], [84.0, 1323.0], [84.1, 1326.0], [84.2, 1330.0], [84.3, 1333.0], [84.4, 1336.0], [84.5, 1339.0], [84.6, 1342.0], [84.7, 1345.0], [84.8, 1349.0], [84.9, 1353.0], [85.0, 1357.0], [85.1, 1360.0], [85.2, 1364.0], [85.3, 1367.0], [85.4, 1370.0], [85.5, 1374.0], [85.6, 1377.0], [85.7, 1380.0], [85.8, 1384.0], [85.9, 1388.0], [86.0, 1391.0], [86.1, 1395.0], [86.2, 1399.0], [86.3, 1402.0], [86.4, 1406.0], [86.5, 1409.0], [86.6, 1413.0], [86.7, 1417.0], [86.8, 1420.0], [86.9, 1424.0], [87.0, 1428.0], [87.1, 1431.0], [87.2, 1435.0], [87.3, 1439.0], [87.4, 1443.0], [87.5, 1447.0], [87.6, 1450.0], [87.7, 1454.0], [87.8, 1458.0], [87.9, 1463.0], [88.0, 1467.0], [88.1, 1471.0], [88.2, 1475.0], [88.3, 1479.0], [88.4, 1483.0], [88.5, 1487.0], [88.6, 1491.0], [88.7, 1495.0], [88.8, 1500.0], [88.9, 1505.0], [89.0, 1509.0], [89.1, 1513.0], [89.2, 1518.0], [89.3, 1522.0], [89.4, 1526.0], [89.5, 1530.0], [89.6, 1535.0], [89.7, 1539.0], [89.8, 1544.0], [89.9, 1549.0], [90.0, 1554.0], [90.1, 1559.0], [90.2, 1564.0], [90.3, 1569.0], [90.4, 1573.0], [90.5, 1579.0], [90.6, 1585.0], [90.7, 1590.0], [90.8, 1595.0], [90.9, 1599.0], [91.0, 1603.0], [91.1, 1608.0], [91.2, 1614.0], [91.3, 1619.0], [91.4, 1625.0], [91.5, 1629.0], [91.6, 1634.0], [91.7, 1640.0], [91.8, 1646.0], [91.9, 1652.0], [92.0, 1657.0], [92.1, 1664.0], [92.2, 1670.0], [92.3, 1675.0], [92.4, 1680.0], [92.5, 1685.0], [92.6, 1691.0], [92.7, 1698.0], [92.8, 1703.0], [92.9, 1709.0], [93.0, 1715.0], [93.1, 1722.0], [93.2, 1728.0], [93.3, 1735.0], [93.4, 1741.0], [93.5, 1748.0], [93.6, 1755.0], [93.7, 1761.0], [93.8, 1767.0], [93.9, 1775.0], [94.0, 1782.0], [94.1, 1791.0], [94.2, 1799.0], [94.3, 1807.0], [94.4, 1814.0], [94.5, 1822.0], [94.6, 1829.0], [94.7, 1838.0], [94.8, 1846.0], [94.9, 1855.0], [95.0, 1862.0], [95.1, 1871.0], [95.2, 1879.0], [95.3, 1888.0], [95.4, 1896.0], [95.5, 1904.0], [95.6, 1914.0], [95.7, 1924.0], [95.8, 1935.0], [95.9, 1945.0], [96.0, 1955.0], [96.1, 1965.0], [96.2, 1976.0], [96.3, 1987.0], [96.4, 2000.0], [96.5, 2012.0], [96.6, 2023.0], [96.7, 2034.0], [96.8, 2046.0], [96.9, 2059.0], [97.0, 2073.0], [97.1, 2086.0], [97.2, 2100.0], [97.3, 2115.0], [97.4, 2130.0], [97.5, 2144.0], [97.6, 2159.0], [97.7, 2176.0], [97.8, 2193.0], [97.9, 2213.0], [98.0, 2232.0], [98.1, 2250.0], [98.2, 2272.0], [98.3, 2291.0], [98.4, 2313.0], [98.5, 2337.0], [98.6, 2364.0], [98.7, 2388.0], [98.8, 2415.0], [98.9, 2446.0], [99.0, 2477.0], [99.1, 2512.0], [99.2, 2551.0], [99.3, 2593.0], [99.4, 2642.0], [99.5, 2698.0], [99.6, 2779.0], [99.7, 2861.0], [99.8, 3000.0], [99.9, 3161.0], [100.0, 4110.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24813.0, "series": [{"data": [[0.0, 12268.0], [600.0, 5441.0], [700.0, 5811.0], [800.0, 5863.0], [900.0, 5728.0], [1000.0, 5319.0], [1100.0, 4534.0], [1200.0, 4020.0], [1300.0, 3514.0], [1400.0, 3002.0], [1500.0, 2484.0], [100.0, 24813.0], [1600.0, 2143.0], [1700.0, 1720.0], [1800.0, 1461.0], [1900.0, 1107.0], [2000.0, 940.0], [2100.0, 751.0], [2200.0, 589.0], [2300.0, 471.0], [2400.0, 390.0], [2500.0, 282.0], [2600.0, 219.0], [2700.0, 152.0], [2800.0, 106.0], [2900.0, 91.0], [3000.0, 81.0], [3100.0, 51.0], [200.0, 10045.0], [3200.0, 30.0], [3300.0, 26.0], [3400.0, 15.0], [3500.0, 11.0], [3600.0, 5.0], [3700.0, 10.0], [3800.0, 3.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [300.0, 4761.0], [400.0, 4126.0], [500.0, 4814.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 13117.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 56061.0, "series": [{"data": [[0.0, 56061.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 48022.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 13117.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.7285847E12, "maxY": 16.0, "series": [{"data": [[1.72859064E12, 12.0], [1.72859034E12, 12.0], [1.72858914E12, 11.947368421052616], [1.72858944E12, 12.0], [1.72858926E12, 12.0], [1.72858956E12, 12.0], [1.72858986E12, 12.0], [1.72859124E12, 12.0], [1.72859094E12, 12.0], [1.72858998E12, 12.0], [1.72859112E12, 12.0], [1.72859082E12, 12.0], [1.72859052E12, 12.0], [1.72859022E12, 12.0], [1.7285904E12, 12.0], [1.72858938E12, 12.0], [1.72858968E12, 12.0], [1.7285895E12, 12.0], [1.7285898E12, 12.0], [1.7285913E12, 7.800970873786394], [1.7285901E12, 12.0], [1.728591E12, 12.0], [1.7285907E12, 12.0], [1.72859088E12, 12.0], [1.72859058E12, 12.0], [1.72859028E12, 12.0], [1.7285892E12, 12.0], [1.72859016E12, 12.0], [1.72858932E12, 12.0], [1.72858962E12, 12.0], [1.72858992E12, 12.0], [1.72859118E12, 12.0], [1.72858974E12, 12.0], [1.72859004E12, 12.0], [1.72859106E12, 12.0], [1.72859076E12, 12.0], [1.72859046E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72858482E12, 2.0], [1.7285847E12, 2.0], [1.728585E12, 1.8684210526315792], [1.72858488E12, 2.0], [1.72858494E12, 2.0], [1.72858476E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.7285853E12, 4.0], [1.72858692E12, 1.0], [1.7285856E12, 4.0], [1.72858662E12, 4.0], [1.728585E12, 3.9933774834437097], [1.72858542E12, 4.0], [1.72858632E12, 4.0], [1.72858572E12, 4.0], [1.72858602E12, 4.0], [1.72858644E12, 4.0], [1.72858512E12, 4.0], [1.72858614E12, 4.0], [1.72858674E12, 4.0], [1.72858554E12, 4.0], [1.72858584E12, 4.0], [1.72858686E12, 3.2827763496143962], [1.72858524E12, 4.0], [1.72858596E12, 4.0], [1.72858566E12, 4.0], [1.72858656E12, 4.0], [1.72858626E12, 4.0], [1.72858506E12, 4.0], [1.72858668E12, 4.0], [1.72858536E12, 4.0], [1.72858638E12, 4.0], [1.72858578E12, 4.0], [1.72858518E12, 4.0], [1.72858608E12, 4.0], [1.72858548E12, 4.0], [1.7285862E12, 4.0], [1.7285859E12, 4.0], [1.7285868E12, 4.0], [1.7285865E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72859226E12, 16.0], [1.72859256E12, 16.0], [1.72859196E12, 16.0], [1.72859166E12, 16.0], [1.72859184E12, 16.0], [1.72859154E12, 16.0], [1.72859286E12, 16.0], [1.72859316E12, 13.063229571984422], [1.72859274E12, 16.0], [1.72859304E12, 16.0], [1.72859214E12, 16.0], [1.72859244E12, 16.0], [1.72859202E12, 16.0], [1.72859232E12, 16.0], [1.72859172E12, 16.0], [1.72859142E12, 16.0], [1.7285916E12, 16.0], [1.72859322E12, 6.949874686716799], [1.7285913E12, 14.864864864864861], [1.72859262E12, 16.0], [1.72859292E12, 16.0], [1.7285925E12, 16.0], [1.7285928E12, 16.0], [1.7285922E12, 16.0], [1.7285919E12, 16.0], [1.72859208E12, 16.0], [1.72859178E12, 16.0], [1.72859148E12, 16.0], [1.7285931E12, 16.0], [1.72859136E12, 16.0], [1.72859298E12, 16.0], [1.72859238E12, 16.0], [1.72859268E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.72858692E12, 7.987234042553195], [1.72858854E12, 8.0], [1.72858884E12, 8.0], [1.72858752E12, 8.0], [1.72858914E12, 1.0], [1.72858722E12, 8.0], [1.72858764E12, 8.0], [1.72858734E12, 8.0], [1.72858794E12, 8.0], [1.72858824E12, 8.0], [1.72858806E12, 8.0], [1.72858836E12, 8.0], [1.72858704E12, 8.0], [1.72858866E12, 8.0], [1.72858896E12, 8.0], [1.72858716E12, 8.0], [1.72858878E12, 8.0], [1.72858908E12, 5.240506329113924], [1.72858776E12, 8.0], [1.72858746E12, 8.0], [1.72858788E12, 8.0], [1.72858758E12, 8.0], [1.72858818E12, 8.0], [1.72858848E12, 8.0], [1.7285883E12, 8.0], [1.7285886E12, 8.0], [1.72858728E12, 8.0], [1.7285889E12, 8.0], [1.72858698E12, 8.0], [1.7285874E12, 8.0], [1.72858902E12, 8.0], [1.7285871E12, 8.0], [1.728588E12, 8.0], [1.7285877E12, 8.0], [1.72858782E12, 8.0], [1.72858812E12, 8.0], [1.72858842E12, 8.0], [1.72858872E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72859322E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 451.5176991150439, "minX": 1.0, "maxY": 942.7930788672186, "series": [{"data": [[2.0, 482.8090413094317], [8.0, 547.5775380710611], [9.0, 557.8257142857144], [10.0, 654.9065420560748], [11.0, 676.1764705882352], [3.0, 451.5176991150439], [12.0, 729.633889919603], [13.0, 658.2317880794702], [14.0, 934.4137931034485], [15.0, 826.8811881188118], [1.0, 490.25961538461536], [4.0, 465.22127953745604], [16.0, 942.7930788672186], [5.0, 463.0751445086707], [6.0, 500.0440677966102], [7.0, 522.059288537549]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.708865187713403, 695.4007167235542]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.7285847E12, "maxY": 5.353167388333333E7, "series": [{"data": [[1.72858692E12, 3.8940356766666666E7], [1.72859034E12, 4.927588411666667E7], [1.72859256E12, 5.353167388333333E7], [1.72858914E12, 4.469894611666667E7], [1.7285847E12, 2149727.85], [1.72859154E12, 5.182458155E7], [1.72858572E12, 2.5957434133333333E7], [1.72858794E12, 4.40488797E7], [1.72858998E12, 5.150734103333333E7], [1.72859274E12, 5.075223636666667E7], [1.72859052E12, 4.9083764416666664E7], [1.72858674E12, 2.6559029766666666E7], [1.72858896E12, 4.49246949E7], [1.72858554E12, 2.7544213333333332E7], [1.72858878E12, 4.3159280583333336E7], [1.72858776E12, 4.413974288333333E7], [1.72859172E12, 5.2099023666666664E7], [1.72858758E12, 4.4620474483333334E7], [1.7285898E12, 4.9922212666666664E7], [1.72858656E12, 2.7097950166666668E7], [1.7285907E12, 4.887972643333333E7], [1.72859292E12, 5.136427903333333E7], [1.72859088E12, 5.032418663333333E7], [1.72858536E12, 2.7528066166666668E7], [1.72858638E12, 2.664740865E7], [1.7285886E12, 4.529351005E7], [1.7285919E12, 5.0723000583333336E7], [1.7285874E12, 4.20475098E7], [1.72859208E12, 5.2364076E7], [1.72858518E12, 2.6360553516666666E7], [1.72858962E12, 4.933065046666667E7], [1.7285931E12, 5.112680485E7], [1.7285862E12, 2.591441905E7], [1.72859106E12, 5.039536186666667E7], [1.72858842E12, 4.38959562E7], [1.72859226E12, 5.17242689E7], [1.728585E12, 1.5351176116666667E7], [1.72858722E12, 4.37527895E7], [1.72858944E12, 5.07150008E7], [1.72858926E12, 4.96808344E7], [1.72859124E12, 5.063814736666667E7], [1.72858602E12, 2.5228632266666666E7], [1.72858824E12, 4.352729121666667E7], [1.72858482E12, 1.25311506E7], [1.72858806E12, 4.45346144E7], [1.72858704E12, 4.36866804E7], [1.72859022E12, 5.035314081666667E7], [1.72859244E12, 5.2960409016666666E7], [1.7285904E12, 5.2636928833333336E7], [1.72858584E12, 2.66231797E7], [1.72858908E12, 2.804072985E7], [1.72858686E12, 1.9614058133333333E7], [1.72859142E12, 5.0741394333333336E7], [1.72858788E12, 4.549156831666667E7], [1.7285916E12, 5.098987521666667E7], [1.72858566E12, 2.6883607183333334E7], [1.7285901E12, 4.961700963333333E7], [1.72859262E12, 5.1668253733333334E7], [1.72858668E12, 2.6397428466666665E7], [1.72859058E12, 5.108263506666667E7], [1.7285928E12, 5.089787018333333E7], [1.7285889E12, 4.441107815E7], [1.72859178E12, 5.3338957483333334E7], [1.72858548E12, 2.6029103316666666E7], [1.7285877E12, 4.484803481666667E7], [1.72858992E12, 5.006773521666667E7], [1.72858974E12, 4.828518953333333E7], [1.72859298E12, 5.308388321666667E7], [1.72859076E12, 4.9280291916666664E7], [1.7285865E12, 2.6562291566666666E7], [1.72858872E12, 4.522516765E7], [1.7285853E12, 2.70694341E7], [1.72858854E12, 4.3859625983333334E7], [1.72858752E12, 4.4990985233333334E7], [1.72859196E12, 5.2894365766666666E7], [1.72858734E12, 4.588999793333333E7], [1.72858956E12, 5.053220453333333E7], [1.72858632E12, 2.6090756883333333E7], [1.72859094E12, 5.090739581666667E7], [1.72859316E12, 4.8031382733333334E7], [1.72859112E12, 4.927718231666667E7], [1.72858512E12, 2.6298061033333335E7], [1.72858614E12, 2.7337416766666666E7], [1.72858836E12, 4.360300543333333E7], [1.72859214E12, 5.1246649833333336E7], [1.72858716E12, 4.443511295E7], [1.72859232E12, 5.165063755E7], [1.72858494E12, 1.2433437366666667E7], [1.72858938E12, 5.090021621666667E7], [1.72858596E12, 2.5463091566666666E7], [1.7285913E12, 3.3124312833333332E7], [1.72858818E12, 4.2636891016666666E7], [1.7285925E12, 5.241452418333333E7], [1.72859028E12, 4.9371431266666666E7], [1.72858698E12, 4.262765261666667E7], [1.7285892E12, 4.992051713333333E7], [1.72858476E12, 1.2593302266666668E7], [1.72858578E12, 2.7002508766666666E7], [1.72858902E12, 4.5798235516666666E7], [1.728588E12, 4.433844136666667E7], [1.72859148E12, 5.295777175E7], [1.72858782E12, 4.4041240266666666E7], [1.72859004E12, 4.999074905E7], [1.7285868E12, 2.4102913883333333E7], [1.72859046E12, 4.980907046666667E7], [1.72859268E12, 5.195627313333333E7], [1.72859064E12, 4.859237211666667E7], [1.7285856E12, 2.6284761883333333E7], [1.72858662E12, 2.5293879983333334E7], [1.72858884E12, 4.551740185E7], [1.72859166E12, 5.088298428333333E7], [1.72858764E12, 4.490335936666667E7], [1.72859184E12, 5.228435413333333E7], [1.72858542E12, 2.6017034E7], [1.72858986E12, 5.0864270833333336E7], [1.72859286E12, 5.254950625E7], [1.72858644E12, 2.73604354E7], [1.72859082E12, 5.0223700733333334E7], [1.72859304E12, 5.1534081766666666E7], [1.72858866E12, 4.5701391666666664E7], [1.72859202E12, 5.217357288333333E7], [1.72858524E12, 2.605326905E7], [1.72858746E12, 4.32167424E7], [1.72858968E12, 5.162618256666667E7], [1.7285895E12, 5.1481994016666666E7], [1.72859322E12, 2.0374946566666666E7], [1.728591E12, 4.959210428333333E7], [1.72858626E12, 2.6030932516666666E7], [1.72858848E12, 4.421558575E7], [1.72858506E12, 2.5313183666666668E7], [1.7285883E12, 4.673806071666667E7], [1.72858728E12, 4.3808726766666666E7], [1.7285922E12, 5.153668575E7], [1.72859016E12, 4.822047955E7], [1.7285871E12, 4.6042491083333336E7], [1.72858932E12, 4.99519057E7], [1.72858608E12, 2.6399299133333333E7], [1.72859118E12, 4.97383807E7], [1.72859136E12, 5.039824171666667E7], [1.72858488E12, 1.2277845466666667E7], [1.72858812E12, 4.4643541666666664E7], [1.7285859E12, 2.7160386233333334E7], [1.72859238E12, 5.1198883516666666E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72858692E12, 0.0], [1.72859034E12, 0.0], [1.72859256E12, 0.0], [1.72858914E12, 0.0], [1.7285847E12, 0.0], [1.72859154E12, 0.0], [1.72858572E12, 0.0], [1.72858794E12, 0.0], [1.72858998E12, 0.0], [1.72859274E12, 0.0], [1.72859052E12, 0.0], [1.72858674E12, 0.0], [1.72858896E12, 0.0], [1.72858554E12, 0.0], [1.72858878E12, 0.0], [1.72858776E12, 0.0], [1.72859172E12, 0.0], [1.72858758E12, 0.0], [1.7285898E12, 0.0], [1.72858656E12, 0.0], [1.7285907E12, 0.0], [1.72859292E12, 0.0], [1.72859088E12, 0.0], [1.72858536E12, 0.0], [1.72858638E12, 0.0], [1.7285886E12, 0.0], [1.7285919E12, 0.0], [1.7285874E12, 0.0], [1.72859208E12, 0.0], [1.72858518E12, 0.0], [1.72858962E12, 0.0], [1.7285931E12, 0.0], [1.7285862E12, 0.0], [1.72859106E12, 0.0], [1.72858842E12, 0.0], [1.72859226E12, 0.0], [1.728585E12, 0.0], [1.72858722E12, 0.0], [1.72858944E12, 0.0], [1.72858926E12, 0.0], [1.72859124E12, 0.0], [1.72858602E12, 0.0], [1.72858824E12, 0.0], [1.72858482E12, 0.0], [1.72858806E12, 0.0], [1.72858704E12, 0.0], [1.72859022E12, 0.0], [1.72859244E12, 0.0], [1.7285904E12, 0.0], [1.72858584E12, 0.0], [1.72858908E12, 0.0], [1.72858686E12, 0.0], [1.72859142E12, 0.0], [1.72858788E12, 0.0], [1.7285916E12, 0.0], [1.72858566E12, 0.0], [1.7285901E12, 0.0], [1.72859262E12, 0.0], [1.72858668E12, 0.0], [1.72859058E12, 0.0], [1.7285928E12, 0.0], [1.7285889E12, 0.0], [1.72859178E12, 0.0], [1.72858548E12, 0.0], [1.7285877E12, 0.0], [1.72858992E12, 0.0], [1.72858974E12, 0.0], [1.72859298E12, 0.0], [1.72859076E12, 0.0], [1.7285865E12, 0.0], [1.72858872E12, 0.0], [1.7285853E12, 0.0], [1.72858854E12, 0.0], [1.72858752E12, 0.0], [1.72859196E12, 0.0], [1.72858734E12, 0.0], [1.72858956E12, 0.0], [1.72858632E12, 0.0], [1.72859094E12, 0.0], [1.72859316E12, 0.0], [1.72859112E12, 0.0], [1.72858512E12, 0.0], [1.72858614E12, 0.0], [1.72858836E12, 0.0], [1.72859214E12, 0.0], [1.72858716E12, 0.0], [1.72859232E12, 0.0], [1.72858494E12, 0.0], [1.72858938E12, 0.0], [1.72858596E12, 0.0], [1.7285913E12, 0.0], [1.72858818E12, 0.0], [1.7285925E12, 0.0], [1.72859028E12, 0.0], [1.72858698E12, 0.0], [1.7285892E12, 0.0], [1.72858476E12, 0.0], [1.72858578E12, 0.0], [1.72858902E12, 0.0], [1.728588E12, 0.0], [1.72859148E12, 0.0], [1.72858782E12, 0.0], [1.72859004E12, 0.0], [1.7285868E12, 0.0], [1.72859046E12, 0.0], [1.72859268E12, 0.0], [1.72859064E12, 0.0], [1.7285856E12, 0.0], [1.72858662E12, 0.0], [1.72858884E12, 0.0], [1.72859166E12, 0.0], [1.72858764E12, 0.0], [1.72859184E12, 0.0], [1.72858542E12, 0.0], [1.72858986E12, 0.0], [1.72859286E12, 0.0], [1.72858644E12, 0.0], [1.72859082E12, 0.0], [1.72859304E12, 0.0], [1.72858866E12, 0.0], [1.72859202E12, 0.0], [1.72858524E12, 0.0], [1.72858746E12, 0.0], [1.72858968E12, 0.0], [1.7285895E12, 0.0], [1.72859322E12, 0.0], [1.728591E12, 0.0], [1.72858626E12, 0.0], [1.72858848E12, 0.0], [1.72858506E12, 0.0], [1.7285883E12, 0.0], [1.72858728E12, 0.0], [1.7285922E12, 0.0], [1.72859016E12, 0.0], [1.7285871E12, 0.0], [1.72858932E12, 0.0], [1.72858608E12, 0.0], [1.72859118E12, 0.0], [1.72859136E12, 0.0], [1.72858488E12, 0.0], [1.72858812E12, 0.0], [1.7285859E12, 0.0], [1.72859238E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72859322E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 420.32844574780063, "minX": 1.7285847E12, "maxY": 989.6309278350519, "series": [{"data": [[1.72858692E12, 578.5977808599173], [1.72859034E12, 725.4777777777773], [1.72859256E12, 989.3367346938766], [1.72858914E12, 698.0285714285724], [1.7285847E12, 613.75], [1.72859154E12, 904.8113207547168], [1.72858572E12, 457.2575757575761], [1.72858794E12, 550.8130733944947], [1.72858998E12, 718.0402414486925], [1.72859274E12, 892.7330232558145], [1.72859052E12, 727.5480283114257], [1.72858674E12, 448.72710280373855], [1.72858896E12, 553.2211981566818], [1.72858554E12, 510.67230443974665], [1.72858878E12, 547.5286041189937], [1.72858776E12, 540.938983050847], [1.72859172E12, 972.2873096446696], [1.72858758E12, 567.2296819787996], [1.7285898E12, 740.8108941418302], [1.72858656E12, 485.5121457489876], [1.7285907E12, 714.5232443125618], [1.72859292E12, 935.701463414634], [1.72859088E12, 737.2466598150048], [1.72858536E12, 459.8593155893536], [1.72858638E12, 435.02702702702715], [1.7285886E12, 561.2863849765259], [1.7285919E12, 960.2175648702596], [1.7285874E12, 549.7949599083614], [1.72859208E12, 971.9170040485828], [1.72858518E12, 463.9691714836224], [1.72858962E12, 744.0467775467778], [1.7285931E12, 989.6309278350519], [1.7285862E12, 449.36960600375204], [1.72859106E12, 723.265120967742], [1.72858842E12, 536.8210290827739], [1.72859226E12, 917.9800759013286], [1.728585E12, 420.32844574780063], [1.72858722E12, 544.4744608399545], [1.72858944E12, 739.662898252826], [1.72858926E12, 706.8786692759302], [1.72859124E12, 750.9853556485365], [1.72858602E12, 450.56015037593966], [1.72858824E12, 545.7888762769586], [1.72858482E12, 446.5410447761197], [1.72858806E12, 563.1408450704224], [1.72858704E12, 553.7298850574716], [1.72859022E12, 735.2305327868863], [1.72859244E12, 940.2709359605909], [1.7285904E12, 707.4194499017674], [1.72858584E12, 463.6531791907516], [1.72858908E12, 486.66907775768595], [1.72858686E12, 446.73264781490985], [1.72859142E12, 940.4852362204725], [1.72858788E12, 559.8266978922711], [1.7285916E12, 885.6718894009209], [1.72858566E12, 445.60934579439265], [1.7285901E12, 764.3619957537165], [1.72859262E12, 933.9275220372197], [1.72858668E12, 483.84677419354824], [1.72859058E12, 691.4664107485607], [1.7285928E12, 957.7181274900398], [1.7285889E12, 561.4560375146541], [1.72859178E12, 964.4386839481562], [1.72858548E12, 481.61414141414133], [1.7285877E12, 548.1712328767129], [1.72858992E12, 724.2725450901809], [1.72858974E12, 691.8783783783791], [1.72859298E12, 923.0384615384614], [1.72859076E12, 725.3003033367038], [1.7285865E12, 491.0102249488755], [1.72858872E12, 547.5113895216397], [1.7285853E12, 477.9660000000002], [1.72858854E12, 531.0851769911505], [1.72858752E12, 551.3970080552353], [1.72859196E12, 921.4489016236861], [1.72858734E12, 528.7442371020857], [1.72858956E12, 742.8497942386841], [1.72858632E12, 468.73776908023524], [1.72859094E12, 732.3078491335373], [1.72859316E12, 758.4075875486383], [1.72859112E12, 757.1564482029602], [1.72858512E12, 463.88996138996134], [1.72858614E12, 476.6726190476192], [1.72858836E12, 533.6426193118766], [1.72859214E12, 949.4742574257417], [1.72858716E12, 554.2669735327956], [1.72859232E12, 926.2030947775623], [1.72858494E12, 549.894495412844], [1.72858938E12, 764.2202127659568], [1.72858596E12, 439.41864716636167], [1.7285913E12, 584.3694656488556], [1.72858818E12, 530.5182724252484], [1.7285925E12, 988.2466734902756], [1.72859028E12, 729.1099899091824], [1.72858698E12, 534.2142857142856], [1.7285892E12, 713.5143992055622], [1.72858476E12, 490.1341463414631], [1.72858578E12, 501.29140461215883], [1.72858902E12, 564.3838028169017], [1.728588E12, 570.6793802145411], [1.72859148E12, 950.4408284023663], [1.72858782E12, 515.5187566988203], [1.72859004E12, 753.9677419354837], [1.7285868E12, 430.3375224416518], [1.72859046E12, 736.4525025536251], [1.72859268E12, 966.9626639757824], [1.72859064E12, 737.1374358974358], [1.7285856E12, 493.627572016461], [1.72858662E12, 467.9375], [1.72858884E12, 544.7984144960371], [1.72859166E12, 931.5340466926075], [1.72858764E12, 552.356731875719], [1.72859184E12, 950.8731268731273], [1.72858542E12, 458.79462571976956], [1.72858986E12, 726.6123481781368], [1.72859286E12, 942.0088321884205], [1.72858644E12, 474.645544554455], [1.72859082E12, 757.9821240799166], [1.72859304E12, 974.8715874620823], [1.72858866E12, 558.1406976744184], [1.72859202E12, 947.82323733863], [1.72858524E12, 497.37500000000017], [1.72858746E12, 521.3619565217393], [1.72858968E12, 741.9222903885473], [1.7285895E12, 776.3455723542107], [1.72859322E12, 530.3283208020047], [1.728591E12, 690.3498098859309], [1.72858626E12, 455.29847908745296], [1.72858848E12, 545.891032917139], [1.72858506E12, 456.15209125475315], [1.7285883E12, 550.4470046082951], [1.72858728E12, 545.8821510297481], [1.7285922E12, 901.4873000940726], [1.72859016E12, 694.0703275529856], [1.7285871E12, 533.3839285714283], [1.72858932E12, 722.7008032128517], [1.72858608E12, 466.42217898832655], [1.72859118E12, 744.0308641975315], [1.72859136E12, 907.6292452830194], [1.72858488E12, 488.2886178861787], [1.72858812E12, 544.9344632768361], [1.7285859E12, 451.1996233521658], [1.72859238E12, 981.9506680369996]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72859322E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 280.50146627565994, "minX": 1.7285847E12, "maxY": 677.0948453608236, "series": [{"data": [[1.72858692E12, 391.5963938973649], [1.72859034E12, 495.52222222222184], [1.72859256E12, 672.2887755102049], [1.72858914E12, 472.6549450549453], [1.7285847E12, 405.96875000000006], [1.72859154E12, 614.7594339622648], [1.72858572E12, 304.5454545454545], [1.72858794E12, 374.18004587156], [1.72858998E12, 483.91951710261566], [1.72859274E12, 605.47534883721], [1.72859052E12, 493.1354903943375], [1.72858674E12, 296.4878504672897], [1.72858896E12, 374.90322580645153], [1.72858554E12, 337.8224101479914], [1.72858878E12, 373.56064073226514], [1.72858776E12, 365.8203389830511], [1.72859172E12, 655.8730964467014], [1.72858758E12, 386.4581861012956], [1.7285898E12, 504.52620760534376], [1.72858656E12, 319.67611336032417], [1.7285907E12, 488.4727992087041], [1.72859292E12, 638.4253658536584], [1.72859088E12, 499.6053442959922], [1.72858536E12, 303.38783269961965], [1.72858638E12, 287.8036036036036], [1.7285886E12, 375.99765258216013], [1.7285919E12, 656.2035928143715], [1.7285874E12, 376.58533791523456], [1.72859208E12, 658.6447368421052], [1.72858518E12, 308.43352601156016], [1.72858962E12, 506.21205821205854], [1.7285931E12, 677.0948453608236], [1.7285862E12, 300.75046904315207], [1.72859106E12, 486.5796370967738], [1.72858842E12, 363.8187919463089], [1.72859226E12, 626.0142314990505], [1.728585E12, 280.50146627565994], [1.72858722E12, 370.96254256526703], [1.72858944E12, 502.7060637204516], [1.72858926E12, 477.84540117416856], [1.72859124E12, 507.09518828451854], [1.72858602E12, 302.77255639097746], [1.72858824E12, 368.60045402951215], [1.72858482E12, 299.17910447761193], [1.72858806E12, 378.3814553990611], [1.72858704E12, 376.65862068965544], [1.72859022E12, 495.7776639344261], [1.72859244E12, 634.1773399014779], [1.7285904E12, 474.88015717092276], [1.72858584E12, 308.70327552986487], [1.72858908E12, 325.66003616636516], [1.72858686E12, 294.94858611825157], [1.72859142E12, 639.4724409448817], [1.72858788E12, 374.91569086651043], [1.7285916E12, 606.2940092165896], [1.72858566E12, 294.39813084112143], [1.7285901E12, 521.7399150743104], [1.72859262E12, 633.4583741429971], [1.72858668E12, 322.0282258064515], [1.72859058E12, 466.89059500959655], [1.7285928E12, 654.9940239043829], [1.7285889E12, 378.8616647127783], [1.72859178E12, 650.325024925224], [1.72858548E12, 321.0121212121211], [1.7285877E12, 369.1312785388125], [1.72858992E12, 493.01903807615224], [1.72858974E12, 473.04054054054023], [1.72859298E12, 624.8423076923066], [1.72859076E12, 494.3720930232555], [1.7285865E12, 324.8997955010226], [1.72858872E12, 367.2061503416858], [1.7285853E12, 314.6839999999999], [1.72858854E12, 356.80420353982237], [1.72858752E12, 370.99654775604046], [1.72859196E12, 624.379178605539], [1.72858734E12, 353.8287596048301], [1.72858956E12, 505.6286008230449], [1.72858632E12, 313.2857142857143], [1.72859094E12, 496.0142711518853], [1.72859316E12, 515.637159533073], [1.72859112E12, 513.7378435517975], [1.72858512E12, 308.90347490347517], [1.72858614E12, 314.8373015873014], [1.72858836E12, 359.2275249722533], [1.72859214E12, 643.6049504950493], [1.72858716E12, 375.8561565017261], [1.72859232E12, 629.1257253384917], [1.72858494E12, 374.36238532110076], [1.72858938E12, 518.528723404255], [1.72858596E12, 294.2705667276049], [1.7285913E12, 395.14198473282426], [1.72858818E12, 362.784053156146], [1.7285925E12, 669.2364380757423], [1.72859028E12, 500.2411705348126], [1.72858698E12, 363.9732142857148], [1.7285892E12, 484.299900695134], [1.72858476E12, 327.59756097560984], [1.72858578E12, 332.36058700209674], [1.72858902E12, 378.21596244131484], [1.728588E12, 386.52205005959445], [1.72859148E12, 640.8471400394474], [1.72858782E12, 348.8070739549842], [1.72859004E12, 510.77835587929314], [1.7285868E12, 290.16876122082596], [1.72859046E12, 500.94892747701726], [1.72859268E12, 656.2341069626638], [1.72859064E12, 500.9200000000003], [1.7285856E12, 329.34156378600807], [1.72858662E12, 315.68359375000034], [1.72858884E12, 366.3488108720274], [1.72859166E12, 637.5048638132292], [1.72858764E12, 373.4108170310702], [1.72859184E12, 645.2657342657337], [1.72858542E12, 305.2725527831094], [1.72858986E12, 492.25404858299555], [1.72859286E12, 639.8302257114815], [1.72858644E12, 312.7227722772277], [1.72859082E12, 516.5120925341732], [1.72859304E12, 663.0910010111218], [1.72858866E12, 373.3848837209303], [1.72859202E12, 642.5253227408134], [1.72858524E12, 331.1000000000001], [1.72858746E12, 354.3163043478259], [1.72858968E12, 499.90081799590985], [1.7285895E12, 524.9719222462192], [1.72859322E12, 356.994987468672], [1.728591E12, 469.9115969581752], [1.72858626E12, 304.4391634980988], [1.72858848E12, 370.51645856980673], [1.72858506E12, 303.74144486692023], [1.7285883E12, 366.5172811059909], [1.72858728E12, 368.1189931350116], [1.7285922E12, 608.3687676387586], [1.72859016E12, 471.5105973025043], [1.7285871E12, 356.98772321428635], [1.72858932E12, 490.21686746987996], [1.72858608E12, 309.96887159533105], [1.72859118E12, 508.11831275720164], [1.72859136E12, 622.3009433962261], [1.72858488E12, 326.0609756097559], [1.72858812E12, 368.43163841807893], [1.7285859E12, 294.7288135593222], [1.72859238E12, 672.2929085303185]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72859322E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7285847E12, "maxY": 4.9E-324, "series": [{"data": [[1.72858692E12, 0.0], [1.72859034E12, 0.0], [1.72859256E12, 0.0], [1.72858914E12, 0.0], [1.7285847E12, 0.0], [1.72859154E12, 0.0], [1.72858572E12, 0.0], [1.72858794E12, 0.0], [1.72858998E12, 0.0], [1.72859274E12, 0.0], [1.72859052E12, 0.0], [1.72858674E12, 0.0], [1.72858896E12, 0.0], [1.72858554E12, 0.0], [1.72858878E12, 0.0], [1.72858776E12, 0.0], [1.72859172E12, 0.0], [1.72858758E12, 0.0], [1.7285898E12, 0.0], [1.72858656E12, 0.0], [1.7285907E12, 0.0], [1.72859292E12, 0.0], [1.72859088E12, 0.0], [1.72858536E12, 0.0], [1.72858638E12, 0.0], [1.7285886E12, 0.0], [1.7285919E12, 0.0], [1.7285874E12, 0.0], [1.72859208E12, 0.0], [1.72858518E12, 0.0], [1.72858962E12, 0.0], [1.7285931E12, 0.0], [1.7285862E12, 0.0], [1.72859106E12, 0.0], [1.72858842E12, 0.0], [1.72859226E12, 0.0], [1.728585E12, 0.0], [1.72858722E12, 0.0], [1.72858944E12, 0.0], [1.72858926E12, 0.0], [1.72859124E12, 0.0], [1.72858602E12, 0.0], [1.72858824E12, 0.0], [1.72858482E12, 0.0], [1.72858806E12, 0.0], [1.72858704E12, 0.0], [1.72859022E12, 0.0], [1.72859244E12, 0.0], [1.7285904E12, 0.0], [1.72858584E12, 0.0], [1.72858908E12, 0.0], [1.72858686E12, 0.0], [1.72859142E12, 0.0], [1.72858788E12, 0.0], [1.7285916E12, 0.0], [1.72858566E12, 0.0], [1.7285901E12, 0.0], [1.72859262E12, 0.0], [1.72858668E12, 0.0], [1.72859058E12, 0.0], [1.7285928E12, 0.0], [1.7285889E12, 0.0], [1.72859178E12, 0.0], [1.72858548E12, 0.0], [1.7285877E12, 0.0], [1.72858992E12, 0.0], [1.72858974E12, 0.0], [1.72859298E12, 0.0], [1.72859076E12, 0.0], [1.7285865E12, 0.0], [1.72858872E12, 0.0], [1.7285853E12, 0.0], [1.72858854E12, 0.0], [1.72858752E12, 0.0], [1.72859196E12, 0.0], [1.72858734E12, 0.0], [1.72858956E12, 0.0], [1.72858632E12, 0.0], [1.72859094E12, 0.0], [1.72859316E12, 0.0], [1.72859112E12, 0.0], [1.72858512E12, 0.0], [1.72858614E12, 0.0], [1.72858836E12, 0.0], [1.72859214E12, 0.0], [1.72858716E12, 0.0], [1.72859232E12, 0.0], [1.72858494E12, 0.0], [1.72858938E12, 0.0], [1.72858596E12, 0.0], [1.7285913E12, 0.0], [1.72858818E12, 0.0], [1.7285925E12, 0.0], [1.72859028E12, 0.0], [1.72858698E12, 0.0], [1.7285892E12, 0.0], [1.72858476E12, 0.0], [1.72858578E12, 0.0], [1.72858902E12, 0.0], [1.728588E12, 0.0], [1.72859148E12, 0.0], [1.72858782E12, 0.0], [1.72859004E12, 0.0], [1.7285868E12, 0.0], [1.72859046E12, 0.0], [1.72859268E12, 0.0], [1.72859064E12, 0.0], [1.7285856E12, 0.0], [1.72858662E12, 0.0], [1.72858884E12, 0.0], [1.72859166E12, 0.0], [1.72858764E12, 0.0], [1.72859184E12, 0.0], [1.72858542E12, 0.0], [1.72858986E12, 0.0], [1.72859286E12, 0.0], [1.72858644E12, 0.0], [1.72859082E12, 0.0], [1.72859304E12, 0.0], [1.72858866E12, 0.0], [1.72859202E12, 0.0], [1.72858524E12, 0.0], [1.72858746E12, 0.0], [1.72858968E12, 0.0], [1.7285895E12, 0.0], [1.72859322E12, 0.0], [1.728591E12, 0.0], [1.72858626E12, 0.0], [1.72858848E12, 0.0], [1.72858506E12, 0.0], [1.7285883E12, 0.0], [1.72858728E12, 0.0], [1.7285922E12, 0.0], [1.72859016E12, 0.0], [1.7285871E12, 0.0], [1.72858932E12, 0.0], [1.72858608E12, 0.0], [1.72859118E12, 0.0], [1.72859136E12, 0.0], [1.72858488E12, 0.0], [1.72858812E12, 0.0], [1.7285859E12, 0.0], [1.72859238E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72859322E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.7285847E12, "maxY": 4110.0, "series": [{"data": [[1.72858692E12, 1903.0], [1.72859034E12, 2926.0], [1.72859256E12, 3295.0], [1.72858914E12, 2618.0], [1.7285847E12, 1822.0], [1.72859154E12, 3341.0], [1.72858572E12, 1927.0], [1.72858794E12, 2149.0], [1.72858998E12, 3007.0], [1.72859274E12, 3683.0], [1.72859052E12, 3124.0], [1.72858674E12, 1680.0], [1.72858896E12, 2071.0], [1.72858554E12, 1857.0], [1.72858878E12, 2142.0], [1.72858776E12, 2078.0], [1.72859172E12, 3391.0], [1.72858758E12, 1982.0], [1.7285898E12, 2743.0], [1.72858656E12, 1784.0], [1.7285907E12, 2928.0], [1.72859292E12, 3377.0], [1.72859088E12, 2801.0], [1.72858536E12, 1883.0], [1.72858638E12, 1592.0], [1.7285886E12, 1938.0], [1.7285919E12, 3737.0], [1.7285874E12, 2095.0], [1.72859208E12, 4040.0], [1.72858518E12, 1613.0], [1.72858962E12, 3224.0], [1.7285931E12, 3882.0], [1.7285862E12, 1650.0], [1.72859106E12, 2506.0], [1.72858842E12, 2095.0], [1.72859226E12, 3744.0], [1.728585E12, 1629.0], [1.72858722E12, 2065.0], [1.72858944E12, 2722.0], [1.72858926E12, 2610.0], [1.72859124E12, 2526.0], [1.72858602E12, 1536.0], [1.72858824E12, 2112.0], [1.72858482E12, 1729.0], [1.72858806E12, 1919.0], [1.72858704E12, 2065.0], [1.72859022E12, 2677.0], [1.72859244E12, 3766.0], [1.7285904E12, 2661.0], [1.72858584E12, 1850.0], [1.72858908E12, 1949.0], [1.72858686E12, 1573.0], [1.72859142E12, 3530.0], [1.72858788E12, 2254.0], [1.7285916E12, 3385.0], [1.72858566E12, 1463.0], [1.7285901E12, 3146.0], [1.72859262E12, 3975.0], [1.72858668E12, 1650.0], [1.72859058E12, 2715.0], [1.7285928E12, 3708.0], [1.7285889E12, 2391.0], [1.72859178E12, 3769.0], [1.72858548E12, 1750.0], [1.7285877E12, 2034.0], [1.72858992E12, 2675.0], [1.72858974E12, 2717.0], [1.72859298E12, 4110.0], [1.72859076E12, 2587.0], [1.7285865E12, 1756.0], [1.72858872E12, 1951.0], [1.7285853E12, 1721.0], [1.72858854E12, 2038.0], [1.72858752E12, 1917.0], [1.72859196E12, 3832.0], [1.72858734E12, 2197.0], [1.72858956E12, 2759.0], [1.72858632E12, 1561.0], [1.72859094E12, 2771.0], [1.72859316E12, 3417.0], [1.72859112E12, 3090.0], [1.72858512E12, 1687.0], [1.72858614E12, 1838.0], [1.72858836E12, 1992.0], [1.72859214E12, 3746.0], [1.72858716E12, 2188.0], [1.72859232E12, 3294.0], [1.72858494E12, 1712.0], [1.72858938E12, 2917.0], [1.72858596E12, 1743.0], [1.7285913E12, 2940.0], [1.72858818E12, 2018.0], [1.7285925E12, 3689.0], [1.72859028E12, 2927.0], [1.72858698E12, 2086.0], [1.7285892E12, 2711.0], [1.72858476E12, 1902.0], [1.72858578E12, 1955.0], [1.72858902E12, 2235.0], [1.728588E12, 2289.0], [1.72859148E12, 3527.0], [1.72858782E12, 2188.0], [1.72859004E12, 2785.0], [1.7285868E12, 1823.0], [1.72859046E12, 2793.0], [1.72859268E12, 3769.0], [1.72859064E12, 3006.0], [1.7285856E12, 1630.0], [1.72858662E12, 1951.0], [1.72858884E12, 1876.0], [1.72859166E12, 3534.0], [1.72858764E12, 2015.0], [1.72859184E12, 3109.0], [1.72858542E12, 1698.0], [1.72858986E12, 2758.0], [1.72859286E12, 3327.0], [1.72858644E12, 1901.0], [1.72859082E12, 2833.0], [1.72859304E12, 3850.0], [1.72858866E12, 2466.0], [1.72859202E12, 3462.0], [1.72858524E12, 1684.0], [1.72858746E12, 2436.0], [1.72858968E12, 2855.0], [1.7285895E12, 2947.0], [1.72859322E12, 2026.0], [1.728591E12, 2791.0], [1.72858626E12, 1597.0], [1.72858848E12, 2124.0], [1.72858506E12, 1575.0], [1.7285883E12, 2047.0], [1.72858728E12, 2013.0], [1.7285922E12, 3114.0], [1.72859016E12, 2911.0], [1.7285871E12, 2018.0], [1.72858932E12, 2575.0], [1.72858608E12, 1869.0], [1.72859118E12, 2831.0], [1.72859136E12, 3573.0], [1.72858488E12, 2099.0], [1.72858812E12, 2082.0], [1.7285859E12, 1785.0], [1.72859238E12, 3238.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72858692E12, 1227.6000000000001], [1.72859034E12, 1577.5], [1.72859256E12, 2063.9], [1.72858914E12, 1567.2999999999997], [1.7285847E12, 1389.6], [1.72859154E12, 1890.8], [1.72858572E12, 1008.1], [1.72858794E12, 1149.4], [1.72858998E12, 1557.5], [1.72859274E12, 1970.3999999999996], [1.72859052E12, 1542.0], [1.72858674E12, 972.8000000000001], [1.72858896E12, 1129.5], [1.72858554E12, 1056.4], [1.72858878E12, 1141.5], [1.72858776E12, 1173.0], [1.72859172E12, 2067.6], [1.72858758E12, 1193.0], [1.7285898E12, 1592.0], [1.72858656E12, 1065.5], [1.7285907E12, 1542.8000000000004], [1.72859292E12, 2015.4], [1.72859088E12, 1537.4], [1.72858536E12, 1010.6], [1.72858638E12, 981.6000000000001], [1.7285886E12, 1174.8000000000002], [1.7285919E12, 2010.0], [1.7285874E12, 1130.6], [1.72859208E12, 2093.7000000000003], [1.72858518E12, 1011.0], [1.72858962E12, 1593.8000000000002], [1.7285931E12, 2026.9], [1.7285862E12, 985.8000000000004], [1.72859106E12, 1588.1000000000001], [1.72858842E12, 1124.0], [1.72859226E12, 1987.0], [1.728585E12, 943.2000000000002], [1.72858722E12, 1133.6000000000001], [1.72858944E12, 1605.0], [1.72858926E12, 1537.7], [1.72859124E12, 1576.0], [1.72858602E12, 995.7], [1.72858824E12, 1159.0], [1.72858482E12, 1007.5999999999999], [1.72858806E12, 1162.0], [1.72858704E12, 1183.8], [1.72859022E12, 1620.7000000000007], [1.72859244E12, 2004.4], [1.7285904E12, 1562.9], [1.72858584E12, 966.0], [1.72858908E12, 1049.0], [1.72858686E12, 969.0], [1.72859142E12, 2021.6000000000001], [1.72858788E12, 1169.0], [1.7285916E12, 1921.6], [1.72858566E12, 994.6000000000001], [1.7285901E12, 1583.9000000000003], [1.72859262E12, 2016.8000000000004], [1.72858668E12, 997.3], [1.72859058E12, 1559.0], [1.7285928E12, 2043.0], [1.7285889E12, 1214.6], [1.72859178E12, 2091.8], [1.72858548E12, 1041.4], [1.7285877E12, 1186.0000000000014], [1.72858992E12, 1562.3000000000002], [1.72858974E12, 1519.2000000000003], [1.72859298E12, 1995.6999999999998], [1.72859076E12, 1545.0], [1.7285865E12, 1043.0], [1.72858872E12, 1174.2], [1.7285853E12, 973.4000000000002], [1.72858854E12, 1123.5], [1.72858752E12, 1137.0], [1.72859196E12, 1968.4], [1.72858734E12, 1186.2000000000003], [1.72858956E12, 1630.5000000000002], [1.72858632E12, 998.8000000000002], [1.72859094E12, 1604.8000000000002], [1.72859316E12, 1688.7000000000003], [1.72859112E12, 1595.2000000000003], [1.72858512E12, 988.3000000000001], [1.72858614E12, 999.0], [1.72858836E12, 1126.4], [1.72859214E12, 2033.8], [1.72858716E12, 1197.0], [1.72859232E12, 2016.5], [1.72858494E12, 1070.0], [1.72858938E12, 1608.3999999999999], [1.72858596E12, 975.4], [1.7285913E12, 1272.6], [1.72858818E12, 1156.2000000000003], [1.7285925E12, 2115.0], [1.72859028E12, 1547.6000000000004], [1.72858698E12, 1134.3000000000002], [1.7285892E12, 1560.2], [1.72858476E12, 1061.2], [1.72858578E12, 1017.5999999999996], [1.72858902E12, 1188.4], [1.728588E12, 1195.0], [1.72859148E12, 2057.0], [1.72858782E12, 1122.6000000000001], [1.72859004E12, 1639.6000000000001], [1.7285868E12, 967.5999999999999], [1.72859046E12, 1622.0], [1.72859268E12, 1983.4], [1.72859064E12, 1558.0], [1.7285856E12, 1059.9], [1.72858662E12, 961.0], [1.72858884E12, 1154.6000000000001], [1.72859166E12, 1988.5], [1.72858764E12, 1182.0], [1.72859184E12, 2027.8000000000002], [1.72858542E12, 998.8000000000001], [1.72858986E12, 1588.1], [1.72859286E12, 2026.0], [1.72858644E12, 988.0000000000002], [1.72859082E12, 1599.6000000000001], [1.72859304E12, 2069.0], [1.72858866E12, 1188.2999999999997], [1.72859202E12, 1951.0], [1.72858524E12, 1034.8000000000002], [1.72858746E12, 1145.9], [1.72858968E12, 1551.1], [1.7285895E12, 1641.800000000001], [1.72859322E12, 1170.0], [1.728591E12, 1533.0], [1.72858626E12, 973.4000000000001], [1.72858848E12, 1187.0000000000005], [1.72858506E12, 1002.0], [1.7285883E12, 1198.7000000000003], [1.72858728E12, 1192.0], [1.7285922E12, 2027.6], [1.72859016E12, 1568.5], [1.7285871E12, 1160.9], [1.72858932E12, 1579.2000000000003], [1.72858608E12, 1035.5], [1.72859118E12, 1603.3000000000004], [1.72859136E12, 1977.9], [1.72858488E12, 1118.0], [1.72858812E12, 1165.0], [1.7285859E12, 1012.6], [1.72859238E12, 1968.8000000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72858692E12, 1803.4799999999982], [1.72859034E12, 2234.1800000000003], [1.72859256E12, 2684.5599999999986], [1.72858914E12, 2347.1299999999997], [1.7285847E12, 1822.0], [1.72859154E12, 2958.430000000004], [1.72858572E12, 1512.2600000000002], [1.72858794E12, 1776.3399999999992], [1.72858998E12, 2273.2999999999997], [1.72859274E12, 3025.12], [1.72859052E12, 2278.1], [1.72858674E12, 1405.1999999999998], [1.72858896E12, 1674.9899999999984], [1.72858554E12, 1437.6399999999999], [1.72858878E12, 1725.75], [1.72858776E12, 1722.2399999999998], [1.72859172E12, 2915.3799999999997], [1.72858758E12, 1645.5], [1.7285898E12, 2317.2], [1.72858656E12, 1434.8000000000004], [1.7285907E12, 2341.64], [1.72859292E12, 2962.0], [1.72859088E12, 2378.2599999999993], [1.72858536E12, 1484.8700000000003], [1.72858638E12, 1387.3999999999994], [1.7285886E12, 1608.6400000000003], [1.7285919E12, 2923.930000000002], [1.7285874E12, 1675.0], [1.72859208E12, 2935.4900000000007], [1.72858518E12, 1418.9999999999995], [1.72858962E12, 2361.69], [1.7285931E12, 2998.87], [1.7285862E12, 1343.5199999999993], [1.72859106E12, 2203.1899999999987], [1.72858842E12, 1702.049999999999], [1.72859226E12, 2811.1000000000026], [1.728585E12, 1361.9199999999996], [1.72858722E12, 1688.659999999998], [1.72858944E12, 2344.6], [1.72858926E12, 2180.16], [1.72859124E12, 2290.8699999999994], [1.72858602E12, 1401.5299999999975], [1.72858824E12, 1678.2399999999966], [1.72858482E12, 1482.4000000000003], [1.72858806E12, 1724.2900000000002], [1.72858704E12, 1633.29], [1.72859022E12, 2313.84], [1.72859244E12, 3017.88], [1.7285904E12, 2316.8699999999985], [1.72858584E12, 1497.7999999999956], [1.72858908E12, 1502.0600000000022], [1.72858686E12, 1367.6000000000006], [1.72859142E12, 2817.1300000000006], [1.72858788E12, 1812.7500000000016], [1.7285916E12, 2797.3600000000074], [1.72858566E12, 1339.48], [1.7285901E12, 2269.119999999999], [1.72859262E12, 2986.419999999999], [1.72858668E12, 1459.5899999999986], [1.72859058E12, 2320.0499999999956], [1.7285928E12, 2888.250000000001], [1.7285889E12, 1738.7200000000012], [1.72859178E12, 3216.4800000000014], [1.72858548E12, 1518.760000000001], [1.7285877E12, 1728.6600000000008], [1.72858992E12, 2358.02], [1.72858974E12, 2334.299999999999], [1.72859298E12, 2829.9299999999976], [1.72859076E12, 2217.6000000000004], [1.7285865E12, 1535.5000000000018], [1.72858872E12, 1718.8900000000003], [1.7285853E12, 1594.820000000001], [1.72858854E12, 1688.7000000000003], [1.72858752E12, 1658.199999999999], [1.72859196E12, 2978.6], [1.72858734E12, 1675.6], [1.72858956E12, 2138.81], [1.72858632E12, 1513.96], [1.72859094E12, 2278.959999999999], [1.72859316E12, 2519.0700000000006], [1.72859112E12, 2395.12], [1.72858512E12, 1371.0999999999995], [1.72858614E12, 1508.4499999999985], [1.72858836E12, 1680.5000000000014], [1.72859214E12, 2919.8099999999995], [1.72858716E12, 1736.6], [1.72859232E12, 2758.500000000001], [1.72858494E12, 1683.5900000000001], [1.72858938E12, 2339.7000000000007], [1.72858596E12, 1299.9999999999995], [1.7285913E12, 2119.4799999999977], [1.72858818E12, 1673.88], [1.7285925E12, 3024.2200000000003], [1.72859028E12, 2498.6400000000003], [1.72858698E12, 1758.4799999999996], [1.7285892E12, 2274.6], [1.72858476E12, 1597.6000000000004], [1.72858578E12, 1619.9799999999998], [1.72858902E12, 1635.7600000000002], [1.728588E12, 1657.2], [1.72859148E12, 2912.7], [1.72858782E12, 1580.8999999999996], [1.72859004E12, 2255.3199999999997], [1.7285868E12, 1480.1199999999985], [1.72859046E12, 2359.000000000001], [1.72859268E12, 2939.3600000000038], [1.72859064E12, 2375.6800000000003], [1.7285856E12, 1504.77], [1.72858662E12, 1369.71], [1.72858884E12, 1698.7599999999998], [1.72859166E12, 2826.3900000000003], [1.72858764E12, 1797.1999999999998], [1.72859184E12, 2847.4200000000005], [1.72858542E12, 1409.34], [1.72858986E12, 2274.220000000001], [1.72859286E12, 2849.999999999998], [1.72858644E12, 1378.58], [1.72859082E12, 2214.9200000000005], [1.72859304E12, 3001.700000000001], [1.72858866E12, 1819.6299999999997], [1.72859202E12, 2767.6], [1.72858524E12, 1448.23], [1.72858746E12, 1728.2299999999987], [1.72858968E12, 2406.8900000000003], [1.7285895E12, 2306.6800000000003], [1.72859322E12, 1748.0], [1.728591E12, 2189.29], [1.72858626E12, 1501.73], [1.72858848E12, 1706.4399999999996], [1.72858506E12, 1330.19], [1.7285883E12, 1706.2399999999998], [1.72858728E12, 1780.75], [1.7285922E12, 2938.919999999998], [1.72859016E12, 2223.22], [1.7285871E12, 1700.2999999999997], [1.72858932E12, 2182.8399999999992], [1.72858608E12, 1484.6000000000008], [1.72859118E12, 2257.7499999999995], [1.72859136E12, 2923.9400000000046], [1.72858488E12, 1694.96], [1.72858812E12, 1723.28], [1.7285859E12, 1692.9199999999992], [1.72859238E12, 2917.2199999999993]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72858692E12, 1426.6999999999998], [1.72859034E12, 1816.8999999999999], [1.72859256E12, 2351.95], [1.72858914E12, 1869.3499999999985], [1.7285847E12, 1766.1], [1.72859154E12, 2220.95], [1.72858572E12, 1106.0], [1.72858794E12, 1313.0999999999995], [1.72858998E12, 1761.25], [1.72859274E12, 2259.1999999999994], [1.72859052E12, 1842.5], [1.72858674E12, 1165.4], [1.72858896E12, 1341.7499999999998], [1.72858554E12, 1176.1999999999994], [1.72858878E12, 1358.0], [1.72858776E12, 1379.0], [1.72859172E12, 2363.8999999999996], [1.72858758E12, 1363.0], [1.7285898E12, 1810.3], [1.72858656E12, 1240.0], [1.7285907E12, 1740.8], [1.72859292E12, 2336.099999999999], [1.72859088E12, 1848.2999999999986], [1.72858536E12, 1150.0999999999997], [1.72858638E12, 1091.9999999999993], [1.7285886E12, 1376.7999999999993], [1.7285919E12, 2275.2499999999995], [1.7285874E12, 1313.6], [1.72859208E12, 2314.249999999999], [1.72858518E12, 1120.0], [1.72858962E12, 1806.85], [1.7285931E12, 2396.7], [1.7285862E12, 1129.0], [1.72859106E12, 1755.6999999999998], [1.72858842E12, 1366.0], [1.72859226E12, 2264.0], [1.728585E12, 1086.9], [1.72858722E12, 1378.8], [1.72858944E12, 1861.1999999999998], [1.72858926E12, 1774.7999999999993], [1.72859124E12, 1816.6], [1.72858602E12, 1094.7499999999998], [1.72858824E12, 1384.9999999999998], [1.72858482E12, 1159.6499999999999], [1.72858806E12, 1354.5499999999988], [1.72858704E12, 1358.35], [1.72859022E12, 1880.4499999999998], [1.72859244E12, 2364.2], [1.7285904E12, 1824.1499999999999], [1.72858584E12, 1097.0], [1.72858908E12, 1159.3], [1.72858686E12, 1138.5], [1.72859142E12, 2349.9999999999995], [1.72858788E12, 1315.0], [1.7285916E12, 2286.2000000000003], [1.72858566E12, 1096.2], [1.7285901E12, 1845.7999999999993], [1.72859262E12, 2246.9], [1.72858668E12, 1186.6499999999996], [1.72859058E12, 1831.6499999999992], [1.7285928E12, 2320.75], [1.7285889E12, 1398.1999999999998], [1.72859178E12, 2441.6], [1.72858548E12, 1158.9999999999998], [1.7285877E12, 1362.75], [1.72858992E12, 1840.2999999999997], [1.72858974E12, 1754.1999999999998], [1.72859298E12, 2262.349999999999], [1.72859076E12, 1803.5], [1.7285865E12, 1163.0], [1.72858872E12, 1313.7999999999993], [1.7285853E12, 1149.95], [1.72858854E12, 1316.0], [1.72858752E12, 1314.5], [1.72859196E12, 2337.9999999999977], [1.72858734E12, 1342.3999999999999], [1.72858956E12, 1856.6999999999998], [1.72858632E12, 1186.6], [1.72859094E12, 1836.0], [1.72859316E12, 2029.4999999999995], [1.72859112E12, 1859.65], [1.72858512E12, 1150.2499999999989], [1.72858614E12, 1176.25], [1.72858836E12, 1287.6999999999998], [1.72859214E12, 2280.7999999999997], [1.72858716E12, 1364.5], [1.72859232E12, 2273.0], [1.72858494E12, 1196.9999999999995], [1.72858938E12, 1811.0], [1.72858596E12, 1094.8000000000002], [1.7285913E12, 1586.1999999999998], [1.72858818E12, 1324.5999999999997], [1.7285925E12, 2391.0], [1.72859028E12, 1833.8], [1.72858698E12, 1330.8999999999999], [1.7285892E12, 1812.3999999999996], [1.72858476E12, 1194.0999999999997], [1.72858578E12, 1188.9999999999995], [1.72858902E12, 1356.0], [1.728588E12, 1437.0], [1.72859148E12, 2453.75], [1.72858782E12, 1319.6], [1.72859004E12, 1899.5], [1.7285868E12, 1072.0000000000002], [1.72859046E12, 1861.0], [1.72859268E12, 2333.4], [1.72859064E12, 1801.1999999999998], [1.7285856E12, 1183.749999999999], [1.72858662E12, 1113.7999999999997], [1.72858884E12, 1324.6], [1.72859166E12, 2271.55], [1.72858764E12, 1362.0], [1.72859184E12, 2348.2], [1.72858542E12, 1163.3999999999999], [1.72858986E12, 1828.55], [1.72859286E12, 2311.0], [1.72858644E12, 1161.8], [1.72859082E12, 1806.3999999999999], [1.72859304E12, 2400.5], [1.72858866E12, 1373.249999999999], [1.72859202E12, 2197.7999999999997], [1.72858524E12, 1185.9], [1.72858746E12, 1281.8999999999999], [1.72858968E12, 1813.8499999999992], [1.7285895E12, 1886.5499999999997], [1.72859322E12, 1316.0], [1.728591E12, 1740.1499999999992], [1.72858626E12, 1126.25], [1.72858848E12, 1369.1], [1.72858506E12, 1118.1499999999996], [1.7285883E12, 1417.1999999999998], [1.72858728E12, 1414.25], [1.7285922E12, 2365.5999999999995], [1.72859016E12, 1769.05], [1.7285871E12, 1352.1999999999998], [1.72858932E12, 1799.9499999999998], [1.72858608E12, 1172.25], [1.72859118E12, 1873.6999999999998], [1.72859136E12, 2229.85], [1.72858488E12, 1314.4999999999993], [1.72858812E12, 1346.0], [1.7285859E12, 1198.7999999999997], [1.72859238E12, 2286.799999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72858692E12, 48.0], [1.72859034E12, 41.0], [1.72859256E12, 74.0], [1.72858914E12, 45.0], [1.7285847E12, 67.0], [1.72859154E12, 72.0], [1.72858572E12, 39.0], [1.72858794E12, 39.0], [1.72858998E12, 53.0], [1.72859274E12, 71.0], [1.72859052E12, 50.0], [1.72858674E12, 39.0], [1.72858896E12, 35.0], [1.72858554E12, 36.0], [1.72858878E12, 38.0], [1.72858776E12, 42.0], [1.72859172E12, 68.0], [1.72858758E12, 33.0], [1.7285898E12, 42.0], [1.72858656E12, 40.0], [1.7285907E12, 56.0], [1.72859292E12, 26.0], [1.72859088E12, 44.0], [1.72858536E12, 41.0], [1.72858638E12, 39.0], [1.7285886E12, 42.0], [1.7285919E12, 49.0], [1.7285874E12, 47.0], [1.72859208E12, 70.0], [1.72858518E12, 39.0], [1.72858962E12, 46.0], [1.7285931E12, 59.0], [1.7285862E12, 40.0], [1.72859106E12, 53.0], [1.72858842E12, 38.0], [1.72859226E12, 72.0], [1.728585E12, 39.0], [1.72858722E12, 42.0], [1.72858944E12, 44.0], [1.72858926E12, 40.0], [1.72859124E12, 44.0], [1.72858602E12, 42.0], [1.72858824E12, 36.0], [1.72858482E12, 41.0], [1.72858806E12, 43.0], [1.72858704E12, 46.0], [1.72859022E12, 44.0], [1.72859244E12, 67.0], [1.7285904E12, 51.0], [1.72858584E12, 38.0], [1.72858908E12, 43.0], [1.72858686E12, 45.0], [1.72859142E12, 74.0], [1.72858788E12, 42.0], [1.7285916E12, 78.0], [1.72858566E12, 44.0], [1.7285901E12, 38.0], [1.72859262E12, 77.0], [1.72858668E12, 35.0], [1.72859058E12, 49.0], [1.7285928E12, 70.0], [1.7285889E12, 40.0], [1.72859178E12, 61.0], [1.72858548E12, 38.0], [1.7285877E12, 45.0], [1.72858992E12, 44.0], [1.72858974E12, 47.0], [1.72859298E12, 52.0], [1.72859076E12, 41.0], [1.7285865E12, 40.0], [1.72858872E12, 34.0], [1.7285853E12, 36.0], [1.72858854E12, 37.0], [1.72858752E12, 46.0], [1.72859196E12, 66.0], [1.72858734E12, 39.0], [1.72858956E12, 48.0], [1.72858632E12, 39.0], [1.72859094E12, 47.0], [1.72859316E12, 44.0], [1.72859112E12, 40.0], [1.72858512E12, 44.0], [1.72858614E12, 33.0], [1.72858836E12, 41.0], [1.72859214E12, 41.0], [1.72858716E12, 49.0], [1.72859232E12, 69.0], [1.72858494E12, 52.0], [1.72858938E12, 40.0], [1.72858596E12, 42.0], [1.7285913E12, 45.0], [1.72858818E12, 40.0], [1.7285925E12, 75.0], [1.72859028E12, 42.0], [1.72858698E12, 44.0], [1.7285892E12, 41.0], [1.72858476E12, 51.0], [1.72858578E12, 41.0], [1.72858902E12, 39.0], [1.728588E12, 44.0], [1.72859148E12, 81.0], [1.72858782E12, 37.0], [1.72859004E12, 57.0], [1.7285868E12, 40.0], [1.72859046E12, 50.0], [1.72859268E12, 36.0], [1.72859064E12, 47.0], [1.7285856E12, 41.0], [1.72858662E12, 39.0], [1.72858884E12, 44.0], [1.72859166E12, 76.0], [1.72858764E12, 44.0], [1.72859184E12, 70.0], [1.72858542E12, 40.0], [1.72858986E12, 51.0], [1.72859286E12, 30.0], [1.72858644E12, 37.0], [1.72859082E12, 39.0], [1.72859304E12, 49.0], [1.72858866E12, 42.0], [1.72859202E12, 72.0], [1.72858524E12, 45.0], [1.72858746E12, 47.0], [1.72858968E12, 49.0], [1.7285895E12, 39.0], [1.72859322E12, 44.0], [1.728591E12, 46.0], [1.72858626E12, 45.0], [1.72858848E12, 39.0], [1.72858506E12, 38.0], [1.7285883E12, 40.0], [1.72858728E12, 39.0], [1.7285922E12, 62.0], [1.72859016E12, 48.0], [1.7285871E12, 45.0], [1.72858932E12, 47.0], [1.72858608E12, 39.0], [1.72859118E12, 46.0], [1.72859136E12, 70.0], [1.72858488E12, 46.0], [1.72858812E12, 44.0], [1.7285859E12, 37.0], [1.72859238E12, 61.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72858692E12, 549.0], [1.72859034E12, 637.0], [1.72859256E12, 953.5], [1.72858914E12, 558.0], [1.7285847E12, 512.5], [1.72859154E12, 777.5], [1.72858572E12, 388.5], [1.72858794E12, 518.0], [1.72858998E12, 610.0], [1.72859274E12, 737.0], [1.72859052E12, 683.0], [1.72858674E12, 384.0], [1.72858896E12, 525.0], [1.72858554E12, 509.0], [1.72858878E12, 486.0], [1.72858776E12, 469.0], [1.72859172E12, 923.0], [1.72858758E12, 552.0], [1.7285898E12, 678.0], [1.72858656E12, 439.5], [1.7285907E12, 631.0], [1.72859292E12, 820.0], [1.72859088E12, 650.0], [1.72858536E12, 417.0], [1.72858638E12, 323.0], [1.7285886E12, 509.0], [1.7285919E12, 883.0], [1.7285874E12, 523.0], [1.72859208E12, 906.0], [1.72858518E12, 440.0], [1.72858962E12, 645.5], [1.7285931E12, 924.5], [1.7285862E12, 384.0], [1.72859106E12, 622.5], [1.72858842E12, 463.0], [1.72859226E12, 823.5], [1.728585E12, 336.0], [1.72858722E12, 523.0], [1.72858944E12, 672.0], [1.72858926E12, 618.5], [1.72859124E12, 715.5], [1.72858602E12, 387.0], [1.72858824E12, 471.0], [1.72858482E12, 330.5], [1.72858806E12, 562.0], [1.72858704E12, 503.5], [1.72859022E12, 658.5], [1.72859244E12, 827.0], [1.7285904E12, 530.0], [1.72858584E12, 436.0], [1.72858908E12, 424.0], [1.72858686E12, 427.0], [1.72859142E12, 796.0], [1.72858788E12, 518.5], [1.7285916E12, 717.0], [1.72858566E12, 391.0], [1.7285901E12, 724.0], [1.72859262E12, 818.0], [1.72858668E12, 464.5], [1.72859058E12, 521.0], [1.7285928E12, 888.0], [1.7285889E12, 509.0], [1.72859178E12, 821.0], [1.72858548E12, 458.0], [1.7285877E12, 485.0], [1.72858992E12, 655.5], [1.72858974E12, 555.0], [1.72859298E12, 773.5], [1.72859076E12, 646.0], [1.7285865E12, 459.0], [1.72858872E12, 490.0], [1.7285853E12, 476.0], [1.72858854E12, 490.0], [1.72858752E12, 500.0], [1.72859196E12, 797.0], [1.72858734E12, 458.0], [1.72858956E12, 684.5], [1.72858632E12, 445.0], [1.72859094E12, 652.0], [1.72859316E12, 565.0], [1.72859112E12, 701.5], [1.72858512E12, 423.0], [1.72858614E12, 438.5], [1.72858836E12, 488.0], [1.72859214E12, 870.0], [1.72858716E12, 496.0], [1.72859232E12, 849.5], [1.72858494E12, 554.0], [1.72858938E12, 708.5], [1.72858596E12, 367.0], [1.7285913E12, 486.0], [1.72858818E12, 428.0], [1.7285925E12, 917.0], [1.72859028E12, 666.0], [1.72858698E12, 440.0], [1.7285892E12, 581.0], [1.72858476E12, 417.5], [1.72858578E12, 492.0], [1.72858902E12, 514.0], [1.728588E12, 554.0], [1.72859148E12, 804.5], [1.72858782E12, 421.0], [1.72859004E12, 702.0], [1.7285868E12, 339.0], [1.72859046E12, 644.0], [1.72859268E12, 920.0], [1.72859064E12, 647.0], [1.7285856E12, 481.0], [1.72858662E12, 459.5], [1.72858884E12, 488.0], [1.72859166E12, 874.0], [1.72858764E12, 512.0], [1.72859184E12, 876.0], [1.72858542E12, 393.0], [1.72858986E12, 631.5], [1.72859286E12, 834.0], [1.72858644E12, 439.0], [1.72859082E12, 720.0], [1.72859304E12, 906.0], [1.72858866E12, 501.5], [1.72859202E12, 895.0], [1.72858524E12, 462.5], [1.72858746E12, 438.5], [1.72858968E12, 677.5], [1.7285895E12, 744.5], [1.72859322E12, 497.0], [1.728591E12, 515.5], [1.72858626E12, 374.5], [1.72858848E12, 476.0], [1.72858506E12, 427.0], [1.7285883E12, 456.5], [1.72858728E12, 462.0], [1.7285922E12, 645.0], [1.72859016E12, 540.5], [1.7285871E12, 438.0], [1.72858932E12, 647.0], [1.72858608E12, 420.5], [1.72859118E12, 700.5], [1.72859136E12, 737.5], [1.72858488E12, 338.5], [1.72858812E12, 470.0], [1.7285859E12, 392.0], [1.72859238E12, 973.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72859322E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 226.5, "minX": 1.0, "maxY": 722.0, "series": [{"data": [[2.0, 722.0], [33.0, 367.5], [3.0, 654.0], [4.0, 631.0], [5.0, 626.0], [6.0, 622.5], [7.0, 559.5], [8.0, 532.5], [9.0, 523.5], [10.0, 557.0], [11.0, 609.0], [12.0, 614.0], [13.0, 649.0], [14.0, 653.0], [15.0, 640.0], [1.0, 718.0], [16.0, 577.5], [17.0, 564.0], [18.0, 516.0], [19.0, 490.0], [20.0, 407.0], [21.0, 426.5], [22.0, 394.5], [23.0, 326.0], [24.0, 321.0], [25.0, 322.0], [26.0, 265.0], [27.0, 279.0], [28.0, 258.0], [29.0, 238.5], [30.0, 264.5], [31.0, 226.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 142.0, "minX": 1.0, "maxY": 523.0, "series": [{"data": [[2.0, 511.0], [33.0, 238.5], [3.0, 456.0], [4.0, 427.0], [5.0, 432.0], [6.0, 425.5], [7.0, 402.0], [8.0, 379.0], [9.0, 372.0], [10.0, 397.0], [11.0, 432.0], [12.0, 440.0], [13.0, 460.0], [14.0, 468.0], [15.0, 465.0], [1.0, 523.0], [16.0, 420.0], [17.0, 415.0], [18.0, 371.5], [19.0, 351.0], [20.0, 286.5], [21.0, 300.5], [22.0, 265.0], [23.0, 203.0], [24.0, 205.0], [25.0, 198.0], [26.0, 175.0], [27.0, 178.0], [28.0, 153.0], [29.0, 142.0], [30.0, 161.0], [31.0, 150.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 33.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.5666666666666667, "minX": 1.7285847E12, "maxY": 18.083333333333332, "series": [{"data": [[1.72858692E12, 12.133333333333333], [1.72859034E12, 16.5], [1.72859256E12, 16.333333333333332], [1.72858914E12, 15.35], [1.7285847E12, 0.5666666666666667], [1.72859154E12, 17.666666666666668], [1.72858572E12, 8.8], [1.72858794E12, 14.533333333333333], [1.72858998E12, 16.566666666666666], [1.72859274E12, 17.916666666666668], [1.72859052E12, 16.483333333333334], [1.72858674E12, 8.916666666666666], [1.72858896E12, 14.466666666666667], [1.72858554E12, 7.883333333333334], [1.72858878E12, 14.566666666666666], [1.72858776E12, 14.75], [1.72859172E12, 16.416666666666668], [1.72858758E12, 14.15], [1.7285898E12, 16.216666666666665], [1.72858656E12, 8.233333333333333], [1.7285907E12, 16.85], [1.72859292E12, 17.083333333333332], [1.72859088E12, 16.216666666666665], [1.72858536E12, 8.766666666666667], [1.72858638E12, 9.25], [1.7285886E12, 14.2], [1.7285919E12, 16.7], [1.7285874E12, 14.55], [1.72859208E12, 16.466666666666665], [1.72858518E12, 8.65], [1.72858962E12, 16.033333333333335], [1.7285931E12, 16.166666666666668], [1.7285862E12, 8.883333333333333], [1.72859106E12, 16.533333333333335], [1.72858842E12, 14.9], [1.72859226E12, 17.566666666666666], [1.728585E12, 5.716666666666667], [1.72858722E12, 14.683333333333334], [1.72858944E12, 16.216666666666665], [1.72858926E12, 17.033333333333335], [1.72859124E12, 15.933333333333334], [1.72858602E12, 8.866666666666667], [1.72858824E12, 14.683333333333334], [1.72858482E12, 4.466666666666667], [1.72858806E12, 14.2], [1.72858704E12, 14.5], [1.72859022E12, 16.266666666666666], [1.72859244E12, 16.916666666666668], [1.7285904E12, 16.966666666666665], [1.72858584E12, 8.65], [1.72858908E12, 9.1], [1.72858686E12, 6.433333333333334], [1.72859142E12, 16.933333333333334], [1.72858788E12, 14.233333333333333], [1.7285916E12, 18.083333333333332], [1.72858566E12, 8.916666666666666], [1.7285901E12, 15.7], [1.72859262E12, 17.016666666666666], [1.72858668E12, 8.266666666666667], [1.72859058E12, 17.366666666666667], [1.7285928E12, 16.733333333333334], [1.7285889E12, 14.216666666666667], [1.72859178E12, 16.716666666666665], [1.72858548E12, 8.25], [1.7285877E12, 14.6], [1.72858992E12, 16.633333333333333], [1.72858974E12, 17.266666666666666], [1.72859298E12, 17.333333333333332], [1.72859076E12, 16.483333333333334], [1.7285865E12, 8.15], [1.72858872E12, 14.633333333333333], [1.7285853E12, 8.333333333333334], [1.72858854E12, 15.066666666666666], [1.72858752E12, 14.483333333333333], [1.72859196E12, 17.45], [1.72858734E12, 15.183333333333334], [1.72858956E12, 16.2], [1.72858632E12, 8.516666666666667], [1.72859094E12, 16.35], [1.72859316E12, 17.016666666666666], [1.72859112E12, 15.766666666666667], [1.72858512E12, 8.633333333333333], [1.72858614E12, 8.4], [1.72858836E12, 15.016666666666667], [1.72859214E12, 16.833333333333332], [1.72858716E12, 14.483333333333333], [1.72859232E12, 17.233333333333334], [1.72858494E12, 3.6333333333333333], [1.72858938E12, 15.666666666666666], [1.72858596E12, 9.116666666666667], [1.7285913E12, 10.983333333333333], [1.72858818E12, 15.05], [1.7285925E12, 16.283333333333335], [1.72859028E12, 16.516666666666666], [1.72858698E12, 14.933333333333334], [1.7285892E12, 16.783333333333335], [1.72858476E12, 4.1], [1.72858578E12, 7.95], [1.72858902E12, 14.2], [1.728588E12, 13.983333333333333], [1.72859148E12, 16.9], [1.72858782E12, 15.55], [1.72859004E12, 16.016666666666666], [1.7285868E12, 9.283333333333333], [1.72859046E12, 16.316666666666666], [1.72859268E12, 16.516666666666666], [1.72859064E12, 16.25], [1.7285856E12, 8.1], [1.72858662E12, 8.533333333333333], [1.72858884E12, 14.716666666666667], [1.72859166E12, 17.133333333333333], [1.72858764E12, 14.483333333333333], [1.72859184E12, 16.683333333333334], [1.72858542E12, 8.683333333333334], [1.72858986E12, 16.466666666666665], [1.72859286E12, 16.983333333333334], [1.72858644E12, 8.416666666666666], [1.72859082E12, 15.85], [1.72859304E12, 16.483333333333334], [1.72858866E12, 14.333333333333334], [1.72859202E12, 16.783333333333335], [1.72858524E12, 8.0], [1.72858746E12, 15.333333333333334], [1.72858968E12, 16.3], [1.7285895E12, 15.433333333333334], [1.72859322E12, 6.5], [1.728591E12, 17.533333333333335], [1.72858626E12, 8.766666666666667], [1.72858848E12, 14.683333333333334], [1.72858506E12, 8.766666666666667], [1.7285883E12, 14.466666666666667], [1.72858728E12, 14.566666666666666], [1.7285922E12, 17.716666666666665], [1.72859016E12, 17.3], [1.7285871E12, 14.933333333333334], [1.72858932E12, 16.6], [1.72858608E12, 8.566666666666666], [1.72859118E12, 16.2], [1.72859136E12, 17.666666666666668], [1.72858488E12, 4.1], [1.72858812E12, 14.75], [1.7285859E12, 8.85], [1.72859238E12, 16.216666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72859322E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.7285847E12, "maxY": 18.083333333333332, "series": [{"data": [[1.72858692E12, 12.016666666666667], [1.72859034E12, 16.5], [1.72859256E12, 16.333333333333332], [1.72858914E12, 15.166666666666666], [1.7285847E12, 0.5333333333333333], [1.72859154E12, 17.666666666666668], [1.72858572E12, 8.8], [1.72858794E12, 14.533333333333333], [1.72858998E12, 16.566666666666666], [1.72859274E12, 17.916666666666668], [1.72859052E12, 16.483333333333334], [1.72858674E12, 8.916666666666666], [1.72858896E12, 14.466666666666667], [1.72858554E12, 7.883333333333334], [1.72858878E12, 14.566666666666666], [1.72858776E12, 14.75], [1.72859172E12, 16.416666666666668], [1.72858758E12, 14.15], [1.7285898E12, 16.216666666666665], [1.72858656E12, 8.233333333333333], [1.7285907E12, 16.85], [1.72859292E12, 17.083333333333332], [1.72859088E12, 16.216666666666665], [1.72858536E12, 8.766666666666667], [1.72858638E12, 9.25], [1.7285886E12, 14.2], [1.7285919E12, 16.7], [1.7285874E12, 14.55], [1.72859208E12, 16.466666666666665], [1.72858518E12, 8.65], [1.72858962E12, 16.033333333333335], [1.7285931E12, 16.166666666666668], [1.7285862E12, 8.883333333333333], [1.72859106E12, 16.533333333333335], [1.72858842E12, 14.9], [1.72859226E12, 17.566666666666666], [1.728585E12, 5.683333333333334], [1.72858722E12, 14.683333333333334], [1.72858944E12, 16.216666666666665], [1.72858926E12, 17.033333333333335], [1.72859124E12, 15.933333333333334], [1.72858602E12, 8.866666666666667], [1.72858824E12, 14.683333333333334], [1.72858482E12, 4.466666666666667], [1.72858806E12, 14.2], [1.72858704E12, 14.5], [1.72859022E12, 16.266666666666666], [1.72859244E12, 16.916666666666668], [1.7285904E12, 16.966666666666665], [1.72858584E12, 8.65], [1.72858908E12, 9.216666666666667], [1.72858686E12, 6.483333333333333], [1.72859142E12, 16.933333333333334], [1.72858788E12, 14.233333333333333], [1.7285916E12, 18.083333333333332], [1.72858566E12, 8.916666666666666], [1.7285901E12, 15.7], [1.72859262E12, 17.016666666666666], [1.72858668E12, 8.266666666666667], [1.72859058E12, 17.366666666666667], [1.7285928E12, 16.733333333333334], [1.7285889E12, 14.216666666666667], [1.72859178E12, 16.716666666666665], [1.72858548E12, 8.25], [1.7285877E12, 14.6], [1.72858992E12, 16.633333333333333], [1.72858974E12, 17.266666666666666], [1.72859298E12, 17.333333333333332], [1.72859076E12, 16.483333333333334], [1.7285865E12, 8.15], [1.72858872E12, 14.633333333333333], [1.7285853E12, 8.333333333333334], [1.72858854E12, 15.066666666666666], [1.72858752E12, 14.483333333333333], [1.72859196E12, 17.45], [1.72858734E12, 15.183333333333334], [1.72858956E12, 16.2], [1.72858632E12, 8.516666666666667], [1.72859094E12, 16.35], [1.72859316E12, 17.133333333333333], [1.72859112E12, 15.766666666666667], [1.72858512E12, 8.633333333333333], [1.72858614E12, 8.4], [1.72858836E12, 15.016666666666667], [1.72859214E12, 16.833333333333332], [1.72858716E12, 14.483333333333333], [1.72859232E12, 17.233333333333334], [1.72858494E12, 3.6333333333333333], [1.72858938E12, 15.666666666666666], [1.72858596E12, 9.116666666666667], [1.7285913E12, 10.916666666666666], [1.72858818E12, 15.05], [1.7285925E12, 16.283333333333335], [1.72859028E12, 16.516666666666666], [1.72858698E12, 14.933333333333334], [1.7285892E12, 16.783333333333335], [1.72858476E12, 4.1], [1.72858578E12, 7.95], [1.72858902E12, 14.2], [1.728588E12, 13.983333333333333], [1.72859148E12, 16.9], [1.72858782E12, 15.55], [1.72859004E12, 16.016666666666666], [1.7285868E12, 9.283333333333333], [1.72859046E12, 16.316666666666666], [1.72859268E12, 16.516666666666666], [1.72859064E12, 16.25], [1.7285856E12, 8.1], [1.72858662E12, 8.533333333333333], [1.72858884E12, 14.716666666666667], [1.72859166E12, 17.133333333333333], [1.72858764E12, 14.483333333333333], [1.72859184E12, 16.683333333333334], [1.72858542E12, 8.683333333333334], [1.72858986E12, 16.466666666666665], [1.72859286E12, 16.983333333333334], [1.72858644E12, 8.416666666666666], [1.72859082E12, 15.85], [1.72859304E12, 16.483333333333334], [1.72858866E12, 14.333333333333334], [1.72859202E12, 16.783333333333335], [1.72858524E12, 8.0], [1.72858746E12, 15.333333333333334], [1.72858968E12, 16.3], [1.7285895E12, 15.433333333333334], [1.72859322E12, 6.65], [1.728591E12, 17.533333333333335], [1.72858626E12, 8.766666666666667], [1.72858848E12, 14.683333333333334], [1.72858506E12, 8.766666666666667], [1.7285883E12, 14.466666666666667], [1.72858728E12, 14.566666666666666], [1.7285922E12, 17.716666666666665], [1.72859016E12, 17.3], [1.7285871E12, 14.933333333333334], [1.72858932E12, 16.6], [1.72858608E12, 8.566666666666666], [1.72859118E12, 16.2], [1.72859136E12, 17.666666666666668], [1.72858488E12, 4.1], [1.72858812E12, 14.75], [1.7285859E12, 8.85], [1.72859238E12, 16.216666666666665]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72859322E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.7285847E12, "maxY": 18.083333333333332, "series": [{"data": [[1.72858692E12, 12.016666666666667], [1.72859034E12, 16.5], [1.72859256E12, 16.333333333333332], [1.72858914E12, 15.166666666666666], [1.7285847E12, 0.5333333333333333], [1.72859154E12, 17.666666666666668], [1.72858572E12, 8.8], [1.72858794E12, 14.533333333333333], [1.72858998E12, 16.566666666666666], [1.72859274E12, 17.916666666666668], [1.72859052E12, 16.483333333333334], [1.72858674E12, 8.916666666666666], [1.72858896E12, 14.466666666666667], [1.72858554E12, 7.883333333333334], [1.72858878E12, 14.566666666666666], [1.72858776E12, 14.75], [1.72859172E12, 16.416666666666668], [1.72858758E12, 14.15], [1.7285898E12, 16.216666666666665], [1.72858656E12, 8.233333333333333], [1.7285907E12, 16.85], [1.72859292E12, 17.083333333333332], [1.72859088E12, 16.216666666666665], [1.72858536E12, 8.766666666666667], [1.72858638E12, 9.25], [1.7285886E12, 14.2], [1.7285919E12, 16.7], [1.7285874E12, 14.55], [1.72859208E12, 16.466666666666665], [1.72858518E12, 8.65], [1.72858962E12, 16.033333333333335], [1.7285931E12, 16.166666666666668], [1.7285862E12, 8.883333333333333], [1.72859106E12, 16.533333333333335], [1.72858842E12, 14.9], [1.72859226E12, 17.566666666666666], [1.728585E12, 5.683333333333334], [1.72858722E12, 14.683333333333334], [1.72858944E12, 16.216666666666665], [1.72858926E12, 17.033333333333335], [1.72859124E12, 15.933333333333334], [1.72858602E12, 8.866666666666667], [1.72858824E12, 14.683333333333334], [1.72858482E12, 4.466666666666667], [1.72858806E12, 14.2], [1.72858704E12, 14.5], [1.72859022E12, 16.266666666666666], [1.72859244E12, 16.916666666666668], [1.7285904E12, 16.966666666666665], [1.72858584E12, 8.65], [1.72858908E12, 9.216666666666667], [1.72858686E12, 6.483333333333333], [1.72859142E12, 16.933333333333334], [1.72858788E12, 14.233333333333333], [1.7285916E12, 18.083333333333332], [1.72858566E12, 8.916666666666666], [1.7285901E12, 15.7], [1.72859262E12, 17.016666666666666], [1.72858668E12, 8.266666666666667], [1.72859058E12, 17.366666666666667], [1.7285928E12, 16.733333333333334], [1.7285889E12, 14.216666666666667], [1.72859178E12, 16.716666666666665], [1.72858548E12, 8.25], [1.7285877E12, 14.6], [1.72858992E12, 16.633333333333333], [1.72858974E12, 17.266666666666666], [1.72859298E12, 17.333333333333332], [1.72859076E12, 16.483333333333334], [1.7285865E12, 8.15], [1.72858872E12, 14.633333333333333], [1.7285853E12, 8.333333333333334], [1.72858854E12, 15.066666666666666], [1.72858752E12, 14.483333333333333], [1.72859196E12, 17.45], [1.72858734E12, 15.183333333333334], [1.72858956E12, 16.2], [1.72858632E12, 8.516666666666667], [1.72859094E12, 16.35], [1.72859316E12, 17.133333333333333], [1.72859112E12, 15.766666666666667], [1.72858512E12, 8.633333333333333], [1.72858614E12, 8.4], [1.72858836E12, 15.016666666666667], [1.72859214E12, 16.833333333333332], [1.72858716E12, 14.483333333333333], [1.72859232E12, 17.233333333333334], [1.72858494E12, 3.6333333333333333], [1.72858938E12, 15.666666666666666], [1.72858596E12, 9.116666666666667], [1.7285913E12, 10.916666666666666], [1.72858818E12, 15.05], [1.7285925E12, 16.283333333333335], [1.72859028E12, 16.516666666666666], [1.72858698E12, 14.933333333333334], [1.7285892E12, 16.783333333333335], [1.72858476E12, 4.1], [1.72858578E12, 7.95], [1.72858902E12, 14.2], [1.728588E12, 13.983333333333333], [1.72859148E12, 16.9], [1.72858782E12, 15.55], [1.72859004E12, 16.016666666666666], [1.7285868E12, 9.283333333333333], [1.72859046E12, 16.316666666666666], [1.72859268E12, 16.516666666666666], [1.72859064E12, 16.25], [1.7285856E12, 8.1], [1.72858662E12, 8.533333333333333], [1.72858884E12, 14.716666666666667], [1.72859166E12, 17.133333333333333], [1.72858764E12, 14.483333333333333], [1.72859184E12, 16.683333333333334], [1.72858542E12, 8.683333333333334], [1.72858986E12, 16.466666666666665], [1.72859286E12, 16.983333333333334], [1.72858644E12, 8.416666666666666], [1.72859082E12, 15.85], [1.72859304E12, 16.483333333333334], [1.72858866E12, 14.333333333333334], [1.72859202E12, 16.783333333333335], [1.72858524E12, 8.0], [1.72858746E12, 15.333333333333334], [1.72858968E12, 16.3], [1.7285895E12, 15.433333333333334], [1.72859322E12, 6.65], [1.728591E12, 17.533333333333335], [1.72858626E12, 8.766666666666667], [1.72858848E12, 14.683333333333334], [1.72858506E12, 8.766666666666667], [1.7285883E12, 14.466666666666667], [1.72858728E12, 14.566666666666666], [1.7285922E12, 17.716666666666665], [1.72859016E12, 17.3], [1.7285871E12, 14.933333333333334], [1.72858932E12, 16.6], [1.72858608E12, 8.566666666666666], [1.72859118E12, 16.2], [1.72859136E12, 17.666666666666668], [1.72858488E12, 4.1], [1.72858812E12, 14.75], [1.7285859E12, 8.85], [1.72859238E12, 16.216666666666665]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72859322E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.7285847E12, "maxY": 18.083333333333332, "series": [{"data": [[1.72858692E12, 12.016666666666667], [1.72859034E12, 16.5], [1.72859256E12, 16.333333333333332], [1.72858914E12, 15.166666666666666], [1.7285847E12, 0.5333333333333333], [1.72859154E12, 17.666666666666668], [1.72858572E12, 8.8], [1.72858794E12, 14.533333333333333], [1.72858998E12, 16.566666666666666], [1.72859274E12, 17.916666666666668], [1.72859052E12, 16.483333333333334], [1.72858674E12, 8.916666666666666], [1.72858896E12, 14.466666666666667], [1.72858554E12, 7.883333333333334], [1.72858878E12, 14.566666666666666], [1.72858776E12, 14.75], [1.72859172E12, 16.416666666666668], [1.72858758E12, 14.15], [1.7285898E12, 16.216666666666665], [1.72858656E12, 8.233333333333333], [1.7285907E12, 16.85], [1.72859292E12, 17.083333333333332], [1.72859088E12, 16.216666666666665], [1.72858536E12, 8.766666666666667], [1.72858638E12, 9.25], [1.7285886E12, 14.2], [1.7285919E12, 16.7], [1.7285874E12, 14.55], [1.72859208E12, 16.466666666666665], [1.72858518E12, 8.65], [1.72858962E12, 16.033333333333335], [1.7285931E12, 16.166666666666668], [1.7285862E12, 8.883333333333333], [1.72859106E12, 16.533333333333335], [1.72858842E12, 14.9], [1.72859226E12, 17.566666666666666], [1.728585E12, 5.683333333333334], [1.72858722E12, 14.683333333333334], [1.72858944E12, 16.216666666666665], [1.72858926E12, 17.033333333333335], [1.72859124E12, 15.933333333333334], [1.72858602E12, 8.866666666666667], [1.72858824E12, 14.683333333333334], [1.72858482E12, 4.466666666666667], [1.72858806E12, 14.2], [1.72858704E12, 14.5], [1.72859022E12, 16.266666666666666], [1.72859244E12, 16.916666666666668], [1.7285904E12, 16.966666666666665], [1.72858584E12, 8.65], [1.72858908E12, 9.216666666666667], [1.72858686E12, 6.483333333333333], [1.72859142E12, 16.933333333333334], [1.72858788E12, 14.233333333333333], [1.7285916E12, 18.083333333333332], [1.72858566E12, 8.916666666666666], [1.7285901E12, 15.7], [1.72859262E12, 17.016666666666666], [1.72858668E12, 8.266666666666667], [1.72859058E12, 17.366666666666667], [1.7285928E12, 16.733333333333334], [1.7285889E12, 14.216666666666667], [1.72859178E12, 16.716666666666665], [1.72858548E12, 8.25], [1.7285877E12, 14.6], [1.72858992E12, 16.633333333333333], [1.72858974E12, 17.266666666666666], [1.72859298E12, 17.333333333333332], [1.72859076E12, 16.483333333333334], [1.7285865E12, 8.15], [1.72858872E12, 14.633333333333333], [1.7285853E12, 8.333333333333334], [1.72858854E12, 15.066666666666666], [1.72858752E12, 14.483333333333333], [1.72859196E12, 17.45], [1.72858734E12, 15.183333333333334], [1.72858956E12, 16.2], [1.72858632E12, 8.516666666666667], [1.72859094E12, 16.35], [1.72859316E12, 17.133333333333333], [1.72859112E12, 15.766666666666667], [1.72858512E12, 8.633333333333333], [1.72858614E12, 8.4], [1.72858836E12, 15.016666666666667], [1.72859214E12, 16.833333333333332], [1.72858716E12, 14.483333333333333], [1.72859232E12, 17.233333333333334], [1.72858494E12, 3.6333333333333333], [1.72858938E12, 15.666666666666666], [1.72858596E12, 9.116666666666667], [1.7285913E12, 10.916666666666666], [1.72858818E12, 15.05], [1.7285925E12, 16.283333333333335], [1.72859028E12, 16.516666666666666], [1.72858698E12, 14.933333333333334], [1.7285892E12, 16.783333333333335], [1.72858476E12, 4.1], [1.72858578E12, 7.95], [1.72858902E12, 14.2], [1.728588E12, 13.983333333333333], [1.72859148E12, 16.9], [1.72858782E12, 15.55], [1.72859004E12, 16.016666666666666], [1.7285868E12, 9.283333333333333], [1.72859046E12, 16.316666666666666], [1.72859268E12, 16.516666666666666], [1.72859064E12, 16.25], [1.7285856E12, 8.1], [1.72858662E12, 8.533333333333333], [1.72858884E12, 14.716666666666667], [1.72859166E12, 17.133333333333333], [1.72858764E12, 14.483333333333333], [1.72859184E12, 16.683333333333334], [1.72858542E12, 8.683333333333334], [1.72858986E12, 16.466666666666665], [1.72859286E12, 16.983333333333334], [1.72858644E12, 8.416666666666666], [1.72859082E12, 15.85], [1.72859304E12, 16.483333333333334], [1.72858866E12, 14.333333333333334], [1.72859202E12, 16.783333333333335], [1.72858524E12, 8.0], [1.72858746E12, 15.333333333333334], [1.72858968E12, 16.3], [1.7285895E12, 15.433333333333334], [1.72859322E12, 6.65], [1.728591E12, 17.533333333333335], [1.72858626E12, 8.766666666666667], [1.72858848E12, 14.683333333333334], [1.72858506E12, 8.766666666666667], [1.7285883E12, 14.466666666666667], [1.72858728E12, 14.566666666666666], [1.7285922E12, 17.716666666666665], [1.72859016E12, 17.3], [1.7285871E12, 14.933333333333334], [1.72858932E12, 16.6], [1.72858608E12, 8.566666666666666], [1.72859118E12, 16.2], [1.72859136E12, 17.666666666666668], [1.72858488E12, 4.1], [1.72858812E12, 14.75], [1.7285859E12, 8.85], [1.72859238E12, 16.216666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72859322E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

