/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 3589.0, "series": [{"data": [[0.0, 29.0], [0.1, 37.0], [0.2, 40.0], [0.3, 41.0], [0.4, 43.0], [0.5, 44.0], [0.6, 45.0], [0.7, 46.0], [0.8, 47.0], [0.9, 48.0], [1.0, 49.0], [1.1, 50.0], [1.2, 50.0], [1.3, 51.0], [1.4, 52.0], [1.5, 52.0], [1.6, 53.0], [1.7, 54.0], [1.8, 54.0], [1.9, 55.0], [2.0, 55.0], [2.1, 56.0], [2.2, 56.0], [2.3, 57.0], [2.4, 57.0], [2.5, 58.0], [2.6, 58.0], [2.7, 59.0], [2.8, 59.0], [2.9, 60.0], [3.0, 60.0], [3.1, 61.0], [3.2, 61.0], [3.3, 61.0], [3.4, 62.0], [3.5, 62.0], [3.6, 63.0], [3.7, 63.0], [3.8, 63.0], [3.9, 64.0], [4.0, 64.0], [4.1, 65.0], [4.2, 65.0], [4.3, 65.0], [4.4, 66.0], [4.5, 66.0], [4.6, 67.0], [4.7, 67.0], [4.8, 67.0], [4.9, 68.0], [5.0, 68.0], [5.1, 68.0], [5.2, 69.0], [5.3, 69.0], [5.4, 69.0], [5.5, 70.0], [5.6, 70.0], [5.7, 71.0], [5.8, 71.0], [5.9, 71.0], [6.0, 72.0], [6.1, 72.0], [6.2, 73.0], [6.3, 73.0], [6.4, 73.0], [6.5, 74.0], [6.6, 74.0], [6.7, 74.0], [6.8, 75.0], [6.9, 75.0], [7.0, 75.0], [7.1, 76.0], [7.2, 76.0], [7.3, 76.0], [7.4, 77.0], [7.5, 77.0], [7.6, 77.0], [7.7, 78.0], [7.8, 78.0], [7.9, 78.0], [8.0, 79.0], [8.1, 79.0], [8.2, 79.0], [8.3, 80.0], [8.4, 80.0], [8.5, 80.0], [8.6, 81.0], [8.7, 81.0], [8.8, 81.0], [8.9, 82.0], [9.0, 82.0], [9.1, 82.0], [9.2, 83.0], [9.3, 83.0], [9.4, 83.0], [9.5, 84.0], [9.6, 84.0], [9.7, 84.0], [9.8, 85.0], [9.9, 85.0], [10.0, 85.0], [10.1, 86.0], [10.2, 86.0], [10.3, 86.0], [10.4, 87.0], [10.5, 87.0], [10.6, 87.0], [10.7, 87.0], [10.8, 88.0], [10.9, 88.0], [11.0, 88.0], [11.1, 89.0], [11.2, 89.0], [11.3, 89.0], [11.4, 90.0], [11.5, 90.0], [11.6, 90.0], [11.7, 91.0], [11.8, 91.0], [11.9, 91.0], [12.0, 92.0], [12.1, 92.0], [12.2, 92.0], [12.3, 92.0], [12.4, 93.0], [12.5, 93.0], [12.6, 93.0], [12.7, 94.0], [12.8, 94.0], [12.9, 94.0], [13.0, 95.0], [13.1, 95.0], [13.2, 95.0], [13.3, 96.0], [13.4, 96.0], [13.5, 96.0], [13.6, 97.0], [13.7, 97.0], [13.8, 97.0], [13.9, 98.0], [14.0, 98.0], [14.1, 98.0], [14.2, 99.0], [14.3, 99.0], [14.4, 99.0], [14.5, 100.0], [14.6, 100.0], [14.7, 100.0], [14.8, 101.0], [14.9, 101.0], [15.0, 101.0], [15.1, 102.0], [15.2, 102.0], [15.3, 102.0], [15.4, 102.0], [15.5, 103.0], [15.6, 103.0], [15.7, 103.0], [15.8, 104.0], [15.9, 104.0], [16.0, 104.0], [16.1, 105.0], [16.2, 105.0], [16.3, 105.0], [16.4, 106.0], [16.5, 106.0], [16.6, 106.0], [16.7, 107.0], [16.8, 107.0], [16.9, 107.0], [17.0, 108.0], [17.1, 108.0], [17.2, 108.0], [17.3, 109.0], [17.4, 109.0], [17.5, 109.0], [17.6, 110.0], [17.7, 110.0], [17.8, 110.0], [17.9, 111.0], [18.0, 111.0], [18.1, 111.0], [18.2, 112.0], [18.3, 112.0], [18.4, 113.0], [18.5, 113.0], [18.6, 113.0], [18.7, 114.0], [18.8, 114.0], [18.9, 114.0], [19.0, 115.0], [19.1, 115.0], [19.2, 116.0], [19.3, 116.0], [19.4, 116.0], [19.5, 117.0], [19.6, 117.0], [19.7, 117.0], [19.8, 118.0], [19.9, 118.0], [20.0, 118.0], [20.1, 119.0], [20.2, 119.0], [20.3, 120.0], [20.4, 120.0], [20.5, 120.0], [20.6, 121.0], [20.7, 121.0], [20.8, 122.0], [20.9, 122.0], [21.0, 122.0], [21.1, 123.0], [21.2, 123.0], [21.3, 124.0], [21.4, 124.0], [21.5, 124.0], [21.6, 125.0], [21.7, 125.0], [21.8, 126.0], [21.9, 126.0], [22.0, 126.0], [22.1, 127.0], [22.2, 127.0], [22.3, 128.0], [22.4, 128.0], [22.5, 128.0], [22.6, 129.0], [22.7, 129.0], [22.8, 130.0], [22.9, 130.0], [23.0, 130.0], [23.1, 131.0], [23.2, 131.0], [23.3, 131.0], [23.4, 132.0], [23.5, 132.0], [23.6, 133.0], [23.7, 133.0], [23.8, 134.0], [23.9, 134.0], [24.0, 134.0], [24.1, 135.0], [24.2, 136.0], [24.3, 136.0], [24.4, 136.0], [24.5, 137.0], [24.6, 137.0], [24.7, 138.0], [24.8, 138.0], [24.9, 139.0], [25.0, 139.0], [25.1, 139.0], [25.2, 140.0], [25.3, 140.0], [25.4, 141.0], [25.5, 141.0], [25.6, 142.0], [25.7, 142.0], [25.8, 142.0], [25.9, 143.0], [26.0, 143.0], [26.1, 144.0], [26.2, 144.0], [26.3, 145.0], [26.4, 145.0], [26.5, 146.0], [26.6, 146.0], [26.7, 147.0], [26.8, 147.0], [26.9, 147.0], [27.0, 148.0], [27.1, 148.0], [27.2, 149.0], [27.3, 149.0], [27.4, 150.0], [27.5, 150.0], [27.6, 151.0], [27.7, 151.0], [27.8, 152.0], [27.9, 152.0], [28.0, 153.0], [28.1, 154.0], [28.2, 154.0], [28.3, 154.0], [28.4, 155.0], [28.5, 156.0], [28.6, 156.0], [28.7, 157.0], [28.8, 157.0], [28.9, 158.0], [29.0, 158.0], [29.1, 159.0], [29.2, 159.0], [29.3, 160.0], [29.4, 160.0], [29.5, 161.0], [29.6, 161.0], [29.7, 162.0], [29.8, 162.0], [29.9, 163.0], [30.0, 163.0], [30.1, 164.0], [30.2, 164.0], [30.3, 165.0], [30.4, 166.0], [30.5, 166.0], [30.6, 167.0], [30.7, 168.0], [30.8, 168.0], [30.9, 169.0], [31.0, 170.0], [31.1, 170.0], [31.2, 171.0], [31.3, 171.0], [31.4, 172.0], [31.5, 173.0], [31.6, 173.0], [31.7, 174.0], [31.8, 175.0], [31.9, 175.0], [32.0, 176.0], [32.1, 176.0], [32.2, 177.0], [32.3, 178.0], [32.4, 178.0], [32.5, 179.0], [32.6, 180.0], [32.7, 180.0], [32.8, 181.0], [32.9, 182.0], [33.0, 182.0], [33.1, 183.0], [33.2, 184.0], [33.3, 184.0], [33.4, 185.0], [33.5, 186.0], [33.6, 187.0], [33.7, 187.0], [33.8, 188.0], [33.9, 189.0], [34.0, 189.0], [34.1, 190.0], [34.2, 191.0], [34.3, 192.0], [34.4, 193.0], [34.5, 193.0], [34.6, 194.0], [34.7, 195.0], [34.8, 196.0], [34.9, 196.0], [35.0, 197.0], [35.1, 198.0], [35.2, 199.0], [35.3, 200.0], [35.4, 201.0], [35.5, 202.0], [35.6, 203.0], [35.7, 203.0], [35.8, 204.0], [35.9, 205.0], [36.0, 206.0], [36.1, 207.0], [36.2, 208.0], [36.3, 209.0], [36.4, 210.0], [36.5, 211.0], [36.6, 212.0], [36.7, 213.0], [36.8, 214.0], [36.9, 215.0], [37.0, 216.0], [37.1, 217.0], [37.2, 218.0], [37.3, 219.0], [37.4, 221.0], [37.5, 222.0], [37.6, 223.0], [37.7, 224.0], [37.8, 225.0], [37.9, 226.0], [38.0, 227.0], [38.1, 228.0], [38.2, 230.0], [38.3, 231.0], [38.4, 232.0], [38.5, 234.0], [38.6, 235.0], [38.7, 236.0], [38.8, 238.0], [38.9, 239.0], [39.0, 240.0], [39.1, 242.0], [39.2, 243.0], [39.3, 244.0], [39.4, 246.0], [39.5, 247.0], [39.6, 249.0], [39.7, 250.0], [39.8, 252.0], [39.9, 253.0], [40.0, 255.0], [40.1, 257.0], [40.2, 258.0], [40.3, 260.0], [40.4, 261.0], [40.5, 263.0], [40.6, 265.0], [40.7, 267.0], [40.8, 268.0], [40.9, 270.0], [41.0, 272.0], [41.1, 273.0], [41.2, 275.0], [41.3, 277.0], [41.4, 279.0], [41.5, 280.0], [41.6, 283.0], [41.7, 284.0], [41.8, 286.0], [41.9, 288.0], [42.0, 290.0], [42.1, 292.0], [42.2, 295.0], [42.3, 297.0], [42.4, 299.0], [42.5, 301.0], [42.6, 303.0], [42.7, 305.0], [42.8, 308.0], [42.9, 310.0], [43.0, 312.0], [43.1, 314.0], [43.2, 316.0], [43.3, 319.0], [43.4, 321.0], [43.5, 323.0], [43.6, 326.0], [43.7, 329.0], [43.8, 331.0], [43.9, 334.0], [44.0, 336.0], [44.1, 338.0], [44.2, 340.0], [44.3, 342.0], [44.4, 345.0], [44.5, 347.0], [44.6, 350.0], [44.7, 352.0], [44.8, 355.0], [44.9, 357.0], [45.0, 360.0], [45.1, 362.0], [45.2, 364.0], [45.3, 366.0], [45.4, 369.0], [45.5, 371.0], [45.6, 374.0], [45.7, 376.0], [45.8, 379.0], [45.9, 381.0], [46.0, 384.0], [46.1, 386.0], [46.2, 388.0], [46.3, 390.0], [46.4, 393.0], [46.5, 395.0], [46.6, 398.0], [46.7, 400.0], [46.8, 402.0], [46.9, 404.0], [47.0, 407.0], [47.1, 409.0], [47.2, 411.0], [47.3, 414.0], [47.4, 416.0], [47.5, 418.0], [47.6, 421.0], [47.7, 423.0], [47.8, 425.0], [47.9, 427.0], [48.0, 430.0], [48.1, 432.0], [48.2, 434.0], [48.3, 436.0], [48.4, 438.0], [48.5, 440.0], [48.6, 443.0], [48.7, 445.0], [48.8, 448.0], [48.9, 450.0], [49.0, 452.0], [49.1, 454.0], [49.2, 457.0], [49.3, 459.0], [49.4, 461.0], [49.5, 463.0], [49.6, 465.0], [49.7, 467.0], [49.8, 469.0], [49.9, 471.0], [50.0, 474.0], [50.1, 475.0], [50.2, 477.0], [50.3, 479.0], [50.4, 482.0], [50.5, 484.0], [50.6, 486.0], [50.7, 488.0], [50.8, 490.0], [50.9, 492.0], [51.0, 493.0], [51.1, 495.0], [51.2, 498.0], [51.3, 500.0], [51.4, 502.0], [51.5, 503.0], [51.6, 505.0], [51.7, 507.0], [51.8, 509.0], [51.9, 511.0], [52.0, 514.0], [52.1, 516.0], [52.2, 517.0], [52.3, 519.0], [52.4, 522.0], [52.5, 523.0], [52.6, 525.0], [52.7, 527.0], [52.8, 529.0], [52.9, 530.0], [53.0, 533.0], [53.1, 534.0], [53.2, 536.0], [53.3, 538.0], [53.4, 540.0], [53.5, 542.0], [53.6, 544.0], [53.7, 546.0], [53.8, 547.0], [53.9, 549.0], [54.0, 551.0], [54.1, 553.0], [54.2, 555.0], [54.3, 557.0], [54.4, 558.0], [54.5, 560.0], [54.6, 562.0], [54.7, 564.0], [54.8, 566.0], [54.9, 567.0], [55.0, 569.0], [55.1, 571.0], [55.2, 573.0], [55.3, 575.0], [55.4, 577.0], [55.5, 579.0], [55.6, 581.0], [55.7, 583.0], [55.8, 585.0], [55.9, 587.0], [56.0, 589.0], [56.1, 591.0], [56.2, 593.0], [56.3, 595.0], [56.4, 597.0], [56.5, 599.0], [56.6, 601.0], [56.7, 602.0], [56.8, 604.0], [56.9, 606.0], [57.0, 608.0], [57.1, 609.0], [57.2, 611.0], [57.3, 613.0], [57.4, 615.0], [57.5, 616.0], [57.6, 618.0], [57.7, 620.0], [57.8, 622.0], [57.9, 624.0], [58.0, 625.0], [58.1, 627.0], [58.2, 629.0], [58.3, 631.0], [58.4, 632.0], [58.5, 634.0], [58.6, 636.0], [58.7, 637.0], [58.8, 639.0], [58.9, 641.0], [59.0, 643.0], [59.1, 645.0], [59.2, 646.0], [59.3, 648.0], [59.4, 649.0], [59.5, 651.0], [59.6, 653.0], [59.7, 654.0], [59.8, 656.0], [59.9, 658.0], [60.0, 660.0], [60.1, 662.0], [60.2, 663.0], [60.3, 665.0], [60.4, 667.0], [60.5, 669.0], [60.6, 670.0], [60.7, 672.0], [60.8, 674.0], [60.9, 676.0], [61.0, 678.0], [61.1, 680.0], [61.2, 681.0], [61.3, 683.0], [61.4, 685.0], [61.5, 686.0], [61.6, 688.0], [61.7, 690.0], [61.8, 691.0], [61.9, 693.0], [62.0, 695.0], [62.1, 697.0], [62.2, 698.0], [62.3, 700.0], [62.4, 702.0], [62.5, 703.0], [62.6, 705.0], [62.7, 706.0], [62.8, 708.0], [62.9, 710.0], [63.0, 712.0], [63.1, 713.0], [63.2, 715.0], [63.3, 717.0], [63.4, 719.0], [63.5, 721.0], [63.6, 722.0], [63.7, 724.0], [63.8, 726.0], [63.9, 728.0], [64.0, 729.0], [64.1, 731.0], [64.2, 733.0], [64.3, 735.0], [64.4, 737.0], [64.5, 739.0], [64.6, 741.0], [64.7, 742.0], [64.8, 744.0], [64.9, 746.0], [65.0, 748.0], [65.1, 750.0], [65.2, 752.0], [65.3, 753.0], [65.4, 755.0], [65.5, 757.0], [65.6, 759.0], [65.7, 760.0], [65.8, 762.0], [65.9, 764.0], [66.0, 765.0], [66.1, 767.0], [66.2, 769.0], [66.3, 770.0], [66.4, 772.0], [66.5, 774.0], [66.6, 776.0], [66.7, 777.0], [66.8, 779.0], [66.9, 781.0], [67.0, 782.0], [67.1, 784.0], [67.2, 786.0], [67.3, 787.0], [67.4, 789.0], [67.5, 791.0], [67.6, 792.0], [67.7, 794.0], [67.8, 796.0], [67.9, 798.0], [68.0, 799.0], [68.1, 801.0], [68.2, 803.0], [68.3, 805.0], [68.4, 807.0], [68.5, 808.0], [68.6, 810.0], [68.7, 812.0], [68.8, 814.0], [68.9, 816.0], [69.0, 818.0], [69.1, 820.0], [69.2, 822.0], [69.3, 824.0], [69.4, 826.0], [69.5, 827.0], [69.6, 829.0], [69.7, 831.0], [69.8, 833.0], [69.9, 835.0], [70.0, 837.0], [70.1, 839.0], [70.2, 840.0], [70.3, 842.0], [70.4, 844.0], [70.5, 846.0], [70.6, 848.0], [70.7, 849.0], [70.8, 851.0], [70.9, 853.0], [71.0, 855.0], [71.1, 857.0], [71.2, 859.0], [71.3, 861.0], [71.4, 864.0], [71.5, 865.0], [71.6, 867.0], [71.7, 869.0], [71.8, 871.0], [71.9, 873.0], [72.0, 875.0], [72.1, 876.0], [72.2, 878.0], [72.3, 880.0], [72.4, 882.0], [72.5, 884.0], [72.6, 885.0], [72.7, 887.0], [72.8, 889.0], [72.9, 891.0], [73.0, 892.0], [73.1, 894.0], [73.2, 896.0], [73.3, 898.0], [73.4, 900.0], [73.5, 902.0], [73.6, 904.0], [73.7, 906.0], [73.8, 908.0], [73.9, 910.0], [74.0, 912.0], [74.1, 914.0], [74.2, 916.0], [74.3, 918.0], [74.4, 920.0], [74.5, 923.0], [74.6, 925.0], [74.7, 927.0], [74.8, 929.0], [74.9, 931.0], [75.0, 933.0], [75.1, 935.0], [75.2, 937.0], [75.3, 939.0], [75.4, 941.0], [75.5, 943.0], [75.6, 945.0], [75.7, 947.0], [75.8, 949.0], [75.9, 951.0], [76.0, 953.0], [76.1, 955.0], [76.2, 957.0], [76.3, 959.0], [76.4, 961.0], [76.5, 963.0], [76.6, 965.0], [76.7, 967.0], [76.8, 969.0], [76.9, 971.0], [77.0, 973.0], [77.1, 975.0], [77.2, 977.0], [77.3, 979.0], [77.4, 981.0], [77.5, 983.0], [77.6, 986.0], [77.7, 988.0], [77.8, 990.0], [77.9, 992.0], [78.0, 994.0], [78.1, 997.0], [78.2, 999.0], [78.3, 1001.0], [78.4, 1003.0], [78.5, 1005.0], [78.6, 1007.0], [78.7, 1010.0], [78.8, 1011.0], [78.9, 1014.0], [79.0, 1016.0], [79.1, 1018.0], [79.2, 1021.0], [79.3, 1023.0], [79.4, 1025.0], [79.5, 1028.0], [79.6, 1030.0], [79.7, 1033.0], [79.8, 1035.0], [79.9, 1037.0], [80.0, 1040.0], [80.1, 1042.0], [80.2, 1045.0], [80.3, 1047.0], [80.4, 1050.0], [80.5, 1052.0], [80.6, 1055.0], [80.7, 1058.0], [80.8, 1060.0], [80.9, 1062.0], [81.0, 1064.0], [81.1, 1066.0], [81.2, 1069.0], [81.3, 1071.0], [81.4, 1074.0], [81.5, 1076.0], [81.6, 1079.0], [81.7, 1081.0], [81.8, 1084.0], [81.9, 1088.0], [82.0, 1090.0], [82.1, 1093.0], [82.2, 1095.0], [82.3, 1097.0], [82.4, 1100.0], [82.5, 1103.0], [82.6, 1105.0], [82.7, 1108.0], [82.8, 1111.0], [82.9, 1113.0], [83.0, 1115.0], [83.1, 1118.0], [83.2, 1121.0], [83.3, 1123.0], [83.4, 1126.0], [83.5, 1129.0], [83.6, 1131.0], [83.7, 1134.0], [83.8, 1137.0], [83.9, 1139.0], [84.0, 1142.0], [84.1, 1145.0], [84.2, 1148.0], [84.3, 1150.0], [84.4, 1153.0], [84.5, 1156.0], [84.6, 1159.0], [84.7, 1162.0], [84.8, 1164.0], [84.9, 1167.0], [85.0, 1170.0], [85.1, 1173.0], [85.2, 1176.0], [85.3, 1179.0], [85.4, 1182.0], [85.5, 1186.0], [85.6, 1189.0], [85.7, 1192.0], [85.8, 1195.0], [85.9, 1198.0], [86.0, 1201.0], [86.1, 1204.0], [86.2, 1207.0], [86.3, 1210.0], [86.4, 1213.0], [86.5, 1216.0], [86.6, 1220.0], [86.7, 1223.0], [86.8, 1226.0], [86.9, 1230.0], [87.0, 1233.0], [87.1, 1236.0], [87.2, 1239.0], [87.3, 1242.0], [87.4, 1246.0], [87.5, 1249.0], [87.6, 1253.0], [87.7, 1257.0], [87.8, 1261.0], [87.9, 1264.0], [88.0, 1267.0], [88.1, 1271.0], [88.2, 1275.0], [88.3, 1278.0], [88.4, 1282.0], [88.5, 1286.0], [88.6, 1290.0], [88.7, 1294.0], [88.8, 1298.0], [88.9, 1301.0], [89.0, 1305.0], [89.1, 1308.0], [89.2, 1312.0], [89.3, 1316.0], [89.4, 1320.0], [89.5, 1324.0], [89.6, 1328.0], [89.7, 1332.0], [89.8, 1336.0], [89.9, 1340.0], [90.0, 1344.0], [90.1, 1347.0], [90.2, 1352.0], [90.3, 1355.0], [90.4, 1359.0], [90.5, 1364.0], [90.6, 1367.0], [90.7, 1372.0], [90.8, 1376.0], [90.9, 1380.0], [91.0, 1386.0], [91.1, 1391.0], [91.2, 1395.0], [91.3, 1400.0], [91.4, 1405.0], [91.5, 1410.0], [91.6, 1415.0], [91.7, 1420.0], [91.8, 1425.0], [91.9, 1430.0], [92.0, 1435.0], [92.1, 1440.0], [92.2, 1444.0], [92.3, 1450.0], [92.4, 1455.0], [92.5, 1460.0], [92.6, 1465.0], [92.7, 1470.0], [92.8, 1475.0], [92.9, 1481.0], [93.0, 1486.0], [93.1, 1493.0], [93.2, 1498.0], [93.3, 1504.0], [93.4, 1510.0], [93.5, 1516.0], [93.6, 1522.0], [93.7, 1529.0], [93.8, 1535.0], [93.9, 1540.0], [94.0, 1547.0], [94.1, 1554.0], [94.2, 1560.0], [94.3, 1565.0], [94.4, 1573.0], [94.5, 1581.0], [94.6, 1588.0], [94.7, 1594.0], [94.8, 1601.0], [94.9, 1608.0], [95.0, 1616.0], [95.1, 1623.0], [95.2, 1632.0], [95.3, 1639.0], [95.4, 1648.0], [95.5, 1656.0], [95.6, 1665.0], [95.7, 1674.0], [95.8, 1682.0], [95.9, 1692.0], [96.0, 1699.0], [96.1, 1709.0], [96.2, 1718.0], [96.3, 1728.0], [96.4, 1738.0], [96.5, 1749.0], [96.6, 1759.0], [96.7, 1770.0], [96.8, 1780.0], [96.9, 1791.0], [97.0, 1800.0], [97.1, 1812.0], [97.2, 1825.0], [97.3, 1838.0], [97.4, 1850.0], [97.5, 1862.0], [97.6, 1875.0], [97.7, 1890.0], [97.8, 1905.0], [97.9, 1918.0], [98.0, 1934.0], [98.1, 1952.0], [98.2, 1971.0], [98.3, 1988.0], [98.4, 2006.0], [98.5, 2029.0], [98.6, 2051.0], [98.7, 2076.0], [98.8, 2100.0], [98.9, 2128.0], [99.0, 2162.0], [99.1, 2191.0], [99.2, 2229.0], [99.3, 2263.0], [99.4, 2303.0], [99.5, 2357.0], [99.6, 2413.0], [99.7, 2503.0], [99.8, 2610.0], [99.9, 2769.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 24352.0, "series": [{"data": [[0.0, 16939.0], [600.0, 6712.0], [700.0, 6742.0], [800.0, 6250.0], [900.0, 5729.0], [1000.0, 4857.0], [1100.0, 4178.0], [1200.0, 3411.0], [1300.0, 2845.0], [1400.0, 2276.0], [1500.0, 1819.0], [100.0, 24352.0], [1600.0, 1438.0], [1700.0, 1153.0], [1800.0, 896.0], [1900.0, 710.0], [2000.0, 510.0], [2100.0, 376.0], [2200.0, 311.0], [2300.0, 224.0], [2400.0, 142.0], [2500.0, 113.0], [2600.0, 93.0], [2700.0, 45.0], [2800.0, 42.0], [2900.0, 21.0], [3000.0, 16.0], [3100.0, 8.0], [200.0, 8424.0], [3200.0, 10.0], [3300.0, 5.0], [3400.0, 2.0], [3500.0, 2.0], [300.0, 5011.0], [400.0, 5391.0], [500.0, 6147.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7923.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 60178.0, "series": [{"data": [[0.0, 60178.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 49099.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7923.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.6233766233766236, "minX": 1.72866048E12, "maxY": 16.0, "series": [{"data": [[1.72866462E12, 12.0], [1.72866492E12, 12.0], [1.72866522E12, 12.0], [1.72866612E12, 11.880474452554745], [1.72866552E12, 12.0], [1.72866582E12, 12.0], [1.7286645E12, 12.0], [1.7286648E12, 12.0], [1.7286651E12, 12.0], [1.7286654E12, 12.0], [1.72866438E12, 12.0], [1.728666E12, 12.0], [1.72866468E12, 12.0], [1.7286657E12, 12.0], [1.72866498E12, 12.0], [1.72866528E12, 12.0], [1.72866558E12, 12.0], [1.72866576E12, 12.0], [1.72866456E12, 12.0], [1.72866486E12, 12.0], [1.72866516E12, 12.0], [1.72866618E12, 7.971459934138294], [1.72866546E12, 12.0], [1.72866588E12, 12.0], [1.72866624E12, 1.6666666666666667], [1.72866444E12, 12.0], [1.72866594E12, 12.0], [1.72866474E12, 12.0], [1.72866564E12, 12.0], [1.72866504E12, 12.0], [1.72866534E12, 12.0], [1.72866432E12, 11.933507170795316], [1.72866606E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72866072E12, 1.9375], [1.7286606E12, 2.0], [1.72866066E12, 2.0], [1.72866048E12, 1.9951923076923073], [1.72866054E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72866138E12, 4.0], [1.72866078E12, 4.0], [1.72866168E12, 4.0], [1.72866108E12, 4.0], [1.72866228E12, 3.953871499176277], [1.72866096E12, 4.0], [1.72866198E12, 4.0], [1.72866156E12, 4.0], [1.72866126E12, 4.0], [1.72866216E12, 4.0], [1.72866186E12, 4.0], [1.72866114E12, 4.0], [1.72866144E12, 4.0], [1.72866084E12, 4.0], [1.72866204E12, 4.0], [1.72866072E12, 3.9940119760479047], [1.72866174E12, 4.0], [1.72866234E12, 1.6519607843137256], [1.72866102E12, 4.0], [1.72866192E12, 4.0], [1.72866132E12, 4.0], [1.72866162E12, 4.0], [1.7286609E12, 4.0], [1.7286612E12, 4.0], [1.72866222E12, 4.0], [1.7286618E12, 4.0], [1.7286615E12, 4.0], [1.7286621E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72866672E12, 16.0], [1.72866642E12, 16.0], [1.72866774E12, 16.0], [1.72866744E12, 16.0], [1.72866714E12, 16.0], [1.72866684E12, 16.0], [1.72866654E12, 16.0], [1.7286672E12, 16.0], [1.7286669E12, 16.0], [1.7286666E12, 16.0], [1.7286663E12, 16.0], [1.72866762E12, 16.0], [1.72866732E12, 16.0], [1.72866702E12, 16.0], [1.72866768E12, 16.0], [1.72866738E12, 16.0], [1.72866708E12, 16.0], [1.72866678E12, 16.0], [1.72866648E12, 16.0], [1.7286675E12, 16.0], [1.7286678E12, 12.011433597185565], [1.72866624E12, 15.951640759930914], [1.72866786E12, 2.4710743801652906], [1.72866756E12, 16.0], [1.72866726E12, 16.0], [1.72866696E12, 16.0], [1.72866666E12, 16.0], [1.72866636E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.728663E12, 8.0], [1.7286627E12, 8.0], [1.7286633E12, 8.0], [1.7286636E12, 8.0], [1.7286639E12, 8.0], [1.7286642E12, 8.0], [1.72866288E12, 8.0], [1.72866258E12, 8.0], [1.72866348E12, 8.0], [1.72866318E12, 8.0], [1.72866378E12, 8.0], [1.72866408E12, 8.0], [1.72866276E12, 8.0], [1.72866246E12, 8.0], [1.72866336E12, 8.0], [1.72866306E12, 8.0], [1.72866366E12, 8.0], [1.72866396E12, 8.0], [1.72866264E12, 8.0], [1.72866426E12, 6.525032092426193], [1.72866324E12, 8.0], [1.72866294E12, 8.0], [1.72866354E12, 8.0], [1.72866384E12, 8.0], [1.72866252E12, 8.0], [1.72866414E12, 8.0], [1.72866312E12, 8.0], [1.72866282E12, 8.0], [1.72866342E12, 8.0], [1.72866372E12, 8.0], [1.7286624E12, 7.987341772151899], [1.72866402E12, 8.0], [1.72866432E12, 1.6233766233766236]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72866786E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 389.2250179726825, "minX": 1.0, "maxY": 809.3226851551896, "series": [{"data": [[2.0, 389.2250179726825], [8.0, 477.58346392527835], [9.0, 562.8592592592591], [10.0, 516.9179104477608], [11.0, 590.9188311688312], [3.0, 400.6428571428571], [12.0, 629.1439842209107], [13.0, 621.6686390532547], [14.0, 518.14], [15.0, 750.0427807486631], [1.0, 421.00000000000006], [4.0, 406.5501418216206], [16.0, 809.3226851551896], [5.0, 433.735632183908], [6.0, 418.1923076923077], [7.0, 455.0086767895878]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.699906143344812, 600.4314419795256]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72866048E12, "maxY": 6.20083516E7, "series": [{"data": [[1.72866138E12, 3.1350128666666668E7], [1.72866462E12, 5.844118638333333E7], [1.7286636E12, 5.2257028416666664E7], [1.72866582E12, 5.8855053516666666E7], [1.72866684E12, 6.1188740333333336E7], [1.72866258E12, 5.142791118333333E7], [1.7286648E12, 5.9715546016666666E7], [1.7286672E12, 6.094525471666667E7], [1.72866156E12, 2.841726505E7], [1.72866378E12, 5.094620096666667E7], [1.72866276E12, 5.19817088E7], [1.728666E12, 5.8949297416666664E7], [1.72866054E12, 1.5544572783333333E7], [1.72866498E12, 5.79041857E7], [1.72866702E12, 5.8910467483333334E7], [1.72866072E12, 2.6420675083333332E7], [1.72866738E12, 6.0507482733333334E7], [1.72866174E12, 2.9571181933333334E7], [1.72866396E12, 5.179459068333333E7], [1.72866294E12, 5.17157385E7], [1.72866516E12, 5.7583834333333336E7], [1.72866618E12, 4.700806593333333E7], [1.72866192E12, 3.07740706E7], [1.7286609E12, 2.96305705E7], [1.72866414E12, 5.176639021666667E7], [1.72866312E12, 5.0311658416666664E7], [1.72866756E12, 5.943281765E7], [1.72866534E12, 5.69828124E7], [1.72866636E12, 6.160303903333333E7], [1.7286621E12, 2.8960582833333332E7], [1.72866432E12, 4.0009096083333336E7], [1.7286627E12, 5.12791202E7], [1.72866492E12, 5.978863938333333E7], [1.72866168E12, 3.1694389816666666E7], [1.72866612E12, 5.7642295983333334E7], [1.72866066E12, 1.4954410033333333E7], [1.7286639E12, 5.316548606666667E7], [1.72866714E12, 6.13753029E7], [1.72866288E12, 4.979997386666667E7], [1.7286651E12, 5.8217882733333334E7], [1.72866186E12, 3.0485746283333335E7], [1.72866408E12, 5.1063144333333336E7], [1.7286663E12, 5.99807442E7], [1.72866732E12, 6.163327071666667E7], [1.72866084E12, 3.04219295E7], [1.72866306E12, 5.204931835E7], [1.72866528E12, 5.828498611666667E7], [1.72866768E12, 6.07708782E7], [1.72866204E12, 3.0412040266666666E7], [1.72866426E12, 4.134688446666667E7], [1.72866324E12, 5.14166415E7], [1.72866648E12, 6.0331154483333334E7], [1.72866102E12, 3.1182628333333332E7], [1.72866546E12, 5.82908851E7], [1.7286675E12, 6.183089013333333E7], [1.72866786E12, 6737768.516666667], [1.7286612E12, 3.0357032116666667E7], [1.72866222E12, 2.9509511566666666E7], [1.72866444E12, 5.775901553333333E7], [1.72866564E12, 5.49261991E7], [1.72866342E12, 5.135053096666667E7], [1.72866666E12, 6.1249227833333336E7], [1.7286624E12, 5.005880056666667E7], [1.728663E12, 5.007583553333333E7], [1.72866642E12, 5.9377543166666664E7], [1.72866078E12, 2.9651134366666667E7], [1.72866522E12, 5.594385168333333E7], [1.72866744E12, 5.858882568333333E7], [1.72866096E12, 3.0764089433333334E7], [1.72866198E12, 3.0890850583333332E7], [1.7286642E12, 5.088126355E7], [1.72866318E12, 5.033349885E7], [1.7286654E12, 5.999415253333333E7], [1.72866216E12, 3.0346999533333335E7], [1.7286666E12, 6.20083516E7], [1.72866114E12, 3.1024769416666668E7], [1.72866438E12, 5.87174421E7], [1.72866762E12, 6.163657745E7], [1.72866336E12, 5.136972155E7], [1.72866558E12, 5.9101384916666664E7], [1.72866576E12, 5.810873488333333E7], [1.72866678E12, 6.0107794016666666E7], [1.72866234E12, 1.0700314866666667E7], [1.72866456E12, 5.9686640583333336E7], [1.72866354E12, 5.0297998833333336E7], [1.72866132E12, 2.9896067066666666E7], [1.7286678E12, 5.3294388483333334E7], [1.72866252E12, 5.221300928333333E7], [1.72866594E12, 5.7317488016666666E7], [1.72866474E12, 5.81279076E7], [1.72866696E12, 6.111427585E7], [1.72866048E12, 1.0873399333333334E7], [1.7286615E12, 3.08294146E7], [1.72866372E12, 4.8619526916666664E7], [1.72866672E12, 6.0030809166666664E7], [1.72866774E12, 5.933434038333333E7], [1.72866108E12, 3.0028453933333334E7], [1.7286633E12, 5.070631756666667E7], [1.72866552E12, 5.7864920916666664E7], [1.72866228E12, 2.8437526733333334E7], [1.7286645E12, 5.775472478333333E7], [1.72866654E12, 5.964917981666667E7], [1.72866348E12, 4.9506330733333334E7], [1.7286669E12, 5.953670018333333E7], [1.72866126E12, 3.0398921716666665E7], [1.72866468E12, 5.9571645016666666E7], [1.72866246E12, 4.90480469E7], [1.7286657E12, 5.733137355E7], [1.72866144E12, 2.977380575E7], [1.72866366E12, 5.137988755E7], [1.72866264E12, 4.9727844333333336E7], [1.72866708E12, 6.054300596666667E7], [1.72866486E12, 5.5530542083333336E7], [1.72866588E12, 5.883673875E7], [1.72866162E12, 2.9437255933333334E7], [1.72866384E12, 5.119760396666667E7], [1.72866624E12, 5.536011263333333E7], [1.7286606E12, 1.597995445E7], [1.72866282E12, 4.8738387083333336E7], [1.72866504E12, 5.888652043333333E7], [1.72866726E12, 6.0385824233333334E7], [1.7286618E12, 2.9862082766666666E7], [1.72866402E12, 4.986945465E7], [1.72866606E12, 5.697018618333333E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72866138E12, 0.0], [1.72866462E12, 0.0], [1.7286636E12, 0.0], [1.72866582E12, 0.0], [1.72866684E12, 0.0], [1.72866258E12, 0.0], [1.7286648E12, 0.0], [1.7286672E12, 0.0], [1.72866156E12, 0.0], [1.72866378E12, 0.0], [1.72866276E12, 0.0], [1.728666E12, 0.0], [1.72866054E12, 0.0], [1.72866498E12, 0.0], [1.72866702E12, 0.0], [1.72866072E12, 0.0], [1.72866738E12, 0.0], [1.72866174E12, 0.0], [1.72866396E12, 0.0], [1.72866294E12, 0.0], [1.72866516E12, 0.0], [1.72866618E12, 0.0], [1.72866192E12, 0.0], [1.7286609E12, 0.0], [1.72866414E12, 0.0], [1.72866312E12, 0.0], [1.72866756E12, 0.0], [1.72866534E12, 0.0], [1.72866636E12, 0.0], [1.7286621E12, 0.0], [1.72866432E12, 0.0], [1.7286627E12, 0.0], [1.72866492E12, 0.0], [1.72866168E12, 0.0], [1.72866612E12, 0.0], [1.72866066E12, 0.0], [1.7286639E12, 0.0], [1.72866714E12, 0.0], [1.72866288E12, 0.0], [1.7286651E12, 0.0], [1.72866186E12, 0.0], [1.72866408E12, 0.0], [1.7286663E12, 0.0], [1.72866732E12, 0.0], [1.72866084E12, 0.0], [1.72866306E12, 0.0], [1.72866528E12, 0.0], [1.72866768E12, 0.0], [1.72866204E12, 0.0], [1.72866426E12, 0.0], [1.72866324E12, 0.0], [1.72866648E12, 0.0], [1.72866102E12, 0.0], [1.72866546E12, 0.0], [1.7286675E12, 0.0], [1.72866786E12, 0.0], [1.7286612E12, 0.0], [1.72866222E12, 0.0], [1.72866444E12, 0.0], [1.72866564E12, 0.0], [1.72866342E12, 0.0], [1.72866666E12, 0.0], [1.7286624E12, 0.0], [1.728663E12, 0.0], [1.72866642E12, 0.0], [1.72866078E12, 0.0], [1.72866522E12, 0.0], [1.72866744E12, 0.0], [1.72866096E12, 0.0], [1.72866198E12, 0.0], [1.7286642E12, 0.0], [1.72866318E12, 0.0], [1.7286654E12, 0.0], [1.72866216E12, 0.0], [1.7286666E12, 0.0], [1.72866114E12, 0.0], [1.72866438E12, 0.0], [1.72866762E12, 0.0], [1.72866336E12, 0.0], [1.72866558E12, 0.0], [1.72866576E12, 0.0], [1.72866678E12, 0.0], [1.72866234E12, 0.0], [1.72866456E12, 0.0], [1.72866354E12, 0.0], [1.72866132E12, 0.0], [1.7286678E12, 0.0], [1.72866252E12, 0.0], [1.72866594E12, 0.0], [1.72866474E12, 0.0], [1.72866696E12, 0.0], [1.72866048E12, 0.0], [1.7286615E12, 0.0], [1.72866372E12, 0.0], [1.72866672E12, 0.0], [1.72866774E12, 0.0], [1.72866108E12, 0.0], [1.7286633E12, 0.0], [1.72866552E12, 0.0], [1.72866228E12, 0.0], [1.7286645E12, 0.0], [1.72866654E12, 0.0], [1.72866348E12, 0.0], [1.7286669E12, 0.0], [1.72866126E12, 0.0], [1.72866468E12, 0.0], [1.72866246E12, 0.0], [1.7286657E12, 0.0], [1.72866144E12, 0.0], [1.72866366E12, 0.0], [1.72866264E12, 0.0], [1.72866708E12, 0.0], [1.72866486E12, 0.0], [1.72866588E12, 0.0], [1.72866162E12, 0.0], [1.72866384E12, 0.0], [1.72866624E12, 0.0], [1.7286606E12, 0.0], [1.72866282E12, 0.0], [1.72866504E12, 0.0], [1.72866726E12, 0.0], [1.7286618E12, 0.0], [1.72866402E12, 0.0], [1.72866606E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72866786E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 376.98407079646006, "minX": 1.72866048E12, "maxY": 868.7015468607831, "series": [{"data": [[1.72866138E12, 428.0788530465951], [1.72866462E12, 658.0256645279553], [1.7286636E12, 483.07638190954793], [1.72866582E12, 629.3545851528385], [1.72866684E12, 822.3418803418805], [1.72866258E12, 474.5104063429138], [1.7286648E12, 634.8465608465604], [1.7286672E12, 813.5164835164828], [1.72866156E12, 386.2765273311899], [1.72866378E12, 473.7105004906774], [1.72866276E12, 470.59470068694776], [1.728666E12, 637.9151943462905], [1.72866054E12, 379.0378548895898], [1.72866498E12, 615.4918733960654], [1.72866702E12, 792.027182866557], [1.72866072E12, 376.98407079646006], [1.72866738E12, 825.0497427101199], [1.72866174E12, 393.08717105263094], [1.72866396E12, 481.336008024072], [1.72866294E12, 497.1847265221886], [1.72866516E12, 647.0528673835123], [1.72866618E12, 498.9846322722288], [1.72866192E12, 389.87133550488585], [1.7286609E12, 434.6829710144927], [1.72866414E12, 480.4552763819097], [1.72866312E12, 479.44900000000007], [1.72866756E12, 791.9826302729518], [1.72866534E12, 600.8016666666665], [1.72866636E12, 818.7813834329626], [1.7286621E12, 401.00000000000017], [1.72866432E12, 583.9810426540283], [1.7286627E12, 480.55711422845695], [1.72866492E12, 626.7639372822299], [1.72866168E12, 420.95279720279734], [1.72866612E12, 652.2344890510949], [1.72866066E12, 405.1851851851852], [1.7286639E12, 492.30737704918045], [1.72866714E12, 843.1180616740079], [1.72866288E12, 455.8137996219285], [1.7286651E12, 655.7463503649625], [1.72866186E12, 410.4417808219178], [1.72866408E12, 473.51183431952677], [1.7286663E12, 809.7307046979868], [1.72866732E12, 804.0762782900257], [1.72866084E12, 410.8461538461543], [1.72866306E12, 468.2265624999998], [1.72866528E12, 662.8656853725848], [1.72866768E12, 835.6374674761487], [1.72866204E12, 429.10053859964114], [1.72866426E12, 453.97946084724026], [1.72866324E12, 485.4858299595141], [1.72866648E12, 782.3349673202612], [1.72866102E12, 407.4991539763112], [1.72866546E12, 629.3834061135361], [1.7286675E12, 816.277446808511], [1.72866786E12, 424.2809917355374], [1.7286612E12, 430.50448833034125], [1.72866222E12, 381.0888888888882], [1.72866444E12, 607.8784810126574], [1.72866564E12, 629.0789473684205], [1.72866342E12, 484.16161616161594], [1.72866666E12, 819.1717687074832], [1.7286624E12, 499.4251054852321], [1.728663E12, 491.20863309352484], [1.72866642E12, 769.1650641025641], [1.72866078E12, 400.3618090452261], [1.72866522E12, 599.249791144528], [1.72866744E12, 782.8120423108214], [1.72866096E12, 404.0947546531305], [1.72866198E12, 430.0983899821111], [1.7286642E12, 498.44145077720214], [1.72866318E12, 455.17613636363643], [1.7286654E12, 617.2766323024069], [1.72866216E12, 421.7443082311732], [1.7286666E12, 813.6986417657034], [1.72866114E12, 440.35818181818144], [1.72866438E12, 622.9620034542316], [1.72866762E12, 791.6567656765669], [1.72866336E12, 494.72633744855966], [1.72866558E12, 606.9957877000854], [1.72866576E12, 657.2728937728937], [1.72866678E12, 810.7868020304574], [1.72866234E12, 407.7450980392158], [1.72866456E12, 626.6890243902432], [1.72866354E12, 476.5059760956177], [1.72866132E12, 402.87772194304847], [1.7286678E12, 615.7009674582231], [1.72866252E12, 475.83663366336714], [1.72866594E12, 594.5799502899762], [1.72866474E12, 634.7184466019418], [1.72866696E12, 783.0893582453289], [1.72866048E12, 389.67307692307656], [1.7286615E12, 388.5235008103727], [1.72866372E12, 451.9250474383299], [1.72866672E12, 809.5346283783801], [1.72866774E12, 839.3036971830973], [1.72866108E12, 410.01890034364277], [1.7286633E12, 490.1562819203269], [1.72866552E12, 631.8033362598765], [1.72866228E12, 388.92586490939055], [1.7286645E12, 651.4705349048054], [1.72866654E12, 823.0231362467871], [1.72866348E12, 460.7140115163148], [1.7286669E12, 821.3772609819123], [1.72866126E12, 402.47138047138054], [1.72866468E12, 653.2904977375564], [1.72866246E12, 464.0299227799226], [1.7286657E12, 605.2778242677816], [1.72866144E12, 400.7896494156927], [1.72866366E12, 463.82273603082854], [1.72866264E12, 476.36868186323153], [1.72866708E12, 802.447324414716], [1.72866486E12, 613.3242784380309], [1.72866588E12, 629.7966695880813], [1.72866162E12, 403.640202702703], [1.72866384E12, 489.41470888661905], [1.72866624E12, 763.8589743589749], [1.7286606E12, 380.5541401273886], [1.72866282E12, 465.0983446932817], [1.72866504E12, 623.8769497400356], [1.72866726E12, 868.7015468607831], [1.7286618E12, 395.80819672131156], [1.72866402E12, 479.92907092907143], [1.72866606E12, 639.1653333333333]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72866786E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 244.05414012738848, "minX": 1.72866048E12, "maxY": 582.0045495905364, "series": [{"data": [[1.72866138E12, 276.14336917562747], [1.72866462E12, 438.5673693858845], [1.7286636E12, 316.84522613065343], [1.72866582E12, 418.3921397379909], [1.72866684E12, 550.0641025641024], [1.72866258E12, 312.6184340931617], [1.7286648E12, 418.7195767195767], [1.7286672E12, 543.6880811496201], [1.72866156E12, 256.39228295819953], [1.72866378E12, 315.6594700686946], [1.72866276E12, 310.1315014720318], [1.728666E12, 420.9911660777384], [1.72866054E12, 244.69085173501574], [1.72866498E12, 412.1685201026521], [1.72866702E12, 533.6556836902805], [1.72866072E12, 245.65132743362827], [1.72866738E12, 551.554888507718], [1.72866174E12, 257.7351973684211], [1.72866396E12, 317.3630892678031], [1.72866294E12, 329.7647058823521], [1.72866516E12, 432.6335125448026], [1.72866618E12, 330.4555433589466], [1.72866192E12, 251.78827361563532], [1.7286609E12, 285.74456521739125], [1.72866414E12, 317.32261306532627], [1.72866312E12, 319.2470000000001], [1.72866756E12, 532.6633581472294], [1.72866534E12, 402.7674999999997], [1.72866636E12, 546.0375747224598], [1.7286621E12, 264.4691151919866], [1.72866432E12, 387.09123222748804], [1.7286627E12, 318.26653306613207], [1.72866492E12, 415.60714285714283], [1.72866168E12, 271.5209790209788], [1.72866612E12, 436.64963503649636], [1.72866066E12, 267.0808080808082], [1.7286639E12, 323.6864754098358], [1.72866714E12, 561.8704845814973], [1.72866288E12, 302.4177693761815], [1.7286651E12, 436.1478102189786], [1.72866186E12, 266.87842465753414], [1.72866408E12, 312.0069033530572], [1.7286663E12, 540.5620805369135], [1.72866732E12, 535.8440905280812], [1.72866084E12, 267.0803418803421], [1.72866306E12, 308.2949218749997], [1.72866528E12, 441.58049678012867], [1.72866768E12, 558.9913269731144], [1.72866204E12, 278.28545780969495], [1.72866426E12, 295.70860077021797], [1.72866324E12, 321.11538461538424], [1.72866648E12, 526.5424836601312], [1.72866102E12, 263.6463620981388], [1.72866546E12, 418.97991266375584], [1.7286675E12, 543.6731914893618], [1.72866786E12, 274.52892561983475], [1.7286612E12, 280.28366247755844], [1.72866222E12, 249.02857142857175], [1.72866444E12, 406.0607594936709], [1.72866564E12, 423.27894736842063], [1.72866342E12, 320.4111111111111], [1.72866666E12, 547.6964285714279], [1.7286624E12, 333.42405063291136], [1.728663E12, 326.5231243576565], [1.72866642E12, 515.2740384615383], [1.72866078E12, 262.65996649916264], [1.72866522E12, 401.06850459482024], [1.72866744E12, 528.1830756712783], [1.72866096E12, 261.8477157360409], [1.72866198E12, 278.2719141323794], [1.7286642E12, 330.4797927461143], [1.72866318E12, 301.99147727272765], [1.7286654E12, 408.14089347079056], [1.72866216E12, 273.714535901927], [1.7286666E12, 541.4524617996599], [1.72866114E12, 285.4709090909092], [1.72866438E12, 413.3842832469778], [1.72866762E12, 527.3572607260726], [1.72866336E12, 327.21604938271605], [1.72866558E12, 400.75821398483566], [1.72866576E12, 438.3195970695966], [1.72866678E12, 545.4644670050756], [1.72866234E12, 266.2107843137254], [1.72866456E12, 415.0226480836238], [1.72866354E12, 316.0099601593621], [1.72866132E12, 262.8475711892797], [1.7286678E12, 411.466138962181], [1.72866252E12, 312.5653465346536], [1.72866594E12, 395.6545153272577], [1.72866474E12, 422.85172109443954], [1.72866696E12, 521.6921202274557], [1.72866048E12, 250.86057692307693], [1.7286615E12, 249.0178282009722], [1.72866372E12, 301.05218216318787], [1.72866672E12, 542.4974662162149], [1.72866774E12, 564.8301056338025], [1.72866108E12, 266.63573883161547], [1.7286633E12, 325.51072522982713], [1.72866552E12, 420.8797190517997], [1.72866228E12, 254.20593080724868], [1.7286645E12, 435.47869446962846], [1.72866654E12, 549.1730934018855], [1.72866348E12, 306.9779270633394], [1.7286669E12, 548.614987080103], [1.72866126E12, 260.91414141414174], [1.72866468E12, 435.0760180995472], [1.72866246E12, 309.91409266409255], [1.7286657E12, 404.97322175732154], [1.72866144E12, 261.06176961602654], [1.72866366E12, 304.4730250481698], [1.72866264E12, 317.04162537165513], [1.72866708E12, 537.4924749163882], [1.72866486E12, 414.02461799660455], [1.72866588E12, 417.8641542506574], [1.72866162E12, 264.27364864864893], [1.72866384E12, 322.82839632277876], [1.72866624E12, 517.0495726495723], [1.7286606E12, 244.05414012738848], [1.72866282E12, 311.5209347614413], [1.72866504E12, 414.9454072790291], [1.72866726E12, 582.0045495905364], [1.7286618E12, 259.1213114754098], [1.72866402E12, 321.23976023976024], [1.72866606E12, 428.4924444444443]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72866786E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72866048E12, "maxY": 4.9E-324, "series": [{"data": [[1.72866138E12, 0.0], [1.72866462E12, 0.0], [1.7286636E12, 0.0], [1.72866582E12, 0.0], [1.72866684E12, 0.0], [1.72866258E12, 0.0], [1.7286648E12, 0.0], [1.7286672E12, 0.0], [1.72866156E12, 0.0], [1.72866378E12, 0.0], [1.72866276E12, 0.0], [1.728666E12, 0.0], [1.72866054E12, 0.0], [1.72866498E12, 0.0], [1.72866702E12, 0.0], [1.72866072E12, 0.0], [1.72866738E12, 0.0], [1.72866174E12, 0.0], [1.72866396E12, 0.0], [1.72866294E12, 0.0], [1.72866516E12, 0.0], [1.72866618E12, 0.0], [1.72866192E12, 0.0], [1.7286609E12, 0.0], [1.72866414E12, 0.0], [1.72866312E12, 0.0], [1.72866756E12, 0.0], [1.72866534E12, 0.0], [1.72866636E12, 0.0], [1.7286621E12, 0.0], [1.72866432E12, 0.0], [1.7286627E12, 0.0], [1.72866492E12, 0.0], [1.72866168E12, 0.0], [1.72866612E12, 0.0], [1.72866066E12, 0.0], [1.7286639E12, 0.0], [1.72866714E12, 0.0], [1.72866288E12, 0.0], [1.7286651E12, 0.0], [1.72866186E12, 0.0], [1.72866408E12, 0.0], [1.7286663E12, 0.0], [1.72866732E12, 0.0], [1.72866084E12, 0.0], [1.72866306E12, 0.0], [1.72866528E12, 0.0], [1.72866768E12, 0.0], [1.72866204E12, 0.0], [1.72866426E12, 0.0], [1.72866324E12, 0.0], [1.72866648E12, 0.0], [1.72866102E12, 0.0], [1.72866546E12, 0.0], [1.7286675E12, 0.0], [1.72866786E12, 0.0], [1.7286612E12, 0.0], [1.72866222E12, 0.0], [1.72866444E12, 0.0], [1.72866564E12, 0.0], [1.72866342E12, 0.0], [1.72866666E12, 0.0], [1.7286624E12, 0.0], [1.728663E12, 0.0], [1.72866642E12, 0.0], [1.72866078E12, 0.0], [1.72866522E12, 0.0], [1.72866744E12, 0.0], [1.72866096E12, 0.0], [1.72866198E12, 0.0], [1.7286642E12, 0.0], [1.72866318E12, 0.0], [1.7286654E12, 0.0], [1.72866216E12, 0.0], [1.7286666E12, 0.0], [1.72866114E12, 0.0], [1.72866438E12, 0.0], [1.72866762E12, 0.0], [1.72866336E12, 0.0], [1.72866558E12, 0.0], [1.72866576E12, 0.0], [1.72866678E12, 0.0], [1.72866234E12, 0.0], [1.72866456E12, 0.0], [1.72866354E12, 0.0], [1.72866132E12, 0.0], [1.7286678E12, 0.0], [1.72866252E12, 0.0], [1.72866594E12, 0.0], [1.72866474E12, 0.0], [1.72866696E12, 0.0], [1.72866048E12, 0.0], [1.7286615E12, 0.0], [1.72866372E12, 0.0], [1.72866672E12, 0.0], [1.72866774E12, 0.0], [1.72866108E12, 0.0], [1.7286633E12, 0.0], [1.72866552E12, 0.0], [1.72866228E12, 0.0], [1.7286645E12, 0.0], [1.72866654E12, 0.0], [1.72866348E12, 0.0], [1.7286669E12, 0.0], [1.72866126E12, 0.0], [1.72866468E12, 0.0], [1.72866246E12, 0.0], [1.7286657E12, 0.0], [1.72866144E12, 0.0], [1.72866366E12, 0.0], [1.72866264E12, 0.0], [1.72866708E12, 0.0], [1.72866486E12, 0.0], [1.72866588E12, 0.0], [1.72866162E12, 0.0], [1.72866384E12, 0.0], [1.72866624E12, 0.0], [1.7286606E12, 0.0], [1.72866282E12, 0.0], [1.72866504E12, 0.0], [1.72866726E12, 0.0], [1.7286618E12, 0.0], [1.72866402E12, 0.0], [1.72866606E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72866786E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.72866048E12, "maxY": 3589.0, "series": [{"data": [[1.72866138E12, 1697.0], [1.72866462E12, 2445.0], [1.7286636E12, 1970.0], [1.72866582E12, 2522.0], [1.72866684E12, 3115.0], [1.72866258E12, 1818.0], [1.7286648E12, 2657.0], [1.7286672E12, 3318.0], [1.72866156E12, 1519.0], [1.72866378E12, 1835.0], [1.72866276E12, 1876.0], [1.728666E12, 2476.0], [1.72866054E12, 1387.0], [1.72866498E12, 2241.0], [1.72866702E12, 2813.0], [1.72866072E12, 1441.0], [1.72866738E12, 3371.0], [1.72866174E12, 1440.0], [1.72866396E12, 1800.0], [1.72866294E12, 1742.0], [1.72866516E12, 2766.0], [1.72866618E12, 1984.0], [1.72866192E12, 1380.0], [1.7286609E12, 1393.0], [1.72866414E12, 1729.0], [1.72866312E12, 1844.0], [1.72866756E12, 3042.0], [1.72866534E12, 2783.0], [1.72866636E12, 3008.0], [1.7286621E12, 1794.0], [1.72866432E12, 2351.0], [1.7286627E12, 1841.0], [1.72866492E12, 2539.0], [1.72866168E12, 1704.0], [1.72866612E12, 2408.0], [1.72866066E12, 1328.0], [1.7286639E12, 1932.0], [1.72866714E12, 3053.0], [1.72866288E12, 2016.0], [1.7286651E12, 2626.0], [1.72866186E12, 1433.0], [1.72866408E12, 2003.0], [1.7286663E12, 3038.0], [1.72866732E12, 3427.0], [1.72866084E12, 1459.0], [1.72866306E12, 1763.0], [1.72866528E12, 2245.0], [1.72866768E12, 3354.0], [1.72866204E12, 1407.0], [1.72866426E12, 1723.0], [1.72866324E12, 1879.0], [1.72866648E12, 3104.0], [1.72866102E12, 1726.0], [1.72866546E12, 2335.0], [1.7286675E12, 3231.0], [1.72866786E12, 1239.0], [1.7286612E12, 1402.0], [1.72866222E12, 1525.0], [1.72866444E12, 2272.0], [1.72866564E12, 2647.0], [1.72866342E12, 1776.0], [1.72866666E12, 2853.0], [1.7286624E12, 1872.0], [1.728663E12, 1808.0], [1.72866642E12, 2989.0], [1.72866078E12, 1462.0], [1.72866522E12, 2495.0], [1.72866744E12, 3140.0], [1.72866096E12, 1497.0], [1.72866198E12, 1743.0], [1.7286642E12, 2122.0], [1.72866318E12, 1691.0], [1.7286654E12, 2539.0], [1.72866216E12, 1411.0], [1.7286666E12, 3446.0], [1.72866114E12, 1654.0], [1.72866438E12, 2751.0], [1.72866762E12, 2921.0], [1.72866336E12, 1783.0], [1.72866558E12, 2531.0], [1.72866576E12, 2565.0], [1.72866678E12, 3566.0], [1.72866234E12, 1399.0], [1.72866456E12, 2645.0], [1.72866354E12, 2115.0], [1.72866132E12, 1754.0], [1.7286678E12, 2982.0], [1.72866252E12, 1765.0], [1.72866594E12, 2605.0], [1.72866474E12, 2509.0], [1.72866696E12, 3271.0], [1.72866048E12, 1433.0], [1.7286615E12, 1648.0], [1.72866372E12, 1804.0], [1.72866672E12, 3285.0], [1.72866774E12, 3185.0], [1.72866108E12, 1513.0], [1.7286633E12, 1971.0], [1.72866552E12, 2391.0], [1.72866228E12, 1616.0], [1.7286645E12, 2231.0], [1.72866654E12, 2971.0], [1.72866348E12, 1837.0], [1.7286669E12, 3589.0], [1.72866126E12, 1437.0], [1.72866468E12, 2298.0], [1.72866246E12, 1917.0], [1.7286657E12, 2519.0], [1.72866144E12, 1691.0], [1.72866366E12, 1904.0], [1.72866264E12, 1916.0], [1.72866708E12, 2841.0], [1.72866486E12, 2683.0], [1.72866588E12, 2573.0], [1.72866162E12, 1461.0], [1.72866384E12, 1892.0], [1.72866624E12, 3118.0], [1.7286606E12, 1630.0], [1.72866282E12, 1966.0], [1.72866504E12, 2911.0], [1.72866726E12, 3217.0], [1.7286618E12, 1462.0], [1.72866402E12, 1904.0], [1.72866606E12, 2500.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72866138E12, 891.8000000000002], [1.72866462E12, 1448.6000000000001], [1.7286636E12, 1049.1999999999998], [1.72866582E12, 1321.8000000000002], [1.72866684E12, 1706.8000000000002], [1.72866258E12, 1037.0], [1.7286648E12, 1362.0], [1.7286672E12, 1789.0], [1.72866156E12, 854.8000000000002], [1.72866378E12, 1019.0], [1.72866276E12, 1011.0], [1.728666E12, 1366.1000000000001], [1.72866054E12, 847.1999999999999], [1.72866498E12, 1324.0], [1.72866702E12, 1716.0], [1.72866072E12, 847.8000000000001], [1.72866738E12, 1697.1999999999998], [1.72866174E12, 879.2], [1.72866396E12, 1059.0], [1.72866294E12, 1050.0], [1.72866516E12, 1384.2000000000003], [1.72866618E12, 1057.8000000000002], [1.72866192E12, 828.5], [1.7286609E12, 914.7], [1.72866414E12, 1004.5999999999999], [1.72866312E12, 1019.0999999999998], [1.72866756E12, 1735.0], [1.72866534E12, 1332.0], [1.72866636E12, 1734.3999999999999], [1.7286621E12, 849.0], [1.72866432E12, 1352.5], [1.7286627E12, 1042.0], [1.72866492E12, 1400.6000000000008], [1.72866168E12, 879.8000000000002], [1.72866612E12, 1401.0], [1.72866066E12, 851.4], [1.7286639E12, 1051.3000000000002], [1.72866714E12, 1743.8], [1.72866288E12, 997.1], [1.7286651E12, 1414.2000000000003], [1.72866186E12, 887.0], [1.72866408E12, 1007.5], [1.7286663E12, 1744.5000000000002], [1.72866732E12, 1741.2000000000003], [1.72866084E12, 880.8], [1.72866306E12, 1017.5], [1.72866528E12, 1438.4], [1.72866768E12, 1802.8000000000038], [1.72866204E12, 935.2], [1.72866426E12, 1002.0], [1.72866324E12, 1013.6000000000001], [1.72866648E12, 1715.5], [1.72866102E12, 873.8000000000004], [1.72866546E12, 1400.4], [1.7286675E12, 1782.0], [1.72866786E12, 927.1999999999999], [1.7286612E12, 907.2], [1.72866222E12, 839.9], [1.72866444E12, 1322.4], [1.72866564E12, 1345.0], [1.72866342E12, 1041.8], [1.72866666E12, 1761.3], [1.7286624E12, 1073.2], [1.728663E12, 1014.6], [1.72866642E12, 1636.3000000000004], [1.72866078E12, 858.4000000000001], [1.72866522E12, 1327.6000000000001], [1.72866744E12, 1715.0], [1.72866096E12, 853.4000000000009], [1.72866198E12, 913.0], [1.7286642E12, 1034.4], [1.72866318E12, 980.3000000000001], [1.7286654E12, 1359.5], [1.72866216E12, 888.6000000000001], [1.7286666E12, 1781.0], [1.72866114E12, 941.7000000000005], [1.72866438E12, 1373.3000000000004], [1.72866762E12, 1701.2000000000003], [1.72866336E12, 1046.4], [1.72866558E12, 1392.4], [1.72866576E12, 1379.6000000000004], [1.72866678E12, 1731.7], [1.72866234E12, 898.5], [1.72866456E12, 1352.2000000000003], [1.72866354E12, 1012.0], [1.72866132E12, 888.4000000000001], [1.7286678E12, 1378.8000000000004], [1.72866252E12, 1041.5], [1.72866594E12, 1337.2], [1.72866474E12, 1369.8000000000002], [1.72866696E12, 1741.6], [1.72866048E12, 863.6999999999999], [1.7286615E12, 884.2], [1.72866372E12, 990.0], [1.72866672E12, 1701.5], [1.72866774E12, 1735.0], [1.72866108E12, 910.8000000000006], [1.7286633E12, 1021.0], [1.72866552E12, 1329.0], [1.72866228E12, 848.6000000000001], [1.7286645E12, 1405.0], [1.72866654E12, 1736.2], [1.72866348E12, 1010.7], [1.7286669E12, 1792.5999999999997], [1.72866126E12, 889.0], [1.72866468E12, 1391.8], [1.72866246E12, 995.9000000000002], [1.7286657E12, 1330.8000000000002], [1.72866144E12, 846.0], [1.72866366E12, 967.6000000000001], [1.72866264E12, 1013.0], [1.72866708E12, 1732.0], [1.72866486E12, 1360.2000000000003], [1.72866588E12, 1376.9999999999998], [1.72866162E12, 901.4000000000001], [1.72866384E12, 1034.0], [1.72866624E12, 1680.5000000000005], [1.7286606E12, 857.5], [1.72866282E12, 983.0], [1.72866504E12, 1375.5], [1.72866726E12, 1847.0], [1.7286618E12, 868.1999999999996], [1.72866402E12, 994.2000000000003], [1.72866606E12, 1347.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72866138E12, 1479.829999999998], [1.72866462E12, 2079.6799999999985], [1.7286636E12, 1589.999999999999], [1.72866582E12, 2007.9799999999987], [1.72866684E12, 2461.109999999998], [1.72866258E12, 1462.6], [1.7286648E12, 2217.950000000002], [1.7286672E12, 2558.4400000000087], [1.72866156E12, 1264.6399999999994], [1.72866378E12, 1478.7999999999997], [1.72866276E12, 1437.7999999999988], [1.728666E12, 2031.380000000001], [1.72866054E12, 1257.46], [1.72866498E12, 2008.4999999999966], [1.72866702E12, 2408.2999999999984], [1.72866072E12, 1204.4600000000005], [1.72866738E12, 2658.3199999999997], [1.72866174E12, 1185.4699999999993], [1.72866396E12, 1556.2999999999997], [1.72866294E12, 1470.2999999999986], [1.72866516E12, 2052.1899999999932], [1.72866618E12, 1636.28], [1.72866192E12, 1199.5500000000006], [1.7286609E12, 1273.7400000000011], [1.72866414E12, 1425.2399999999998], [1.72866312E12, 1533.3900000000006], [1.72866756E12, 2500.0], [1.72866534E12, 1974.92], [1.72866636E12, 2552.4799999999996], [1.7286621E12, 1270.0], [1.72866432E12, 2017.0], [1.7286627E12, 1606.04], [1.72866492E12, 2000.53], [1.72866168E12, 1305.9399999999996], [1.72866612E12, 1985.6299999999994], [1.72866066E12, 1276.4399999999996], [1.7286639E12, 1761.69], [1.72866714E12, 2613.0000000000027], [1.72866288E12, 1487.0], [1.7286651E12, 2040.8099999999993], [1.72866186E12, 1307.9499999999998], [1.72866408E12, 1586.65], [1.7286663E12, 2525.379999999998], [1.72866732E12, 2512.199999999999], [1.72866084E12, 1240.1399999999999], [1.72866306E12, 1527.25], [1.72866528E12, 2039.8799999999974], [1.72866768E12, 2621.500000000001], [1.72866204E12, 1301.3599999999997], [1.72866426E12, 1456.6000000000001], [1.72866324E12, 1530.800000000001], [1.72866648E12, 2466.5], [1.72866102E12, 1304.9600000000005], [1.72866546E12, 2029.8799999999992], [1.7286675E12, 2602.2], [1.72866786E12, 1226.46], [1.7286612E12, 1214.6399999999983], [1.72866222E12, 1213.69], [1.72866444E12, 1876.8200000000013], [1.72866564E12, 2032.9499999999996], [1.72866342E12, 1508.4500000000003], [1.72866666E12, 2502.2200000000003], [1.7286624E12, 1580.3999999999996], [1.728663E12, 1475.82], [1.72866642E12, 2528.08], [1.72866078E12, 1192.5599999999986], [1.72866522E12, 2000.6599999999994], [1.72866744E12, 2484.0000000000014], [1.72866096E12, 1341.2400000000011], [1.72866198E12, 1380.5999999999995], [1.7286642E12, 1568.4000000000003], [1.72866318E12, 1426.310000000001], [1.7286654E12, 2011.899999999997], [1.72866216E12, 1318.0399999999995], [1.7286666E12, 2718.0700000000024], [1.72866114E12, 1299.94], [1.72866438E12, 1976.1000000000008], [1.72866762E12, 2490.569999999999], [1.72866336E12, 1449.0999999999995], [1.72866558E12, 2153.6399999999976], [1.72866576E12, 2059.3499999999995], [1.72866678E12, 2497.180000000004], [1.72866234E12, 1225.35], [1.72866456E12, 1946.55], [1.72866354E12, 1466.6500000000003], [1.72866132E12, 1280.199999999999], [1.7286678E12, 2208.1799999999957], [1.72866252E12, 1536.7099999999996], [1.72866594E12, 1970.1200000000008], [1.72866474E12, 2048.0], [1.72866696E12, 2594.520000000001], [1.72866048E12, 1335.1299999999999], [1.7286615E12, 1407.7200000000023], [1.72866372E12, 1494.5500000000009], [1.72866672E12, 2530.8000000000065], [1.72866774E12, 2542.63], [1.72866108E12, 1310.7199999999993], [1.7286633E12, 1587.2000000000023], [1.72866552E12, 2000.599999999999], [1.72866228E12, 1312.84], [1.7286645E12, 1949.7600000000002], [1.72866654E12, 2494.2799999999997], [1.72866348E12, 1497.6999999999994], [1.7286669E12, 2539.67999999999], [1.72866126E12, 1165.999999999999], [1.72866468E12, 1890.88], [1.72866246E12, 1591.9599999999891], [1.7286657E12, 1898.3999999999996], [1.72866144E12, 1250.0], [1.72866366E12, 1527.7599999999984], [1.72866264E12, 1517.2999999999997], [1.72866708E12, 2372.33], [1.72866486E12, 1960.300000000001], [1.72866588E12, 1965.4399999999987], [1.72866162E12, 1267.0700000000002], [1.72866384E12, 1484.0000000000005], [1.72866624E12, 2467.119999999999], [1.7286606E12, 1199.3000000000004], [1.72866282E12, 1524.9200000000003], [1.72866504E12, 1941.45], [1.72866726E12, 2576.0], [1.7286618E12, 1332.6799999999998], [1.72866402E12, 1474.88], [1.72866606E12, 2086.96]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72866138E12, 1042.5499999999995], [1.72866462E12, 1640.1999999999996], [1.7286636E12, 1275.0], [1.72866582E12, 1608.2000000000007], [1.72866684E12, 1960.7000000000003], [1.72866258E12, 1180.5], [1.7286648E12, 1606.75], [1.7286672E12, 2056.5999999999995], [1.72866156E12, 971.8000000000002], [1.72866378E12, 1163.0], [1.72866276E12, 1170.0], [1.728666E12, 1584.0499999999997], [1.72866054E12, 1011.6999999999994], [1.72866498E12, 1534.5], [1.72866702E12, 1983.0], [1.72866072E12, 965.0999999999991], [1.72866738E12, 2000.8999999999992], [1.72866174E12, 983.0999999999999], [1.72866396E12, 1212.199999999999], [1.72866294E12, 1208.0], [1.72866516E12, 1585.7499999999993], [1.72866618E12, 1289.8], [1.72866192E12, 971.75], [1.7286609E12, 1032.75], [1.72866414E12, 1138.3999999999996], [1.72866312E12, 1202.85], [1.72866756E12, 1935.5], [1.72866534E12, 1552.6500000000003], [1.72866636E12, 2032.9999999999993], [1.7286621E12, 1004.0], [1.72866432E12, 1603.75], [1.7286627E12, 1250.4499999999996], [1.72866492E12, 1598.55], [1.72866168E12, 1039.8500000000008], [1.72866612E12, 1643.6999999999975], [1.72866066E12, 978.5999999999998], [1.7286639E12, 1250.3], [1.72866714E12, 2047.4000000000003], [1.72866288E12, 1118.05], [1.7286651E12, 1655.0], [1.72866186E12, 1039.75], [1.72866408E12, 1187.25], [1.7286663E12, 2032.0499999999997], [1.72866732E12, 1947.7999999999997], [1.72866084E12, 997.3999999999999], [1.72866306E12, 1227.5], [1.72866528E12, 1664.0], [1.72866768E12, 2072.2999999999993], [1.72866204E12, 1081.5], [1.72866426E12, 1129.0], [1.72866324E12, 1222.1], [1.72866648E12, 1968.25], [1.72866102E12, 1018.7999999999997], [1.72866546E12, 1601.0], [1.7286675E12, 2032.0000000000005], [1.72866786E12, 1096.5999999999995], [1.7286612E12, 1046.1], [1.72866222E12, 1014.9499999999979], [1.72866444E12, 1540.4], [1.72866564E12, 1535.7500000000002], [1.72866342E12, 1204.5999999999995], [1.72866666E12, 2039.2999999999997], [1.7286624E12, 1231.9499999999996], [1.728663E12, 1192.4999999999998], [1.72866642E12, 1969.8499999999997], [1.72866078E12, 987.4000000000005], [1.72866522E12, 1558.1999999999998], [1.72866744E12, 1954.5], [1.72866096E12, 979.5999999999997], [1.72866198E12, 1060.0], [1.7286642E12, 1244.7999999999997], [1.72866318E12, 1153.3], [1.7286654E12, 1601.0], [1.72866216E12, 1052.8], [1.7286666E12, 2086.7999999999993], [1.72866114E12, 1051.6999999999996], [1.72866438E12, 1597.1999999999998], [1.72866762E12, 1981.0499999999997], [1.72866336E12, 1227.0], [1.72866558E12, 1603.1999999999998], [1.72866576E12, 1608.1499999999992], [1.72866678E12, 2002.6999999999998], [1.72866234E12, 1071.75], [1.72866456E12, 1549.2999999999997], [1.72866354E12, 1196.0], [1.72866132E12, 999.4000000000001], [1.7286678E12, 1640.2999999999988], [1.72866252E12, 1205.0499999999993], [1.72866594E12, 1520.0], [1.72866474E12, 1595.4999999999984], [1.72866696E12, 2069.5999999999995], [1.72866048E12, 993.55], [1.7286615E12, 1025.5000000000005], [1.72866372E12, 1186.25], [1.72866672E12, 1943.75], [1.72866774E12, 2065.1499999999996], [1.72866108E12, 1036.25], [1.7286633E12, 1201.0], [1.72866552E12, 1590.0], [1.72866228E12, 962.4000000000001], [1.7286645E12, 1595.8], [1.72866654E12, 1989.5999999999995], [1.72866348E12, 1147.7999999999993], [1.7286669E12, 1975.7999999999997], [1.72866126E12, 1000.75], [1.72866468E12, 1571.7], [1.72866246E12, 1176.3], [1.7286657E12, 1510.8000000000002], [1.72866144E12, 953.0], [1.72866366E12, 1141.0], [1.72866264E12, 1212.5], [1.72866708E12, 1992.4499999999996], [1.72866486E12, 1539.0], [1.72866588E12, 1630.8999999999999], [1.72866162E12, 1012.0500000000001], [1.72866384E12, 1174.0], [1.72866624E12, 1943.0], [1.7286606E12, 1010.75], [1.72866282E12, 1158.1999999999994], [1.72866504E12, 1561.5], [1.72866726E12, 2044.0], [1.7286618E12, 998.3499999999998], [1.72866402E12, 1180.6], [1.72866606E12, 1584.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72866138E12, 36.0], [1.72866462E12, 44.0], [1.7286636E12, 36.0], [1.72866582E12, 43.0], [1.72866684E12, 56.0], [1.72866258E12, 33.0], [1.7286648E12, 39.0], [1.7286672E12, 56.0], [1.72866156E12, 36.0], [1.72866378E12, 38.0], [1.72866276E12, 38.0], [1.728666E12, 40.0], [1.72866054E12, 36.0], [1.72866498E12, 46.0], [1.72866702E12, 63.0], [1.72866072E12, 32.0], [1.72866738E12, 58.0], [1.72866174E12, 35.0], [1.72866396E12, 39.0], [1.72866294E12, 29.0], [1.72866516E12, 35.0], [1.72866618E12, 34.0], [1.72866192E12, 36.0], [1.7286609E12, 35.0], [1.72866414E12, 33.0], [1.72866312E12, 39.0], [1.72866756E12, 55.0], [1.72866534E12, 40.0], [1.72866636E12, 57.0], [1.7286621E12, 35.0], [1.72866432E12, 40.0], [1.7286627E12, 41.0], [1.72866492E12, 34.0], [1.72866168E12, 29.0], [1.72866612E12, 37.0], [1.72866066E12, 38.0], [1.7286639E12, 37.0], [1.72866714E12, 55.0], [1.72866288E12, 37.0], [1.7286651E12, 37.0], [1.72866186E12, 36.0], [1.72866408E12, 40.0], [1.7286663E12, 61.0], [1.72866732E12, 59.0], [1.72866084E12, 34.0], [1.72866306E12, 36.0], [1.72866528E12, 41.0], [1.72866768E12, 59.0], [1.72866204E12, 33.0], [1.72866426E12, 37.0], [1.72866324E12, 34.0], [1.72866648E12, 57.0], [1.72866102E12, 32.0], [1.72866546E12, 37.0], [1.7286675E12, 57.0], [1.72866786E12, 42.0], [1.7286612E12, 38.0], [1.72866222E12, 31.0], [1.72866444E12, 35.0], [1.72866564E12, 39.0], [1.72866342E12, 32.0], [1.72866666E12, 61.0], [1.7286624E12, 39.0], [1.728663E12, 39.0], [1.72866642E12, 64.0], [1.72866078E12, 36.0], [1.72866522E12, 43.0], [1.72866744E12, 61.0], [1.72866096E12, 33.0], [1.72866198E12, 38.0], [1.7286642E12, 31.0], [1.72866318E12, 37.0], [1.7286654E12, 44.0], [1.72866216E12, 31.0], [1.7286666E12, 59.0], [1.72866114E12, 34.0], [1.72866438E12, 40.0], [1.72866762E12, 59.0], [1.72866336E12, 31.0], [1.72866558E12, 37.0], [1.72866576E12, 45.0], [1.72866678E12, 59.0], [1.72866234E12, 38.0], [1.72866456E12, 40.0], [1.72866354E12, 33.0], [1.72866132E12, 36.0], [1.7286678E12, 39.0], [1.72866252E12, 35.0], [1.72866594E12, 44.0], [1.72866474E12, 41.0], [1.72866696E12, 63.0], [1.72866048E12, 36.0], [1.7286615E12, 35.0], [1.72866372E12, 32.0], [1.72866672E12, 69.0], [1.72866774E12, 49.0], [1.72866108E12, 33.0], [1.7286633E12, 33.0], [1.72866552E12, 39.0], [1.72866228E12, 34.0], [1.7286645E12, 40.0], [1.72866654E12, 67.0], [1.72866348E12, 35.0], [1.7286669E12, 62.0], [1.72866126E12, 37.0], [1.72866468E12, 37.0], [1.72866246E12, 38.0], [1.7286657E12, 42.0], [1.72866144E12, 31.0], [1.72866366E12, 37.0], [1.72866264E12, 35.0], [1.72866708E12, 61.0], [1.72866486E12, 36.0], [1.72866588E12, 40.0], [1.72866162E12, 37.0], [1.72866384E12, 37.0], [1.72866624E12, 58.0], [1.7286606E12, 34.0], [1.72866282E12, 36.0], [1.72866504E12, 38.0], [1.72866726E12, 59.0], [1.7286618E12, 35.0], [1.72866402E12, 35.0], [1.72866606E12, 33.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72866138E12, 400.5], [1.72866462E12, 571.0], [1.7286636E12, 408.0], [1.72866582E12, 555.0], [1.72866684E12, 778.0], [1.72866258E12, 408.0], [1.7286648E12, 551.0], [1.7286672E12, 704.0], [1.72866156E12, 308.0], [1.72866378E12, 433.0], [1.72866276E12, 411.0], [1.728666E12, 539.5], [1.72866054E12, 278.0], [1.72866498E12, 526.0], [1.72866702E12, 703.5], [1.72866072E12, 301.0], [1.72866738E12, 761.5], [1.72866174E12, 330.5], [1.72866396E12, 419.0], [1.72866294E12, 469.0], [1.72866516E12, 597.0], [1.72866618E12, 423.0], [1.72866192E12, 321.0], [1.7286609E12, 397.5], [1.72866414E12, 449.0], [1.72866312E12, 413.0], [1.72866756E12, 695.0], [1.72866534E12, 490.5], [1.72866636E12, 733.0], [1.7286621E12, 374.0], [1.72866432E12, 409.0], [1.7286627E12, 412.0], [1.72866492E12, 522.5], [1.72866168E12, 374.5], [1.72866612E12, 622.5], [1.72866066E12, 406.0], [1.7286639E12, 422.5], [1.72866714E12, 777.0], [1.72866288E12, 385.0], [1.7286651E12, 588.5], [1.72866186E12, 357.5], [1.72866408E12, 403.0], [1.7286663E12, 681.5], [1.72866732E12, 704.0], [1.72866084E12, 382.0], [1.72866306E12, 384.0], [1.72866528E12, 619.0], [1.72866768E12, 739.0], [1.72866204E12, 392.0], [1.72866426E12, 376.0], [1.72866324E12, 438.0], [1.72866648E12, 659.5], [1.72866102E12, 369.0], [1.72866546E12, 522.0], [1.7286675E12, 728.0], [1.72866786E12, 429.0], [1.7286612E12, 415.0], [1.72866222E12, 284.0], [1.72866444E12, 517.0], [1.72866564E12, 547.0], [1.72866342E12, 434.0], [1.72866666E12, 723.0], [1.7286624E12, 461.5], [1.728663E12, 472.0], [1.72866642E12, 626.5], [1.72866078E12, 357.0], [1.72866522E12, 458.0], [1.72866744E12, 655.0], [1.72866096E12, 361.0], [1.72866198E12, 402.0], [1.7286642E12, 456.0], [1.72866318E12, 372.0], [1.7286654E12, 505.5], [1.72866216E12, 383.0], [1.7286666E12, 688.5], [1.72866114E12, 407.5], [1.72866438E12, 497.5], [1.72866762E12, 671.5], [1.72866336E12, 480.5], [1.72866558E12, 441.0], [1.72866576E12, 588.0], [1.72866678E12, 713.5], [1.72866234E12, 377.0], [1.72866456E12, 546.0], [1.72866354E12, 399.5], [1.72866132E12, 348.0], [1.7286678E12, 467.0], [1.72866252E12, 402.0], [1.72866594E12, 465.0], [1.72866474E12, 566.0], [1.72866696E12, 574.0], [1.72866048E12, 303.5], [1.7286615E12, 324.0], [1.72866372E12, 370.5], [1.72866672E12, 730.0], [1.72866774E12, 765.5], [1.72866108E12, 344.0], [1.7286633E12, 440.0], [1.72866552E12, 598.0], [1.72866228E12, 309.0], [1.7286645E12, 597.0], [1.72866654E12, 777.0], [1.72866348E12, 372.0], [1.7286669E12, 706.0], [1.72866126E12, 360.5], [1.72866468E12, 622.0], [1.72866246E12, 373.0], [1.7286657E12, 498.0], [1.72866144E12, 377.0], [1.72866366E12, 400.5], [1.72866264E12, 434.0], [1.72866708E12, 727.0], [1.72866486E12, 525.5], [1.72866588E12, 523.0], [1.72866162E12, 369.0], [1.72866384E12, 452.0], [1.72866624E12, 605.0], [1.7286606E12, 280.5], [1.72866282E12, 396.0], [1.72866504E12, 533.5], [1.72866726E12, 848.0], [1.7286618E12, 331.0], [1.72866402E12, 429.0], [1.72866606E12, 578.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72866786E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 211.0, "minX": 1.0, "maxY": 942.0, "series": [{"data": [[2.0, 592.0], [33.0, 267.5], [32.0, 254.0], [35.0, 211.0], [34.0, 291.0], [36.0, 232.5], [39.0, 229.0], [38.0, 213.0], [3.0, 533.0], [4.0, 498.0], [5.0, 453.0], [6.0, 556.5], [7.0, 522.0], [8.0, 454.0], [9.0, 440.0], [10.0, 426.5], [11.0, 446.5], [12.0, 476.5], [13.0, 499.0], [14.0, 573.5], [15.0, 557.0], [1.0, 942.0], [16.0, 533.5], [17.0, 539.0], [18.0, 533.0], [19.0, 496.0], [20.0, 462.0], [21.0, 456.0], [22.0, 408.0], [23.0, 363.5], [24.0, 341.5], [25.0, 332.0], [26.0, 312.0], [27.0, 274.0], [28.0, 262.5], [29.0, 270.0], [30.0, 283.5], [31.0, 249.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 39.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 116.0, "minX": 1.0, "maxY": 538.0, "series": [{"data": [[2.0, 383.0], [33.0, 155.5], [32.0, 156.5], [35.0, 116.0], [34.0, 165.5], [36.0, 171.0], [39.0, 143.5], [38.0, 139.0], [3.0, 349.0], [4.0, 343.0], [5.0, 316.0], [6.0, 370.5], [7.0, 354.0], [8.0, 318.0], [9.0, 311.0], [10.0, 303.0], [11.0, 312.0], [12.0, 333.0], [13.0, 352.5], [14.0, 401.0], [15.0, 395.0], [1.0, 538.0], [16.0, 377.0], [17.0, 383.0], [18.0, 381.0], [19.0, 358.0], [20.0, 330.0], [21.0, 330.5], [22.0, 292.0], [23.0, 250.5], [24.0, 231.0], [25.0, 222.0], [26.0, 196.0], [27.0, 175.5], [28.0, 157.0], [29.0, 168.0], [30.0, 175.0], [31.0, 160.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 39.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.9666666666666666, "minX": 1.72866048E12, "maxY": 20.8, "series": [{"data": [[1.72866138E12, 9.3], [1.72866462E12, 18.183333333333334], [1.7286636E12, 16.583333333333332], [1.72866582E12, 19.083333333333332], [1.72866684E12, 19.5], [1.72866258E12, 16.816666666666666], [1.7286648E12, 18.9], [1.7286672E12, 19.716666666666665], [1.72866156E12, 10.366666666666667], [1.72866378E12, 16.983333333333334], [1.72866276E12, 16.983333333333334], [1.728666E12, 18.866666666666667], [1.72866054E12, 5.283333333333333], [1.72866498E12, 19.483333333333334], [1.72866702E12, 20.233333333333334], [1.72866072E12, 9.45], [1.72866738E12, 19.433333333333334], [1.72866174E12, 10.133333333333333], [1.72866396E12, 16.616666666666667], [1.72866294E12, 16.15], [1.72866516E12, 18.6], [1.72866618E12, 15.033333333333333], [1.72866192E12, 10.233333333333333], [1.7286609E12, 9.2], [1.72866414E12, 16.583333333333332], [1.72866312E12, 16.666666666666668], [1.72866756E12, 20.15], [1.72866534E12, 20.0], [1.72866636E12, 19.516666666666666], [1.7286621E12, 9.983333333333333], [1.72866432E12, 14.233333333333333], [1.7286627E12, 16.633333333333333], [1.72866492E12, 19.133333333333333], [1.72866168E12, 9.533333333333333], [1.72866612E12, 18.25], [1.72866066E12, 4.95], [1.7286639E12, 16.266666666666666], [1.72866714E12, 18.916666666666668], [1.72866288E12, 17.633333333333333], [1.7286651E12, 18.266666666666666], [1.72866186E12, 9.733333333333333], [1.72866408E12, 16.9], [1.7286663E12, 19.866666666666667], [1.72866732E12, 19.883333333333333], [1.72866084E12, 9.75], [1.72866306E12, 17.066666666666666], [1.72866528E12, 18.116666666666667], [1.72866768E12, 19.216666666666665], [1.72866204E12, 9.283333333333333], [1.72866426E12, 12.883333333333333], [1.72866324E12, 16.466666666666665], [1.72866648E12, 20.4], [1.72866102E12, 9.85], [1.72866546E12, 19.083333333333332], [1.7286675E12, 19.583333333333332], [1.72866786E12, 1.9666666666666666], [1.7286612E12, 9.283333333333333], [1.72866222E12, 10.5], [1.72866444E12, 19.75], [1.72866564E12, 19.0], [1.72866342E12, 16.5], [1.72866666E12, 19.6], [1.7286624E12, 15.9], [1.728663E12, 16.216666666666665], [1.72866642E12, 20.8], [1.72866078E12, 9.95], [1.72866522E12, 19.95], [1.72866744E12, 20.483333333333334], [1.72866096E12, 9.85], [1.72866198E12, 9.316666666666666], [1.7286642E12, 16.083333333333332], [1.72866318E12, 17.6], [1.7286654E12, 19.4], [1.72866216E12, 9.516666666666667], [1.7286666E12, 19.633333333333333], [1.72866114E12, 9.166666666666666], [1.72866438E12, 19.3], [1.72866762E12, 20.2], [1.72866336E12, 16.2], [1.72866558E12, 19.783333333333335], [1.72866576E12, 18.2], [1.72866678E12, 19.7], [1.72866234E12, 3.3833333333333333], [1.72866456E12, 19.133333333333333], [1.72866354E12, 16.733333333333334], [1.72866132E12, 9.95], [1.7286678E12, 18.733333333333334], [1.72866252E12, 16.833333333333332], [1.72866594E12, 20.116666666666667], [1.72866474E12, 18.883333333333333], [1.72866696E12, 20.516666666666666], [1.72866048E12, 3.5], [1.7286615E12, 10.283333333333333], [1.72866372E12, 17.566666666666666], [1.72866672E12, 19.733333333333334], [1.72866774E12, 18.933333333333334], [1.72866108E12, 9.7], [1.7286633E12, 16.316666666666666], [1.72866552E12, 18.983333333333334], [1.72866228E12, 10.1], [1.7286645E12, 18.383333333333333], [1.72866654E12, 19.45], [1.72866348E12, 17.366666666666667], [1.7286669E12, 19.35], [1.72866126E12, 9.9], [1.72866468E12, 18.416666666666668], [1.72866246E12, 17.266666666666666], [1.7286657E12, 19.916666666666668], [1.72866144E12, 9.983333333333333], [1.72866366E12, 17.3], [1.72866264E12, 16.816666666666666], [1.72866708E12, 19.933333333333334], [1.72866486E12, 19.633333333333333], [1.72866588E12, 19.016666666666666], [1.72866162E12, 9.866666666666667], [1.72866384E12, 16.316666666666666], [1.72866624E12, 19.733333333333334], [1.7286606E12, 5.233333333333333], [1.72866282E12, 17.116666666666667], [1.72866504E12, 19.233333333333334], [1.72866726E12, 18.316666666666666], [1.7286618E12, 10.166666666666666], [1.72866402E12, 16.683333333333334], [1.72866606E12, 18.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72866786E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.0166666666666666, "minX": 1.72866048E12, "maxY": 20.8, "series": [{"data": [[1.72866138E12, 9.3], [1.72866462E12, 18.183333333333334], [1.7286636E12, 16.583333333333332], [1.72866582E12, 19.083333333333332], [1.72866684E12, 19.5], [1.72866258E12, 16.816666666666666], [1.7286648E12, 18.9], [1.7286672E12, 19.716666666666665], [1.72866156E12, 10.366666666666667], [1.72866378E12, 16.983333333333334], [1.72866276E12, 16.983333333333334], [1.728666E12, 18.866666666666667], [1.72866054E12, 5.283333333333333], [1.72866498E12, 19.483333333333334], [1.72866702E12, 20.233333333333334], [1.72866072E12, 9.416666666666666], [1.72866738E12, 19.433333333333334], [1.72866174E12, 10.133333333333333], [1.72866396E12, 16.616666666666667], [1.72866294E12, 16.15], [1.72866516E12, 18.6], [1.72866618E12, 15.183333333333334], [1.72866192E12, 10.233333333333333], [1.7286609E12, 9.2], [1.72866414E12, 16.583333333333332], [1.72866312E12, 16.666666666666668], [1.72866756E12, 20.15], [1.72866534E12, 20.0], [1.72866636E12, 19.516666666666666], [1.7286621E12, 9.983333333333333], [1.72866432E12, 14.066666666666666], [1.7286627E12, 16.633333333333333], [1.72866492E12, 19.133333333333333], [1.72866168E12, 9.533333333333333], [1.72866612E12, 18.266666666666666], [1.72866066E12, 4.95], [1.7286639E12, 16.266666666666666], [1.72866714E12, 18.916666666666668], [1.72866288E12, 17.633333333333333], [1.7286651E12, 18.266666666666666], [1.72866186E12, 9.733333333333333], [1.72866408E12, 16.9], [1.7286663E12, 19.866666666666667], [1.72866732E12, 19.883333333333333], [1.72866084E12, 9.75], [1.72866306E12, 17.066666666666666], [1.72866528E12, 18.116666666666667], [1.72866768E12, 19.216666666666665], [1.72866204E12, 9.283333333333333], [1.72866426E12, 12.983333333333333], [1.72866324E12, 16.466666666666665], [1.72866648E12, 20.4], [1.72866102E12, 9.85], [1.72866546E12, 19.083333333333332], [1.7286675E12, 19.583333333333332], [1.72866786E12, 2.0166666666666666], [1.7286612E12, 9.283333333333333], [1.72866222E12, 10.5], [1.72866444E12, 19.75], [1.72866564E12, 19.0], [1.72866342E12, 16.5], [1.72866666E12, 19.6], [1.7286624E12, 15.8], [1.728663E12, 16.216666666666665], [1.72866642E12, 20.8], [1.72866078E12, 9.95], [1.72866522E12, 19.95], [1.72866744E12, 20.483333333333334], [1.72866096E12, 9.85], [1.72866198E12, 9.316666666666666], [1.7286642E12, 16.083333333333332], [1.72866318E12, 17.6], [1.7286654E12, 19.4], [1.72866216E12, 9.516666666666667], [1.7286666E12, 19.633333333333333], [1.72866114E12, 9.166666666666666], [1.72866438E12, 19.3], [1.72866762E12, 20.2], [1.72866336E12, 16.2], [1.72866558E12, 19.783333333333335], [1.72866576E12, 18.2], [1.72866678E12, 19.7], [1.72866234E12, 3.4], [1.72866456E12, 19.133333333333333], [1.72866354E12, 16.733333333333334], [1.72866132E12, 9.95], [1.7286678E12, 18.95], [1.72866252E12, 16.833333333333332], [1.72866594E12, 20.116666666666667], [1.72866474E12, 18.883333333333333], [1.72866696E12, 20.516666666666666], [1.72866048E12, 3.466666666666667], [1.7286615E12, 10.283333333333333], [1.72866372E12, 17.566666666666666], [1.72866672E12, 19.733333333333334], [1.72866774E12, 18.933333333333334], [1.72866108E12, 9.7], [1.7286633E12, 16.316666666666666], [1.72866552E12, 18.983333333333334], [1.72866228E12, 10.116666666666667], [1.7286645E12, 18.383333333333333], [1.72866654E12, 19.45], [1.72866348E12, 17.366666666666667], [1.7286669E12, 19.35], [1.72866126E12, 9.9], [1.72866468E12, 18.416666666666668], [1.72866246E12, 17.266666666666666], [1.7286657E12, 19.916666666666668], [1.72866144E12, 9.983333333333333], [1.72866366E12, 17.3], [1.72866264E12, 16.816666666666666], [1.72866708E12, 19.933333333333334], [1.72866486E12, 19.633333333333333], [1.72866588E12, 19.016666666666666], [1.72866162E12, 9.866666666666667], [1.72866384E12, 16.316666666666666], [1.72866624E12, 19.5], [1.7286606E12, 5.233333333333333], [1.72866282E12, 17.116666666666667], [1.72866504E12, 19.233333333333334], [1.72866726E12, 18.316666666666666], [1.7286618E12, 10.166666666666666], [1.72866402E12, 16.683333333333334], [1.72866606E12, 18.75]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72866786E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.0166666666666666, "minX": 1.72866048E12, "maxY": 20.8, "series": [{"data": [[1.72866138E12, 9.3], [1.72866462E12, 18.183333333333334], [1.7286636E12, 16.583333333333332], [1.72866582E12, 19.083333333333332], [1.72866684E12, 19.5], [1.72866258E12, 16.816666666666666], [1.7286648E12, 18.9], [1.7286672E12, 19.716666666666665], [1.72866156E12, 10.366666666666667], [1.72866378E12, 16.983333333333334], [1.72866276E12, 16.983333333333334], [1.728666E12, 18.866666666666667], [1.72866054E12, 5.283333333333333], [1.72866498E12, 19.483333333333334], [1.72866702E12, 20.233333333333334], [1.72866072E12, 9.416666666666666], [1.72866738E12, 19.433333333333334], [1.72866174E12, 10.133333333333333], [1.72866396E12, 16.616666666666667], [1.72866294E12, 16.15], [1.72866516E12, 18.6], [1.72866618E12, 15.183333333333334], [1.72866192E12, 10.233333333333333], [1.7286609E12, 9.2], [1.72866414E12, 16.583333333333332], [1.72866312E12, 16.666666666666668], [1.72866756E12, 20.15], [1.72866534E12, 20.0], [1.72866636E12, 19.516666666666666], [1.7286621E12, 9.983333333333333], [1.72866432E12, 14.066666666666666], [1.7286627E12, 16.633333333333333], [1.72866492E12, 19.133333333333333], [1.72866168E12, 9.533333333333333], [1.72866612E12, 18.266666666666666], [1.72866066E12, 4.95], [1.7286639E12, 16.266666666666666], [1.72866714E12, 18.916666666666668], [1.72866288E12, 17.633333333333333], [1.7286651E12, 18.266666666666666], [1.72866186E12, 9.733333333333333], [1.72866408E12, 16.9], [1.7286663E12, 19.866666666666667], [1.72866732E12, 19.883333333333333], [1.72866084E12, 9.75], [1.72866306E12, 17.066666666666666], [1.72866528E12, 18.116666666666667], [1.72866768E12, 19.216666666666665], [1.72866204E12, 9.283333333333333], [1.72866426E12, 12.983333333333333], [1.72866324E12, 16.466666666666665], [1.72866648E12, 20.4], [1.72866102E12, 9.85], [1.72866546E12, 19.083333333333332], [1.7286675E12, 19.583333333333332], [1.72866786E12, 2.0166666666666666], [1.7286612E12, 9.283333333333333], [1.72866222E12, 10.5], [1.72866444E12, 19.75], [1.72866564E12, 19.0], [1.72866342E12, 16.5], [1.72866666E12, 19.6], [1.7286624E12, 15.8], [1.728663E12, 16.216666666666665], [1.72866642E12, 20.8], [1.72866078E12, 9.95], [1.72866522E12, 19.95], [1.72866744E12, 20.483333333333334], [1.72866096E12, 9.85], [1.72866198E12, 9.316666666666666], [1.7286642E12, 16.083333333333332], [1.72866318E12, 17.6], [1.7286654E12, 19.4], [1.72866216E12, 9.516666666666667], [1.7286666E12, 19.633333333333333], [1.72866114E12, 9.166666666666666], [1.72866438E12, 19.3], [1.72866762E12, 20.2], [1.72866336E12, 16.2], [1.72866558E12, 19.783333333333335], [1.72866576E12, 18.2], [1.72866678E12, 19.7], [1.72866234E12, 3.4], [1.72866456E12, 19.133333333333333], [1.72866354E12, 16.733333333333334], [1.72866132E12, 9.95], [1.7286678E12, 18.95], [1.72866252E12, 16.833333333333332], [1.72866594E12, 20.116666666666667], [1.72866474E12, 18.883333333333333], [1.72866696E12, 20.516666666666666], [1.72866048E12, 3.466666666666667], [1.7286615E12, 10.283333333333333], [1.72866372E12, 17.566666666666666], [1.72866672E12, 19.733333333333334], [1.72866774E12, 18.933333333333334], [1.72866108E12, 9.7], [1.7286633E12, 16.316666666666666], [1.72866552E12, 18.983333333333334], [1.72866228E12, 10.116666666666667], [1.7286645E12, 18.383333333333333], [1.72866654E12, 19.45], [1.72866348E12, 17.366666666666667], [1.7286669E12, 19.35], [1.72866126E12, 9.9], [1.72866468E12, 18.416666666666668], [1.72866246E12, 17.266666666666666], [1.7286657E12, 19.916666666666668], [1.72866144E12, 9.983333333333333], [1.72866366E12, 17.3], [1.72866264E12, 16.816666666666666], [1.72866708E12, 19.933333333333334], [1.72866486E12, 19.633333333333333], [1.72866588E12, 19.016666666666666], [1.72866162E12, 9.866666666666667], [1.72866384E12, 16.316666666666666], [1.72866624E12, 19.5], [1.7286606E12, 5.233333333333333], [1.72866282E12, 17.116666666666667], [1.72866504E12, 19.233333333333334], [1.72866726E12, 18.316666666666666], [1.7286618E12, 10.166666666666666], [1.72866402E12, 16.683333333333334], [1.72866606E12, 18.75]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72866786E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.0166666666666666, "minX": 1.72866048E12, "maxY": 20.8, "series": [{"data": [[1.72866138E12, 9.3], [1.72866462E12, 18.183333333333334], [1.7286636E12, 16.583333333333332], [1.72866582E12, 19.083333333333332], [1.72866684E12, 19.5], [1.72866258E12, 16.816666666666666], [1.7286648E12, 18.9], [1.7286672E12, 19.716666666666665], [1.72866156E12, 10.366666666666667], [1.72866378E12, 16.983333333333334], [1.72866276E12, 16.983333333333334], [1.728666E12, 18.866666666666667], [1.72866054E12, 5.283333333333333], [1.72866498E12, 19.483333333333334], [1.72866702E12, 20.233333333333334], [1.72866072E12, 9.416666666666666], [1.72866738E12, 19.433333333333334], [1.72866174E12, 10.133333333333333], [1.72866396E12, 16.616666666666667], [1.72866294E12, 16.15], [1.72866516E12, 18.6], [1.72866618E12, 15.183333333333334], [1.72866192E12, 10.233333333333333], [1.7286609E12, 9.2], [1.72866414E12, 16.583333333333332], [1.72866312E12, 16.666666666666668], [1.72866756E12, 20.15], [1.72866534E12, 20.0], [1.72866636E12, 19.516666666666666], [1.7286621E12, 9.983333333333333], [1.72866432E12, 14.066666666666666], [1.7286627E12, 16.633333333333333], [1.72866492E12, 19.133333333333333], [1.72866168E12, 9.533333333333333], [1.72866612E12, 18.266666666666666], [1.72866066E12, 4.95], [1.7286639E12, 16.266666666666666], [1.72866714E12, 18.916666666666668], [1.72866288E12, 17.633333333333333], [1.7286651E12, 18.266666666666666], [1.72866186E12, 9.733333333333333], [1.72866408E12, 16.9], [1.7286663E12, 19.866666666666667], [1.72866732E12, 19.883333333333333], [1.72866084E12, 9.75], [1.72866306E12, 17.066666666666666], [1.72866528E12, 18.116666666666667], [1.72866768E12, 19.216666666666665], [1.72866204E12, 9.283333333333333], [1.72866426E12, 12.983333333333333], [1.72866324E12, 16.466666666666665], [1.72866648E12, 20.4], [1.72866102E12, 9.85], [1.72866546E12, 19.083333333333332], [1.7286675E12, 19.583333333333332], [1.72866786E12, 2.0166666666666666], [1.7286612E12, 9.283333333333333], [1.72866222E12, 10.5], [1.72866444E12, 19.75], [1.72866564E12, 19.0], [1.72866342E12, 16.5], [1.72866666E12, 19.6], [1.7286624E12, 15.8], [1.728663E12, 16.216666666666665], [1.72866642E12, 20.8], [1.72866078E12, 9.95], [1.72866522E12, 19.95], [1.72866744E12, 20.483333333333334], [1.72866096E12, 9.85], [1.72866198E12, 9.316666666666666], [1.7286642E12, 16.083333333333332], [1.72866318E12, 17.6], [1.7286654E12, 19.4], [1.72866216E12, 9.516666666666667], [1.7286666E12, 19.633333333333333], [1.72866114E12, 9.166666666666666], [1.72866438E12, 19.3], [1.72866762E12, 20.2], [1.72866336E12, 16.2], [1.72866558E12, 19.783333333333335], [1.72866576E12, 18.2], [1.72866678E12, 19.7], [1.72866234E12, 3.4], [1.72866456E12, 19.133333333333333], [1.72866354E12, 16.733333333333334], [1.72866132E12, 9.95], [1.7286678E12, 18.95], [1.72866252E12, 16.833333333333332], [1.72866594E12, 20.116666666666667], [1.72866474E12, 18.883333333333333], [1.72866696E12, 20.516666666666666], [1.72866048E12, 3.466666666666667], [1.7286615E12, 10.283333333333333], [1.72866372E12, 17.566666666666666], [1.72866672E12, 19.733333333333334], [1.72866774E12, 18.933333333333334], [1.72866108E12, 9.7], [1.7286633E12, 16.316666666666666], [1.72866552E12, 18.983333333333334], [1.72866228E12, 10.116666666666667], [1.7286645E12, 18.383333333333333], [1.72866654E12, 19.45], [1.72866348E12, 17.366666666666667], [1.7286669E12, 19.35], [1.72866126E12, 9.9], [1.72866468E12, 18.416666666666668], [1.72866246E12, 17.266666666666666], [1.7286657E12, 19.916666666666668], [1.72866144E12, 9.983333333333333], [1.72866366E12, 17.3], [1.72866264E12, 16.816666666666666], [1.72866708E12, 19.933333333333334], [1.72866486E12, 19.633333333333333], [1.72866588E12, 19.016666666666666], [1.72866162E12, 9.866666666666667], [1.72866384E12, 16.316666666666666], [1.72866624E12, 19.5], [1.7286606E12, 5.233333333333333], [1.72866282E12, 17.116666666666667], [1.72866504E12, 19.233333333333334], [1.72866726E12, 18.316666666666666], [1.7286618E12, 10.166666666666666], [1.72866402E12, 16.683333333333334], [1.72866606E12, 18.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72866786E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

