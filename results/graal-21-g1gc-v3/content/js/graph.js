/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 21.0, "minX": 0.0, "maxY": 3692.0, "series": [{"data": [[0.0, 21.0], [0.1, 30.0], [0.2, 33.0], [0.3, 35.0], [0.4, 36.0], [0.5, 37.0], [0.6, 38.0], [0.7, 39.0], [0.8, 40.0], [0.9, 41.0], [1.0, 42.0], [1.1, 42.0], [1.2, 43.0], [1.3, 44.0], [1.4, 44.0], [1.5, 45.0], [1.6, 46.0], [1.7, 46.0], [1.8, 47.0], [1.9, 47.0], [2.0, 48.0], [2.1, 48.0], [2.2, 49.0], [2.3, 49.0], [2.4, 50.0], [2.5, 50.0], [2.6, 50.0], [2.7, 51.0], [2.8, 51.0], [2.9, 52.0], [3.0, 52.0], [3.1, 53.0], [3.2, 53.0], [3.3, 53.0], [3.4, 54.0], [3.5, 54.0], [3.6, 55.0], [3.7, 55.0], [3.8, 55.0], [3.9, 56.0], [4.0, 56.0], [4.1, 56.0], [4.2, 57.0], [4.3, 57.0], [4.4, 57.0], [4.5, 58.0], [4.6, 58.0], [4.7, 58.0], [4.8, 59.0], [4.9, 59.0], [5.0, 60.0], [5.1, 60.0], [5.2, 60.0], [5.3, 61.0], [5.4, 61.0], [5.5, 61.0], [5.6, 61.0], [5.7, 62.0], [5.8, 62.0], [5.9, 63.0], [6.0, 63.0], [6.1, 63.0], [6.2, 63.0], [6.3, 64.0], [6.4, 64.0], [6.5, 64.0], [6.6, 65.0], [6.7, 65.0], [6.8, 65.0], [6.9, 66.0], [7.0, 66.0], [7.1, 66.0], [7.2, 67.0], [7.3, 67.0], [7.4, 67.0], [7.5, 68.0], [7.6, 68.0], [7.7, 68.0], [7.8, 68.0], [7.9, 69.0], [8.0, 69.0], [8.1, 69.0], [8.2, 70.0], [8.3, 70.0], [8.4, 70.0], [8.5, 71.0], [8.6, 71.0], [8.7, 71.0], [8.8, 71.0], [8.9, 72.0], [9.0, 72.0], [9.1, 72.0], [9.2, 73.0], [9.3, 73.0], [9.4, 73.0], [9.5, 73.0], [9.6, 74.0], [9.7, 74.0], [9.8, 74.0], [9.9, 75.0], [10.0, 75.0], [10.1, 75.0], [10.2, 75.0], [10.3, 76.0], [10.4, 76.0], [10.5, 76.0], [10.6, 76.0], [10.7, 77.0], [10.8, 77.0], [10.9, 77.0], [11.0, 78.0], [11.1, 78.0], [11.2, 78.0], [11.3, 78.0], [11.4, 79.0], [11.5, 79.0], [11.6, 79.0], [11.7, 79.0], [11.8, 80.0], [11.9, 80.0], [12.0, 80.0], [12.1, 81.0], [12.2, 81.0], [12.3, 81.0], [12.4, 82.0], [12.5, 82.0], [12.6, 82.0], [12.7, 82.0], [12.8, 83.0], [12.9, 83.0], [13.0, 83.0], [13.1, 83.0], [13.2, 84.0], [13.3, 84.0], [13.4, 84.0], [13.5, 85.0], [13.6, 85.0], [13.7, 85.0], [13.8, 85.0], [13.9, 86.0], [14.0, 86.0], [14.1, 86.0], [14.2, 87.0], [14.3, 87.0], [14.4, 87.0], [14.5, 87.0], [14.6, 88.0], [14.7, 88.0], [14.8, 88.0], [14.9, 89.0], [15.0, 89.0], [15.1, 89.0], [15.2, 89.0], [15.3, 90.0], [15.4, 90.0], [15.5, 90.0], [15.6, 91.0], [15.7, 91.0], [15.8, 91.0], [15.9, 91.0], [16.0, 92.0], [16.1, 92.0], [16.2, 92.0], [16.3, 93.0], [16.4, 93.0], [16.5, 93.0], [16.6, 94.0], [16.7, 94.0], [16.8, 94.0], [16.9, 94.0], [17.0, 95.0], [17.1, 95.0], [17.2, 95.0], [17.3, 96.0], [17.4, 96.0], [17.5, 96.0], [17.6, 97.0], [17.7, 97.0], [17.8, 97.0], [17.9, 98.0], [18.0, 98.0], [18.1, 98.0], [18.2, 99.0], [18.3, 99.0], [18.4, 99.0], [18.5, 100.0], [18.6, 100.0], [18.7, 100.0], [18.8, 101.0], [18.9, 101.0], [19.0, 101.0], [19.1, 101.0], [19.2, 102.0], [19.3, 102.0], [19.4, 102.0], [19.5, 103.0], [19.6, 103.0], [19.7, 103.0], [19.8, 104.0], [19.9, 104.0], [20.0, 104.0], [20.1, 105.0], [20.2, 105.0], [20.3, 105.0], [20.4, 106.0], [20.5, 106.0], [20.6, 106.0], [20.7, 107.0], [20.8, 107.0], [20.9, 107.0], [21.0, 108.0], [21.1, 108.0], [21.2, 109.0], [21.3, 109.0], [21.4, 109.0], [21.5, 110.0], [21.6, 110.0], [21.7, 110.0], [21.8, 111.0], [21.9, 111.0], [22.0, 111.0], [22.1, 112.0], [22.2, 112.0], [22.3, 113.0], [22.4, 113.0], [22.5, 113.0], [22.6, 114.0], [22.7, 114.0], [22.8, 114.0], [22.9, 115.0], [23.0, 115.0], [23.1, 116.0], [23.2, 116.0], [23.3, 116.0], [23.4, 117.0], [23.5, 117.0], [23.6, 118.0], [23.7, 118.0], [23.8, 118.0], [23.9, 119.0], [24.0, 119.0], [24.1, 120.0], [24.2, 120.0], [24.3, 120.0], [24.4, 121.0], [24.5, 121.0], [24.6, 121.0], [24.7, 122.0], [24.8, 122.0], [24.9, 123.0], [25.0, 123.0], [25.1, 124.0], [25.2, 124.0], [25.3, 124.0], [25.4, 125.0], [25.5, 125.0], [25.6, 126.0], [25.7, 126.0], [25.8, 126.0], [25.9, 127.0], [26.0, 127.0], [26.1, 128.0], [26.2, 128.0], [26.3, 129.0], [26.4, 129.0], [26.5, 130.0], [26.6, 130.0], [26.7, 130.0], [26.8, 131.0], [26.9, 131.0], [27.0, 132.0], [27.1, 132.0], [27.2, 133.0], [27.3, 133.0], [27.4, 134.0], [27.5, 134.0], [27.6, 134.0], [27.7, 135.0], [27.8, 135.0], [27.9, 136.0], [28.0, 136.0], [28.1, 137.0], [28.2, 137.0], [28.3, 138.0], [28.4, 138.0], [28.5, 139.0], [28.6, 139.0], [28.7, 140.0], [28.8, 140.0], [28.9, 141.0], [29.0, 142.0], [29.1, 142.0], [29.2, 143.0], [29.3, 143.0], [29.4, 144.0], [29.5, 144.0], [29.6, 145.0], [29.7, 145.0], [29.8, 146.0], [29.9, 146.0], [30.0, 147.0], [30.1, 148.0], [30.2, 148.0], [30.3, 149.0], [30.4, 149.0], [30.5, 150.0], [30.6, 150.0], [30.7, 151.0], [30.8, 151.0], [30.9, 152.0], [31.0, 153.0], [31.1, 153.0], [31.2, 154.0], [31.3, 154.0], [31.4, 155.0], [31.5, 156.0], [31.6, 156.0], [31.7, 157.0], [31.8, 157.0], [31.9, 158.0], [32.0, 159.0], [32.1, 159.0], [32.2, 160.0], [32.3, 160.0], [32.4, 161.0], [32.5, 162.0], [32.6, 162.0], [32.7, 163.0], [32.8, 164.0], [32.9, 164.0], [33.0, 165.0], [33.1, 166.0], [33.2, 167.0], [33.3, 167.0], [33.4, 168.0], [33.5, 169.0], [33.6, 169.0], [33.7, 170.0], [33.8, 171.0], [33.9, 172.0], [34.0, 172.0], [34.1, 173.0], [34.2, 174.0], [34.3, 175.0], [34.4, 175.0], [34.5, 176.0], [34.6, 177.0], [34.7, 178.0], [34.8, 179.0], [34.9, 179.0], [35.0, 180.0], [35.1, 181.0], [35.2, 182.0], [35.3, 183.0], [35.4, 183.0], [35.5, 184.0], [35.6, 185.0], [35.7, 186.0], [35.8, 187.0], [35.9, 187.0], [36.0, 188.0], [36.1, 189.0], [36.2, 190.0], [36.3, 191.0], [36.4, 192.0], [36.5, 193.0], [36.6, 194.0], [36.7, 195.0], [36.8, 196.0], [36.9, 196.0], [37.0, 197.0], [37.1, 198.0], [37.2, 199.0], [37.3, 200.0], [37.4, 201.0], [37.5, 202.0], [37.6, 203.0], [37.7, 205.0], [37.8, 206.0], [37.9, 207.0], [38.0, 208.0], [38.1, 209.0], [38.2, 210.0], [38.3, 211.0], [38.4, 212.0], [38.5, 213.0], [38.6, 214.0], [38.7, 215.0], [38.8, 217.0], [38.9, 218.0], [39.0, 219.0], [39.1, 220.0], [39.2, 221.0], [39.3, 222.0], [39.4, 224.0], [39.5, 225.0], [39.6, 226.0], [39.7, 228.0], [39.8, 229.0], [39.9, 230.0], [40.0, 231.0], [40.1, 232.0], [40.2, 234.0], [40.3, 235.0], [40.4, 236.0], [40.5, 237.0], [40.6, 239.0], [40.7, 240.0], [40.8, 241.0], [40.9, 243.0], [41.0, 244.0], [41.1, 246.0], [41.2, 247.0], [41.3, 248.0], [41.4, 250.0], [41.5, 252.0], [41.6, 253.0], [41.7, 255.0], [41.8, 256.0], [41.9, 258.0], [42.0, 260.0], [42.1, 261.0], [42.2, 263.0], [42.3, 264.0], [42.4, 266.0], [42.5, 268.0], [42.6, 270.0], [42.7, 272.0], [42.8, 274.0], [42.9, 276.0], [43.0, 278.0], [43.1, 279.0], [43.2, 281.0], [43.3, 283.0], [43.4, 285.0], [43.5, 287.0], [43.6, 289.0], [43.7, 291.0], [43.8, 293.0], [43.9, 295.0], [44.0, 297.0], [44.1, 299.0], [44.2, 301.0], [44.3, 303.0], [44.4, 305.0], [44.5, 307.0], [44.6, 309.0], [44.7, 311.0], [44.8, 313.0], [44.9, 316.0], [45.0, 318.0], [45.1, 320.0], [45.2, 322.0], [45.3, 325.0], [45.4, 327.0], [45.5, 329.0], [45.6, 331.0], [45.7, 333.0], [45.8, 335.0], [45.9, 338.0], [46.0, 340.0], [46.1, 342.0], [46.2, 345.0], [46.3, 347.0], [46.4, 350.0], [46.5, 353.0], [46.6, 355.0], [46.7, 357.0], [46.8, 360.0], [46.9, 363.0], [47.0, 365.0], [47.1, 368.0], [47.2, 370.0], [47.3, 372.0], [47.4, 375.0], [47.5, 377.0], [47.6, 380.0], [47.7, 382.0], [47.8, 385.0], [47.9, 387.0], [48.0, 390.0], [48.1, 392.0], [48.2, 395.0], [48.3, 397.0], [48.4, 399.0], [48.5, 402.0], [48.6, 404.0], [48.7, 406.0], [48.8, 409.0], [48.9, 411.0], [49.0, 413.0], [49.1, 415.0], [49.2, 418.0], [49.3, 420.0], [49.4, 423.0], [49.5, 425.0], [49.6, 427.0], [49.7, 429.0], [49.8, 431.0], [49.9, 433.0], [50.0, 435.0], [50.1, 438.0], [50.2, 440.0], [50.3, 442.0], [50.4, 444.0], [50.5, 446.0], [50.6, 448.0], [50.7, 450.0], [50.8, 452.0], [50.9, 454.0], [51.0, 456.0], [51.1, 459.0], [51.2, 460.0], [51.3, 462.0], [51.4, 464.0], [51.5, 466.0], [51.6, 469.0], [51.7, 471.0], [51.8, 473.0], [51.9, 475.0], [52.0, 477.0], [52.1, 479.0], [52.2, 481.0], [52.3, 483.0], [52.4, 485.0], [52.5, 487.0], [52.6, 489.0], [52.7, 491.0], [52.8, 493.0], [52.9, 495.0], [53.0, 497.0], [53.1, 499.0], [53.2, 501.0], [53.3, 503.0], [53.4, 505.0], [53.5, 507.0], [53.6, 509.0], [53.7, 511.0], [53.8, 513.0], [53.9, 515.0], [54.0, 516.0], [54.1, 519.0], [54.2, 521.0], [54.3, 522.0], [54.4, 524.0], [54.5, 526.0], [54.6, 528.0], [54.7, 530.0], [54.8, 532.0], [54.9, 534.0], [55.0, 536.0], [55.1, 538.0], [55.2, 540.0], [55.3, 542.0], [55.4, 544.0], [55.5, 546.0], [55.6, 548.0], [55.7, 549.0], [55.8, 551.0], [55.9, 552.0], [56.0, 554.0], [56.1, 556.0], [56.2, 558.0], [56.3, 560.0], [56.4, 562.0], [56.5, 563.0], [56.6, 565.0], [56.7, 567.0], [56.8, 569.0], [56.9, 571.0], [57.0, 573.0], [57.1, 575.0], [57.2, 576.0], [57.3, 578.0], [57.4, 579.0], [57.5, 581.0], [57.6, 583.0], [57.7, 585.0], [57.8, 587.0], [57.9, 589.0], [58.0, 590.0], [58.1, 592.0], [58.2, 594.0], [58.3, 595.0], [58.4, 597.0], [58.5, 599.0], [58.6, 601.0], [58.7, 602.0], [58.8, 604.0], [58.9, 606.0], [59.0, 608.0], [59.1, 610.0], [59.2, 612.0], [59.3, 614.0], [59.4, 615.0], [59.5, 617.0], [59.6, 619.0], [59.7, 621.0], [59.8, 622.0], [59.9, 624.0], [60.0, 626.0], [60.1, 627.0], [60.2, 629.0], [60.3, 631.0], [60.4, 633.0], [60.5, 635.0], [60.6, 637.0], [60.7, 639.0], [60.8, 640.0], [60.9, 642.0], [61.0, 643.0], [61.1, 645.0], [61.2, 646.0], [61.3, 648.0], [61.4, 650.0], [61.5, 651.0], [61.6, 653.0], [61.7, 655.0], [61.8, 656.0], [61.9, 658.0], [62.0, 660.0], [62.1, 662.0], [62.2, 664.0], [62.3, 666.0], [62.4, 668.0], [62.5, 669.0], [62.6, 671.0], [62.7, 673.0], [62.8, 674.0], [62.9, 676.0], [63.0, 678.0], [63.1, 679.0], [63.2, 681.0], [63.3, 683.0], [63.4, 685.0], [63.5, 687.0], [63.6, 688.0], [63.7, 690.0], [63.8, 692.0], [63.9, 693.0], [64.0, 695.0], [64.1, 697.0], [64.2, 699.0], [64.3, 701.0], [64.4, 702.0], [64.5, 704.0], [64.6, 706.0], [64.7, 707.0], [64.8, 709.0], [64.9, 711.0], [65.0, 713.0], [65.1, 715.0], [65.2, 717.0], [65.3, 719.0], [65.4, 720.0], [65.5, 722.0], [65.6, 724.0], [65.7, 726.0], [65.8, 728.0], [65.9, 730.0], [66.0, 732.0], [66.1, 733.0], [66.2, 735.0], [66.3, 737.0], [66.4, 739.0], [66.5, 741.0], [66.6, 743.0], [66.7, 744.0], [66.8, 746.0], [66.9, 748.0], [67.0, 749.0], [67.1, 751.0], [67.2, 753.0], [67.3, 755.0], [67.4, 757.0], [67.5, 758.0], [67.6, 760.0], [67.7, 762.0], [67.8, 763.0], [67.9, 765.0], [68.0, 766.0], [68.1, 768.0], [68.2, 769.0], [68.3, 771.0], [68.4, 773.0], [68.5, 775.0], [68.6, 776.0], [68.7, 778.0], [68.8, 780.0], [68.9, 782.0], [69.0, 783.0], [69.1, 785.0], [69.2, 787.0], [69.3, 788.0], [69.4, 790.0], [69.5, 792.0], [69.6, 794.0], [69.7, 795.0], [69.8, 798.0], [69.9, 799.0], [70.0, 801.0], [70.1, 803.0], [70.2, 804.0], [70.3, 806.0], [70.4, 808.0], [70.5, 810.0], [70.6, 812.0], [70.7, 814.0], [70.8, 815.0], [70.9, 817.0], [71.0, 819.0], [71.1, 821.0], [71.2, 823.0], [71.3, 825.0], [71.4, 826.0], [71.5, 828.0], [71.6, 830.0], [71.7, 832.0], [71.8, 834.0], [71.9, 836.0], [72.0, 838.0], [72.1, 840.0], [72.2, 842.0], [72.3, 844.0], [72.4, 845.0], [72.5, 847.0], [72.6, 849.0], [72.7, 851.0], [72.8, 853.0], [72.9, 855.0], [73.0, 857.0], [73.1, 858.0], [73.2, 860.0], [73.3, 862.0], [73.4, 864.0], [73.5, 866.0], [73.6, 868.0], [73.7, 870.0], [73.8, 872.0], [73.9, 873.0], [74.0, 875.0], [74.1, 877.0], [74.2, 879.0], [74.3, 881.0], [74.4, 883.0], [74.5, 885.0], [74.6, 887.0], [74.7, 889.0], [74.8, 891.0], [74.9, 893.0], [75.0, 895.0], [75.1, 897.0], [75.2, 900.0], [75.3, 901.0], [75.4, 903.0], [75.5, 905.0], [75.6, 907.0], [75.7, 909.0], [75.8, 911.0], [75.9, 913.0], [76.0, 915.0], [76.1, 917.0], [76.2, 920.0], [76.3, 921.0], [76.4, 924.0], [76.5, 926.0], [76.6, 928.0], [76.7, 930.0], [76.8, 932.0], [76.9, 934.0], [77.0, 936.0], [77.1, 938.0], [77.2, 939.0], [77.3, 942.0], [77.4, 944.0], [77.5, 946.0], [77.6, 948.0], [77.7, 950.0], [77.8, 953.0], [77.9, 955.0], [78.0, 956.0], [78.1, 959.0], [78.2, 961.0], [78.3, 963.0], [78.4, 965.0], [78.5, 968.0], [78.6, 970.0], [78.7, 972.0], [78.8, 974.0], [78.9, 976.0], [79.0, 978.0], [79.1, 980.0], [79.2, 983.0], [79.3, 985.0], [79.4, 987.0], [79.5, 989.0], [79.6, 991.0], [79.7, 994.0], [79.8, 996.0], [79.9, 998.0], [80.0, 1000.0], [80.1, 1002.0], [80.2, 1005.0], [80.3, 1007.0], [80.4, 1009.0], [80.5, 1011.0], [80.6, 1014.0], [80.7, 1016.0], [80.8, 1019.0], [80.9, 1021.0], [81.0, 1023.0], [81.1, 1026.0], [81.2, 1028.0], [81.3, 1031.0], [81.4, 1034.0], [81.5, 1036.0], [81.6, 1039.0], [81.7, 1041.0], [81.8, 1044.0], [81.9, 1047.0], [82.0, 1049.0], [82.1, 1052.0], [82.2, 1055.0], [82.3, 1057.0], [82.4, 1060.0], [82.5, 1062.0], [82.6, 1065.0], [82.7, 1068.0], [82.8, 1070.0], [82.9, 1073.0], [83.0, 1076.0], [83.1, 1078.0], [83.2, 1081.0], [83.3, 1084.0], [83.4, 1087.0], [83.5, 1090.0], [83.6, 1092.0], [83.7, 1095.0], [83.8, 1098.0], [83.9, 1100.0], [84.0, 1103.0], [84.1, 1106.0], [84.2, 1109.0], [84.3, 1111.0], [84.4, 1114.0], [84.5, 1117.0], [84.6, 1120.0], [84.7, 1123.0], [84.8, 1125.0], [84.9, 1128.0], [85.0, 1131.0], [85.1, 1133.0], [85.2, 1137.0], [85.3, 1140.0], [85.4, 1143.0], [85.5, 1146.0], [85.6, 1149.0], [85.7, 1152.0], [85.8, 1155.0], [85.9, 1158.0], [86.0, 1161.0], [86.1, 1164.0], [86.2, 1167.0], [86.3, 1170.0], [86.4, 1173.0], [86.5, 1176.0], [86.6, 1179.0], [86.7, 1182.0], [86.8, 1185.0], [86.9, 1189.0], [87.0, 1191.0], [87.1, 1195.0], [87.2, 1198.0], [87.3, 1202.0], [87.4, 1205.0], [87.5, 1208.0], [87.6, 1212.0], [87.7, 1215.0], [87.8, 1219.0], [87.9, 1222.0], [88.0, 1225.0], [88.1, 1229.0], [88.2, 1232.0], [88.3, 1235.0], [88.4, 1239.0], [88.5, 1242.0], [88.6, 1246.0], [88.7, 1250.0], [88.8, 1253.0], [88.9, 1256.0], [89.0, 1260.0], [89.1, 1264.0], [89.2, 1268.0], [89.3, 1271.0], [89.4, 1274.0], [89.5, 1279.0], [89.6, 1282.0], [89.7, 1286.0], [89.8, 1290.0], [89.9, 1293.0], [90.0, 1297.0], [90.1, 1301.0], [90.2, 1305.0], [90.3, 1309.0], [90.4, 1314.0], [90.5, 1318.0], [90.6, 1323.0], [90.7, 1326.0], [90.8, 1331.0], [90.9, 1335.0], [91.0, 1339.0], [91.1, 1344.0], [91.2, 1348.0], [91.3, 1352.0], [91.4, 1357.0], [91.5, 1361.0], [91.6, 1366.0], [91.7, 1371.0], [91.8, 1376.0], [91.9, 1380.0], [92.0, 1386.0], [92.1, 1391.0], [92.2, 1397.0], [92.3, 1402.0], [92.4, 1408.0], [92.5, 1413.0], [92.6, 1418.0], [92.7, 1424.0], [92.8, 1429.0], [92.9, 1435.0], [93.0, 1441.0], [93.1, 1446.0], [93.2, 1452.0], [93.3, 1456.0], [93.4, 1462.0], [93.5, 1468.0], [93.6, 1475.0], [93.7, 1479.0], [93.8, 1485.0], [93.9, 1491.0], [94.0, 1498.0], [94.1, 1504.0], [94.2, 1512.0], [94.3, 1519.0], [94.4, 1526.0], [94.5, 1532.0], [94.6, 1539.0], [94.7, 1546.0], [94.8, 1553.0], [94.9, 1561.0], [95.0, 1569.0], [95.1, 1577.0], [95.2, 1585.0], [95.3, 1592.0], [95.4, 1599.0], [95.5, 1607.0], [95.6, 1615.0], [95.7, 1622.0], [95.8, 1631.0], [95.9, 1639.0], [96.0, 1647.0], [96.1, 1657.0], [96.2, 1666.0], [96.3, 1675.0], [96.4, 1684.0], [96.5, 1695.0], [96.6, 1706.0], [96.7, 1717.0], [96.8, 1729.0], [96.9, 1738.0], [97.0, 1748.0], [97.1, 1761.0], [97.2, 1773.0], [97.3, 1784.0], [97.4, 1797.0], [97.5, 1812.0], [97.6, 1826.0], [97.7, 1842.0], [97.8, 1858.0], [97.9, 1874.0], [98.0, 1889.0], [98.1, 1907.0], [98.2, 1926.0], [98.3, 1945.0], [98.4, 1964.0], [98.5, 1986.0], [98.6, 2011.0], [98.7, 2033.0], [98.8, 2055.0], [98.9, 2084.0], [99.0, 2112.0], [99.1, 2143.0], [99.2, 2179.0], [99.3, 2217.0], [99.4, 2265.0], [99.5, 2320.0], [99.6, 2384.0], [99.7, 2464.0], [99.8, 2566.0], [99.9, 2772.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 21936.0, "series": [{"data": [[0.0, 21675.0], [600.0, 6693.0], [700.0, 6654.0], [800.0, 6192.0], [900.0, 5598.0], [1000.0, 4577.0], [1100.0, 3933.0], [1200.0, 3325.0], [1300.0, 2555.0], [1400.0, 2082.0], [1500.0, 1611.0], [100.0, 21936.0], [1600.0, 1335.0], [1700.0, 1027.0], [1800.0, 747.0], [1900.0, 588.0], [2000.0, 463.0], [2100.0, 362.0], [2300.0, 187.0], [2200.0, 237.0], [2400.0, 139.0], [2500.0, 96.0], [2600.0, 57.0], [2800.0, 42.0], [2700.0, 44.0], [2900.0, 29.0], [3000.0, 13.0], [3100.0, 8.0], [200.0, 8101.0], [3200.0, 3.0], [3300.0, 4.0], [3400.0, 1.0], [3500.0, 3.0], [3600.0, 4.0], [300.0, 5019.0], [400.0, 5545.0], [500.0, 6315.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6977.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 62326.0, "series": [{"data": [[0.0, 62326.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 47897.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6977.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.7288058E12, "maxY": 16.0, "series": [{"data": [[1.72881E12, 12.0], [1.7288097E12, 12.0], [1.72881102E12, 12.0], [1.72881132E12, 8.760922330097083], [1.7288109E12, 12.0], [1.7288112E12, 12.0], [1.7288103E12, 12.0], [1.7288106E12, 12.0], [1.72880952E12, 11.70121951219512], [1.72881114E12, 12.0], [1.72881054E12, 12.0], [1.72881084E12, 12.0], [1.72881042E12, 12.0], [1.72881072E12, 12.0], [1.72881012E12, 12.0], [1.72880982E12, 12.0], [1.72881066E12, 12.0], [1.72881096E12, 12.0], [1.72881006E12, 12.0], [1.72881036E12, 12.0], [1.72881024E12, 12.0], [1.72880994E12, 12.0], [1.72880964E12, 12.0], [1.72881126E12, 12.0], [1.72881018E12, 12.0], [1.72881048E12, 12.0], [1.72880988E12, 12.0], [1.72880958E12, 12.0], [1.72880976E12, 12.0], [1.72881078E12, 12.0], [1.72881108E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.7288058E12, 1.9963369963369964], [1.72880598E12, 1.9754385964912278], [1.72880592E12, 2.0], [1.72880604E12, 1.0], [1.72880586E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72880628E12, 4.0], [1.72880658E12, 4.0], [1.72880688E12, 4.0], [1.7288067E12, 4.0], [1.728807E12, 4.0], [1.7288073E12, 4.0], [1.7288076E12, 3.297592997811816], [1.72880646E12, 4.0], [1.72880676E12, 4.0], [1.72880706E12, 4.0], [1.72880736E12, 4.0], [1.72880718E12, 4.0], [1.72880748E12, 4.0], [1.72880616E12, 4.0], [1.72880694E12, 4.0], [1.72880724E12, 4.0], [1.72880754E12, 4.0], [1.72880604E12, 3.9946428571428565], [1.72880766E12, 1.0], [1.72880634E12, 4.0], [1.72880664E12, 4.0], [1.72880742E12, 4.0], [1.72880772E12, 1.0], [1.7288061E12, 4.0], [1.7288064E12, 4.0], [1.72880622E12, 4.0], [1.72880652E12, 4.0], [1.72880682E12, 4.0], [1.72880712E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72881162E12, 16.0], [1.72881192E12, 16.0], [1.72881132E12, 15.114754098360656], [1.72881252E12, 16.0], [1.72881222E12, 16.0], [1.72881282E12, 14.731574864235853], [1.72881276E12, 16.0], [1.72881144E12, 16.0], [1.72881246E12, 16.0], [1.72881234E12, 16.0], [1.72881174E12, 16.0], [1.72881264E12, 16.0], [1.72881204E12, 16.0], [1.72881198E12, 16.0], [1.72881288E12, 8.375291375291367], [1.72881228E12, 16.0], [1.72881258E12, 16.0], [1.72881186E12, 16.0], [1.72881216E12, 16.0], [1.72881156E12, 16.0], [1.7288121E12, 16.0], [1.7288124E12, 16.0], [1.7288115E12, 16.0], [1.7288118E12, 16.0], [1.72881138E12, 16.0], [1.72881168E12, 16.0], [1.7288127E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.7288079E12, 8.0], [1.7288082E12, 8.0], [1.7288094E12, 8.0], [1.7288091E12, 8.0], [1.72880928E12, 8.0], [1.72880898E12, 8.0], [1.72880868E12, 8.0], [1.72880838E12, 8.0], [1.72880952E12, 4.117782909930718], [1.72880922E12, 8.0], [1.72880892E12, 8.0], [1.72880862E12, 8.0], [1.7288088E12, 8.0], [1.7288085E12, 8.0], [1.72880778E12, 8.0], [1.72880808E12, 8.0], [1.72880904E12, 8.0], [1.72880874E12, 8.0], [1.72880844E12, 8.0], [1.72880784E12, 8.0], [1.72880832E12, 8.0], [1.72880796E12, 8.0], [1.72880934E12, 8.0], [1.72880856E12, 8.0], [1.72880772E12, 7.987027027027026], [1.72880826E12, 8.0], [1.72880802E12, 8.0], [1.72880814E12, 8.0], [1.72880946E12, 7.998054474708171], [1.72880916E12, 8.0], [1.72880886E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72881288E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 346.60784313725486, "minX": 1.0, "maxY": 762.4534717251239, "series": [{"data": [[2.0, 397.0451183431954], [8.0, 454.7992936650578], [9.0, 493.6312499999999], [10.0, 507.9629629629629], [11.0, 659.3499999999999], [3.0, 349.93684210526345], [12.0, 596.1560329555991], [13.0, 623.9117647058823], [14.0, 616.0192307692307], [15.0, 658.9753424657538], [1.0, 412.4356060606059], [4.0, 403.5162588641131], [16.0, 762.4534717251239], [5.0, 414.95148247978443], [6.0, 346.60784313725486], [7.0, 422.06211180124194]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.718353242320765, 571.8562542662162]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.7288058E12, "maxY": 6.0005852266666666E7, "series": [{"data": [[1.7288079E12, 5.3074249666666664E7], [1.72880688E12, 2.9571807866666667E7], [1.7288091E12, 5.3612814083333336E7], [1.72881132E12, 4.532476215E7], [1.72880928E12, 5.106320178333333E7], [1.7288067E12, 3.0847444166666668E7], [1.72881252E12, 5.590330278333333E7], [1.7288103E12, 5.65554796E7], [1.72881114E12, 5.762567643333333E7], [1.72880706E12, 2.97352106E7], [1.72880892E12, 5.23984345E7], [1.72881234E12, 5.931540236666667E7], [1.72881012E12, 5.855344885E7], [1.72880586E12, 1.4996287483333332E7], [1.72880808E12, 5.091782128333333E7], [1.72881066E12, 5.612556246666667E7], [1.72880724E12, 3.0938968766666666E7], [1.72880844E12, 5.1899629666666664E7], [1.72881288E12, 2.1746809766666666E7], [1.72880604E12, 2.6214884866666667E7], [1.72881186E12, 5.886947878333333E7], [1.72880964E12, 5.722847693333333E7], [1.72880742E12, 2.9318408616666667E7], [1.72880826E12, 5.258271635E7], [1.72881048E12, 5.668008906666667E7], [1.7288115E12, 5.80972601E7], [1.7288064E12, 3.122650475E7], [1.72880622E12, 3.0269399016666666E7], [1.72880946E12, 5.331726431666667E7], [1.72881168E12, 5.9366284766666666E7], [1.7288127E12, 5.745591993333333E7], [1.72881162E12, 5.79499677E7], [1.72880598E12, 1.4652773783333333E7], [1.7288082E12, 5.099561803333333E7], [1.7288094E12, 5.221733311666667E7], [1.728807E12, 3.18458779E7], [1.72880838E12, 5.214112135E7], [1.7288106E12, 5.910581193333333E7], [1.72881282E12, 5.6371765983333334E7], [1.72881144E12, 5.8830524483333334E7], [1.72880922E12, 5.271357793333333E7], [1.72881246E12, 5.820163546666667E7], [1.72880736E12, 3.0628352933333334E7], [1.72880718E12, 3.061163125E7], [1.72881042E12, 5.520049535E7], [1.72881264E12, 5.7665519416666664E7], [1.72880616E12, 3.0033366116666667E7], [1.72880874E12, 5.098774405E7], [1.72881096E12, 5.703343011666667E7], [1.72880754E12, 2.9071431433333334E7], [1.72881198E12, 5.879221865E7], [1.72880994E12, 5.72267353E7], [1.72881216E12, 5.80376883E7], [1.72880634E12, 3.094284405E7], [1.72880856E12, 5.0916137766666666E7], [1.72880772E12, 4.796364811666667E7], [1.72880958E12, 5.703630903333333E7], [1.7288118E12, 5.695844915E7], [1.72880976E12, 5.8097888983333334E7], [1.72880652E12, 3.0202353333333332E7], [1.72881078E12, 5.584389611666667E7], [1.7288097E12, 5.609185885E7], [1.72881192E12, 6.0005852266666666E7], [1.72880628E12, 3.100765635E7], [1.7288109E12, 5.761451053333333E7], [1.7288073E12, 3.0612104183333334E7], [1.72880868E12, 5.213832981666667E7], [1.72880952E12, 2.94245983E7], [1.72880646E12, 3.1244936316666666E7], [1.72881276E12, 5.8129322583333336E7], [1.72881054E12, 5.696283996666667E7], [1.72880748E12, 3.057574125E7], [1.7288085E12, 5.234195785E7], [1.72881072E12, 5.843206981666667E7], [1.72881174E12, 5.814464161666667E7], [1.72880904E12, 5.123010765E7], [1.72880784E12, 5.3922611333333336E7], [1.72881006E12, 5.507531646666667E7], [1.72881228E12, 5.922374561666667E7], [1.72880766E12, 7966105.7], [1.72881024E12, 5.866877565E7], [1.72881126E12, 5.552233475E7], [1.72880664E12, 3.0010146783333335E7], [1.7288058E12, 1.4369392516666668E7], [1.7288121E12, 5.828811418333333E7], [1.72880802E12, 5.379567821666667E7], [1.72880988E12, 5.859553128333333E7], [1.72880682E12, 2.9849647333333332E7], [1.72880886E12, 5.4155482483333334E7], [1.72881108E12, 5.7774284583333336E7], [1.72881E12, 5.8152756233333334E7], [1.72880658E12, 3.1435035233333334E7], [1.72881102E12, 5.895007893333333E7], [1.72880898E12, 5.027034521666667E7], [1.7288112E12, 5.68979513E7], [1.72881222E12, 5.835878218333333E7], [1.7288076E12, 2.1422781366666667E7], [1.72880676E12, 2.9891428083333332E7], [1.72880862E12, 5.288687406666667E7], [1.72881084E12, 5.508286353333333E7], [1.7288088E12, 5.0113259083333336E7], [1.72880778E12, 5.012892245E7], [1.72880982E12, 5.719918696666667E7], [1.72881204E12, 5.90919133E7], [1.72880694E12, 3.0088887E7], [1.72880592E12, 1.567175145E7], [1.72881036E12, 5.5805798333333336E7], [1.72881258E12, 5.945801581666667E7], [1.72880832E12, 5.2142249666666664E7], [1.72880796E12, 5.178618628333333E7], [1.72880934E12, 5.234975328333333E7], [1.72881156E12, 5.830675878333333E7], [1.72881018E12, 5.683552638333333E7], [1.7288124E12, 5.79213196E7], [1.7288061E12, 3.0884661883333333E7], [1.72880814E12, 5.074809588333333E7], [1.72881138E12, 5.824555045E7], [1.72880916E12, 5.3319267266666666E7], [1.72880712E12, 2.96637856E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7288079E12, 0.0], [1.72880688E12, 0.0], [1.7288091E12, 0.0], [1.72881132E12, 0.0], [1.72880928E12, 0.0], [1.7288067E12, 0.0], [1.72881252E12, 0.0], [1.7288103E12, 0.0], [1.72881114E12, 0.0], [1.72880706E12, 0.0], [1.72880892E12, 0.0], [1.72881234E12, 0.0], [1.72881012E12, 0.0], [1.72880586E12, 0.0], [1.72880808E12, 0.0], [1.72881066E12, 0.0], [1.72880724E12, 0.0], [1.72880844E12, 0.0], [1.72881288E12, 0.0], [1.72880604E12, 0.0], [1.72881186E12, 0.0], [1.72880964E12, 0.0], [1.72880742E12, 0.0], [1.72880826E12, 0.0], [1.72881048E12, 0.0], [1.7288115E12, 0.0], [1.7288064E12, 0.0], [1.72880622E12, 0.0], [1.72880946E12, 0.0], [1.72881168E12, 0.0], [1.7288127E12, 0.0], [1.72881162E12, 0.0], [1.72880598E12, 0.0], [1.7288082E12, 0.0], [1.7288094E12, 0.0], [1.728807E12, 0.0], [1.72880838E12, 0.0], [1.7288106E12, 0.0], [1.72881282E12, 0.0], [1.72881144E12, 0.0], [1.72880922E12, 0.0], [1.72881246E12, 0.0], [1.72880736E12, 0.0], [1.72880718E12, 0.0], [1.72881042E12, 0.0], [1.72881264E12, 0.0], [1.72880616E12, 0.0], [1.72880874E12, 0.0], [1.72881096E12, 0.0], [1.72880754E12, 0.0], [1.72881198E12, 0.0], [1.72880994E12, 0.0], [1.72881216E12, 0.0], [1.72880634E12, 0.0], [1.72880856E12, 0.0], [1.72880772E12, 0.0], [1.72880958E12, 0.0], [1.7288118E12, 0.0], [1.72880976E12, 0.0], [1.72880652E12, 0.0], [1.72881078E12, 0.0], [1.7288097E12, 0.0], [1.72881192E12, 0.0], [1.72880628E12, 0.0], [1.7288109E12, 0.0], [1.7288073E12, 0.0], [1.72880868E12, 0.0], [1.72880952E12, 0.0], [1.72880646E12, 0.0], [1.72881276E12, 0.0], [1.72881054E12, 0.0], [1.72880748E12, 0.0], [1.7288085E12, 0.0], [1.72881072E12, 0.0], [1.72881174E12, 0.0], [1.72880904E12, 0.0], [1.72880784E12, 0.0], [1.72881006E12, 0.0], [1.72881228E12, 0.0], [1.72880766E12, 0.0], [1.72881024E12, 0.0], [1.72881126E12, 0.0], [1.72880664E12, 0.0], [1.7288058E12, 0.0], [1.7288121E12, 0.0], [1.72880802E12, 0.0], [1.72880988E12, 0.0], [1.72880682E12, 0.0], [1.72880886E12, 0.0], [1.72881108E12, 0.0], [1.72881E12, 0.0], [1.72880658E12, 0.0], [1.72881102E12, 0.0], [1.72880898E12, 0.0], [1.7288112E12, 0.0], [1.72881222E12, 0.0], [1.7288076E12, 0.0], [1.72880676E12, 0.0], [1.72880862E12, 0.0], [1.72881084E12, 0.0], [1.7288088E12, 0.0], [1.72880778E12, 0.0], [1.72880982E12, 0.0], [1.72881204E12, 0.0], [1.72880694E12, 0.0], [1.72880592E12, 0.0], [1.72881036E12, 0.0], [1.72881258E12, 0.0], [1.72880832E12, 0.0], [1.72880796E12, 0.0], [1.72880934E12, 0.0], [1.72881156E12, 0.0], [1.72881018E12, 0.0], [1.7288124E12, 0.0], [1.7288061E12, 0.0], [1.72880814E12, 0.0], [1.72881138E12, 0.0], [1.72880916E12, 0.0], [1.72880712E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72881288E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 371.9109589041093, "minX": 1.7288058E12, "maxY": 809.4718250630789, "series": [{"data": [[1.7288079E12, 450.8528584817242], [1.72880688E12, 393.93904448105434], [1.7288091E12, 475.78571428571394], [1.72881132E12, 533.9129943502829], [1.72880928E12, 461.22360844529686], [1.7288067E12, 420.68826619964943], [1.72881252E12, 753.2770800627942], [1.7288103E12, 612.5281090289602], [1.72881114E12, 594.6350123864574], [1.72880706E12, 399.6229235880399], [1.72880892E12, 442.9916974169736], [1.72881234E12, 809.4718250630789], [1.72881012E12, 592.7761316872425], [1.72880586E12, 388.04854368932007], [1.72880808E12, 453.4485363550518], [1.72881066E12, 603.3733333333324], [1.72880724E12, 406.1762711864408], [1.72880844E12, 429.58744394618844], [1.72881288E12, 499.8508158508165], [1.72880604E12, 371.9109589041093], [1.72881186E12, 756.0536277602517], [1.72880964E12, 587.5546492659051], [1.72880742E12, 427.51957295373677], [1.72880826E12, 470.1733594515183], [1.72881048E12, 610.7618644067788], [1.7288115E12, 746.2375776397516], [1.7288064E12, 395.8338815789473], [1.72880622E12, 437.2632541133454], [1.72880946E12, 469.1964980544744], [1.72881168E12, 759.9401103230904], [1.7288127E12, 783.3756137479553], [1.72881162E12, 758.5860428231566], [1.72880598E12, 418.4421052631581], [1.7288082E12, 461.6480769230771], [1.7288094E12, 464.4873786407764], [1.728807E12, 412.1101549053358], [1.72880838E12, 451.48172446110544], [1.7288106E12, 579.6231766612641], [1.72881282E12, 688.0512024825445], [1.72881144E12, 768.6104417670682], [1.72880922E12, 462.52992277992297], [1.72881246E12, 745.8988326848261], [1.72880736E12, 407.8226351351351], [1.72880718E12, 380.00946372239736], [1.72881042E12, 577.2375601926161], [1.72881264E12, 745.7886557886553], [1.72880616E12, 402.0751252086813], [1.72880874E12, 439.37728937728934], [1.72881096E12, 605.7769360269358], [1.72880754E12, 374.0], [1.72881198E12, 786.758818703856], [1.72880994E12, 599.8979933110376], [1.72881216E12, 749.7962674961124], [1.72880634E12, 409.6215753424661], [1.72880856E12, 450.20809792843676], [1.72880772E12, 466.86217948717916], [1.72880958E12, 579.0748189863236], [1.7288118E12, 764.9450636942681], [1.72880976E12, 615.1045415595553], [1.72880652E12, 427.80035650623864], [1.72881078E12, 596.4830157415093], [1.7288097E12, 586.0350734094617], [1.72881192E12, 773.3282504012833], [1.72880628E12, 390.5756097560977], [1.7288109E12, 622.9567099567087], [1.7288073E12, 424.29537366548055], [1.72880868E12, 462.7000964320157], [1.72880952E12, 448.89614740368484], [1.72880646E12, 440.05504587155974], [1.72881276E12, 779.9381107491848], [1.72881054E12, 574.261980830671], [1.72880748E12, 408.30940170940147], [1.7288085E12, 461.0528338136414], [1.72881072E12, 592.2046014790473], [1.72881174E12, 777.0243902439022], [1.72880904E12, 454.788224121557], [1.72880784E12, 448.71883786316835], [1.72881006E12, 583.4845276872957], [1.72881228E12, 774.1555197421438], [1.72880766E12, 400.12080536912754], [1.72881024E12, 580.2435483870969], [1.72881126E12, 603.9326599326611], [1.72880664E12, 398.4200000000001], [1.7288058E12, 390.57875457875485], [1.7288121E12, 747.3286494925833], [1.72880802E12, 451.85969868173225], [1.72880988E12, 641.9786666666666], [1.72880682E12, 379.2310126582281], [1.72880886E12, 457.7778836987614], [1.72881108E12, 580.2739726027407], [1.72881E12, 612.6491969568896], [1.72880658E12, 393.5891980360067], [1.72881102E12, 599.9758534554538], [1.72880898E12, 430.7569506726458], [1.7288112E12, 605.7643097643106], [1.72881222E12, 789.0983471074372], [1.7288076E12, 387.89715536105047], [1.72880676E12, 397.6368159203978], [1.72880862E12, 479.3528827037772], [1.72881084E12, 564.1035294117653], [1.7288088E12, 447.78878504672866], [1.72880778E12, 445.22263450834816], [1.72880982E12, 607.2173546756528], [1.72881204E12, 738.1492307692314], [1.72880694E12, 398.21983471074395], [1.72880592E12, 385.32686084142364], [1.72881036E12, 607.0479797979795], [1.72881258E12, 768.331738437001], [1.72880832E12, 461.7671497584541], [1.72880796E12, 452.62570888468764], [1.72880934E12, 453.02452830188724], [1.72881156E12, 726.8284202569926], [1.72881018E12, 585.437855402112], [1.7288124E12, 779.3284552845525], [1.7288061E12, 406.22335025380727], [1.72880814E12, 435.3263825929286], [1.72881138E12, 724.6252821670428], [1.72880916E12, 453.7152317880792], [1.72880712E12, 401.952861952862]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72881288E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 249.74657534246552, "minX": 1.7288058E12, "maxY": 556.812447434819, "series": [{"data": [[1.7288079E12, 302.3336457357079], [1.72880688E12, 264.20098846787477], [1.7288091E12, 318.50595238095235], [1.72881132E12, 361.8790960451976], [1.72880928E12, 312.65547024952076], [1.7288067E12, 279.8248686514886], [1.72881252E12, 521.0886970172675], [1.7288103E12, 421.5936967632023], [1.72881114E12, 406.33608587943866], [1.72880706E12, 268.2275747508308], [1.72880892E12, 298.3874538745392], [1.72881234E12, 556.812447434819], [1.72881012E12, 404.7786008230455], [1.72880586E12, 260.38834951456306], [1.72880808E12, 307.0179414542019], [1.72881066E12, 416.8358333333331], [1.72880724E12, 269.428813559322], [1.72880844E12, 287.91210762331855], [1.72881288E12, 334.2517482517481], [1.72880604E12, 249.74657534246552], [1.72881186E12, 517.7200315457416], [1.72880964E12, 401.9934747145187], [1.72880742E12, 288.91103202846944], [1.72880826E12, 317.35357492654197], [1.72881048E12, 422.465254237288], [1.7288115E12, 517.2041925465828], [1.7288064E12, 261.05427631578965], [1.72880622E12, 292.32358318098755], [1.72880946E12, 316.14007782101163], [1.72881168E12, 522.7832939322307], [1.7288127E12, 542.5024549918159], [1.72881162E12, 523.997620935765], [1.72880598E12, 284.7929824561403], [1.7288082E12, 312.8211538461536], [1.7288094E12, 313.9368932038835], [1.728807E12, 271.0017211703963], [1.72880838E12, 305.3964386129332], [1.7288106E12, 394.28930307941624], [1.72881282E12, 476.54538401861953], [1.72881144E12, 528.5911646586345], [1.72880922E12, 311.23262548262596], [1.72881246E12, 514.6116731517502], [1.72880736E12, 272.39695945945977], [1.72880718E12, 251.91167192428998], [1.72881042E12, 397.4703049759227], [1.72881264E12, 513.7148407148406], [1.72880616E12, 269.0217028380635], [1.72880874E12, 298.86080586080544], [1.72881096E12, 415.07070707070716], [1.72880754E12, 251.37538940809958], [1.72881198E12, 539.7506152584092], [1.72880994E12, 410.1003344481602], [1.72881216E12, 518.6150855365478], [1.72880634E12, 271.77568493150676], [1.72880856E12, 305.1789077212807], [1.72880772E12, 315.79487179487137], [1.72880958E12, 396.07401448109374], [1.7288118E12, 532.4299363057328], [1.72880976E12, 421.6726649528704], [1.72880652E12, 285.81105169340447], [1.72881078E12, 410.2303231151619], [1.7288097E12, 402.70309951060375], [1.72881192E12, 530.9550561797748], [1.72880628E12, 258.53495934959363], [1.7288109E12, 427.1333333333331], [1.7288073E12, 280.4039145907476], [1.72880868E12, 312.7377049180326], [1.72880952E12, 301.06532663316585], [1.72880646E12, 290.7541284403671], [1.72881276E12, 540.3526058631909], [1.72881054E12, 393.9608626198076], [1.72880748E12, 270.8461538461539], [1.7288085E12, 310.0374639769449], [1.72881072E12, 403.69186524239956], [1.72881174E12, 538.2178861788616], [1.72880904E12, 309.51661918328597], [1.72880784E12, 299.4358013120897], [1.72881006E12, 403.5114006514664], [1.72881228E12, 533.6672038678488], [1.72880766E12, 264.67114093959725], [1.72881024E12, 396.4596774193551], [1.72881126E12, 416.8611111111106], [1.72880664E12, 265.45999999999975], [1.7288058E12, 256.74358974358955], [1.7288121E12, 516.4340359094454], [1.72880802E12, 302.15819209039506], [1.72880988E12, 438.20444444444485], [1.72880682E12, 253.35759493670895], [1.72880886E12, 305.95805529075346], [1.72881108E12, 395.63819500402906], [1.72881E12, 418.0380388841927], [1.72880658E12, 259.3600654664486], [1.72881102E12, 409.62614487926703], [1.72880898E12, 292.2017937219734], [1.7288112E12, 414.9124579124583], [1.72881222E12, 545.396694214876], [1.7288076E12, 261.37417943107215], [1.72880676E12, 265.8872305140967], [1.72880862E12, 323.3489065606368], [1.72881084E12, 391.5341176470592], [1.7288088E12, 303.5719626168227], [1.72880778E12, 305.343228200371], [1.72880982E12, 415.86520640269515], [1.72881204E12, 506.7799999999997], [1.72880694E12, 265.7983471074381], [1.72880592E12, 255.91585760517802], [1.72881036E12, 416.97138047138054], [1.72881258E12, 528.9298245614036], [1.72880832E12, 311.3178743961349], [1.72880796E12, 306.09073724007584], [1.72880934E12, 305.7386792452833], [1.72881156E12, 502.5177626606197], [1.72881018E12, 402.77579203899296], [1.7288124E12, 537.1146341463411], [1.7288061E12, 270.00169204737733], [1.72880814E12, 294.75339981867586], [1.72881138E12, 500.89917231000703], [1.72880916E12, 304.657521286661], [1.72880712E12, 269.83670033670023]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72881288E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7288058E12, "maxY": 4.9E-324, "series": [{"data": [[1.7288079E12, 0.0], [1.72880688E12, 0.0], [1.7288091E12, 0.0], [1.72881132E12, 0.0], [1.72880928E12, 0.0], [1.7288067E12, 0.0], [1.72881252E12, 0.0], [1.7288103E12, 0.0], [1.72881114E12, 0.0], [1.72880706E12, 0.0], [1.72880892E12, 0.0], [1.72881234E12, 0.0], [1.72881012E12, 0.0], [1.72880586E12, 0.0], [1.72880808E12, 0.0], [1.72881066E12, 0.0], [1.72880724E12, 0.0], [1.72880844E12, 0.0], [1.72881288E12, 0.0], [1.72880604E12, 0.0], [1.72881186E12, 0.0], [1.72880964E12, 0.0], [1.72880742E12, 0.0], [1.72880826E12, 0.0], [1.72881048E12, 0.0], [1.7288115E12, 0.0], [1.7288064E12, 0.0], [1.72880622E12, 0.0], [1.72880946E12, 0.0], [1.72881168E12, 0.0], [1.7288127E12, 0.0], [1.72881162E12, 0.0], [1.72880598E12, 0.0], [1.7288082E12, 0.0], [1.7288094E12, 0.0], [1.728807E12, 0.0], [1.72880838E12, 0.0], [1.7288106E12, 0.0], [1.72881282E12, 0.0], [1.72881144E12, 0.0], [1.72880922E12, 0.0], [1.72881246E12, 0.0], [1.72880736E12, 0.0], [1.72880718E12, 0.0], [1.72881042E12, 0.0], [1.72881264E12, 0.0], [1.72880616E12, 0.0], [1.72880874E12, 0.0], [1.72881096E12, 0.0], [1.72880754E12, 0.0], [1.72881198E12, 0.0], [1.72880994E12, 0.0], [1.72881216E12, 0.0], [1.72880634E12, 0.0], [1.72880856E12, 0.0], [1.72880772E12, 0.0], [1.72880958E12, 0.0], [1.7288118E12, 0.0], [1.72880976E12, 0.0], [1.72880652E12, 0.0], [1.72881078E12, 0.0], [1.7288097E12, 0.0], [1.72881192E12, 0.0], [1.72880628E12, 0.0], [1.7288109E12, 0.0], [1.7288073E12, 0.0], [1.72880868E12, 0.0], [1.72880952E12, 0.0], [1.72880646E12, 0.0], [1.72881276E12, 0.0], [1.72881054E12, 0.0], [1.72880748E12, 0.0], [1.7288085E12, 0.0], [1.72881072E12, 0.0], [1.72881174E12, 0.0], [1.72880904E12, 0.0], [1.72880784E12, 0.0], [1.72881006E12, 0.0], [1.72881228E12, 0.0], [1.72880766E12, 0.0], [1.72881024E12, 0.0], [1.72881126E12, 0.0], [1.72880664E12, 0.0], [1.7288058E12, 0.0], [1.7288121E12, 0.0], [1.72880802E12, 0.0], [1.72880988E12, 0.0], [1.72880682E12, 0.0], [1.72880886E12, 0.0], [1.72881108E12, 0.0], [1.72881E12, 0.0], [1.72880658E12, 0.0], [1.72881102E12, 0.0], [1.72880898E12, 0.0], [1.7288112E12, 0.0], [1.72881222E12, 0.0], [1.7288076E12, 0.0], [1.72880676E12, 0.0], [1.72880862E12, 0.0], [1.72881084E12, 0.0], [1.7288088E12, 0.0], [1.72880778E12, 0.0], [1.72880982E12, 0.0], [1.72881204E12, 0.0], [1.72880694E12, 0.0], [1.72880592E12, 0.0], [1.72881036E12, 0.0], [1.72881258E12, 0.0], [1.72880832E12, 0.0], [1.72880796E12, 0.0], [1.72880934E12, 0.0], [1.72881156E12, 0.0], [1.72881018E12, 0.0], [1.7288124E12, 0.0], [1.7288061E12, 0.0], [1.72880814E12, 0.0], [1.72881138E12, 0.0], [1.72880916E12, 0.0], [1.72880712E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72881288E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.7288058E12, "maxY": 3692.0, "series": [{"data": [[1.7288079E12, 1816.0], [1.72880688E12, 1546.0], [1.7288091E12, 1949.0], [1.72881132E12, 2452.0], [1.72880928E12, 1840.0], [1.7288067E12, 1617.0], [1.72881252E12, 3190.0], [1.7288103E12, 2848.0], [1.72881114E12, 2536.0], [1.72880706E12, 1442.0], [1.72880892E12, 1736.0], [1.72881234E12, 2956.0], [1.72881012E12, 2710.0], [1.72880586E12, 1700.0], [1.72880808E12, 2016.0], [1.72881066E12, 2747.0], [1.72880724E12, 1741.0], [1.72880844E12, 1686.0], [1.72881288E12, 2033.0], [1.72880604E12, 1416.0], [1.72881186E12, 3618.0], [1.72880964E12, 2307.0], [1.72880742E12, 1782.0], [1.72880826E12, 1774.0], [1.72881048E12, 2630.0], [1.7288115E12, 2858.0], [1.7288064E12, 1481.0], [1.72880622E12, 1423.0], [1.72880946E12, 2037.0], [1.72881168E12, 3069.0], [1.7288127E12, 3692.0], [1.72881162E12, 3221.0], [1.72880598E12, 1380.0], [1.7288082E12, 1982.0], [1.7288094E12, 1741.0], [1.728807E12, 1476.0], [1.72880838E12, 1848.0], [1.7288106E12, 2424.0], [1.72881282E12, 2829.0], [1.72881144E12, 3004.0], [1.72880922E12, 1810.0], [1.72881246E12, 3123.0], [1.72880736E12, 1506.0], [1.72880718E12, 1589.0], [1.72881042E12, 2395.0], [1.72881264E12, 2788.0], [1.72880616E12, 1401.0], [1.72880874E12, 1641.0], [1.72881096E12, 2429.0], [1.72880754E12, 1568.0], [1.72881198E12, 3689.0], [1.72880994E12, 2819.0], [1.72881216E12, 2978.0], [1.72880634E12, 1657.0], [1.72880856E12, 1784.0], [1.72880772E12, 1888.0], [1.72880958E12, 2498.0], [1.7288118E12, 3328.0], [1.72880976E12, 2410.0], [1.72880652E12, 1369.0], [1.72881078E12, 2753.0], [1.7288097E12, 2142.0], [1.72881192E12, 2975.0], [1.72880628E12, 1480.0], [1.7288109E12, 2421.0], [1.7288073E12, 1606.0], [1.72880868E12, 1735.0], [1.72880952E12, 2123.0], [1.72880646E12, 1659.0], [1.72881276E12, 3680.0], [1.72881054E12, 2561.0], [1.72880748E12, 1364.0], [1.7288085E12, 1831.0], [1.72881072E12, 2426.0], [1.72881174E12, 3436.0], [1.72880904E12, 1892.0], [1.72880784E12, 1766.0], [1.72881006E12, 2586.0], [1.72881228E12, 3144.0], [1.72880766E12, 1217.0], [1.72881024E12, 2167.0], [1.72881126E12, 2851.0], [1.72880664E12, 1707.0], [1.7288058E12, 1438.0], [1.7288121E12, 3069.0], [1.72880802E12, 1683.0], [1.72880988E12, 2406.0], [1.72880682E12, 1632.0], [1.72880886E12, 1830.0], [1.72881108E12, 2544.0], [1.72881E12, 2787.0], [1.72880658E12, 1340.0], [1.72881102E12, 2501.0], [1.72880898E12, 1692.0], [1.7288112E12, 2582.0], [1.72881222E12, 3539.0], [1.7288076E12, 1575.0], [1.72880676E12, 1625.0], [1.72880862E12, 1776.0], [1.72881084E12, 2589.0], [1.7288088E12, 1802.0], [1.72880778E12, 1866.0], [1.72880982E12, 2805.0], [1.72881204E12, 2942.0], [1.72880694E12, 1706.0], [1.72880592E12, 1279.0], [1.72881036E12, 2214.0], [1.72881258E12, 3346.0], [1.72880832E12, 1773.0], [1.72880796E12, 1687.0], [1.72880934E12, 2041.0], [1.72881156E12, 3046.0], [1.72881018E12, 2308.0], [1.7288124E12, 3563.0], [1.7288061E12, 1469.0], [1.72880814E12, 1846.0], [1.72881138E12, 3053.0], [1.72880916E12, 1884.0], [1.72880712E12, 1421.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7288079E12, 29.0], [1.72880688E12, 35.0], [1.7288091E12, 31.0], [1.72881132E12, 26.0], [1.72880928E12, 28.0], [1.7288067E12, 32.0], [1.72881252E12, 49.0], [1.7288103E12, 33.0], [1.72881114E12, 30.0], [1.72880706E12, 30.0], [1.72880892E12, 27.0], [1.72881234E12, 48.0], [1.72881012E12, 33.0], [1.72880586E12, 34.0], [1.72880808E12, 32.0], [1.72881066E12, 21.0], [1.72880724E12, 28.0], [1.72880844E12, 27.0], [1.72881288E12, 35.0], [1.72880604E12, 29.0], [1.72881186E12, 54.0], [1.72880964E12, 30.0], [1.72880742E12, 30.0], [1.72880826E12, 31.0], [1.72881048E12, 26.0], [1.7288115E12, 53.0], [1.7288064E12, 31.0], [1.72880622E12, 31.0], [1.72880946E12, 29.0], [1.72881168E12, 54.0], [1.7288127E12, 56.0], [1.72881162E12, 50.0], [1.72880598E12, 39.0], [1.7288082E12, 30.0], [1.7288094E12, 29.0], [1.728807E12, 26.0], [1.72880838E12, 25.0], [1.7288106E12, 24.0], [1.72881282E12, 37.0], [1.72881144E12, 46.0], [1.72880922E12, 30.0], [1.72881246E12, 43.0], [1.72880736E12, 30.0], [1.72880718E12, 29.0], [1.72881042E12, 31.0], [1.72881264E12, 48.0], [1.72880616E12, 31.0], [1.72880874E12, 26.0], [1.72881096E12, 29.0], [1.72880754E12, 30.0], [1.72881198E12, 49.0], [1.72880994E12, 37.0], [1.72881216E12, 53.0], [1.72880634E12, 30.0], [1.72880856E12, 24.0], [1.72880772E12, 22.0], [1.72880958E12, 32.0], [1.7288118E12, 48.0], [1.72880976E12, 32.0], [1.72880652E12, 30.0], [1.72881078E12, 38.0], [1.7288097E12, 30.0], [1.72881192E12, 45.0], [1.72880628E12, 29.0], [1.7288109E12, 28.0], [1.7288073E12, 28.0], [1.72880868E12, 25.0], [1.72880952E12, 33.0], [1.72880646E12, 30.0], [1.72881276E12, 52.0], [1.72881054E12, 33.0], [1.72880748E12, 29.0], [1.7288085E12, 26.0], [1.72881072E12, 27.0], [1.72881174E12, 53.0], [1.72880904E12, 28.0], [1.72880784E12, 29.0], [1.72881006E12, 32.0], [1.72881228E12, 52.0], [1.72880766E12, 35.0], [1.72881024E12, 35.0], [1.72881126E12, 30.0], [1.72880664E12, 28.0], [1.7288058E12, 32.0], [1.7288121E12, 51.0], [1.72880802E12, 31.0], [1.72880988E12, 35.0], [1.72880682E12, 27.0], [1.72880886E12, 27.0], [1.72881108E12, 33.0], [1.72881E12, 32.0], [1.72880658E12, 33.0], [1.72881102E12, 33.0], [1.72880898E12, 27.0], [1.7288112E12, 25.0], [1.72881222E12, 43.0], [1.7288076E12, 35.0], [1.72880676E12, 29.0], [1.72880862E12, 27.0], [1.72881084E12, 35.0], [1.7288088E12, 26.0], [1.72880778E12, 31.0], [1.72880982E12, 37.0], [1.72881204E12, 51.0], [1.72880694E12, 30.0], [1.72880592E12, 42.0], [1.72881036E12, 27.0], [1.72881258E12, 52.0], [1.72880832E12, 24.0], [1.72880796E12, 27.0], [1.72880934E12, 29.0], [1.72881156E12, 45.0], [1.72881018E12, 32.0], [1.7288124E12, 52.0], [1.7288061E12, 32.0], [1.72880814E12, 28.0], [1.72881138E12, 48.0], [1.72880916E12, 29.0], [1.72880712E12, 31.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7288079E12, 995.0], [1.72880688E12, 876.2], [1.7288091E12, 1017.3000000000001], [1.72881132E12, 1192.7999999999997], [1.72880928E12, 986.0], [1.7288067E12, 872.0], [1.72881252E12, 1687.0], [1.7288103E12, 1376.0], [1.72881114E12, 1300.6], [1.72880706E12, 878.8000000000002], [1.72880892E12, 941.0], [1.72881234E12, 1752.0], [1.72881012E12, 1339.0000000000005], [1.72880586E12, 854.0], [1.72880808E12, 987.0], [1.72881066E12, 1337.9], [1.72880724E12, 864.0999999999998], [1.72880844E12, 955.9999999999999], [1.72881288E12, 1110.0], [1.72880604E12, 831.5], [1.72881186E12, 1682.0], [1.72880964E12, 1315.8999999999999], [1.72880742E12, 877.5], [1.72880826E12, 994.4000000000002], [1.72881048E12, 1300.9], [1.7288115E12, 1642.2000000000003], [1.7288064E12, 883.3000000000001], [1.72880622E12, 907.9999999999999], [1.72880946E12, 1014.6000000000001], [1.72881168E12, 1645.0], [1.7288127E12, 1694.4], [1.72881162E12, 1695.1999999999996], [1.72880598E12, 891.8000000000002], [1.7288082E12, 984.9], [1.7288094E12, 954.8], [1.728807E12, 887.0], [1.72880838E12, 1007.4000000000001], [1.7288106E12, 1308.5], [1.72881282E12, 1543.0], [1.72881144E12, 1692.2000000000003], [1.72880922E12, 998.2000000000003], [1.72881246E12, 1675.4], [1.72880736E12, 878.4000000000001], [1.72880718E12, 871.0], [1.72881042E12, 1309.3999999999996], [1.72881264E12, 1703.6000000000001], [1.72880616E12, 860.0], [1.72880874E12, 980.7], [1.72881096E12, 1291.0], [1.72880754E12, 824.8000000000002], [1.72881198E12, 1758.0], [1.72880994E12, 1340.1999999999998], [1.72881216E12, 1676.3], [1.72880634E12, 880.5], [1.72880856E12, 976.0], [1.72880772E12, 1009.0], [1.72880958E12, 1353.4000000000005], [1.7288118E12, 1659.6999999999996], [1.72880976E12, 1340.2], [1.72880652E12, 914.4000000000001], [1.72881078E12, 1326.6000000000004], [1.7288097E12, 1321.0], [1.72881192E12, 1648.6], [1.72880628E12, 858.4], [1.7288109E12, 1374.4], [1.7288073E12, 908.0], [1.72880868E12, 997.2], [1.72880952E12, 978.2], [1.72880646E12, 919.6000000000001], [1.72881276E12, 1667.2000000000003], [1.72881054E12, 1299.7], [1.72880748E12, 868.7999999999998], [1.7288085E12, 985.0], [1.72881072E12, 1364.6000000000004], [1.72881174E12, 1696.8000000000002], [1.72880904E12, 976.2], [1.72880784E12, 995.0000000000002], [1.72881006E12, 1312.0], [1.72881228E12, 1737.8], [1.72880766E12, 888.0], [1.72881024E12, 1284.9], [1.72881126E12, 1295.2000000000016], [1.72880664E12, 887.9999999999998], [1.7288058E12, 857.9999999999999], [1.7288121E12, 1673.0], [1.72880802E12, 1022.4000000000001], [1.72880988E12, 1408.5999999999997], [1.72880682E12, 854.2000000000003], [1.72880886E12, 1007.0], [1.72881108E12, 1294.8], [1.72881E12, 1318.0], [1.72880658E12, 871.4000000000009], [1.72881102E12, 1337.6], [1.72880898E12, 950.0], [1.7288112E12, 1308.3000000000018], [1.72881222E12, 1671.4000000000005], [1.7288076E12, 838.4], [1.72880676E12, 862.4000000000001], [1.72880862E12, 1014.6000000000001], [1.72881084E12, 1275.4], [1.7288088E12, 1002.0], [1.72880778E12, 965.0], [1.72880982E12, 1359.0], [1.72881204E12, 1704.1000000000008], [1.72880694E12, 877.4], [1.72880592E12, 850.0], [1.72881036E12, 1332.1000000000001], [1.72881258E12, 1721.5], [1.72880832E12, 982.4], [1.72880796E12, 960.3000000000001], [1.72880934E12, 979.0], [1.72881156E12, 1613.4000000000012], [1.72881018E12, 1288.8], [1.7288124E12, 1728.0], [1.7288061E12, 885.8000000000001], [1.72880814E12, 952.0], [1.72881138E12, 1633.0], [1.72880916E12, 1002.2], [1.72880712E12, 847.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7288079E12, 1409.6799999999969], [1.72880688E12, 1236.2799999999997], [1.7288091E12, 1421.4599999999998], [1.72881132E12, 1959.2599999999998], [1.72880928E12, 1563.4099999999992], [1.7288067E12, 1283.6799999999992], [1.72881252E12, 2446.5], [1.7288103E12, 2080.25], [1.72881114E12, 1921.1999999999982], [1.72880706E12, 1184.6700000000003], [1.72880892E12, 1477.9000000000005], [1.72881234E12, 2471.899999999999], [1.72881012E12, 1908.4399999999987], [1.72880586E12, 1255.2999999999997], [1.72880808E12, 1452.0000000000018], [1.72881066E12, 2073.98], [1.72880724E12, 1219.8500000000022], [1.72880844E12, 1411.84], [1.72881288E12, 1743.3999999999978], [1.72880604E12, 1121.0999999999992], [1.72881186E12, 2694.899999999995], [1.72880964E12, 1826.65], [1.72880742E12, 1246.8400000000001], [1.72880826E12, 1509.3599999999997], [1.72881048E12, 2198.9400000000014], [1.7288115E12, 2398.5399999999986], [1.7288064E12, 1273.7699999999986], [1.72880622E12, 1297.6799999999994], [1.72880946E12, 1387.6800000000003], [1.72881168E12, 2506.7], [1.7288127E12, 2557.5299999999984], [1.72881162E12, 2496.8999999999996], [1.72880598E12, 1275.84], [1.7288082E12, 1412.4399999999987], [1.7288094E12, 1416.0], [1.728807E12, 1316.6999999999994], [1.72880838E12, 1368.1999999999994], [1.7288106E12, 1926.4500000000012], [1.72881282E12, 2419.5999999999985], [1.72881144E12, 2431.039999999999], [1.72880922E12, 1417.709999999998], [1.72881246E12, 2520.340000000003], [1.72880736E12, 1269.7700000000004], [1.72880718E12, 1246.85], [1.72881042E12, 1912.8899999999996], [1.72881264E12, 2511.199999999999], [1.72880616E12, 1250.0], [1.72880874E12, 1385.07], [1.72881096E12, 2028.5399999999986], [1.72880754E12, 1200.5600000000004], [1.72881198E12, 2541.8], [1.72880994E12, 1980.09], [1.72881216E12, 2412.039999999999], [1.72880634E12, 1300.8499999999995], [1.72880856E12, 1448.2199999999993], [1.72880772E12, 1564.8999999999999], [1.72880958E12, 2087.9199999999996], [1.7288118E12, 2502.040000000002], [1.72880976E12, 1978.9999999999984], [1.72880652E12, 1273.0399999999995], [1.72881078E12, 1971.0400000000009], [1.7288097E12, 1898.1700000000005], [1.72881192E12, 2409.24], [1.72880628E12, 1199.0800000000013], [1.7288109E12, 2021.2000000000003], [1.7288073E12, 1280.3600000000006], [1.72880868E12, 1479.0399999999954], [1.72880952E12, 1674.9199999999992], [1.72880646E12, 1279.8599999999997], [1.72881276E12, 2544.1400000000012], [1.72881054E12, 1848.9900000000005], [1.72880748E12, 1273.8199999999997], [1.7288085E12, 1512.819999999998], [1.72881072E12, 1963.6799999999985], [1.72881174E12, 2482.69], [1.72880904E12, 1479.8400000000001], [1.72880784E12, 1479.2799999999997], [1.72881006E12, 2055.0], [1.72881228E12, 2368.659999999998], [1.72880766E12, 1210.0], [1.72881024E12, 1857.59], [1.72881126E12, 1982.2199999999998], [1.72880664E12, 1424.92], [1.7288058E12, 1349.86], [1.7288121E12, 2326.0800000000004], [1.72880802E12, 1488.1099999999997], [1.72880988E12, 1963.74], [1.72880682E12, 1340.6999999999996], [1.72880886E12, 1480.5], [1.72881108E12, 1894.4399999999987], [1.72881E12, 2159.760000000003], [1.72880658E12, 1212.84], [1.72881102E12, 1882.8400000000001], [1.72880898E12, 1416.6399999999983], [1.7288112E12, 2111.4899999999943], [1.72881222E12, 2589.78], [1.7288076E12, 1237.560000000001], [1.72880676E12, 1260.6400000000003], [1.72880862E12, 1491.9699999999984], [1.72881084E12, 1858.96], [1.7288088E12, 1385.7699999999995], [1.72880778E12, 1529.6800000000003], [1.72880982E12, 1981.12], [1.72881204E12, 2513.91], [1.72880694E12, 1309.6399999999996], [1.72880592E12, 1189.5999999999997], [1.72881036E12, 1873.9499999999955], [1.72881258E12, 2474.0], [1.72880832E12, 1511.560000000003], [1.72880796E12, 1453.1000000000008], [1.72880934E12, 1518.800000000002], [1.72881156E12, 2439.2], [1.72881018E12, 2026.0800000000004], [1.7288124E12, 2589.750000000004], [1.7288061E12, 1241.0400000000004], [1.72880814E12, 1451.0], [1.72881138E12, 2315.9000000000005], [1.72880916E12, 1524.3200000000033], [1.72880712E12, 1304.2499999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7288079E12, 376.0], [1.72880688E12, 337.0], [1.7288091E12, 427.5], [1.72881132E12, 427.0], [1.72880928E12, 404.5], [1.7288067E12, 398.0], [1.72881252E12, 601.5], [1.7288103E12, 520.0], [1.72881114E12, 481.0], [1.72880706E12, 366.5], [1.72880892E12, 385.5], [1.72881234E12, 725.0], [1.72881012E12, 495.0], [1.72880586E12, 269.0], [1.72880808E12, 385.0], [1.72881066E12, 502.5], [1.72880724E12, 364.5], [1.72880844E12, 326.0], [1.72881288E12, 454.0], [1.72880604E12, 303.5], [1.72881186E12, 528.0], [1.72880964E12, 497.5], [1.72880742E12, 407.0], [1.72880826E12, 428.0], [1.72881048E12, 553.0], [1.7288115E12, 605.5], [1.7288064E12, 326.0], [1.72880622E12, 417.0], [1.72880946E12, 409.5], [1.72881168E12, 624.0], [1.7288127E12, 636.5], [1.72881162E12, 592.0], [1.72880598E12, 409.0], [1.7288082E12, 419.5], [1.7288094E12, 432.5], [1.728807E12, 351.0], [1.72880838E12, 373.0], [1.7288106E12, 412.0], [1.72881282E12, 484.0], [1.72881144E12, 604.0], [1.72880922E12, 407.0], [1.72881246E12, 573.0], [1.72880736E12, 369.0], [1.72880718E12, 294.5], [1.72881042E12, 423.5], [1.72881264E12, 534.0], [1.72880616E12, 380.0], [1.72880874E12, 341.5], [1.72881096E12, 529.5], [1.72880754E12, 280.5], [1.72881198E12, 626.0], [1.72880994E12, 484.0], [1.72881216E12, 587.5], [1.72880634E12, 357.5], [1.72880856E12, 386.0], [1.72880772E12, 410.0], [1.72880958E12, 381.0], [1.7288118E12, 629.0], [1.72880976E12, 526.0], [1.72880652E12, 418.0], [1.72881078E12, 483.0], [1.7288097E12, 494.0], [1.72881192E12, 698.5], [1.72880628E12, 332.0], [1.7288109E12, 535.0], [1.7288073E12, 402.5], [1.72880868E12, 411.0], [1.72880952E12, 348.0], [1.72880646E12, 429.0], [1.72881276E12, 658.0], [1.72881054E12, 455.0], [1.72880748E12, 356.0], [1.7288085E12, 411.0], [1.72881072E12, 452.0], [1.72881174E12, 636.0], [1.72880904E12, 410.0], [1.72880784E12, 383.0], [1.72881006E12, 440.0], [1.72881228E12, 624.0], [1.72880766E12, 346.0], [1.72881024E12, 449.5], [1.72881126E12, 547.0], [1.72880664E12, 317.0], [1.7288058E12, 312.0], [1.7288121E12, 573.0], [1.72880802E12, 368.5], [1.72880988E12, 597.0], [1.72880682E12, 314.0], [1.72880886E12, 394.0], [1.72881108E12, 438.0], [1.72881E12, 530.0], [1.72880658E12, 355.0], [1.72881102E12, 497.0], [1.72880898E12, 329.0], [1.7288112E12, 521.0], [1.72881222E12, 684.5], [1.7288076E12, 350.0], [1.72880676E12, 354.0], [1.72880862E12, 448.0], [1.72881084E12, 413.0], [1.7288088E12, 359.5], [1.72880778E12, 373.5], [1.72880982E12, 488.0], [1.72881204E12, 498.0], [1.72880694E12, 365.0], [1.72880592E12, 337.0], [1.72881036E12, 515.5], [1.72881258E12, 600.0], [1.72880832E12, 409.0], [1.72880796E12, 423.0], [1.72880934E12, 389.5], [1.72881156E12, 489.0], [1.72881018E12, 483.0], [1.7288124E12, 619.0], [1.7288061E12, 366.0], [1.72880814E12, 356.0], [1.72881138E12, 504.0], [1.72880916E12, 381.0], [1.72880712E12, 352.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7288079E12, 1143.6], [1.72880688E12, 948.6000000000001], [1.7288091E12, 1172.9499999999996], [1.72881132E12, 1422.2999999999988], [1.72880928E12, 1154.9499999999994], [1.7288067E12, 1005.1999999999998], [1.72881252E12, 1969.0], [1.7288103E12, 1599.75], [1.72881114E12, 1524.9999999999986], [1.72880706E12, 974.7], [1.72880892E12, 1090.75], [1.72881234E12, 2034.5], [1.72881012E12, 1563.0], [1.72880586E12, 1034.5], [1.72880808E12, 1135.0], [1.72881066E12, 1574.4000000000005], [1.72880724E12, 994.0], [1.72880844E12, 1105.8000000000002], [1.72881288E12, 1263.0], [1.72880604E12, 932.5], [1.72881186E12, 1956.55], [1.72880964E12, 1535.2999999999997], [1.72880742E12, 1027.5500000000002], [1.72880826E12, 1170.1999999999998], [1.72881048E12, 1524.3000000000006], [1.7288115E12, 1869.8499999999997], [1.7288064E12, 1004.1999999999998], [1.72880622E12, 1025.2], [1.72880946E12, 1164.55], [1.72881168E12, 1906.0], [1.7288127E12, 2013.5999999999985], [1.72881162E12, 1947.299999999999], [1.72880598E12, 1027.3], [1.7288082E12, 1126.6999999999996], [1.7288094E12, 1118.299999999999], [1.728807E12, 1050.6999999999998], [1.72880838E12, 1165.1999999999998], [1.7288106E12, 1518.75], [1.72881282E12, 1808.5], [1.72881144E12, 2003.8000000000006], [1.72880922E12, 1184.15], [1.72881246E12, 1920.0], [1.72880736E12, 1052.15], [1.72880718E12, 993.0], [1.72881042E12, 1545.4499999999982], [1.72881264E12, 1982.0], [1.72880616E12, 988.0], [1.72880874E12, 1132.5999999999985], [1.72881096E12, 1491.2499999999993], [1.72880754E12, 1002.8000000000006], [1.72881198E12, 1996.0], [1.72880994E12, 1511.5999999999995], [1.72881216E12, 1947.9499999999996], [1.72880634E12, 1028.75], [1.72880856E12, 1140.2499999999995], [1.72880772E12, 1181.4499999999998], [1.72880958E12, 1613.3999999999996], [1.7288118E12, 1882.6499999999985], [1.72880976E12, 1560.9999999999995], [1.72880652E12, 1047.9999999999998], [1.72881078E12, 1506.1999999999994], [1.7288097E12, 1515.2999999999997], [1.72881192E12, 1896.9499999999996], [1.72880628E12, 966.7999999999997], [1.7288109E12, 1620.0000000000005], [1.7288073E12, 1031.3500000000004], [1.72880868E12, 1172.1999999999998], [1.72880952E12, 1174.0000000000002], [1.72880646E12, 1035.5999999999995], [1.72881276E12, 2058.4999999999995], [1.72881054E12, 1504.6999999999998], [1.72880748E12, 1055.4999999999995], [1.7288085E12, 1140.0], [1.72881072E12, 1545.0], [1.72881174E12, 1979.1500000000003], [1.72880904E12, 1163.3], [1.72880784E12, 1162.5999999999995], [1.72881006E12, 1504.0], [1.72881228E12, 1969.8999999999999], [1.72880766E12, 1076.0], [1.72881024E12, 1487.7500000000002], [1.72881126E12, 1540.1999999999998], [1.72880664E12, 979.0], [1.7288058E12, 984.2], [1.7288121E12, 1927.5999999999995], [1.72880802E12, 1164.5499999999997], [1.72880988E12, 1551.2000000000003], [1.72880682E12, 995.7], [1.72880886E12, 1185.0], [1.72881108E12, 1535.8999999999999], [1.72881E12, 1526.5999999999995], [1.72880658E12, 975.0], [1.72881102E12, 1547.1999999999975], [1.72880898E12, 1146.8000000000002], [1.7288112E12, 1563.7499999999998], [1.72881222E12, 1972.3500000000001], [1.7288076E12, 955.0], [1.72880676E12, 985.5999999999997], [1.72880862E12, 1224.7499999999995], [1.72881084E12, 1463.6000000000004], [1.7288088E12, 1158.5999999999995], [1.72880778E12, 1115.05], [1.72880982E12, 1595.0], [1.72881204E12, 1989.95], [1.72880694E12, 1019.6999999999999], [1.72880592E12, 985.5], [1.72881036E12, 1522.0], [1.72881258E12, 2006.0], [1.72880832E12, 1168.1999999999998], [1.72880796E12, 1138.1], [1.72880934E12, 1161.5499999999993], [1.72881156E12, 1957.8], [1.72881018E12, 1518.7999999999997], [1.7288124E12, 1990.0], [1.7288061E12, 1036.4], [1.72880814E12, 1130.8], [1.72881138E12, 1883.5], [1.72880916E12, 1186.2999999999997], [1.72880712E12, 1002.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72881288E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 176.0, "minX": 1.0, "maxY": 810.0, "series": [{"data": [[2.0, 584.5], [32.0, 217.5], [33.0, 256.0], [34.0, 189.0], [35.0, 218.5], [37.0, 176.0], [36.0, 273.5], [38.0, 197.5], [39.0, 203.5], [40.0, 190.0], [3.0, 509.0], [4.0, 458.5], [5.0, 482.5], [6.0, 529.0], [7.0, 511.0], [8.0, 475.0], [9.0, 448.0], [10.0, 404.5], [11.0, 389.0], [12.0, 415.0], [13.0, 459.0], [14.0, 524.0], [15.0, 523.0], [1.0, 810.0], [16.0, 536.5], [17.0, 514.0], [18.0, 512.0], [19.0, 476.5], [20.0, 449.0], [21.0, 402.0], [22.0, 373.5], [23.0, 358.0], [24.0, 336.0], [25.0, 298.0], [26.0, 291.0], [27.0, 299.0], [28.0, 255.5], [29.0, 267.5], [30.0, 246.5], [31.0, 242.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 123.5, "minX": 1.0, "maxY": 511.5, "series": [{"data": [[2.0, 411.5], [32.0, 131.5], [33.0, 183.0], [34.0, 127.5], [35.0, 155.0], [37.0, 147.0], [36.0, 184.5], [38.0, 123.5], [39.0, 127.5], [40.0, 143.0], [3.0, 352.0], [4.0, 329.5], [5.0, 337.5], [6.0, 364.5], [7.0, 354.0], [8.0, 334.0], [9.0, 318.0], [10.0, 297.0], [11.0, 280.0], [12.0, 301.0], [13.0, 332.0], [14.0, 374.0], [15.0, 377.0], [1.0, 511.5], [16.0, 385.0], [17.0, 374.0], [18.0, 371.0], [19.0, 347.0], [20.0, 330.0], [21.0, 295.0], [22.0, 269.0], [23.0, 263.0], [24.0, 243.5], [25.0, 208.0], [26.0, 200.0], [27.0, 208.0], [28.0, 175.0], [29.0, 181.0], [30.0, 167.0], [31.0, 159.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.4833333333333334, "minX": 1.7288058E12, "maxY": 22.15, "series": [{"data": [[1.7288079E12, 17.766666666666666], [1.72880688E12, 10.116666666666667], [1.7288091E12, 16.8], [1.72881132E12, 14.816666666666666], [1.72880928E12, 17.366666666666667], [1.7288067E12, 9.516666666666667], [1.72881252E12, 21.233333333333334], [1.7288103E12, 19.566666666666666], [1.72881114E12, 20.183333333333334], [1.72880706E12, 10.033333333333333], [1.72880892E12, 18.066666666666666], [1.72881234E12, 19.816666666666666], [1.72881012E12, 20.25], [1.72880586E12, 5.15], [1.72880808E12, 17.65], [1.72881066E12, 20.0], [1.72880724E12, 9.833333333333334], [1.72880844E12, 18.583333333333332], [1.72881288E12, 6.95], [1.72880604E12, 9.783333333333333], [1.72881186E12, 21.133333333333333], [1.72880964E12, 20.433333333333334], [1.72880742E12, 9.366666666666667], [1.72880826E12, 17.016666666666666], [1.72881048E12, 19.666666666666668], [1.7288115E12, 21.466666666666665], [1.7288064E12, 10.133333333333333], [1.72880622E12, 9.116666666666667], [1.72880946E12, 17.116666666666667], [1.72881168E12, 21.15], [1.7288127E12, 20.366666666666667], [1.72881162E12, 21.016666666666666], [1.72880598E12, 4.733333333333333], [1.7288082E12, 17.333333333333332], [1.7288094E12, 17.166666666666668], [1.728807E12, 9.683333333333334], [1.72880838E12, 17.783333333333335], [1.7288106E12, 20.566666666666666], [1.72881282E12, 21.416666666666668], [1.72881144E12, 20.75], [1.72880922E12, 17.266666666666666], [1.72881246E12, 21.416666666666668], [1.72880736E12, 9.866666666666667], [1.72880718E12, 10.566666666666666], [1.72881042E12, 20.766666666666666], [1.72881264E12, 21.45], [1.72880616E12, 9.983333333333333], [1.72880874E12, 18.2], [1.72881096E12, 19.8], [1.72880754E12, 10.7], [1.72881198E12, 20.316666666666666], [1.72880994E12, 19.933333333333334], [1.72881216E12, 21.433333333333334], [1.72880634E12, 9.733333333333333], [1.72880856E12, 17.7], [1.72880772E12, 15.716666666666667], [1.72880958E12, 20.716666666666665], [1.7288118E12, 20.933333333333334], [1.72880976E12, 19.45], [1.72880652E12, 9.35], [1.72881078E12, 20.116666666666667], [1.7288097E12, 20.433333333333334], [1.72881192E12, 20.766666666666666], [1.72880628E12, 10.25], [1.7288109E12, 19.25], [1.7288073E12, 9.366666666666667], [1.72880868E12, 17.283333333333335], [1.72880952E12, 10.033333333333333], [1.72880646E12, 9.083333333333334], [1.72881276E12, 20.466666666666665], [1.72881054E12, 20.866666666666667], [1.72880748E12, 9.75], [1.7288085E12, 17.35], [1.72881072E12, 20.283333333333335], [1.72881174E12, 20.5], [1.72880904E12, 17.55], [1.72880784E12, 17.783333333333335], [1.72881006E12, 20.466666666666665], [1.72881228E12, 20.683333333333334], [1.72880766E12, 2.4833333333333334], [1.72881024E12, 20.666666666666668], [1.72881126E12, 19.8], [1.72880664E12, 10.0], [1.7288058E12, 4.583333333333333], [1.7288121E12, 21.35], [1.72880802E12, 17.7], [1.72880988E12, 18.75], [1.72880682E12, 10.533333333333333], [1.72880886E12, 17.483333333333334], [1.72881108E12, 20.683333333333334], [1.72881E12, 19.716666666666665], [1.72880658E12, 10.183333333333334], [1.72881102E12, 20.016666666666666], [1.72880898E12, 18.583333333333332], [1.7288112E12, 19.8], [1.72881222E12, 20.166666666666668], [1.7288076E12, 7.566666666666666], [1.72880676E12, 10.05], [1.72880862E12, 16.766666666666666], [1.72881084E12, 21.25], [1.7288088E12, 17.833333333333332], [1.72880778E12, 17.966666666666665], [1.72880982E12, 19.783333333333335], [1.72881204E12, 21.666666666666668], [1.72880694E12, 10.083333333333334], [1.72880592E12, 5.15], [1.72881036E12, 19.8], [1.72881258E12, 20.9], [1.72880832E12, 17.25], [1.72880796E12, 17.65], [1.72880934E12, 17.666666666666668], [1.72881156E12, 22.05], [1.72881018E12, 20.516666666666666], [1.7288124E12, 20.5], [1.7288061E12, 9.85], [1.72880814E12, 18.383333333333333], [1.72881138E12, 22.15], [1.72880916E12, 17.616666666666667], [1.72880712E12, 9.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72881288E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.4833333333333334, "minX": 1.7288058E12, "maxY": 22.15, "series": [{"data": [[1.7288079E12, 17.783333333333335], [1.72880688E12, 10.116666666666667], [1.7288091E12, 16.8], [1.72881132E12, 14.75], [1.72880928E12, 17.366666666666667], [1.7288067E12, 9.516666666666667], [1.72881252E12, 21.233333333333334], [1.7288103E12, 19.566666666666666], [1.72881114E12, 20.183333333333334], [1.72880706E12, 10.033333333333333], [1.72880892E12, 18.066666666666666], [1.72881234E12, 19.816666666666666], [1.72881012E12, 20.25], [1.72880586E12, 5.15], [1.72880808E12, 17.65], [1.72881066E12, 20.0], [1.72880724E12, 9.833333333333334], [1.72880844E12, 18.583333333333332], [1.72881288E12, 7.15], [1.72880604E12, 9.733333333333333], [1.72881186E12, 21.133333333333333], [1.72880964E12, 20.433333333333334], [1.72880742E12, 9.366666666666667], [1.72880826E12, 17.016666666666666], [1.72881048E12, 19.666666666666668], [1.7288115E12, 21.466666666666665], [1.7288064E12, 10.133333333333333], [1.72880622E12, 9.116666666666667], [1.72880946E12, 17.133333333333333], [1.72881168E12, 21.15], [1.7288127E12, 20.366666666666667], [1.72881162E12, 21.016666666666666], [1.72880598E12, 4.75], [1.7288082E12, 17.333333333333332], [1.7288094E12, 17.166666666666668], [1.728807E12, 9.683333333333334], [1.72880838E12, 17.783333333333335], [1.7288106E12, 20.566666666666666], [1.72881282E12, 21.483333333333334], [1.72881144E12, 20.75], [1.72880922E12, 17.266666666666666], [1.72881246E12, 21.416666666666668], [1.72880736E12, 9.866666666666667], [1.72880718E12, 10.566666666666666], [1.72881042E12, 20.766666666666666], [1.72881264E12, 21.45], [1.72880616E12, 9.983333333333333], [1.72880874E12, 18.2], [1.72881096E12, 19.8], [1.72880754E12, 10.7], [1.72881198E12, 20.316666666666666], [1.72880994E12, 19.933333333333334], [1.72881216E12, 21.433333333333334], [1.72880634E12, 9.733333333333333], [1.72880856E12, 17.7], [1.72880772E12, 15.6], [1.72880958E12, 20.716666666666665], [1.7288118E12, 20.933333333333334], [1.72880976E12, 19.45], [1.72880652E12, 9.35], [1.72881078E12, 20.116666666666667], [1.7288097E12, 20.433333333333334], [1.72881192E12, 20.766666666666666], [1.72880628E12, 10.25], [1.7288109E12, 19.25], [1.7288073E12, 9.366666666666667], [1.72880868E12, 17.283333333333335], [1.72880952E12, 9.95], [1.72880646E12, 9.083333333333334], [1.72881276E12, 20.466666666666665], [1.72881054E12, 20.866666666666667], [1.72880748E12, 9.75], [1.7288085E12, 17.35], [1.72881072E12, 20.283333333333335], [1.72881174E12, 20.5], [1.72880904E12, 17.55], [1.72880784E12, 17.783333333333335], [1.72881006E12, 20.466666666666665], [1.72881228E12, 20.683333333333334], [1.72880766E12, 2.4833333333333334], [1.72881024E12, 20.666666666666668], [1.72881126E12, 19.8], [1.72880664E12, 10.0], [1.7288058E12, 4.55], [1.7288121E12, 21.35], [1.72880802E12, 17.7], [1.72880988E12, 18.75], [1.72880682E12, 10.533333333333333], [1.72880886E12, 17.483333333333334], [1.72881108E12, 20.683333333333334], [1.72881E12, 19.716666666666665], [1.72880658E12, 10.183333333333334], [1.72881102E12, 20.016666666666666], [1.72880898E12, 18.583333333333332], [1.7288112E12, 19.8], [1.72881222E12, 20.166666666666668], [1.7288076E12, 7.616666666666666], [1.72880676E12, 10.05], [1.72880862E12, 16.766666666666666], [1.72881084E12, 21.25], [1.7288088E12, 17.833333333333332], [1.72880778E12, 17.966666666666665], [1.72880982E12, 19.783333333333335], [1.72881204E12, 21.666666666666668], [1.72880694E12, 10.083333333333334], [1.72880592E12, 5.15], [1.72881036E12, 19.8], [1.72881258E12, 20.9], [1.72880832E12, 17.25], [1.72880796E12, 17.633333333333333], [1.72880934E12, 17.666666666666668], [1.72881156E12, 22.05], [1.72881018E12, 20.516666666666666], [1.7288124E12, 20.5], [1.7288061E12, 9.85], [1.72880814E12, 18.383333333333333], [1.72881138E12, 22.15], [1.72880916E12, 17.616666666666667], [1.72880712E12, 9.9]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72881288E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.4833333333333334, "minX": 1.7288058E12, "maxY": 22.15, "series": [{"data": [[1.7288079E12, 17.783333333333335], [1.72880688E12, 10.116666666666667], [1.7288091E12, 16.8], [1.72881132E12, 14.75], [1.72880928E12, 17.366666666666667], [1.7288067E12, 9.516666666666667], [1.72881252E12, 21.233333333333334], [1.7288103E12, 19.566666666666666], [1.72881114E12, 20.183333333333334], [1.72880706E12, 10.033333333333333], [1.72880892E12, 18.066666666666666], [1.72881234E12, 19.816666666666666], [1.72881012E12, 20.25], [1.72880586E12, 5.15], [1.72880808E12, 17.65], [1.72881066E12, 20.0], [1.72880724E12, 9.833333333333334], [1.72880844E12, 18.583333333333332], [1.72881288E12, 7.15], [1.72880604E12, 9.733333333333333], [1.72881186E12, 21.133333333333333], [1.72880964E12, 20.433333333333334], [1.72880742E12, 9.366666666666667], [1.72880826E12, 17.016666666666666], [1.72881048E12, 19.666666666666668], [1.7288115E12, 21.466666666666665], [1.7288064E12, 10.133333333333333], [1.72880622E12, 9.116666666666667], [1.72880946E12, 17.133333333333333], [1.72881168E12, 21.15], [1.7288127E12, 20.366666666666667], [1.72881162E12, 21.016666666666666], [1.72880598E12, 4.75], [1.7288082E12, 17.333333333333332], [1.7288094E12, 17.166666666666668], [1.728807E12, 9.683333333333334], [1.72880838E12, 17.783333333333335], [1.7288106E12, 20.566666666666666], [1.72881282E12, 21.483333333333334], [1.72881144E12, 20.75], [1.72880922E12, 17.266666666666666], [1.72881246E12, 21.416666666666668], [1.72880736E12, 9.866666666666667], [1.72880718E12, 10.566666666666666], [1.72881042E12, 20.766666666666666], [1.72881264E12, 21.45], [1.72880616E12, 9.983333333333333], [1.72880874E12, 18.2], [1.72881096E12, 19.8], [1.72880754E12, 10.7], [1.72881198E12, 20.316666666666666], [1.72880994E12, 19.933333333333334], [1.72881216E12, 21.433333333333334], [1.72880634E12, 9.733333333333333], [1.72880856E12, 17.7], [1.72880772E12, 15.6], [1.72880958E12, 20.716666666666665], [1.7288118E12, 20.933333333333334], [1.72880976E12, 19.45], [1.72880652E12, 9.35], [1.72881078E12, 20.116666666666667], [1.7288097E12, 20.433333333333334], [1.72881192E12, 20.766666666666666], [1.72880628E12, 10.25], [1.7288109E12, 19.25], [1.7288073E12, 9.366666666666667], [1.72880868E12, 17.283333333333335], [1.72880952E12, 9.95], [1.72880646E12, 9.083333333333334], [1.72881276E12, 20.466666666666665], [1.72881054E12, 20.866666666666667], [1.72880748E12, 9.75], [1.7288085E12, 17.35], [1.72881072E12, 20.283333333333335], [1.72881174E12, 20.5], [1.72880904E12, 17.55], [1.72880784E12, 17.783333333333335], [1.72881006E12, 20.466666666666665], [1.72881228E12, 20.683333333333334], [1.72880766E12, 2.4833333333333334], [1.72881024E12, 20.666666666666668], [1.72881126E12, 19.8], [1.72880664E12, 10.0], [1.7288058E12, 4.55], [1.7288121E12, 21.35], [1.72880802E12, 17.7], [1.72880988E12, 18.75], [1.72880682E12, 10.533333333333333], [1.72880886E12, 17.483333333333334], [1.72881108E12, 20.683333333333334], [1.72881E12, 19.716666666666665], [1.72880658E12, 10.183333333333334], [1.72881102E12, 20.016666666666666], [1.72880898E12, 18.583333333333332], [1.7288112E12, 19.8], [1.72881222E12, 20.166666666666668], [1.7288076E12, 7.616666666666666], [1.72880676E12, 10.05], [1.72880862E12, 16.766666666666666], [1.72881084E12, 21.25], [1.7288088E12, 17.833333333333332], [1.72880778E12, 17.966666666666665], [1.72880982E12, 19.783333333333335], [1.72881204E12, 21.666666666666668], [1.72880694E12, 10.083333333333334], [1.72880592E12, 5.15], [1.72881036E12, 19.8], [1.72881258E12, 20.9], [1.72880832E12, 17.25], [1.72880796E12, 17.633333333333333], [1.72880934E12, 17.666666666666668], [1.72881156E12, 22.05], [1.72881018E12, 20.516666666666666], [1.7288124E12, 20.5], [1.7288061E12, 9.85], [1.72880814E12, 18.383333333333333], [1.72881138E12, 22.15], [1.72880916E12, 17.616666666666667], [1.72880712E12, 9.9]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72881288E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.4833333333333334, "minX": 1.7288058E12, "maxY": 22.15, "series": [{"data": [[1.7288079E12, 17.783333333333335], [1.72880688E12, 10.116666666666667], [1.7288091E12, 16.8], [1.72881132E12, 14.75], [1.72880928E12, 17.366666666666667], [1.7288067E12, 9.516666666666667], [1.72881252E12, 21.233333333333334], [1.7288103E12, 19.566666666666666], [1.72881114E12, 20.183333333333334], [1.72880706E12, 10.033333333333333], [1.72880892E12, 18.066666666666666], [1.72881234E12, 19.816666666666666], [1.72881012E12, 20.25], [1.72880586E12, 5.15], [1.72880808E12, 17.65], [1.72881066E12, 20.0], [1.72880724E12, 9.833333333333334], [1.72880844E12, 18.583333333333332], [1.72881288E12, 7.15], [1.72880604E12, 9.733333333333333], [1.72881186E12, 21.133333333333333], [1.72880964E12, 20.433333333333334], [1.72880742E12, 9.366666666666667], [1.72880826E12, 17.016666666666666], [1.72881048E12, 19.666666666666668], [1.7288115E12, 21.466666666666665], [1.7288064E12, 10.133333333333333], [1.72880622E12, 9.116666666666667], [1.72880946E12, 17.133333333333333], [1.72881168E12, 21.15], [1.7288127E12, 20.366666666666667], [1.72881162E12, 21.016666666666666], [1.72880598E12, 4.75], [1.7288082E12, 17.333333333333332], [1.7288094E12, 17.166666666666668], [1.728807E12, 9.683333333333334], [1.72880838E12, 17.783333333333335], [1.7288106E12, 20.566666666666666], [1.72881282E12, 21.483333333333334], [1.72881144E12, 20.75], [1.72880922E12, 17.266666666666666], [1.72881246E12, 21.416666666666668], [1.72880736E12, 9.866666666666667], [1.72880718E12, 10.566666666666666], [1.72881042E12, 20.766666666666666], [1.72881264E12, 21.45], [1.72880616E12, 9.983333333333333], [1.72880874E12, 18.2], [1.72881096E12, 19.8], [1.72880754E12, 10.7], [1.72881198E12, 20.316666666666666], [1.72880994E12, 19.933333333333334], [1.72881216E12, 21.433333333333334], [1.72880634E12, 9.733333333333333], [1.72880856E12, 17.7], [1.72880772E12, 15.6], [1.72880958E12, 20.716666666666665], [1.7288118E12, 20.933333333333334], [1.72880976E12, 19.45], [1.72880652E12, 9.35], [1.72881078E12, 20.116666666666667], [1.7288097E12, 20.433333333333334], [1.72881192E12, 20.766666666666666], [1.72880628E12, 10.25], [1.7288109E12, 19.25], [1.7288073E12, 9.366666666666667], [1.72880868E12, 17.283333333333335], [1.72880952E12, 9.95], [1.72880646E12, 9.083333333333334], [1.72881276E12, 20.466666666666665], [1.72881054E12, 20.866666666666667], [1.72880748E12, 9.75], [1.7288085E12, 17.35], [1.72881072E12, 20.283333333333335], [1.72881174E12, 20.5], [1.72880904E12, 17.55], [1.72880784E12, 17.783333333333335], [1.72881006E12, 20.466666666666665], [1.72881228E12, 20.683333333333334], [1.72880766E12, 2.4833333333333334], [1.72881024E12, 20.666666666666668], [1.72881126E12, 19.8], [1.72880664E12, 10.0], [1.7288058E12, 4.55], [1.7288121E12, 21.35], [1.72880802E12, 17.7], [1.72880988E12, 18.75], [1.72880682E12, 10.533333333333333], [1.72880886E12, 17.483333333333334], [1.72881108E12, 20.683333333333334], [1.72881E12, 19.716666666666665], [1.72880658E12, 10.183333333333334], [1.72881102E12, 20.016666666666666], [1.72880898E12, 18.583333333333332], [1.7288112E12, 19.8], [1.72881222E12, 20.166666666666668], [1.7288076E12, 7.616666666666666], [1.72880676E12, 10.05], [1.72880862E12, 16.766666666666666], [1.72881084E12, 21.25], [1.7288088E12, 17.833333333333332], [1.72880778E12, 17.966666666666665], [1.72880982E12, 19.783333333333335], [1.72881204E12, 21.666666666666668], [1.72880694E12, 10.083333333333334], [1.72880592E12, 5.15], [1.72881036E12, 19.8], [1.72881258E12, 20.9], [1.72880832E12, 17.25], [1.72880796E12, 17.633333333333333], [1.72880934E12, 17.666666666666668], [1.72881156E12, 22.05], [1.72881018E12, 20.516666666666666], [1.7288124E12, 20.5], [1.7288061E12, 9.85], [1.72880814E12, 18.383333333333333], [1.72881138E12, 22.15], [1.72880916E12, 17.616666666666667], [1.72880712E12, 9.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72881288E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

