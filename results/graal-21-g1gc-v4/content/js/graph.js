/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 21.0, "minX": 0.0, "maxY": 3538.0, "series": [{"data": [[0.0, 21.0], [0.1, 31.0], [0.2, 34.0], [0.3, 35.0], [0.4, 36.0], [0.5, 38.0], [0.6, 39.0], [0.7, 39.0], [0.8, 40.0], [0.9, 41.0], [1.0, 42.0], [1.1, 42.0], [1.2, 43.0], [1.3, 43.0], [1.4, 44.0], [1.5, 45.0], [1.6, 45.0], [1.7, 46.0], [1.8, 47.0], [1.9, 47.0], [2.0, 48.0], [2.1, 48.0], [2.2, 49.0], [2.3, 49.0], [2.4, 50.0], [2.5, 50.0], [2.6, 50.0], [2.7, 51.0], [2.8, 51.0], [2.9, 52.0], [3.0, 52.0], [3.1, 52.0], [3.2, 53.0], [3.3, 53.0], [3.4, 54.0], [3.5, 54.0], [3.6, 54.0], [3.7, 55.0], [3.8, 55.0], [3.9, 56.0], [4.0, 56.0], [4.1, 56.0], [4.2, 57.0], [4.3, 57.0], [4.4, 57.0], [4.5, 58.0], [4.6, 58.0], [4.7, 58.0], [4.8, 59.0], [4.9, 59.0], [5.0, 59.0], [5.1, 60.0], [5.2, 60.0], [5.3, 60.0], [5.4, 61.0], [5.5, 61.0], [5.6, 62.0], [5.7, 62.0], [5.8, 62.0], [5.9, 62.0], [6.0, 63.0], [6.1, 63.0], [6.2, 63.0], [6.3, 64.0], [6.4, 64.0], [6.5, 64.0], [6.6, 65.0], [6.7, 65.0], [6.8, 65.0], [6.9, 65.0], [7.0, 66.0], [7.1, 66.0], [7.2, 66.0], [7.3, 67.0], [7.4, 67.0], [7.5, 67.0], [7.6, 68.0], [7.7, 68.0], [7.8, 68.0], [7.9, 69.0], [8.0, 69.0], [8.1, 69.0], [8.2, 69.0], [8.3, 70.0], [8.4, 70.0], [8.5, 70.0], [8.6, 71.0], [8.7, 71.0], [8.8, 71.0], [8.9, 71.0], [9.0, 72.0], [9.1, 72.0], [9.2, 72.0], [9.3, 73.0], [9.4, 73.0], [9.5, 73.0], [9.6, 73.0], [9.7, 74.0], [9.8, 74.0], [9.9, 74.0], [10.0, 75.0], [10.1, 75.0], [10.2, 75.0], [10.3, 75.0], [10.4, 76.0], [10.5, 76.0], [10.6, 76.0], [10.7, 77.0], [10.8, 77.0], [10.9, 77.0], [11.0, 77.0], [11.1, 78.0], [11.2, 78.0], [11.3, 78.0], [11.4, 78.0], [11.5, 79.0], [11.6, 79.0], [11.7, 79.0], [11.8, 80.0], [11.9, 80.0], [12.0, 80.0], [12.1, 80.0], [12.2, 81.0], [12.3, 81.0], [12.4, 81.0], [12.5, 81.0], [12.6, 82.0], [12.7, 82.0], [12.8, 82.0], [12.9, 83.0], [13.0, 83.0], [13.1, 83.0], [13.2, 83.0], [13.3, 84.0], [13.4, 84.0], [13.5, 84.0], [13.6, 85.0], [13.7, 85.0], [13.8, 85.0], [13.9, 86.0], [14.0, 86.0], [14.1, 86.0], [14.2, 86.0], [14.3, 87.0], [14.4, 87.0], [14.5, 87.0], [14.6, 87.0], [14.7, 88.0], [14.8, 88.0], [14.9, 88.0], [15.0, 89.0], [15.1, 89.0], [15.2, 89.0], [15.3, 90.0], [15.4, 90.0], [15.5, 90.0], [15.6, 91.0], [15.7, 91.0], [15.8, 91.0], [15.9, 91.0], [16.0, 92.0], [16.1, 92.0], [16.2, 92.0], [16.3, 93.0], [16.4, 93.0], [16.5, 93.0], [16.6, 94.0], [16.7, 94.0], [16.8, 94.0], [16.9, 94.0], [17.0, 95.0], [17.1, 95.0], [17.2, 95.0], [17.3, 96.0], [17.4, 96.0], [17.5, 96.0], [17.6, 97.0], [17.7, 97.0], [17.8, 97.0], [17.9, 97.0], [18.0, 98.0], [18.1, 98.0], [18.2, 98.0], [18.3, 99.0], [18.4, 99.0], [18.5, 99.0], [18.6, 100.0], [18.7, 100.0], [18.8, 100.0], [18.9, 101.0], [19.0, 101.0], [19.1, 101.0], [19.2, 102.0], [19.3, 102.0], [19.4, 102.0], [19.5, 103.0], [19.6, 103.0], [19.7, 103.0], [19.8, 104.0], [19.9, 104.0], [20.0, 104.0], [20.1, 105.0], [20.2, 105.0], [20.3, 105.0], [20.4, 106.0], [20.5, 106.0], [20.6, 106.0], [20.7, 107.0], [20.8, 107.0], [20.9, 107.0], [21.0, 108.0], [21.1, 108.0], [21.2, 109.0], [21.3, 109.0], [21.4, 109.0], [21.5, 110.0], [21.6, 110.0], [21.7, 110.0], [21.8, 111.0], [21.9, 111.0], [22.0, 111.0], [22.1, 112.0], [22.2, 112.0], [22.3, 113.0], [22.4, 113.0], [22.5, 113.0], [22.6, 114.0], [22.7, 114.0], [22.8, 114.0], [22.9, 115.0], [23.0, 115.0], [23.1, 116.0], [23.2, 116.0], [23.3, 116.0], [23.4, 117.0], [23.5, 117.0], [23.6, 117.0], [23.7, 118.0], [23.8, 118.0], [23.9, 119.0], [24.0, 119.0], [24.1, 120.0], [24.2, 120.0], [24.3, 120.0], [24.4, 121.0], [24.5, 121.0], [24.6, 122.0], [24.7, 122.0], [24.8, 123.0], [24.9, 123.0], [25.0, 123.0], [25.1, 124.0], [25.2, 124.0], [25.3, 125.0], [25.4, 125.0], [25.5, 126.0], [25.6, 126.0], [25.7, 126.0], [25.8, 127.0], [25.9, 127.0], [26.0, 128.0], [26.1, 128.0], [26.2, 129.0], [26.3, 129.0], [26.4, 130.0], [26.5, 130.0], [26.6, 131.0], [26.7, 131.0], [26.8, 132.0], [26.9, 132.0], [27.0, 133.0], [27.1, 133.0], [27.2, 133.0], [27.3, 134.0], [27.4, 134.0], [27.5, 135.0], [27.6, 135.0], [27.7, 136.0], [27.8, 136.0], [27.9, 137.0], [28.0, 137.0], [28.1, 138.0], [28.2, 138.0], [28.3, 139.0], [28.4, 139.0], [28.5, 140.0], [28.6, 140.0], [28.7, 141.0], [28.8, 141.0], [28.9, 142.0], [29.0, 142.0], [29.1, 143.0], [29.2, 143.0], [29.3, 144.0], [29.4, 145.0], [29.5, 145.0], [29.6, 146.0], [29.7, 146.0], [29.8, 147.0], [29.9, 147.0], [30.0, 148.0], [30.1, 148.0], [30.2, 149.0], [30.3, 149.0], [30.4, 150.0], [30.5, 151.0], [30.6, 151.0], [30.7, 152.0], [30.8, 152.0], [30.9, 153.0], [31.0, 153.0], [31.1, 154.0], [31.2, 155.0], [31.3, 155.0], [31.4, 156.0], [31.5, 157.0], [31.6, 157.0], [31.7, 158.0], [31.8, 158.0], [31.9, 159.0], [32.0, 160.0], [32.1, 160.0], [32.2, 161.0], [32.3, 162.0], [32.4, 162.0], [32.5, 163.0], [32.6, 164.0], [32.7, 164.0], [32.8, 165.0], [32.9, 165.0], [33.0, 166.0], [33.1, 167.0], [33.2, 168.0], [33.3, 168.0], [33.4, 169.0], [33.5, 170.0], [33.6, 170.0], [33.7, 171.0], [33.8, 172.0], [33.9, 173.0], [34.0, 174.0], [34.1, 174.0], [34.2, 175.0], [34.3, 176.0], [34.4, 176.0], [34.5, 177.0], [34.6, 178.0], [34.7, 179.0], [34.8, 180.0], [34.9, 180.0], [35.0, 181.0], [35.1, 182.0], [35.2, 183.0], [35.3, 184.0], [35.4, 184.0], [35.5, 185.0], [35.6, 186.0], [35.7, 187.0], [35.8, 188.0], [35.9, 189.0], [36.0, 189.0], [36.1, 190.0], [36.2, 191.0], [36.3, 192.0], [36.4, 193.0], [36.5, 194.0], [36.6, 195.0], [36.7, 196.0], [36.8, 197.0], [36.9, 197.0], [37.0, 198.0], [37.1, 199.0], [37.2, 200.0], [37.3, 201.0], [37.4, 202.0], [37.5, 203.0], [37.6, 204.0], [37.7, 205.0], [37.8, 206.0], [37.9, 207.0], [38.0, 208.0], [38.1, 209.0], [38.2, 210.0], [38.3, 211.0], [38.4, 212.0], [38.5, 213.0], [38.6, 215.0], [38.7, 216.0], [38.8, 217.0], [38.9, 218.0], [39.0, 219.0], [39.1, 221.0], [39.2, 222.0], [39.3, 223.0], [39.4, 224.0], [39.5, 226.0], [39.6, 227.0], [39.7, 228.0], [39.8, 229.0], [39.9, 230.0], [40.0, 232.0], [40.1, 233.0], [40.2, 234.0], [40.3, 236.0], [40.4, 237.0], [40.5, 239.0], [40.6, 240.0], [40.7, 241.0], [40.8, 243.0], [40.9, 244.0], [41.0, 246.0], [41.1, 247.0], [41.2, 249.0], [41.3, 250.0], [41.4, 252.0], [41.5, 254.0], [41.6, 255.0], [41.7, 257.0], [41.8, 259.0], [41.9, 260.0], [42.0, 262.0], [42.1, 264.0], [42.2, 265.0], [42.3, 267.0], [42.4, 268.0], [42.5, 270.0], [42.6, 272.0], [42.7, 274.0], [42.8, 275.0], [42.9, 277.0], [43.0, 279.0], [43.1, 280.0], [43.2, 282.0], [43.3, 284.0], [43.4, 286.0], [43.5, 288.0], [43.6, 290.0], [43.7, 291.0], [43.8, 293.0], [43.9, 295.0], [44.0, 297.0], [44.1, 299.0], [44.2, 301.0], [44.3, 303.0], [44.4, 305.0], [44.5, 307.0], [44.6, 309.0], [44.7, 312.0], [44.8, 314.0], [44.9, 316.0], [45.0, 319.0], [45.1, 321.0], [45.2, 323.0], [45.3, 325.0], [45.4, 328.0], [45.5, 330.0], [45.6, 333.0], [45.7, 335.0], [45.8, 337.0], [45.9, 339.0], [46.0, 342.0], [46.1, 344.0], [46.2, 347.0], [46.3, 349.0], [46.4, 351.0], [46.5, 354.0], [46.6, 356.0], [46.7, 358.0], [46.8, 361.0], [46.9, 363.0], [47.0, 365.0], [47.1, 367.0], [47.2, 370.0], [47.3, 372.0], [47.4, 375.0], [47.5, 377.0], [47.6, 379.0], [47.7, 382.0], [47.8, 384.0], [47.9, 387.0], [48.0, 389.0], [48.1, 392.0], [48.2, 394.0], [48.3, 396.0], [48.4, 399.0], [48.5, 401.0], [48.6, 403.0], [48.7, 405.0], [48.8, 407.0], [48.9, 410.0], [49.0, 412.0], [49.1, 414.0], [49.2, 416.0], [49.3, 419.0], [49.4, 420.0], [49.5, 423.0], [49.6, 425.0], [49.7, 427.0], [49.8, 429.0], [49.9, 431.0], [50.0, 433.0], [50.1, 436.0], [50.2, 439.0], [50.3, 440.0], [50.4, 443.0], [50.5, 445.0], [50.6, 447.0], [50.7, 449.0], [50.8, 451.0], [50.9, 453.0], [51.0, 455.0], [51.1, 457.0], [51.2, 460.0], [51.3, 462.0], [51.4, 464.0], [51.5, 466.0], [51.6, 468.0], [51.7, 470.0], [51.8, 473.0], [51.9, 474.0], [52.0, 477.0], [52.1, 478.0], [52.2, 480.0], [52.3, 482.0], [52.4, 484.0], [52.5, 486.0], [52.6, 488.0], [52.7, 490.0], [52.8, 492.0], [52.9, 494.0], [53.0, 496.0], [53.1, 498.0], [53.2, 500.0], [53.3, 502.0], [53.4, 504.0], [53.5, 506.0], [53.6, 508.0], [53.7, 510.0], [53.8, 512.0], [53.9, 513.0], [54.0, 515.0], [54.1, 517.0], [54.2, 519.0], [54.3, 521.0], [54.4, 523.0], [54.5, 525.0], [54.6, 527.0], [54.7, 529.0], [54.8, 531.0], [54.9, 533.0], [55.0, 535.0], [55.1, 537.0], [55.2, 538.0], [55.3, 540.0], [55.4, 542.0], [55.5, 544.0], [55.6, 546.0], [55.7, 547.0], [55.8, 549.0], [55.9, 551.0], [56.0, 552.0], [56.1, 554.0], [56.2, 556.0], [56.3, 558.0], [56.4, 560.0], [56.5, 562.0], [56.6, 563.0], [56.7, 565.0], [56.8, 567.0], [56.9, 569.0], [57.0, 571.0], [57.1, 573.0], [57.2, 575.0], [57.3, 577.0], [57.4, 579.0], [57.5, 580.0], [57.6, 582.0], [57.7, 584.0], [57.8, 586.0], [57.9, 587.0], [58.0, 589.0], [58.1, 591.0], [58.2, 592.0], [58.3, 594.0], [58.4, 596.0], [58.5, 598.0], [58.6, 600.0], [58.7, 601.0], [58.8, 603.0], [58.9, 605.0], [59.0, 607.0], [59.1, 609.0], [59.2, 611.0], [59.3, 612.0], [59.4, 614.0], [59.5, 615.0], [59.6, 617.0], [59.7, 619.0], [59.8, 621.0], [59.9, 623.0], [60.0, 625.0], [60.1, 627.0], [60.2, 628.0], [60.3, 630.0], [60.4, 632.0], [60.5, 633.0], [60.6, 635.0], [60.7, 637.0], [60.8, 639.0], [60.9, 641.0], [61.0, 642.0], [61.1, 644.0], [61.2, 646.0], [61.3, 648.0], [61.4, 650.0], [61.5, 652.0], [61.6, 653.0], [61.7, 655.0], [61.8, 657.0], [61.9, 659.0], [62.0, 660.0], [62.1, 662.0], [62.2, 664.0], [62.3, 666.0], [62.4, 667.0], [62.5, 669.0], [62.6, 671.0], [62.7, 673.0], [62.8, 674.0], [62.9, 676.0], [63.0, 678.0], [63.1, 680.0], [63.2, 681.0], [63.3, 683.0], [63.4, 685.0], [63.5, 686.0], [63.6, 688.0], [63.7, 690.0], [63.8, 691.0], [63.9, 693.0], [64.0, 695.0], [64.1, 696.0], [64.2, 698.0], [64.3, 700.0], [64.4, 702.0], [64.5, 703.0], [64.6, 705.0], [64.7, 707.0], [64.8, 709.0], [64.9, 710.0], [65.0, 712.0], [65.1, 714.0], [65.2, 716.0], [65.3, 718.0], [65.4, 719.0], [65.5, 721.0], [65.6, 722.0], [65.7, 724.0], [65.8, 726.0], [65.9, 728.0], [66.0, 729.0], [66.1, 731.0], [66.2, 732.0], [66.3, 734.0], [66.4, 735.0], [66.5, 737.0], [66.6, 739.0], [66.7, 741.0], [66.8, 742.0], [66.9, 744.0], [67.0, 746.0], [67.1, 748.0], [67.2, 750.0], [67.3, 751.0], [67.4, 753.0], [67.5, 755.0], [67.6, 756.0], [67.7, 758.0], [67.8, 760.0], [67.9, 762.0], [68.0, 764.0], [68.1, 766.0], [68.2, 768.0], [68.3, 770.0], [68.4, 772.0], [68.5, 773.0], [68.6, 775.0], [68.7, 777.0], [68.8, 778.0], [68.9, 780.0], [69.0, 782.0], [69.1, 784.0], [69.2, 785.0], [69.3, 787.0], [69.4, 789.0], [69.5, 791.0], [69.6, 793.0], [69.7, 794.0], [69.8, 796.0], [69.9, 798.0], [70.0, 799.0], [70.1, 801.0], [70.2, 803.0], [70.3, 805.0], [70.4, 807.0], [70.5, 809.0], [70.6, 811.0], [70.7, 812.0], [70.8, 814.0], [70.9, 816.0], [71.0, 818.0], [71.1, 820.0], [71.2, 822.0], [71.3, 824.0], [71.4, 826.0], [71.5, 827.0], [71.6, 830.0], [71.7, 831.0], [71.8, 833.0], [71.9, 835.0], [72.0, 837.0], [72.1, 839.0], [72.2, 840.0], [72.3, 842.0], [72.4, 844.0], [72.5, 845.0], [72.6, 847.0], [72.7, 849.0], [72.8, 851.0], [72.9, 853.0], [73.0, 855.0], [73.1, 857.0], [73.2, 858.0], [73.3, 860.0], [73.4, 862.0], [73.5, 864.0], [73.6, 865.0], [73.7, 868.0], [73.8, 869.0], [73.9, 872.0], [74.0, 874.0], [74.1, 876.0], [74.2, 878.0], [74.3, 880.0], [74.4, 882.0], [74.5, 884.0], [74.6, 886.0], [74.7, 888.0], [74.8, 889.0], [74.9, 891.0], [75.0, 893.0], [75.1, 895.0], [75.2, 897.0], [75.3, 899.0], [75.4, 901.0], [75.5, 903.0], [75.6, 905.0], [75.7, 907.0], [75.8, 910.0], [75.9, 911.0], [76.0, 913.0], [76.1, 915.0], [76.2, 917.0], [76.3, 920.0], [76.4, 922.0], [76.5, 924.0], [76.6, 926.0], [76.7, 928.0], [76.8, 930.0], [76.9, 933.0], [77.0, 935.0], [77.1, 937.0], [77.2, 939.0], [77.3, 941.0], [77.4, 943.0], [77.5, 945.0], [77.6, 947.0], [77.7, 949.0], [77.8, 951.0], [77.9, 953.0], [78.0, 956.0], [78.1, 958.0], [78.2, 960.0], [78.3, 962.0], [78.4, 964.0], [78.5, 967.0], [78.6, 969.0], [78.7, 970.0], [78.8, 973.0], [78.9, 975.0], [79.0, 977.0], [79.1, 980.0], [79.2, 982.0], [79.3, 984.0], [79.4, 987.0], [79.5, 989.0], [79.6, 991.0], [79.7, 994.0], [79.8, 996.0], [79.9, 998.0], [80.0, 1000.0], [80.1, 1002.0], [80.2, 1005.0], [80.3, 1008.0], [80.4, 1010.0], [80.5, 1013.0], [80.6, 1015.0], [80.7, 1018.0], [80.8, 1020.0], [80.9, 1022.0], [81.0, 1025.0], [81.1, 1027.0], [81.2, 1030.0], [81.3, 1032.0], [81.4, 1035.0], [81.5, 1037.0], [81.6, 1040.0], [81.7, 1042.0], [81.8, 1044.0], [81.9, 1047.0], [82.0, 1049.0], [82.1, 1051.0], [82.2, 1054.0], [82.3, 1056.0], [82.4, 1059.0], [82.5, 1061.0], [82.6, 1064.0], [82.7, 1066.0], [82.8, 1068.0], [82.9, 1071.0], [83.0, 1074.0], [83.1, 1076.0], [83.2, 1079.0], [83.3, 1082.0], [83.4, 1085.0], [83.5, 1088.0], [83.6, 1091.0], [83.7, 1093.0], [83.8, 1096.0], [83.9, 1099.0], [84.0, 1102.0], [84.1, 1105.0], [84.2, 1108.0], [84.3, 1110.0], [84.4, 1113.0], [84.5, 1116.0], [84.6, 1119.0], [84.7, 1122.0], [84.8, 1124.0], [84.9, 1128.0], [85.0, 1131.0], [85.1, 1134.0], [85.2, 1136.0], [85.3, 1139.0], [85.4, 1142.0], [85.5, 1145.0], [85.6, 1148.0], [85.7, 1151.0], [85.8, 1154.0], [85.9, 1156.0], [86.0, 1159.0], [86.1, 1162.0], [86.2, 1165.0], [86.3, 1169.0], [86.4, 1172.0], [86.5, 1175.0], [86.6, 1178.0], [86.7, 1181.0], [86.8, 1184.0], [86.9, 1187.0], [87.0, 1190.0], [87.1, 1194.0], [87.2, 1197.0], [87.3, 1201.0], [87.4, 1204.0], [87.5, 1208.0], [87.6, 1212.0], [87.7, 1215.0], [87.8, 1218.0], [87.9, 1221.0], [88.0, 1225.0], [88.1, 1229.0], [88.2, 1232.0], [88.3, 1235.0], [88.4, 1239.0], [88.5, 1242.0], [88.6, 1246.0], [88.7, 1250.0], [88.8, 1253.0], [88.9, 1257.0], [89.0, 1260.0], [89.1, 1264.0], [89.2, 1268.0], [89.3, 1272.0], [89.4, 1275.0], [89.5, 1279.0], [89.6, 1283.0], [89.7, 1287.0], [89.8, 1291.0], [89.9, 1295.0], [90.0, 1299.0], [90.1, 1303.0], [90.2, 1307.0], [90.3, 1311.0], [90.4, 1315.0], [90.5, 1319.0], [90.6, 1323.0], [90.7, 1327.0], [90.8, 1332.0], [90.9, 1336.0], [91.0, 1340.0], [91.1, 1344.0], [91.2, 1349.0], [91.3, 1353.0], [91.4, 1358.0], [91.5, 1363.0], [91.6, 1367.0], [91.7, 1372.0], [91.8, 1377.0], [91.9, 1382.0], [92.0, 1387.0], [92.1, 1392.0], [92.2, 1397.0], [92.3, 1402.0], [92.4, 1407.0], [92.5, 1412.0], [92.6, 1418.0], [92.7, 1423.0], [92.8, 1429.0], [92.9, 1435.0], [93.0, 1439.0], [93.1, 1444.0], [93.2, 1449.0], [93.3, 1456.0], [93.4, 1462.0], [93.5, 1468.0], [93.6, 1474.0], [93.7, 1481.0], [93.8, 1487.0], [93.9, 1493.0], [94.0, 1500.0], [94.1, 1506.0], [94.2, 1514.0], [94.3, 1519.0], [94.4, 1527.0], [94.5, 1534.0], [94.6, 1540.0], [94.7, 1547.0], [94.8, 1554.0], [94.9, 1561.0], [95.0, 1568.0], [95.1, 1576.0], [95.2, 1585.0], [95.3, 1593.0], [95.4, 1599.0], [95.5, 1609.0], [95.6, 1618.0], [95.7, 1625.0], [95.8, 1636.0], [95.9, 1644.0], [96.0, 1653.0], [96.1, 1662.0], [96.2, 1672.0], [96.3, 1682.0], [96.4, 1693.0], [96.5, 1703.0], [96.6, 1712.0], [96.7, 1723.0], [96.8, 1734.0], [96.9, 1744.0], [97.0, 1755.0], [97.1, 1767.0], [97.2, 1779.0], [97.3, 1792.0], [97.4, 1803.0], [97.5, 1817.0], [97.6, 1831.0], [97.7, 1846.0], [97.8, 1862.0], [97.9, 1875.0], [98.0, 1892.0], [98.1, 1911.0], [98.2, 1928.0], [98.3, 1951.0], [98.4, 1970.0], [98.5, 1991.0], [98.6, 2011.0], [98.7, 2034.0], [98.8, 2059.0], [98.9, 2089.0], [99.0, 2120.0], [99.1, 2153.0], [99.2, 2189.0], [99.3, 2229.0], [99.4, 2276.0], [99.5, 2333.0], [99.6, 2389.0], [99.7, 2475.0], [99.8, 2586.0], [99.9, 2763.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 21761.0, "series": [{"data": [[0.0, 21761.0], [600.0, 6657.0], [700.0, 6726.0], [800.0, 6211.0], [900.0, 5448.0], [1000.0, 4636.0], [1100.0, 3930.0], [1200.0, 3224.0], [1300.0, 2619.0], [1400.0, 2038.0], [1500.0, 1653.0], [100.0, 21742.0], [1600.0, 1248.0], [1700.0, 1061.0], [1800.0, 774.0], [1900.0, 599.0], [2000.0, 456.0], [2100.0, 345.0], [2200.0, 252.0], [2300.0, 204.0], [2400.0, 120.0], [2500.0, 110.0], [2600.0, 68.0], [2800.0, 32.0], [2700.0, 52.0], [2900.0, 28.0], [3000.0, 18.0], [3100.0, 10.0], [200.0, 8194.0], [3200.0, 4.0], [3300.0, 2.0], [3400.0, 3.0], [3500.0, 4.0], [300.0, 5088.0], [400.0, 5551.0], [500.0, 6332.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7022.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 62393.0, "series": [{"data": [[0.0, 62393.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 47785.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7022.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72881318E12, "maxY": 16.0, "series": [{"data": [[1.72881696E12, 11.956774729842067], [1.72881858E12, 12.0], [1.72881828E12, 12.0], [1.72881798E12, 12.0], [1.72881768E12, 12.0], [1.72881738E12, 12.0], [1.72881708E12, 12.0], [1.7288187E12, 8.439393939393929], [1.7288184E12, 12.0], [1.7288181E12, 12.0], [1.7288178E12, 12.0], [1.7288175E12, 12.0], [1.7288172E12, 12.0], [1.72881852E12, 12.0], [1.72881822E12, 12.0], [1.72881792E12, 12.0], [1.72881762E12, 12.0], [1.72881732E12, 12.0], [1.72881702E12, 12.0], [1.72881864E12, 11.728522336769764], [1.72881834E12, 12.0], [1.72881804E12, 12.0], [1.72881774E12, 12.0], [1.72881744E12, 12.0], [1.72881714E12, 12.0], [1.72881846E12, 12.0], [1.72881876E12, 2.5473684210526333], [1.72881816E12, 12.0], [1.72881786E12, 12.0], [1.72881756E12, 12.0], [1.72881726E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72881324E12, 2.0], [1.72881342E12, 1.9481481481481482], [1.72881336E12, 2.0], [1.72881318E12, 1.8], [1.7288133E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72881486E12, 4.0], [1.72881384E12, 4.0], [1.72881354E12, 4.0], [1.72881444E12, 4.0], [1.72881414E12, 4.0], [1.72881474E12, 4.0], [1.72881504E12, 3.2505854800936778], [1.72881438E12, 4.0], [1.72881468E12, 4.0], [1.72881498E12, 4.0], [1.72881396E12, 4.0], [1.72881366E12, 4.0], [1.72881426E12, 4.0], [1.72881456E12, 4.0], [1.7288142E12, 4.0], [1.7288139E12, 4.0], [1.7288145E12, 4.0], [1.7288148E12, 4.0], [1.72881348E12, 4.0], [1.7288151E12, 1.0], [1.72881408E12, 4.0], [1.72881378E12, 4.0], [1.72881372E12, 4.0], [1.72881342E12, 3.9718309859154926], [1.72881432E12, 4.0], [1.72881402E12, 4.0], [1.72881462E12, 4.0], [1.72881492E12, 4.0], [1.7288136E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72881888E12, 16.0], [1.7288199E12, 16.0], [1.7288202E12, 16.0], [1.7288193E12, 16.0], [1.7288196E12, 16.0], [1.728819E12, 16.0], [1.72882002E12, 16.0], [1.72882032E12, 1.0], [1.72881942E12, 16.0], [1.72881972E12, 16.0], [1.72881882E12, 16.0], [1.72881912E12, 16.0], [1.72882014E12, 16.0], [1.72881954E12, 16.0], [1.72881984E12, 16.0], [1.72881894E12, 16.0], [1.72881924E12, 16.0], [1.72882026E12, 12.098619329388569], [1.72881966E12, 16.0], [1.72881996E12, 16.0], [1.72881906E12, 16.0], [1.72881936E12, 16.0], [1.72881876E12, 15.935810810810816], [1.72881978E12, 16.0], [1.72882008E12, 16.0], [1.72881918E12, 16.0], [1.72881948E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.72881696E12, 1.0], [1.72881516E12, 8.0], [1.72881666E12, 8.0], [1.72881546E12, 8.0], [1.72881576E12, 8.0], [1.72881606E12, 8.0], [1.72881636E12, 8.0], [1.72881678E12, 8.0], [1.7288163E12, 8.0], [1.7288166E12, 8.0], [1.72881528E12, 8.0], [1.72881558E12, 8.0], [1.72881588E12, 8.0], [1.7288169E12, 4.032653061224493], [1.72881618E12, 8.0], [1.72881648E12, 8.0], [1.72881582E12, 8.0], [1.72881612E12, 8.0], [1.72881642E12, 8.0], [1.7288151E12, 7.98706896551724], [1.72881672E12, 8.0], [1.7288154E12, 8.0], [1.7288157E12, 8.0], [1.728816E12, 8.0], [1.72881534E12, 8.0], [1.72881564E12, 8.0], [1.72881594E12, 8.0], [1.72881684E12, 7.1246073298429256], [1.72881624E12, 8.0], [1.72881654E12, 8.0], [1.72881522E12, 8.0], [1.72881552E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72882032E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 391.21412125863424, "minX": 1.0, "maxY": 763.750303999995, "series": [{"data": [[2.0, 391.21412125863424], [8.0, 454.40178831762324], [9.0, 530.0031545741323], [10.0, 516.8654970760235], [11.0, 557.8078431372547], [3.0, 401.9556786703602], [12.0, 596.1082109999118], [13.0, 668.7716049382722], [14.0, 675.4800000000001], [15.0, 490.66666666666663], [1.0, 438.3655172413794], [4.0, 401.4622588146574], [16.0, 763.750303999995], [5.0, 411.0047846889952], [6.0, 425.81196581196605], [7.0, 441.55665566556684]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.700307167235666, 571.8769453924805]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72881318E12, "maxY": 6.054849921666667E7, "series": [{"data": [[1.72881696E12, 5.4186704583333336E7], [1.72881354E12, 3.0964906933333334E7], [1.72881576E12, 5.23354938E7], [1.72881798E12, 6.054849921666667E7], [1.7288202E12, 5.8976310516666666E7], [1.72881474E12, 3.0259902333333332E7], [1.72881678E12, 5.182374228333333E7], [1.728819E12, 5.8930146E7], [1.72882002E12, 5.715009965E7], [1.72881438E12, 3.0905741933333334E7], [1.7288166E12, 5.2012709983333334E7], [1.7288178E12, 5.55228746E7], [1.72881336E12, 1.532622995E7], [1.72881558E12, 5.025112115E7], [1.72881882E12, 5.627188063333333E7], [1.72881456E12, 2.9721875416666668E7], [1.72881954E12, 5.716977245E7], [1.7288139E12, 3.1986661E7], [1.72881612E12, 5.0637897416666664E7], [1.72881732E12, 5.77593831E7], [1.7288151E12, 4.851533965E7], [1.72881834E12, 5.753787661666667E7], [1.72881408E12, 2.9744161783333335E7], [1.72881372E12, 3.1753476033333335E7], [1.72881714E12, 5.772477646666667E7], [1.72881936E12, 5.981542085E7], [1.72881594E12, 5.1965347016666666E7], [1.72881816E12, 5.7318931516666666E7], [1.72881492E12, 3.0964307483333334E7], [1.72881918E12, 5.915902185E7], [1.72881486E12, 2.97750472E7], [1.72881384E12, 3.0528382416666668E7], [1.72881828E12, 5.6589538083333336E7], [1.72881606E12, 5.2053432583333336E7], [1.7288193E12, 5.925357385E7], [1.72881708E12, 5.666026303333333E7], [1.72881504E12, 2.1317624766666666E7], [1.7288181E12, 5.7753439733333334E7], [1.72882032E12, 1440367.05], [1.72881468E12, 3.17170243E7], [1.72881366E12, 2.9970283033333335E7], [1.72881588E12, 5.255117031666667E7], [1.7288169E12, 2.4817432883333333E7], [1.72881912E12, 5.886048936666667E7], [1.72882014E12, 5.7602495733333334E7], [1.7288142E12, 3.08376619E7], [1.72881984E12, 5.970946438333333E7], [1.72881762E12, 5.807943131666667E7], [1.72881642E12, 5.024634813333333E7], [1.72881864E12, 5.6118170583333336E7], [1.72881318E12, 439256.73333333334], [1.7288154E12, 5.332596863333333E7], [1.72881966E12, 5.94616568E7], [1.72881744E12, 5.524907865E7], [1.72881402E12, 3.1468728083333332E7], [1.72881624E12, 5.374242993333333E7], [1.72881846E12, 5.616000835E7], [1.72881522E12, 5.370354268333333E7], [1.72881726E12, 5.70409962E7], [1.72881948E12, 5.8546819766666666E7], [1.72881858E12, 5.60148456E7], [1.72881516E12, 4.892940165E7], [1.72881414E12, 3.066309955E7], [1.72881636E12, 5.05273765E7], [1.72881738E12, 5.6900887166666664E7], [1.7288196E12, 5.943027431666667E7], [1.7288184E12, 5.828860071666667E7], [1.72881498E12, 2.8254791383333333E7], [1.72881942E12, 5.774685575E7], [1.72881396E12, 3.0364790716666665E7], [1.7288172E12, 5.820517278333333E7], [1.72881618E12, 5.052158211666667E7], [1.72881822E12, 5.4958459E7], [1.72881792E12, 5.50698403E7], [1.72881894E12, 5.81696758E7], [1.7288145E12, 3.0251926783333335E7], [1.72881348E12, 2.9638996266666666E7], [1.72881672E12, 5.265703496666667E7], [1.7288157E12, 5.2385921266666666E7], [1.72881774E12, 5.7973041666666664E7], [1.72881996E12, 5.882091478333333E7], [1.72881534E12, 5.00932562E7], [1.72881432E12, 2.9066573533333335E7], [1.72881876E12, 4.4843084983333334E7], [1.72881654E12, 5.285103621666667E7], [1.72881978E12, 5.767459011666667E7], [1.72881756E12, 5.561897843333333E7], [1.7288133E12, 1.5374076083333334E7], [1.72881552E12, 4.9980333516666666E7], [1.72881324E12, 1.6243640016666668E7], [1.72881666E12, 5.120827996666667E7], [1.72881888E12, 5.987561386666667E7], [1.7288199E12, 5.572937515E7], [1.72881546E12, 5.125073971666667E7], [1.72881444E12, 3.1276238566666666E7], [1.72881768E12, 5.67212272E7], [1.7288187E12, 4.70751755E7], [1.7288163E12, 5.16183857E7], [1.72881528E12, 5.305987081666667E7], [1.7288175E12, 5.733156986666667E7], [1.72881972E12, 5.94116673E7], [1.72881852E12, 5.685815045E7], [1.72881426E12, 2.9316512816666666E7], [1.72881648E12, 5.3700632233333334E7], [1.72881582E12, 5.075147585E7], [1.7288148E12, 3.020228715E7], [1.72881702E12, 5.631317786666667E7], [1.72881924E12, 5.7884077733333334E7], [1.72882026E12, 4.5131389233333334E7], [1.72881804E12, 5.5778339583333336E7], [1.72881378E12, 3.0645602266666666E7], [1.728816E12, 5.22674463E7], [1.72881906E12, 5.788918163333333E7], [1.72881564E12, 5.221064E7], [1.72881342E12, 1.5793515866666667E7], [1.72881684E12, 4.9918995233333334E7], [1.72881462E12, 3.1048930466666665E7], [1.72881786E12, 5.656173946666667E7], [1.72882008E12, 6.03734226E7], [1.7288136E12, 3.0167011566666666E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72881696E12, 0.0], [1.72881354E12, 0.0], [1.72881576E12, 0.0], [1.72881798E12, 0.0], [1.7288202E12, 0.0], [1.72881474E12, 0.0], [1.72881678E12, 0.0], [1.728819E12, 0.0], [1.72882002E12, 0.0], [1.72881438E12, 0.0], [1.7288166E12, 0.0], [1.7288178E12, 0.0], [1.72881336E12, 0.0], [1.72881558E12, 0.0], [1.72881882E12, 0.0], [1.72881456E12, 0.0], [1.72881954E12, 0.0], [1.7288139E12, 0.0], [1.72881612E12, 0.0], [1.72881732E12, 0.0], [1.7288151E12, 0.0], [1.72881834E12, 0.0], [1.72881408E12, 0.0], [1.72881372E12, 0.0], [1.72881714E12, 0.0], [1.72881936E12, 0.0], [1.72881594E12, 0.0], [1.72881816E12, 0.0], [1.72881492E12, 0.0], [1.72881918E12, 0.0], [1.72881486E12, 0.0], [1.72881384E12, 0.0], [1.72881828E12, 0.0], [1.72881606E12, 0.0], [1.7288193E12, 0.0], [1.72881708E12, 0.0], [1.72881504E12, 0.0], [1.7288181E12, 0.0], [1.72882032E12, 0.0], [1.72881468E12, 0.0], [1.72881366E12, 0.0], [1.72881588E12, 0.0], [1.7288169E12, 0.0], [1.72881912E12, 0.0], [1.72882014E12, 0.0], [1.7288142E12, 0.0], [1.72881984E12, 0.0], [1.72881762E12, 0.0], [1.72881642E12, 0.0], [1.72881864E12, 0.0], [1.72881318E12, 0.0], [1.7288154E12, 0.0], [1.72881966E12, 0.0], [1.72881744E12, 0.0], [1.72881402E12, 0.0], [1.72881624E12, 0.0], [1.72881846E12, 0.0], [1.72881522E12, 0.0], [1.72881726E12, 0.0], [1.72881948E12, 0.0], [1.72881858E12, 0.0], [1.72881516E12, 0.0], [1.72881414E12, 0.0], [1.72881636E12, 0.0], [1.72881738E12, 0.0], [1.7288196E12, 0.0], [1.7288184E12, 0.0], [1.72881498E12, 0.0], [1.72881942E12, 0.0], [1.72881396E12, 0.0], [1.7288172E12, 0.0], [1.72881618E12, 0.0], [1.72881822E12, 0.0], [1.72881792E12, 0.0], [1.72881894E12, 0.0], [1.7288145E12, 0.0], [1.72881348E12, 0.0], [1.72881672E12, 0.0], [1.7288157E12, 0.0], [1.72881774E12, 0.0], [1.72881996E12, 0.0], [1.72881534E12, 0.0], [1.72881432E12, 0.0], [1.72881876E12, 0.0], [1.72881654E12, 0.0], [1.72881978E12, 0.0], [1.72881756E12, 0.0], [1.7288133E12, 0.0], [1.72881552E12, 0.0], [1.72881324E12, 0.0], [1.72881666E12, 0.0], [1.72881888E12, 0.0], [1.7288199E12, 0.0], [1.72881546E12, 0.0], [1.72881444E12, 0.0], [1.72881768E12, 0.0], [1.7288187E12, 0.0], [1.7288163E12, 0.0], [1.72881528E12, 0.0], [1.7288175E12, 0.0], [1.72881972E12, 0.0], [1.72881852E12, 0.0], [1.72881426E12, 0.0], [1.72881648E12, 0.0], [1.72881582E12, 0.0], [1.7288148E12, 0.0], [1.72881702E12, 0.0], [1.72881924E12, 0.0], [1.72882026E12, 0.0], [1.72881804E12, 0.0], [1.72881378E12, 0.0], [1.728816E12, 0.0], [1.72881906E12, 0.0], [1.72881564E12, 0.0], [1.72881342E12, 0.0], [1.72881684E12, 0.0], [1.72881462E12, 0.0], [1.72881786E12, 0.0], [1.72882008E12, 0.0], [1.7288136E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72882032E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 375.10452418096753, "minX": 1.72881318E12, "maxY": 819.2602040816324, "series": [{"data": [[1.72881696E12, 557.9867768595037], [1.72881354E12, 404.660504201681], [1.72881576E12, 453.996233521657], [1.72881798E12, 582.1677419354842], [1.7288202E12, 779.7581168831163], [1.72881474E12, 431.67207207207235], [1.72881678E12, 460.6017274472169], [1.728819E12, 736.9155145929337], [1.72882002E12, 756.5055031446532], [1.72881438E12, 397.8003327787019], [1.7288166E12, 464.26822157434384], [1.7288178E12, 569.0417651694232], [1.72881336E12, 395.24252491694347], [1.72881558E12, 454.0651558073652], [1.72881882E12, 770.6162510056324], [1.72881456E12, 382.1178343949038], [1.72881954E12, 748.1226562500007], [1.7288139E12, 443.5988909426987], [1.72881612E12, 437.1304744525544], [1.72881732E12, 595.1894563426692], [1.7288151E12, 474.0117395944504], [1.72881834E12, 604.1507537688442], [1.72881408E12, 411.48281786941567], [1.72881372E12, 411.7204116638077], [1.72881714E12, 613.6898305084744], [1.72881936E12, 790.8131687242806], [1.72881594E12, 455.10076045627386], [1.72881816E12, 589.0923202614379], [1.72881492E12, 387.94032258064544], [1.72881918E12, 749.7233047544817], [1.72881486E12, 426.6142857142855], [1.72881384E12, 418.54035087719296], [1.72881828E12, 612.0706382978716], [1.72881606E12, 464.54387656702016], [1.7288193E12, 766.0352000000012], [1.72881708E12, 597.1710963455159], [1.72881504E12, 388.65807962529277], [1.7288181E12, 607.0211148648652], [1.72882032E12, 543.047619047619], [1.72881468E12, 417.57142857142827], [1.72881366E12, 418.1815008726004], [1.72881588E12, 458.8929254302097], [1.7288169E12, 404.12244897959175], [1.72881912E12, 790.5297029702971], [1.72882014E12, 798.3843594009983], [1.7288142E12, 393.26600985221654], [1.72881984E12, 794.4958540630178], [1.72881762E12, 587.963205233033], [1.72881642E12, 450.3570759137772], [1.72881864E12, 604.5876288659807], [1.72881318E12, 682.0], [1.7288154E12, 452.2587346553353], [1.72881966E12, 765.3934294871802], [1.72881744E12, 578.7662650602424], [1.72881402E12, 404.26306913996626], [1.72881624E12, 459.2873563218391], [1.72881846E12, 582.712895377129], [1.72881522E12, 451.04429783223355], [1.72881726E12, 640.4076717216772], [1.72881948E12, 760.5161799526434], [1.72881858E12, 606.5462962962965], [1.72881516E12, 443.2707182320444], [1.72881414E12, 408.5144312393889], [1.72881636E12, 430.1349419124215], [1.72881738E12, 595.9159034138219], [1.7288196E12, 774.6875502008041], [1.7288184E12, 591.4016460905355], [1.72881498E12, 383.20607028754034], [1.72881942E12, 744.4275700934573], [1.72881396E12, 409.872013651877], [1.7288172E12, 607.0802364864869], [1.72881618E12, 449.752577319588], [1.72881822E12, 571.5408406026959], [1.72881792E12, 588.3704006541296], [1.72881894E12, 733.5460776846911], [1.7288145E12, 404.98646362098134], [1.72881348E12, 390.5090016366613], [1.72881672E12, 463.28901734104033], [1.7288157E12, 465.825875486381], [1.72881774E12, 628.0488656195464], [1.72881996E12, 769.2417405318287], [1.72881534E12, 452.26534466477744], [1.72881432E12, 400.1480865224627], [1.72881876E12, 686.3804679552395], [1.72881654E12, 456.3203422053233], [1.72881978E12, 750.273865414711], [1.72881756E12, 591.0262510254314], [1.7288133E12, 386.2282958199359], [1.72881552E12, 437.59306569343056], [1.72881324E12, 382.5271565495209], [1.72881666E12, 455.0606635071093], [1.72881888E12, 771.575221238938], [1.7288199E12, 740.3500000000009], [1.72881546E12, 454.6562795089698], [1.72881444E12, 406.81587837837856], [1.72881768E12, 612.6399999999996], [1.7288187E12, 486.4222222222224], [1.7288163E12, 444.5162488393683], [1.72881528E12, 457.74000000000046], [1.7288175E12, 596.9892294946147], [1.72881972E12, 819.2602040816324], [1.72881852E12, 586.6389568052164], [1.72881426E12, 375.10452418096753], [1.72881648E12, 468.30146341463455], [1.72881582E12, 427.1275646743979], [1.7288148E12, 394.279869067103], [1.72881702E12, 582.5388978930301], [1.72881924E12, 771.46511627907], [1.72882026E12, 598.2938856015784], [1.72881804E12, 599.6252086811343], [1.72881378E12, 388.3607085346215], [1.728816E12, 478.1626746506994], [1.72881906E12, 757.8529644268779], [1.72881564E12, 464.3798449612408], [1.72881342E12, 376.50733137829906], [1.72881684E12, 446.2387434554977], [1.72881462E12, 380.2594936708857], [1.72881786E12, 617.6855670103089], [1.72882008E12, 754.0007855459545], [1.7288136E12, 392.7894736842109]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72882032E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 250.5974440894567, "minX": 1.72881318E12, "maxY": 565.8749999999999, "series": [{"data": [[1.72881696E12, 380.15454545454526], [1.72881354E12, 268.5563025210083], [1.72881576E12, 307.5828625235409], [1.72881798E12, 391.4669354838711], [1.7288202E12, 536.014610389611], [1.72881474E12, 286.5567567567566], [1.72881678E12, 311.19001919385767], [1.728819E12, 510.3625192012285], [1.72882002E12, 524.0479559748418], [1.72881438E12, 263.5024958402665], [1.7288166E12, 313.3566569484939], [1.7288178E12, 391.4389282899922], [1.72881336E12, 264.8671096345515], [1.72881558E12, 307.4098205854576], [1.72881882E12, 536.0691874497178], [1.72881456E12, 256.16082802547754], [1.72881954E12, 519.1835937499993], [1.7288139E12, 291.3475046210723], [1.72881612E12, 297.1186131386861], [1.72881732E12, 406.6301482701813], [1.7288151E12, 320.4076840981856], [1.72881834E12, 413.91206030150715], [1.72881408E12, 275.7027491408935], [1.72881372E12, 270.27272727272714], [1.72881714E12, 418.4211864406774], [1.72881936E12, 542.8864197530864], [1.72881594E12, 308.06273764258486], [1.72881816E12, 402.74591503267965], [1.72881492E12, 255.01129032258055], [1.72881918E12, 516.0296180826184], [1.72881486E12, 286.13750000000033], [1.72881384E12, 277.68421052631606], [1.72881828E12, 421.58212765957416], [1.72881606E12, 315.2439729990357], [1.7288193E12, 528.9608], [1.72881708E12, 411.26245847176034], [1.72881504E12, 257.8946135831381], [1.7288181E12, 414.10557432432415], [1.72882032E12, 368.5238095238096], [1.72881468E12, 273.7508710801393], [1.72881366E12, 280.0907504363002], [1.72881588E12, 308.315487571702], [1.7288169E12, 269.2326530612246], [1.72881912E12, 543.1080858085803], [1.72882014E12, 554.168053244591], [1.7288142E12, 258.7060755336621], [1.72881984E12, 544.6003316749584], [1.72881762E12, 401.7318070318887], [1.72881642E12, 307.10965323336444], [1.72881864E12, 415.50085910652956], [1.72881318E12, 449.8], [1.7288154E12, 302.26817752596736], [1.72881966E12, 525.7844551282053], [1.72881744E12, 397.582329317269], [1.72881402E12, 265.3086003372683], [1.72881624E12, 309.0478927203064], [1.72881846E12, 399.7777777777782], [1.72881522E12, 301.9359095193209], [1.72881726E12, 440.3166815343447], [1.72881948E12, 526.3243883188636], [1.72881858E12, 419.8787878787881], [1.72881516E12, 304.60405156537746], [1.72881414E12, 271.7979626485569], [1.72881636E12, 292.7006255585347], [1.72881738E12, 406.7793505412154], [1.7288196E12, 534.730923694779], [1.7288184E12, 403.7193415637861], [1.72881498E12, 259.27316293929715], [1.72881942E12, 512.30140186916], [1.72881396E12, 273.0904436860068], [1.7288172E12, 413.61739864864893], [1.72881618E12, 305.38238050609243], [1.72881822E12, 394.6938937351306], [1.72881792E12, 406.9910057236302], [1.72881894E12, 507.8027418126431], [1.7288145E12, 270.419627749577], [1.72881348E12, 260.82160392798687], [1.72881672E12, 310.84778420038566], [1.7288157E12, 313.50778210116766], [1.72881774E12, 429.2006980802798], [1.72881996E12, 528.6478646253024], [1.72881534E12, 308.24740321057584], [1.72881432E12, 270.19800332778715], [1.72881876E12, 472.06307222787376], [1.72881654E12, 306.59980988593173], [1.72881978E12, 518.3865414710483], [1.72881756E12, 408.81460213289597], [1.7288133E12, 256.10610932475885], [1.72881552E12, 298.7427007299275], [1.72881324E12, 250.5974440894567], [1.72881666E12, 308.50616113744064], [1.72881888E12, 530.3346741753829], [1.7288199E12, 515.0738461538468], [1.72881546E12, 308.3163361661948], [1.72881444E12, 269.46790540540525], [1.72881768E12, 419.8136170212764], [1.7288187E12, 334.040404040404], [1.7288163E12, 299.8467966573807], [1.72881528E12, 307.1580952380952], [1.7288175E12, 409.0546810273403], [1.72881972E12, 565.8749999999999], [1.72881852E12, 400.9013854930724], [1.72881426E12, 252.00468018720738], [1.72881648E12, 310.97268292682963], [1.72881582E12, 288.518287243533], [1.7288148E12, 263.4959083469725], [1.72881702E12, 399.474068071313], [1.72881924E12, 532.0168404170014], [1.72882026E12, 410.99704142011797], [1.72881804E12, 413.99999999999955], [1.72881378E12, 257.0144927536226], [1.728816E12, 322.54191616766525], [1.72881906E12, 522.7960474308315], [1.72881564E12, 314.1695736434104], [1.72881342E12, 253.08211143694993], [1.72881684E12, 297.97591623036584], [1.72881462E12, 250.89240506329085], [1.72881786E12, 426.1795532646048], [1.72882008E12, 514.7462686567167], [1.7288136E12, 260.4210526315793]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72882032E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72881318E12, "maxY": 4.9E-324, "series": [{"data": [[1.72881696E12, 0.0], [1.72881354E12, 0.0], [1.72881576E12, 0.0], [1.72881798E12, 0.0], [1.7288202E12, 0.0], [1.72881474E12, 0.0], [1.72881678E12, 0.0], [1.728819E12, 0.0], [1.72882002E12, 0.0], [1.72881438E12, 0.0], [1.7288166E12, 0.0], [1.7288178E12, 0.0], [1.72881336E12, 0.0], [1.72881558E12, 0.0], [1.72881882E12, 0.0], [1.72881456E12, 0.0], [1.72881954E12, 0.0], [1.7288139E12, 0.0], [1.72881612E12, 0.0], [1.72881732E12, 0.0], [1.7288151E12, 0.0], [1.72881834E12, 0.0], [1.72881408E12, 0.0], [1.72881372E12, 0.0], [1.72881714E12, 0.0], [1.72881936E12, 0.0], [1.72881594E12, 0.0], [1.72881816E12, 0.0], [1.72881492E12, 0.0], [1.72881918E12, 0.0], [1.72881486E12, 0.0], [1.72881384E12, 0.0], [1.72881828E12, 0.0], [1.72881606E12, 0.0], [1.7288193E12, 0.0], [1.72881708E12, 0.0], [1.72881504E12, 0.0], [1.7288181E12, 0.0], [1.72882032E12, 0.0], [1.72881468E12, 0.0], [1.72881366E12, 0.0], [1.72881588E12, 0.0], [1.7288169E12, 0.0], [1.72881912E12, 0.0], [1.72882014E12, 0.0], [1.7288142E12, 0.0], [1.72881984E12, 0.0], [1.72881762E12, 0.0], [1.72881642E12, 0.0], [1.72881864E12, 0.0], [1.72881318E12, 0.0], [1.7288154E12, 0.0], [1.72881966E12, 0.0], [1.72881744E12, 0.0], [1.72881402E12, 0.0], [1.72881624E12, 0.0], [1.72881846E12, 0.0], [1.72881522E12, 0.0], [1.72881726E12, 0.0], [1.72881948E12, 0.0], [1.72881858E12, 0.0], [1.72881516E12, 0.0], [1.72881414E12, 0.0], [1.72881636E12, 0.0], [1.72881738E12, 0.0], [1.7288196E12, 0.0], [1.7288184E12, 0.0], [1.72881498E12, 0.0], [1.72881942E12, 0.0], [1.72881396E12, 0.0], [1.7288172E12, 0.0], [1.72881618E12, 0.0], [1.72881822E12, 0.0], [1.72881792E12, 0.0], [1.72881894E12, 0.0], [1.7288145E12, 0.0], [1.72881348E12, 0.0], [1.72881672E12, 0.0], [1.7288157E12, 0.0], [1.72881774E12, 0.0], [1.72881996E12, 0.0], [1.72881534E12, 0.0], [1.72881432E12, 0.0], [1.72881876E12, 0.0], [1.72881654E12, 0.0], [1.72881978E12, 0.0], [1.72881756E12, 0.0], [1.7288133E12, 0.0], [1.72881552E12, 0.0], [1.72881324E12, 0.0], [1.72881666E12, 0.0], [1.72881888E12, 0.0], [1.7288199E12, 0.0], [1.72881546E12, 0.0], [1.72881444E12, 0.0], [1.72881768E12, 0.0], [1.7288187E12, 0.0], [1.7288163E12, 0.0], [1.72881528E12, 0.0], [1.7288175E12, 0.0], [1.72881972E12, 0.0], [1.72881852E12, 0.0], [1.72881426E12, 0.0], [1.72881648E12, 0.0], [1.72881582E12, 0.0], [1.7288148E12, 0.0], [1.72881702E12, 0.0], [1.72881924E12, 0.0], [1.72882026E12, 0.0], [1.72881804E12, 0.0], [1.72881378E12, 0.0], [1.728816E12, 0.0], [1.72881906E12, 0.0], [1.72881564E12, 0.0], [1.72881342E12, 0.0], [1.72881684E12, 0.0], [1.72881462E12, 0.0], [1.72881786E12, 0.0], [1.72882008E12, 0.0], [1.7288136E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72882032E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.72881318E12, "maxY": 3538.0, "series": [{"data": [[1.72881696E12, 2278.0], [1.72881354E12, 1453.0], [1.72881576E12, 1884.0], [1.72881798E12, 2447.0], [1.7288202E12, 3070.0], [1.72881474E12, 1598.0], [1.72881678E12, 1750.0], [1.728819E12, 3157.0], [1.72882002E12, 2922.0], [1.72881438E12, 1678.0], [1.7288166E12, 1704.0], [1.7288178E12, 2490.0], [1.72881336E12, 1351.0], [1.72881558E12, 1799.0], [1.72881882E12, 3133.0], [1.72881456E12, 1405.0], [1.72881954E12, 2808.0], [1.7288139E12, 1631.0], [1.72881612E12, 1794.0], [1.72881732E12, 2550.0], [1.7288151E12, 1766.0], [1.72881834E12, 2678.0], [1.72881408E12, 1685.0], [1.72881372E12, 1658.0], [1.72881714E12, 2336.0], [1.72881936E12, 3424.0], [1.72881594E12, 1921.0], [1.72881816E12, 2683.0], [1.72881492E12, 1417.0], [1.72881918E12, 2971.0], [1.72881486E12, 1746.0], [1.72881384E12, 1378.0], [1.72881828E12, 2587.0], [1.72881606E12, 1854.0], [1.7288193E12, 3122.0], [1.72881708E12, 2217.0], [1.72881504E12, 1408.0], [1.7288181E12, 2486.0], [1.72882032E12, 1001.0], [1.72881468E12, 1757.0], [1.72881366E12, 1449.0], [1.72881588E12, 1875.0], [1.7288169E12, 1668.0], [1.72881912E12, 3538.0], [1.72882014E12, 3506.0], [1.7288142E12, 1673.0], [1.72881984E12, 3459.0], [1.72881762E12, 2401.0], [1.72881642E12, 1657.0], [1.72881864E12, 2436.0], [1.72881318E12, 1210.0], [1.7288154E12, 1894.0], [1.72881966E12, 3327.0], [1.72881744E12, 2636.0], [1.72881402E12, 1687.0], [1.72881624E12, 1774.0], [1.72881846E12, 2284.0], [1.72881522E12, 1757.0], [1.72881726E12, 2429.0], [1.72881948E12, 3393.0], [1.72881858E12, 2625.0], [1.72881516E12, 2034.0], [1.72881414E12, 1736.0], [1.72881636E12, 1829.0], [1.72881738E12, 2745.0], [1.7288196E12, 3175.0], [1.7288184E12, 2372.0], [1.72881498E12, 1607.0], [1.72881942E12, 3193.0], [1.72881396E12, 1387.0], [1.7288172E12, 2793.0], [1.72881618E12, 1742.0], [1.72881822E12, 2205.0], [1.72881792E12, 2492.0], [1.72881894E12, 2839.0], [1.7288145E12, 1483.0], [1.72881348E12, 1428.0], [1.72881672E12, 1889.0], [1.7288157E12, 1753.0], [1.72881774E12, 2653.0], [1.72881996E12, 3292.0], [1.72881534E12, 1672.0], [1.72881432E12, 1391.0], [1.72881876E12, 3047.0], [1.72881654E12, 1908.0], [1.72881978E12, 2979.0], [1.72881756E12, 2342.0], [1.7288133E12, 1729.0], [1.72881552E12, 1943.0], [1.72881324E12, 1441.0], [1.72881666E12, 1899.0], [1.72881888E12, 3182.0], [1.7288199E12, 3204.0], [1.72881546E12, 1857.0], [1.72881444E12, 1434.0], [1.72881768E12, 2454.0], [1.7288187E12, 1878.0], [1.7288163E12, 1869.0], [1.72881528E12, 1987.0], [1.7288175E12, 2288.0], [1.72881972E12, 3532.0], [1.72881852E12, 2377.0], [1.72881426E12, 1545.0], [1.72881648E12, 1651.0], [1.72881582E12, 1880.0], [1.7288148E12, 1585.0], [1.72881702E12, 2837.0], [1.72881924E12, 3504.0], [1.72882026E12, 2912.0], [1.72881804E12, 2631.0], [1.72881378E12, 1491.0], [1.728816E12, 1904.0], [1.72881906E12, 2946.0], [1.72881564E12, 1571.0], [1.72881342E12, 1388.0], [1.72881684E12, 1909.0], [1.72881462E12, 1423.0], [1.72881786E12, 2897.0], [1.72882008E12, 2907.0], [1.7288136E12, 1407.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72881696E12, 32.0], [1.72881354E12, 32.0], [1.72881576E12, 28.0], [1.72881798E12, 36.0], [1.7288202E12, 44.0], [1.72881474E12, 34.0], [1.72881678E12, 27.0], [1.728819E12, 50.0], [1.72882002E12, 53.0], [1.72881438E12, 31.0], [1.7288166E12, 27.0], [1.7288178E12, 32.0], [1.72881336E12, 30.0], [1.72881558E12, 28.0], [1.72881882E12, 49.0], [1.72881456E12, 29.0], [1.72881954E12, 47.0], [1.7288139E12, 27.0], [1.72881612E12, 26.0], [1.72881732E12, 34.0], [1.7288151E12, 22.0], [1.72881834E12, 37.0], [1.72881408E12, 29.0], [1.72881372E12, 29.0], [1.72881714E12, 29.0], [1.72881936E12, 48.0], [1.72881594E12, 27.0], [1.72881816E12, 33.0], [1.72881492E12, 26.0], [1.72881918E12, 54.0], [1.72881486E12, 34.0], [1.72881384E12, 40.0], [1.72881828E12, 31.0], [1.72881606E12, 29.0], [1.7288193E12, 48.0], [1.72881708E12, 29.0], [1.72881504E12, 33.0], [1.7288181E12, 34.0], [1.72882032E12, 118.0], [1.72881468E12, 30.0], [1.72881366E12, 30.0], [1.72881588E12, 21.0], [1.7288169E12, 34.0], [1.72881912E12, 55.0], [1.72882014E12, 55.0], [1.7288142E12, 28.0], [1.72881984E12, 45.0], [1.72881762E12, 30.0], [1.72881642E12, 33.0], [1.72881864E12, 32.0], [1.72881318E12, 91.0], [1.7288154E12, 24.0], [1.72881966E12, 51.0], [1.72881744E12, 32.0], [1.72881402E12, 33.0], [1.72881624E12, 26.0], [1.72881846E12, 32.0], [1.72881522E12, 25.0], [1.72881726E12, 29.0], [1.72881948E12, 51.0], [1.72881858E12, 29.0], [1.72881516E12, 33.0], [1.72881414E12, 28.0], [1.72881636E12, 32.0], [1.72881738E12, 28.0], [1.7288196E12, 52.0], [1.7288184E12, 27.0], [1.72881498E12, 28.0], [1.72881942E12, 60.0], [1.72881396E12, 31.0], [1.7288172E12, 34.0], [1.72881618E12, 27.0], [1.72881822E12, 33.0], [1.72881792E12, 34.0], [1.72881894E12, 54.0], [1.7288145E12, 32.0], [1.72881348E12, 30.0], [1.72881672E12, 30.0], [1.7288157E12, 21.0], [1.72881774E12, 31.0], [1.72881996E12, 53.0], [1.72881534E12, 27.0], [1.72881432E12, 31.0], [1.72881876E12, 34.0], [1.72881654E12, 26.0], [1.72881978E12, 57.0], [1.72881756E12, 34.0], [1.7288133E12, 29.0], [1.72881552E12, 25.0], [1.72881324E12, 36.0], [1.72881666E12, 29.0], [1.72881888E12, 53.0], [1.7288199E12, 50.0], [1.72881546E12, 29.0], [1.72881444E12, 30.0], [1.72881768E12, 37.0], [1.7288187E12, 31.0], [1.7288163E12, 32.0], [1.72881528E12, 27.0], [1.7288175E12, 33.0], [1.72881972E12, 50.0], [1.72881852E12, 35.0], [1.72881426E12, 30.0], [1.72881648E12, 32.0], [1.72881582E12, 27.0], [1.7288148E12, 31.0], [1.72881702E12, 33.0], [1.72881924E12, 54.0], [1.72882026E12, 33.0], [1.72881804E12, 32.0], [1.72881378E12, 29.0], [1.728816E12, 23.0], [1.72881906E12, 48.0], [1.72881564E12, 24.0], [1.72881342E12, 28.0], [1.72881684E12, 29.0], [1.72881462E12, 32.0], [1.72881786E12, 38.0], [1.72882008E12, 51.0], [1.7288136E12, 31.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72881696E12, 1288.8000000000002], [1.72881354E12, 893.7999999999996], [1.72881576E12, 1013.5000000000002], [1.72881798E12, 1316.6000000000004], [1.7288202E12, 1683.0], [1.72881474E12, 922.6000000000001], [1.72881678E12, 958.4000000000001], [1.728819E12, 1647.0], [1.72882002E12, 1671.7], [1.72881438E12, 876.8000000000004], [1.7288166E12, 990.0], [1.7288178E12, 1289.0], [1.72881336E12, 854.4000000000001], [1.72881558E12, 973.0], [1.72881882E12, 1699.4000000000005], [1.72881456E12, 839.3000000000001], [1.72881954E12, 1683.8000000000002], [1.7288139E12, 910.0], [1.72881612E12, 970.3000000000001], [1.72881732E12, 1319.5], [1.7288151E12, 1015.4000000000001], [1.72881834E12, 1285.5], [1.72881408E12, 884.0], [1.72881372E12, 882.6000000000001], [1.72881714E12, 1358.5000000000005], [1.72881936E12, 1748.0000000000005], [1.72881594E12, 978.8000000000002], [1.72881816E12, 1329.0], [1.72881492E12, 860.8], [1.72881918E12, 1677.2000000000003], [1.72881486E12, 863.4000000000002], [1.72881384E12, 907.3999999999999], [1.72881828E12, 1337.6000000000004], [1.72881606E12, 975.2], [1.7288193E12, 1635.6000000000004], [1.72881708E12, 1330.5], [1.72881504E12, 842.8], [1.7288181E12, 1347.0], [1.72882032E12, 939.4], [1.72881468E12, 883.0], [1.72881366E12, 832.6], [1.72881588E12, 976.6000000000001], [1.7288169E12, 908.5000000000005], [1.72881912E12, 1749.7], [1.72882014E12, 1763.7], [1.7288142E12, 859.0], [1.72881984E12, 1696.8999999999999], [1.72881762E12, 1330.4000000000012], [1.72881642E12, 979.8000000000002], [1.72881864E12, 1334.0], [1.72881318E12, 1210.0], [1.7288154E12, 1029.0], [1.72881966E12, 1728.3000000000004], [1.72881744E12, 1325.8000000000002], [1.72881402E12, 886.2], [1.72881624E12, 984.5], [1.72881846E12, 1344.8000000000018], [1.72881522E12, 1009.8000000000001], [1.72881726E12, 1342.2000000000003], [1.72881948E12, 1724.8000000000004], [1.72881858E12, 1349.2000000000003], [1.72881516E12, 964.0], [1.72881414E12, 835.0], [1.72881636E12, 964.0], [1.72881738E12, 1306.8], [1.7288196E12, 1666.4], [1.7288184E12, 1277.8000000000002], [1.72881498E12, 848.3000000000001], [1.72881942E12, 1678.5], [1.72881396E12, 917.200000000001], [1.7288172E12, 1369.5], [1.72881618E12, 979.2000000000003], [1.72881822E12, 1295.1999999999998], [1.72881792E12, 1296.8000000000004], [1.72881894E12, 1611.8000000000004], [1.7288145E12, 884.4000000000002], [1.72881348E12, 848.0], [1.72881672E12, 1026.3000000000002], [1.7288157E12, 973.4000000000001], [1.72881774E12, 1359.3], [1.72881996E12, 1715.9999999999998], [1.72881534E12, 962.0], [1.72881432E12, 877.4000000000002], [1.72881876E12, 1567.8000000000002], [1.72881654E12, 995.0], [1.72881978E12, 1663.0], [1.72881756E12, 1301.0], [1.7288133E12, 869.6], [1.72881552E12, 957.9000000000002], [1.72881324E12, 844.2000000000003], [1.72881666E12, 977.0], [1.72881888E12, 1725.0000000000007], [1.7288199E12, 1694.7000000000012], [1.72881546E12, 990.0], [1.72881444E12, 903.0], [1.72881768E12, 1364.4], [1.7288187E12, 1075.5], [1.7288163E12, 951.4000000000001], [1.72881528E12, 995.8], [1.7288175E12, 1347.0000000000002], [1.72881972E12, 1744.6], [1.72881852E12, 1295.2], [1.72881426E12, 820.8000000000001], [1.72881648E12, 1017.0], [1.72881582E12, 938.8000000000004], [1.7288148E12, 857.2000000000003], [1.72881702E12, 1318.5], [1.72881924E12, 1692.8000000000004], [1.72882026E12, 1355.5], [1.72881804E12, 1325.2000000000003], [1.72881378E12, 865.8000000000008], [1.728816E12, 1030.8000000000002], [1.72881906E12, 1656.800000000001], [1.72881564E12, 969.0], [1.72881342E12, 813.8], [1.72881684E12, 971.7999999999998], [1.72881462E12, 845.7], [1.72881786E12, 1353.5], [1.72882008E12, 1695.6000000000008], [1.7288136E12, 883.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72881696E12, 1967.0300000000027], [1.72881354E12, 1234.7199999999993], [1.72881576E12, 1449.699999999999], [1.72881798E12, 1970.079999999999], [1.7288202E12, 2465.430000000002], [1.72881474E12, 1260.3999999999994], [1.72881678E12, 1463.979999999999], [1.728819E12, 2425.6100000000006], [1.72882002E12, 2448.97], [1.72881438E12, 1243.8400000000001], [1.7288166E12, 1459.9000000000035], [1.7288178E12, 1882.8999999999971], [1.72881336E12, 1273.5800000000004], [1.72881558E12, 1410.200000000002], [1.72881882E12, 2421.959999999999], [1.72881456E12, 1286.8400000000001], [1.72881954E12, 2324.9500000000003], [1.7288139E12, 1247.740000000002], [1.72881612E12, 1372.03], [1.72881732E12, 1994.449999999993], [1.7288151E12, 1460.58], [1.72881834E12, 1921.349999999997], [1.72881408E12, 1379.069999999997], [1.72881372E12, 1380.7599999999989], [1.72881714E12, 1928.4100000000021], [1.72881936E12, 2599.239999999999], [1.72881594E12, 1490.41], [1.72881816E12, 1854.0], [1.72881492E12, 1253.1699999999992], [1.72881918E12, 2424.6400000000003], [1.72881486E12, 1268.8999999999999], [1.72881384E12, 1290.8999999999996], [1.72881828E12, 1955.16], [1.72881606E12, 1475.2399999999998], [1.7288193E12, 2543.2800000000007], [1.72881708E12, 1918.4000000000024], [1.72881504E12, 1200.2399999999996], [1.7288181E12, 2025.7500000000023], [1.72882032E12, 1001.0], [1.72881468E12, 1313.0], [1.72881366E12, 1320.0199999999998], [1.72881588E12, 1436.4299999999992], [1.7288169E12, 1293.9799999999996], [1.72881912E12, 2795.359999999997], [1.72882014E12, 2554.91], [1.7288142E12, 1397.3999999999994], [1.72881984E12, 2573.5800000000004], [1.72881762E12, 1914.08], [1.72881642E12, 1390.3999999999987], [1.72881864E12, 2000.3999999999996], [1.72881318E12, 1210.0], [1.7288154E12, 1525.2000000000016], [1.72881966E12, 2515.6499999999996], [1.72881744E12, 1966.62], [1.72881402E12, 1276.06], [1.72881624E12, 1500.3999999999996], [1.72881846E12, 1826.0200000000038], [1.72881522E12, 1408.5599999999986], [1.72881726E12, 1897.3599999999997], [1.72881948E12, 2531.5999999999967], [1.72881858E12, 2054.7699999999995], [1.72881516E12, 1438.039999999999], [1.72881414E12, 1308.2000000000012], [1.72881636E12, 1457.8], [1.72881738E12, 2119.5200000000004], [1.7288196E12, 2508.0], [1.7288184E12, 1973.6799999999998], [1.72881498E12, 1271.5500000000006], [1.72881942E12, 2585.9000000000024], [1.72881396E12, 1275.86], [1.7288172E12, 2020.15], [1.72881618E12, 1379.9599999999998], [1.72881822E12, 1881.7799999999963], [1.72881792E12, 2023.1599999999999], [1.72881894E12, 2551.0199999999995], [1.7288145E12, 1299.6800000000019], [1.72881348E12, 1136.1599999999999], [1.72881672E12, 1484.2499999999975], [1.7288157E12, 1505.71], [1.72881774E12, 2008.53], [1.72881996E12, 2548.8799999999974], [1.72881534E12, 1472.4], [1.72881432E12, 1258.5800000000004], [1.72881876E12, 2236.199999999998], [1.72881654E12, 1561.5200000000032], [1.72881978E12, 2363.05], [1.72881756E12, 1848.6], [1.7288133E12, 1255.4399999999998], [1.72881552E12, 1489.03], [1.72881324E12, 1327.8200000000006], [1.72881666E12, 1509.3200000000015], [1.72881888E12, 2544.7999999999997], [1.7288199E12, 2547.9700000000003], [1.72881546E12, 1446.8000000000002], [1.72881444E12, 1290.14], [1.72881768E12, 1974.4], [1.7288187E12, 1600.610000000001], [1.7288163E12, 1398.4200000000003], [1.72881528E12, 1445.47], [1.7288175E12, 1958.6800000000003], [1.72881972E12, 2527.76], [1.72881852E12, 1938.2400000000005], [1.72881426E12, 1233.9], [1.72881648E12, 1407.9000000000003], [1.72881582E12, 1361.4599999999998], [1.7288148E12, 1247.84], [1.72881702E12, 1843.9000000000005], [1.72881924E12, 2650.239999999999], [1.72882026E12, 2193.3], [1.72881804E12, 2035.12], [1.72881378E12, 1264.1399999999996], [1.728816E12, 1467.7600000000002], [1.72881906E12, 2326.0999999999985], [1.72881564E12, 1407.8199999999981], [1.72881342E12, 1178.2199999999998], [1.72881684E12, 1318.8799999999999], [1.72881462E12, 1199.6799999999998], [1.72881786E12, 1993.8999999999987], [1.72882008E12, 2388.66], [1.7288136E12, 1239.419999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72881696E12, 358.0], [1.72881354E12, 377.0], [1.72881576E12, 388.0], [1.72881798E12, 397.5], [1.7288202E12, 634.5], [1.72881474E12, 414.0], [1.72881678E12, 426.5], [1.728819E12, 548.5], [1.72882002E12, 598.0], [1.72881438E12, 359.0], [1.7288166E12, 411.0], [1.7288178E12, 393.0], [1.72881336E12, 350.0], [1.72881558E12, 408.0], [1.72881882E12, 596.0], [1.72881456E12, 320.0], [1.72881954E12, 621.0], [1.7288139E12, 450.0], [1.72881612E12, 335.5], [1.72881732E12, 499.5], [1.7288151E12, 439.0], [1.72881834E12, 522.5], [1.72881408E12, 373.5], [1.72881372E12, 370.0], [1.72881714E12, 508.5], [1.72881936E12, 642.0], [1.72881594E12, 412.5], [1.72881816E12, 454.0], [1.72881492E12, 322.5], [1.72881918E12, 581.0], [1.72881486E12, 417.5], [1.72881384E12, 386.0], [1.72881828E12, 519.0], [1.72881606E12, 436.0], [1.7288193E12, 636.0], [1.72881708E12, 520.5], [1.72881504E12, 352.0], [1.7288181E12, 524.5], [1.72882032E12, 611.0], [1.72881468E12, 381.5], [1.72881366E12, 405.0], [1.72881588E12, 406.5], [1.7288169E12, 346.5], [1.72881912E12, 639.5], [1.72882014E12, 672.5], [1.7288142E12, 350.0], [1.72881984E12, 688.5], [1.72881762E12, 446.0], [1.72881642E12, 401.0], [1.72881864E12, 533.0], [1.72881318E12, 535.0], [1.7288154E12, 360.0], [1.72881966E12, 594.0], [1.72881744E12, 451.0], [1.72881402E12, 372.0], [1.72881624E12, 398.0], [1.72881846E12, 427.0], [1.72881522E12, 378.0], [1.72881726E12, 602.0], [1.72881948E12, 572.0], [1.72881858E12, 503.5], [1.72881516E12, 357.0], [1.72881414E12, 377.0], [1.72881636E12, 335.0], [1.72881738E12, 462.0], [1.7288196E12, 665.0], [1.7288184E12, 470.0], [1.72881498E12, 316.5], [1.72881942E12, 527.5], [1.72881396E12, 382.5], [1.7288172E12, 508.0], [1.72881618E12, 360.0], [1.72881822E12, 435.0], [1.72881792E12, 457.0], [1.72881894E12, 523.0], [1.7288145E12, 369.0], [1.72881348E12, 355.0], [1.72881672E12, 401.5], [1.7288157E12, 401.0], [1.72881774E12, 548.5], [1.72881996E12, 605.0], [1.72881534E12, 422.0], [1.72881432E12, 359.0], [1.72881876E12, 457.0], [1.72881654E12, 380.0], [1.72881978E12, 587.0], [1.72881756E12, 496.0], [1.7288133E12, 280.0], [1.72881552E12, 355.5], [1.72881324E12, 278.0], [1.72881666E12, 393.0], [1.72881888E12, 621.0], [1.7288199E12, 550.5], [1.72881546E12, 396.0], [1.72881444E12, 363.5], [1.72881768E12, 526.0], [1.7288187E12, 407.5], [1.7288163E12, 394.0], [1.72881528E12, 379.5], [1.7288175E12, 477.0], [1.72881972E12, 743.5], [1.72881852E12, 449.0], [1.72881426E12, 304.0], [1.72881648E12, 417.0], [1.72881582E12, 325.0], [1.7288148E12, 329.0], [1.72881702E12, 434.0], [1.72881924E12, 582.0], [1.72882026E12, 440.5], [1.72881804E12, 480.5], [1.72881378E12, 323.0], [1.728816E12, 462.0], [1.72881906E12, 629.0], [1.72881564E12, 423.0], [1.72881342E12, 311.0], [1.72881684E12, 396.0], [1.72881462E12, 298.5], [1.72881786E12, 516.0], [1.72882008E12, 592.0], [1.7288136E12, 357.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72881696E12, 1548.7000000000003], [1.72881354E12, 997.0], [1.72881576E12, 1214.2499999999995], [1.72881798E12, 1524.95], [1.7288202E12, 2021.7499999999995], [1.72881474E12, 1038.9999999999995], [1.72881678E12, 1100.6999999999998], [1.728819E12, 1927.0499999999988], [1.72882002E12, 1946.849999999999], [1.72881438E12, 993.8], [1.7288166E12, 1174.5], [1.7288178E12, 1516.0], [1.72881336E12, 1008.6999999999999], [1.72881558E12, 1118.0], [1.72881882E12, 1993.0], [1.72881456E12, 989.5999999999985], [1.72881954E12, 1891.7000000000003], [1.7288139E12, 1038.5], [1.72881612E12, 1123.1499999999999], [1.72881732E12, 1518.0], [1.7288151E12, 1178.6999999999994], [1.72881834E12, 1491.25], [1.72881408E12, 1011.1500000000004], [1.72881372E12, 1029.3999999999999], [1.72881714E12, 1567.3000000000006], [1.72881936E12, 1996.0], [1.72881594E12, 1145.0], [1.72881816E12, 1563.5], [1.72881492E12, 1040.9499999999998], [1.72881918E12, 1970.8], [1.72881486E12, 998.8999999999999], [1.72881384E12, 1057.0], [1.72881828E12, 1538.2], [1.72881606E12, 1188.1999999999998], [1.7288193E12, 1931.1500000000003], [1.72881708E12, 1533.75], [1.72881504E12, 995.5999999999999], [1.7288181E12, 1550.5], [1.72882032E12, 995.3999999999999], [1.72881468E12, 1036.25], [1.72881366E12, 992.6999999999996], [1.72881588E12, 1140.25], [1.7288169E12, 976.45], [1.72881912E12, 2079.1499999999974], [1.72882014E12, 2093.349999999999], [1.7288142E12, 1011.0], [1.72881984E12, 1980.5999999999995], [1.72881762E12, 1527.8], [1.72881642E12, 1120.9999999999995], [1.72881864E12, 1527.5], [1.72881318E12, 1210.0], [1.7288154E12, 1186.0], [1.72881966E12, 1913.8499999999997], [1.72881744E12, 1568.2000000000003], [1.72881402E12, 1006.7999999999997], [1.72881624E12, 1189.5], [1.72881846E12, 1537.1999999999994], [1.72881522E12, 1155.6999999999998], [1.72881726E12, 1599.6999999999996], [1.72881948E12, 1984.199999999999], [1.72881858E12, 1546.6499999999999], [1.72881516E12, 1127.6499999999999], [1.72881414E12, 977.5], [1.72881636E12, 1151.0], [1.72881738E12, 1478.9999999999986], [1.7288196E12, 1983.5000000000002], [1.7288184E12, 1531.0], [1.72881498E12, 968.3999999999996], [1.72881942E12, 1933.75], [1.72881396E12, 1032.7999999999997], [1.7288172E12, 1608.0], [1.72881618E12, 1158.1999999999998], [1.72881822E12, 1473.7999999999997], [1.72881792E12, 1508.8], [1.72881894E12, 1901.0], [1.7288145E12, 987.8], [1.72881348E12, 959.5999999999999], [1.72881672E12, 1164.0], [1.7288157E12, 1180.1], [1.72881774E12, 1624.549999999999], [1.72881996E12, 1984.3999999999992], [1.72881534E12, 1138.0], [1.72881432E12, 990.1999999999996], [1.72881876E12, 1818.5999999999997], [1.72881654E12, 1179.0], [1.72881978E12, 1971.1], [1.72881756E12, 1504.0], [1.7288133E12, 1030.1999999999998], [1.72881552E12, 1121.0], [1.72881324E12, 983.2], [1.72881666E12, 1131.1999999999998], [1.72881888E12, 2034.1999999999991], [1.7288199E12, 1971.9], [1.72881546E12, 1122.0], [1.72881444E12, 1032.0], [1.72881768E12, 1593.0], [1.7288187E12, 1271.0], [1.7288163E12, 1066.1], [1.72881528E12, 1149.7999999999997], [1.7288175E12, 1571.6], [1.72881972E12, 1983.4499999999996], [1.72881852E12, 1508.1999999999994], [1.72881426E12, 966.7999999999997], [1.72881648E12, 1169.3999999999999], [1.72881582E12, 1118.599999999998], [1.7288148E12, 1040.1999999999998], [1.72881702E12, 1528.5], [1.72881924E12, 1964.7999999999997], [1.72882026E12, 1650.25], [1.72881804E12, 1611.4499999999996], [1.72881378E12, 998.6999999999999], [1.728816E12, 1192.85], [1.72881906E12, 1925.0], [1.72881564E12, 1126.7499999999995], [1.72881342E12, 960.5999999999999], [1.72881684E12, 1102.3999999999999], [1.72881462E12, 969.7], [1.72881786E12, 1548.0], [1.72882008E12, 1962.9999999999995], [1.7288136E12, 974.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72882032E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 144.0, "minX": 1.0, "maxY": 888.0, "series": [{"data": [[2.0, 614.0], [32.0, 223.5], [33.0, 208.0], [34.0, 191.5], [35.0, 179.0], [36.0, 240.0], [37.0, 144.0], [38.0, 219.0], [40.0, 173.0], [3.0, 508.0], [4.0, 501.0], [5.0, 524.5], [6.0, 526.5], [7.0, 519.0], [8.0, 468.0], [9.0, 442.0], [10.0, 404.5], [11.0, 409.5], [12.0, 438.0], [13.0, 457.0], [14.0, 508.5], [15.0, 506.0], [16.0, 521.5], [1.0, 888.0], [17.0, 516.0], [18.0, 475.0], [19.0, 469.0], [20.0, 429.0], [21.0, 446.0], [22.0, 378.0], [23.0, 368.0], [24.0, 343.5], [25.0, 295.0], [26.0, 304.0], [27.0, 300.0], [28.0, 252.5], [29.0, 220.0], [30.0, 257.5], [31.0, 238.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 82.0, "minX": 1.0, "maxY": 537.0, "series": [{"data": [[2.0, 450.5], [32.0, 148.5], [33.0, 132.0], [34.0, 126.0], [35.0, 109.0], [36.0, 161.5], [37.0, 82.0], [38.0, 142.5], [40.0, 125.0], [3.0, 338.0], [4.0, 351.5], [5.0, 356.5], [6.0, 365.0], [7.0, 358.0], [8.0, 327.0], [9.0, 317.0], [10.0, 294.5], [11.0, 293.0], [12.0, 316.0], [13.0, 330.0], [14.0, 365.0], [15.0, 362.0], [16.0, 375.0], [1.0, 537.0], [17.0, 370.0], [18.0, 346.0], [19.0, 344.0], [20.0, 313.0], [21.0, 330.5], [22.0, 280.5], [23.0, 267.0], [24.0, 244.0], [25.0, 210.0], [26.0, 212.0], [27.0, 212.0], [28.0, 170.0], [29.0, 141.0], [30.0, 176.0], [31.0, 162.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.72881318E12, "maxY": 21.883333333333333, "series": [{"data": [[1.72881696E12, 20.35], [1.72881354E12, 9.916666666666666], [1.72881576E12, 17.7], [1.72881798E12, 20.666666666666668], [1.7288202E12, 20.533333333333335], [1.72881474E12, 9.25], [1.72881678E12, 17.366666666666667], [1.728819E12, 21.7], [1.72882002E12, 21.2], [1.72881438E12, 10.016666666666667], [1.7288166E12, 17.15], [1.7288178E12, 21.15], [1.72881336E12, 5.016666666666667], [1.72881558E12, 17.65], [1.72881882E12, 20.716666666666665], [1.72881456E12, 10.466666666666667], [1.72881954E12, 21.333333333333332], [1.7288139E12, 9.016666666666667], [1.72881612E12, 18.266666666666666], [1.72881732E12, 20.233333333333334], [1.7288151E12, 15.733333333333333], [1.72881834E12, 19.9], [1.72881408E12, 9.7], [1.72881372E12, 9.716666666666667], [1.72881714E12, 19.666666666666668], [1.72881936E12, 20.25], [1.72881594E12, 17.533333333333335], [1.72881816E12, 20.4], [1.72881492E12, 10.333333333333334], [1.72881918E12, 21.383333333333333], [1.72881486E12, 9.333333333333334], [1.72881384E12, 9.5], [1.72881828E12, 19.583333333333332], [1.72881606E12, 17.283333333333335], [1.7288193E12, 20.833333333333332], [1.72881708E12, 20.066666666666666], [1.72881504E12, 7.066666666666666], [1.7288181E12, 19.733333333333334], [1.72882032E12, 0.3333333333333333], [1.72881468E12, 9.566666666666666], [1.72881366E12, 9.55], [1.72881588E12, 17.433333333333334], [1.7288169E12, 8.083333333333334], [1.72881912E12, 20.2], [1.72882014E12, 20.033333333333335], [1.7288142E12, 10.15], [1.72881984E12, 20.1], [1.72881762E12, 20.383333333333333], [1.72881642E12, 17.783333333333335], [1.72881864E12, 19.383333333333333], [1.72881318E12, 0.11666666666666667], [1.7288154E12, 17.65], [1.72881966E12, 20.8], [1.72881744E12, 20.75], [1.72881402E12, 9.883333333333333], [1.72881624E12, 17.4], [1.72881846E12, 20.55], [1.72881522E12, 17.683333333333334], [1.72881726E12, 18.683333333333334], [1.72881948E12, 21.116666666666667], [1.72881858E12, 19.8], [1.72881516E12, 18.1], [1.72881414E12, 9.816666666666666], [1.72881636E12, 18.65], [1.72881738E12, 20.016666666666666], [1.7288196E12, 20.75], [1.7288184E12, 20.25], [1.72881498E12, 10.433333333333334], [1.72881942E12, 21.4], [1.72881396E12, 9.766666666666667], [1.7288172E12, 19.733333333333334], [1.72881618E12, 17.783333333333335], [1.72881822E12, 21.016666666666666], [1.72881792E12, 20.383333333333333], [1.72881894E12, 21.883333333333333], [1.7288145E12, 9.85], [1.72881348E12, 10.183333333333334], [1.72881672E12, 17.3], [1.7288157E12, 17.133333333333333], [1.72881774E12, 19.1], [1.72881996E12, 20.683333333333334], [1.72881534E12, 17.65], [1.72881432E12, 10.016666666666667], [1.72881876E12, 16.6], [1.72881654E12, 17.533333333333335], [1.72881978E12, 21.3], [1.72881756E12, 20.316666666666666], [1.7288133E12, 5.183333333333334], [1.72881552E12, 18.266666666666666], [1.72881324E12, 5.216666666666667], [1.72881666E12, 17.583333333333332], [1.72881888E12, 20.716666666666665], [1.7288199E12, 21.666666666666668], [1.72881546E12, 17.65], [1.72881444E12, 9.866666666666667], [1.72881768E12, 19.583333333333332], [1.7288187E12, 16.366666666666667], [1.7288163E12, 17.95], [1.72881528E12, 17.5], [1.7288175E12, 20.116666666666667], [1.72881972E12, 19.6], [1.72881852E12, 20.45], [1.72881426E12, 10.683333333333334], [1.72881648E12, 17.083333333333332], [1.72881582E12, 18.683333333333334], [1.7288148E12, 10.183333333333334], [1.72881702E12, 20.566666666666666], [1.72881924E12, 20.783333333333335], [1.72882026E12, 16.65], [1.72881804E12, 19.966666666666665], [1.72881378E12, 10.35], [1.728816E12, 16.7], [1.72881906E12, 21.083333333333332], [1.72881564E12, 17.2], [1.72881342E12, 5.716666666666667], [1.72881684E12, 15.883333333333333], [1.72881462E12, 10.533333333333333], [1.72881786E12, 19.4], [1.72882008E12, 21.216666666666665], [1.7288136E12, 10.133333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72882032E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.72881318E12, "maxY": 21.883333333333333, "series": [{"data": [[1.72881696E12, 20.166666666666668], [1.72881354E12, 9.916666666666666], [1.72881576E12, 17.7], [1.72881798E12, 20.666666666666668], [1.7288202E12, 20.533333333333335], [1.72881474E12, 9.25], [1.72881678E12, 17.366666666666667], [1.728819E12, 21.7], [1.72882002E12, 21.2], [1.72881438E12, 10.016666666666667], [1.7288166E12, 17.15], [1.7288178E12, 21.15], [1.72881336E12, 5.016666666666667], [1.72881558E12, 17.65], [1.72881882E12, 20.716666666666665], [1.72881456E12, 10.466666666666667], [1.72881954E12, 21.333333333333332], [1.7288139E12, 9.016666666666667], [1.72881612E12, 18.266666666666666], [1.72881732E12, 20.233333333333334], [1.7288151E12, 15.616666666666667], [1.72881834E12, 19.9], [1.72881408E12, 9.7], [1.72881372E12, 9.716666666666667], [1.72881714E12, 19.666666666666668], [1.72881936E12, 20.25], [1.72881594E12, 17.533333333333335], [1.72881816E12, 20.4], [1.72881492E12, 10.333333333333334], [1.72881918E12, 21.383333333333333], [1.72881486E12, 9.333333333333334], [1.72881384E12, 9.5], [1.72881828E12, 19.583333333333332], [1.72881606E12, 17.283333333333335], [1.7288193E12, 20.833333333333332], [1.72881708E12, 20.066666666666666], [1.72881504E12, 7.116666666666666], [1.7288181E12, 19.733333333333334], [1.72882032E12, 0.35], [1.72881468E12, 9.566666666666666], [1.72881366E12, 9.55], [1.72881588E12, 17.433333333333334], [1.7288169E12, 8.166666666666666], [1.72881912E12, 20.2], [1.72882014E12, 20.033333333333335], [1.7288142E12, 10.15], [1.72881984E12, 20.1], [1.72881762E12, 20.383333333333333], [1.72881642E12, 17.783333333333335], [1.72881864E12, 19.4], [1.72881318E12, 0.08333333333333333], [1.7288154E12, 17.65], [1.72881966E12, 20.8], [1.72881744E12, 20.75], [1.72881402E12, 9.883333333333333], [1.72881624E12, 17.4], [1.72881846E12, 20.55], [1.72881522E12, 17.683333333333334], [1.72881726E12, 18.683333333333334], [1.72881948E12, 21.116666666666667], [1.72881858E12, 19.8], [1.72881516E12, 18.1], [1.72881414E12, 9.816666666666666], [1.72881636E12, 18.65], [1.72881738E12, 20.016666666666666], [1.7288196E12, 20.75], [1.7288184E12, 20.25], [1.72881498E12, 10.433333333333334], [1.72881942E12, 21.4], [1.72881396E12, 9.766666666666667], [1.7288172E12, 19.733333333333334], [1.72881618E12, 17.783333333333335], [1.72881822E12, 21.016666666666666], [1.72881792E12, 20.383333333333333], [1.72881894E12, 21.883333333333333], [1.7288145E12, 9.85], [1.72881348E12, 10.183333333333334], [1.72881672E12, 17.3], [1.7288157E12, 17.133333333333333], [1.72881774E12, 19.1], [1.72881996E12, 20.683333333333334], [1.72881534E12, 17.65], [1.72881432E12, 10.016666666666667], [1.72881876E12, 16.383333333333333], [1.72881654E12, 17.533333333333335], [1.72881978E12, 21.3], [1.72881756E12, 20.316666666666666], [1.7288133E12, 5.183333333333334], [1.72881552E12, 18.266666666666666], [1.72881324E12, 5.216666666666667], [1.72881666E12, 17.583333333333332], [1.72881888E12, 20.716666666666665], [1.7288199E12, 21.666666666666668], [1.72881546E12, 17.65], [1.72881444E12, 9.866666666666667], [1.72881768E12, 19.583333333333332], [1.7288187E12, 16.5], [1.7288163E12, 17.95], [1.72881528E12, 17.5], [1.7288175E12, 20.116666666666667], [1.72881972E12, 19.6], [1.72881852E12, 20.45], [1.72881426E12, 10.683333333333334], [1.72881648E12, 17.083333333333332], [1.72881582E12, 18.683333333333334], [1.7288148E12, 10.183333333333334], [1.72881702E12, 20.566666666666666], [1.72881924E12, 20.783333333333335], [1.72882026E12, 16.9], [1.72881804E12, 19.966666666666665], [1.72881378E12, 10.35], [1.728816E12, 16.7], [1.72881906E12, 21.083333333333332], [1.72881564E12, 17.2], [1.72881342E12, 5.683333333333334], [1.72881684E12, 15.916666666666666], [1.72881462E12, 10.533333333333333], [1.72881786E12, 19.4], [1.72882008E12, 21.216666666666665], [1.7288136E12, 10.133333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72882032E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.72881318E12, "maxY": 21.883333333333333, "series": [{"data": [[1.72881696E12, 20.166666666666668], [1.72881354E12, 9.916666666666666], [1.72881576E12, 17.7], [1.72881798E12, 20.666666666666668], [1.7288202E12, 20.533333333333335], [1.72881474E12, 9.25], [1.72881678E12, 17.366666666666667], [1.728819E12, 21.7], [1.72882002E12, 21.2], [1.72881438E12, 10.016666666666667], [1.7288166E12, 17.15], [1.7288178E12, 21.15], [1.72881336E12, 5.016666666666667], [1.72881558E12, 17.65], [1.72881882E12, 20.716666666666665], [1.72881456E12, 10.466666666666667], [1.72881954E12, 21.333333333333332], [1.7288139E12, 9.016666666666667], [1.72881612E12, 18.266666666666666], [1.72881732E12, 20.233333333333334], [1.7288151E12, 15.616666666666667], [1.72881834E12, 19.9], [1.72881408E12, 9.7], [1.72881372E12, 9.716666666666667], [1.72881714E12, 19.666666666666668], [1.72881936E12, 20.25], [1.72881594E12, 17.533333333333335], [1.72881816E12, 20.4], [1.72881492E12, 10.333333333333334], [1.72881918E12, 21.383333333333333], [1.72881486E12, 9.333333333333334], [1.72881384E12, 9.5], [1.72881828E12, 19.583333333333332], [1.72881606E12, 17.283333333333335], [1.7288193E12, 20.833333333333332], [1.72881708E12, 20.066666666666666], [1.72881504E12, 7.116666666666666], [1.7288181E12, 19.733333333333334], [1.72882032E12, 0.35], [1.72881468E12, 9.566666666666666], [1.72881366E12, 9.55], [1.72881588E12, 17.433333333333334], [1.7288169E12, 8.166666666666666], [1.72881912E12, 20.2], [1.72882014E12, 20.033333333333335], [1.7288142E12, 10.15], [1.72881984E12, 20.1], [1.72881762E12, 20.383333333333333], [1.72881642E12, 17.783333333333335], [1.72881864E12, 19.4], [1.72881318E12, 0.08333333333333333], [1.7288154E12, 17.65], [1.72881966E12, 20.8], [1.72881744E12, 20.75], [1.72881402E12, 9.883333333333333], [1.72881624E12, 17.4], [1.72881846E12, 20.55], [1.72881522E12, 17.683333333333334], [1.72881726E12, 18.683333333333334], [1.72881948E12, 21.116666666666667], [1.72881858E12, 19.8], [1.72881516E12, 18.1], [1.72881414E12, 9.816666666666666], [1.72881636E12, 18.65], [1.72881738E12, 20.016666666666666], [1.7288196E12, 20.75], [1.7288184E12, 20.25], [1.72881498E12, 10.433333333333334], [1.72881942E12, 21.4], [1.72881396E12, 9.766666666666667], [1.7288172E12, 19.733333333333334], [1.72881618E12, 17.783333333333335], [1.72881822E12, 21.016666666666666], [1.72881792E12, 20.383333333333333], [1.72881894E12, 21.883333333333333], [1.7288145E12, 9.85], [1.72881348E12, 10.183333333333334], [1.72881672E12, 17.3], [1.7288157E12, 17.133333333333333], [1.72881774E12, 19.1], [1.72881996E12, 20.683333333333334], [1.72881534E12, 17.65], [1.72881432E12, 10.016666666666667], [1.72881876E12, 16.383333333333333], [1.72881654E12, 17.533333333333335], [1.72881978E12, 21.3], [1.72881756E12, 20.316666666666666], [1.7288133E12, 5.183333333333334], [1.72881552E12, 18.266666666666666], [1.72881324E12, 5.216666666666667], [1.72881666E12, 17.583333333333332], [1.72881888E12, 20.716666666666665], [1.7288199E12, 21.666666666666668], [1.72881546E12, 17.65], [1.72881444E12, 9.866666666666667], [1.72881768E12, 19.583333333333332], [1.7288187E12, 16.5], [1.7288163E12, 17.95], [1.72881528E12, 17.5], [1.7288175E12, 20.116666666666667], [1.72881972E12, 19.6], [1.72881852E12, 20.45], [1.72881426E12, 10.683333333333334], [1.72881648E12, 17.083333333333332], [1.72881582E12, 18.683333333333334], [1.7288148E12, 10.183333333333334], [1.72881702E12, 20.566666666666666], [1.72881924E12, 20.783333333333335], [1.72882026E12, 16.9], [1.72881804E12, 19.966666666666665], [1.72881378E12, 10.35], [1.728816E12, 16.7], [1.72881906E12, 21.083333333333332], [1.72881564E12, 17.2], [1.72881342E12, 5.683333333333334], [1.72881684E12, 15.916666666666666], [1.72881462E12, 10.533333333333333], [1.72881786E12, 19.4], [1.72882008E12, 21.216666666666665], [1.7288136E12, 10.133333333333333]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72882032E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.72881318E12, "maxY": 21.883333333333333, "series": [{"data": [[1.72881696E12, 20.166666666666668], [1.72881354E12, 9.916666666666666], [1.72881576E12, 17.7], [1.72881798E12, 20.666666666666668], [1.7288202E12, 20.533333333333335], [1.72881474E12, 9.25], [1.72881678E12, 17.366666666666667], [1.728819E12, 21.7], [1.72882002E12, 21.2], [1.72881438E12, 10.016666666666667], [1.7288166E12, 17.15], [1.7288178E12, 21.15], [1.72881336E12, 5.016666666666667], [1.72881558E12, 17.65], [1.72881882E12, 20.716666666666665], [1.72881456E12, 10.466666666666667], [1.72881954E12, 21.333333333333332], [1.7288139E12, 9.016666666666667], [1.72881612E12, 18.266666666666666], [1.72881732E12, 20.233333333333334], [1.7288151E12, 15.616666666666667], [1.72881834E12, 19.9], [1.72881408E12, 9.7], [1.72881372E12, 9.716666666666667], [1.72881714E12, 19.666666666666668], [1.72881936E12, 20.25], [1.72881594E12, 17.533333333333335], [1.72881816E12, 20.4], [1.72881492E12, 10.333333333333334], [1.72881918E12, 21.383333333333333], [1.72881486E12, 9.333333333333334], [1.72881384E12, 9.5], [1.72881828E12, 19.583333333333332], [1.72881606E12, 17.283333333333335], [1.7288193E12, 20.833333333333332], [1.72881708E12, 20.066666666666666], [1.72881504E12, 7.116666666666666], [1.7288181E12, 19.733333333333334], [1.72882032E12, 0.35], [1.72881468E12, 9.566666666666666], [1.72881366E12, 9.55], [1.72881588E12, 17.433333333333334], [1.7288169E12, 8.166666666666666], [1.72881912E12, 20.2], [1.72882014E12, 20.033333333333335], [1.7288142E12, 10.15], [1.72881984E12, 20.1], [1.72881762E12, 20.383333333333333], [1.72881642E12, 17.783333333333335], [1.72881864E12, 19.4], [1.72881318E12, 0.08333333333333333], [1.7288154E12, 17.65], [1.72881966E12, 20.8], [1.72881744E12, 20.75], [1.72881402E12, 9.883333333333333], [1.72881624E12, 17.4], [1.72881846E12, 20.55], [1.72881522E12, 17.683333333333334], [1.72881726E12, 18.683333333333334], [1.72881948E12, 21.116666666666667], [1.72881858E12, 19.8], [1.72881516E12, 18.1], [1.72881414E12, 9.816666666666666], [1.72881636E12, 18.65], [1.72881738E12, 20.016666666666666], [1.7288196E12, 20.75], [1.7288184E12, 20.25], [1.72881498E12, 10.433333333333334], [1.72881942E12, 21.4], [1.72881396E12, 9.766666666666667], [1.7288172E12, 19.733333333333334], [1.72881618E12, 17.783333333333335], [1.72881822E12, 21.016666666666666], [1.72881792E12, 20.383333333333333], [1.72881894E12, 21.883333333333333], [1.7288145E12, 9.85], [1.72881348E12, 10.183333333333334], [1.72881672E12, 17.3], [1.7288157E12, 17.133333333333333], [1.72881774E12, 19.1], [1.72881996E12, 20.683333333333334], [1.72881534E12, 17.65], [1.72881432E12, 10.016666666666667], [1.72881876E12, 16.383333333333333], [1.72881654E12, 17.533333333333335], [1.72881978E12, 21.3], [1.72881756E12, 20.316666666666666], [1.7288133E12, 5.183333333333334], [1.72881552E12, 18.266666666666666], [1.72881324E12, 5.216666666666667], [1.72881666E12, 17.583333333333332], [1.72881888E12, 20.716666666666665], [1.7288199E12, 21.666666666666668], [1.72881546E12, 17.65], [1.72881444E12, 9.866666666666667], [1.72881768E12, 19.583333333333332], [1.7288187E12, 16.5], [1.7288163E12, 17.95], [1.72881528E12, 17.5], [1.7288175E12, 20.116666666666667], [1.72881972E12, 19.6], [1.72881852E12, 20.45], [1.72881426E12, 10.683333333333334], [1.72881648E12, 17.083333333333332], [1.72881582E12, 18.683333333333334], [1.7288148E12, 10.183333333333334], [1.72881702E12, 20.566666666666666], [1.72881924E12, 20.783333333333335], [1.72882026E12, 16.9], [1.72881804E12, 19.966666666666665], [1.72881378E12, 10.35], [1.728816E12, 16.7], [1.72881906E12, 21.083333333333332], [1.72881564E12, 17.2], [1.72881342E12, 5.683333333333334], [1.72881684E12, 15.916666666666666], [1.72881462E12, 10.533333333333333], [1.72881786E12, 19.4], [1.72882008E12, 21.216666666666665], [1.7288136E12, 10.133333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72882032E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

