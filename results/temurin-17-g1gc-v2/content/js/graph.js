/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "maxY": 3900.0, "series": [{"data": [[0.0, 13.0], [0.1, 41.0], [0.2, 44.0], [0.3, 45.0], [0.4, 47.0], [0.5, 48.0], [0.6, 49.0], [0.7, 50.0], [0.8, 52.0], [0.9, 52.0], [1.0, 53.0], [1.1, 54.0], [1.2, 55.0], [1.3, 56.0], [1.4, 56.0], [1.5, 57.0], [1.6, 58.0], [1.7, 59.0], [1.8, 59.0], [1.9, 60.0], [2.0, 61.0], [2.1, 61.0], [2.2, 62.0], [2.3, 62.0], [2.4, 63.0], [2.5, 63.0], [2.6, 64.0], [2.7, 64.0], [2.8, 65.0], [2.9, 65.0], [3.0, 66.0], [3.1, 66.0], [3.2, 67.0], [3.3, 67.0], [3.4, 67.0], [3.5, 68.0], [3.6, 68.0], [3.7, 69.0], [3.8, 69.0], [3.9, 70.0], [4.0, 70.0], [4.1, 71.0], [4.2, 71.0], [4.3, 71.0], [4.4, 72.0], [4.5, 72.0], [4.6, 73.0], [4.7, 73.0], [4.8, 73.0], [4.9, 74.0], [5.0, 74.0], [5.1, 74.0], [5.2, 75.0], [5.3, 75.0], [5.4, 76.0], [5.5, 76.0], [5.6, 76.0], [5.7, 77.0], [5.8, 77.0], [5.9, 77.0], [6.0, 78.0], [6.1, 78.0], [6.2, 79.0], [6.3, 79.0], [6.4, 79.0], [6.5, 80.0], [6.6, 80.0], [6.7, 80.0], [6.8, 81.0], [6.9, 81.0], [7.0, 81.0], [7.1, 82.0], [7.2, 82.0], [7.3, 82.0], [7.4, 83.0], [7.5, 83.0], [7.6, 83.0], [7.7, 84.0], [7.8, 84.0], [7.9, 85.0], [8.0, 85.0], [8.1, 85.0], [8.2, 86.0], [8.3, 86.0], [8.4, 86.0], [8.5, 87.0], [8.6, 87.0], [8.7, 87.0], [8.8, 88.0], [8.9, 88.0], [9.0, 88.0], [9.1, 89.0], [9.2, 89.0], [9.3, 89.0], [9.4, 90.0], [9.5, 90.0], [9.6, 90.0], [9.7, 91.0], [9.8, 91.0], [9.9, 91.0], [10.0, 92.0], [10.1, 92.0], [10.2, 92.0], [10.3, 93.0], [10.4, 93.0], [10.5, 93.0], [10.6, 94.0], [10.7, 94.0], [10.8, 94.0], [10.9, 95.0], [11.0, 95.0], [11.1, 95.0], [11.2, 96.0], [11.3, 96.0], [11.4, 96.0], [11.5, 97.0], [11.6, 97.0], [11.7, 97.0], [11.8, 98.0], [11.9, 98.0], [12.0, 98.0], [12.1, 99.0], [12.2, 99.0], [12.3, 99.0], [12.4, 99.0], [12.5, 100.0], [12.6, 100.0], [12.7, 100.0], [12.8, 101.0], [12.9, 101.0], [13.0, 101.0], [13.1, 102.0], [13.2, 102.0], [13.3, 102.0], [13.4, 103.0], [13.5, 103.0], [13.6, 103.0], [13.7, 104.0], [13.8, 104.0], [13.9, 104.0], [14.0, 105.0], [14.1, 105.0], [14.2, 105.0], [14.3, 106.0], [14.4, 106.0], [14.5, 106.0], [14.6, 107.0], [14.7, 107.0], [14.8, 107.0], [14.9, 108.0], [15.0, 108.0], [15.1, 109.0], [15.2, 109.0], [15.3, 109.0], [15.4, 110.0], [15.5, 110.0], [15.6, 110.0], [15.7, 111.0], [15.8, 111.0], [15.9, 111.0], [16.0, 112.0], [16.1, 112.0], [16.2, 113.0], [16.3, 113.0], [16.4, 113.0], [16.5, 114.0], [16.6, 114.0], [16.7, 114.0], [16.8, 115.0], [16.9, 115.0], [17.0, 115.0], [17.1, 116.0], [17.2, 116.0], [17.3, 116.0], [17.4, 117.0], [17.5, 117.0], [17.6, 117.0], [17.7, 118.0], [17.8, 118.0], [17.9, 119.0], [18.0, 119.0], [18.1, 119.0], [18.2, 120.0], [18.3, 120.0], [18.4, 120.0], [18.5, 121.0], [18.6, 121.0], [18.7, 122.0], [18.8, 122.0], [18.9, 123.0], [19.0, 123.0], [19.1, 123.0], [19.2, 124.0], [19.3, 124.0], [19.4, 124.0], [19.5, 125.0], [19.6, 125.0], [19.7, 126.0], [19.8, 126.0], [19.9, 127.0], [20.0, 127.0], [20.1, 127.0], [20.2, 128.0], [20.3, 128.0], [20.4, 129.0], [20.5, 129.0], [20.6, 130.0], [20.7, 130.0], [20.8, 130.0], [20.9, 131.0], [21.0, 131.0], [21.1, 131.0], [21.2, 132.0], [21.3, 132.0], [21.4, 133.0], [21.5, 133.0], [21.6, 134.0], [21.7, 134.0], [21.8, 134.0], [21.9, 135.0], [22.0, 135.0], [22.1, 136.0], [22.2, 136.0], [22.3, 136.0], [22.4, 137.0], [22.5, 137.0], [22.6, 138.0], [22.7, 138.0], [22.8, 139.0], [22.9, 139.0], [23.0, 139.0], [23.1, 140.0], [23.2, 140.0], [23.3, 141.0], [23.4, 141.0], [23.5, 142.0], [23.6, 142.0], [23.7, 142.0], [23.8, 143.0], [23.9, 143.0], [24.0, 144.0], [24.1, 144.0], [24.2, 145.0], [24.3, 145.0], [24.4, 146.0], [24.5, 146.0], [24.6, 147.0], [24.7, 147.0], [24.8, 147.0], [24.9, 148.0], [25.0, 148.0], [25.1, 149.0], [25.2, 149.0], [25.3, 150.0], [25.4, 150.0], [25.5, 151.0], [25.6, 151.0], [25.7, 152.0], [25.8, 152.0], [25.9, 153.0], [26.0, 153.0], [26.1, 154.0], [26.2, 154.0], [26.3, 155.0], [26.4, 155.0], [26.5, 156.0], [26.6, 156.0], [26.7, 157.0], [26.8, 157.0], [26.9, 158.0], [27.0, 158.0], [27.1, 159.0], [27.2, 159.0], [27.3, 160.0], [27.4, 160.0], [27.5, 161.0], [27.6, 161.0], [27.7, 162.0], [27.8, 162.0], [27.9, 163.0], [28.0, 164.0], [28.1, 164.0], [28.2, 165.0], [28.3, 165.0], [28.4, 166.0], [28.5, 166.0], [28.6, 167.0], [28.7, 167.0], [28.8, 168.0], [28.9, 169.0], [29.0, 169.0], [29.1, 170.0], [29.2, 171.0], [29.3, 171.0], [29.4, 172.0], [29.5, 172.0], [29.6, 173.0], [29.7, 174.0], [29.8, 174.0], [29.9, 175.0], [30.0, 175.0], [30.1, 176.0], [30.2, 177.0], [30.3, 177.0], [30.4, 178.0], [30.5, 178.0], [30.6, 179.0], [30.7, 180.0], [30.8, 180.0], [30.9, 181.0], [31.0, 182.0], [31.1, 182.0], [31.2, 183.0], [31.3, 184.0], [31.4, 185.0], [31.5, 185.0], [31.6, 186.0], [31.7, 187.0], [31.8, 187.0], [31.9, 188.0], [32.0, 189.0], [32.1, 190.0], [32.2, 190.0], [32.3, 191.0], [32.4, 192.0], [32.5, 193.0], [32.6, 193.0], [32.7, 194.0], [32.8, 195.0], [32.9, 196.0], [33.0, 197.0], [33.1, 198.0], [33.2, 198.0], [33.3, 199.0], [33.4, 200.0], [33.5, 201.0], [33.6, 202.0], [33.7, 203.0], [33.8, 203.0], [33.9, 204.0], [34.0, 205.0], [34.1, 206.0], [34.2, 207.0], [34.3, 208.0], [34.4, 209.0], [34.5, 210.0], [34.6, 211.0], [34.7, 212.0], [34.8, 213.0], [34.9, 214.0], [35.0, 215.0], [35.1, 216.0], [35.2, 217.0], [35.3, 218.0], [35.4, 219.0], [35.5, 220.0], [35.6, 221.0], [35.7, 222.0], [35.8, 223.0], [35.9, 224.0], [36.0, 225.0], [36.1, 226.0], [36.2, 228.0], [36.3, 229.0], [36.4, 230.0], [36.5, 231.0], [36.6, 232.0], [36.7, 234.0], [36.8, 235.0], [36.9, 236.0], [37.0, 238.0], [37.1, 239.0], [37.2, 240.0], [37.3, 242.0], [37.4, 243.0], [37.5, 244.0], [37.6, 246.0], [37.7, 247.0], [37.8, 248.0], [37.9, 250.0], [38.0, 251.0], [38.1, 253.0], [38.2, 254.0], [38.3, 256.0], [38.4, 258.0], [38.5, 259.0], [38.6, 260.0], [38.7, 262.0], [38.8, 264.0], [38.9, 265.0], [39.0, 267.0], [39.1, 269.0], [39.2, 270.0], [39.3, 272.0], [39.4, 274.0], [39.5, 276.0], [39.6, 277.0], [39.7, 279.0], [39.8, 282.0], [39.9, 283.0], [40.0, 285.0], [40.1, 288.0], [40.2, 290.0], [40.3, 292.0], [40.4, 294.0], [40.5, 296.0], [40.6, 298.0], [40.7, 300.0], [40.8, 302.0], [40.9, 305.0], [41.0, 307.0], [41.1, 309.0], [41.2, 311.0], [41.3, 313.0], [41.4, 316.0], [41.5, 318.0], [41.6, 321.0], [41.7, 324.0], [41.8, 326.0], [41.9, 329.0], [42.0, 331.0], [42.1, 334.0], [42.2, 337.0], [42.3, 339.0], [42.4, 342.0], [42.5, 345.0], [42.6, 348.0], [42.7, 351.0], [42.8, 354.0], [42.9, 357.0], [43.0, 360.0], [43.1, 363.0], [43.2, 365.0], [43.3, 368.0], [43.4, 371.0], [43.5, 374.0], [43.6, 377.0], [43.7, 379.0], [43.8, 383.0], [43.9, 386.0], [44.0, 389.0], [44.1, 392.0], [44.2, 395.0], [44.3, 398.0], [44.4, 401.0], [44.5, 404.0], [44.6, 406.0], [44.7, 410.0], [44.8, 413.0], [44.9, 416.0], [45.0, 418.0], [45.1, 421.0], [45.2, 424.0], [45.3, 427.0], [45.4, 430.0], [45.5, 434.0], [45.6, 437.0], [45.7, 440.0], [45.8, 443.0], [45.9, 446.0], [46.0, 449.0], [46.1, 452.0], [46.2, 455.0], [46.3, 458.0], [46.4, 461.0], [46.5, 464.0], [46.6, 467.0], [46.7, 470.0], [46.8, 474.0], [46.9, 477.0], [47.0, 479.0], [47.1, 482.0], [47.2, 485.0], [47.3, 488.0], [47.4, 490.0], [47.5, 494.0], [47.6, 497.0], [47.7, 500.0], [47.8, 503.0], [47.9, 506.0], [48.0, 508.0], [48.1, 511.0], [48.2, 514.0], [48.3, 516.0], [48.4, 519.0], [48.5, 521.0], [48.6, 524.0], [48.7, 526.0], [48.8, 528.0], [48.9, 531.0], [49.0, 534.0], [49.1, 536.0], [49.2, 539.0], [49.3, 542.0], [49.4, 544.0], [49.5, 546.0], [49.6, 549.0], [49.7, 551.0], [49.8, 554.0], [49.9, 557.0], [50.0, 559.0], [50.1, 562.0], [50.2, 564.0], [50.3, 567.0], [50.4, 569.0], [50.5, 571.0], [50.6, 575.0], [50.7, 577.0], [50.8, 579.0], [50.9, 582.0], [51.0, 584.0], [51.1, 587.0], [51.2, 589.0], [51.3, 591.0], [51.4, 594.0], [51.5, 596.0], [51.6, 599.0], [51.7, 601.0], [51.8, 603.0], [51.9, 605.0], [52.0, 608.0], [52.1, 610.0], [52.2, 612.0], [52.3, 614.0], [52.4, 617.0], [52.5, 619.0], [52.6, 621.0], [52.7, 623.0], [52.8, 625.0], [52.9, 627.0], [53.0, 630.0], [53.1, 632.0], [53.2, 634.0], [53.3, 636.0], [53.4, 639.0], [53.5, 641.0], [53.6, 643.0], [53.7, 645.0], [53.8, 648.0], [53.9, 650.0], [54.0, 652.0], [54.1, 654.0], [54.2, 656.0], [54.3, 658.0], [54.4, 660.0], [54.5, 662.0], [54.6, 664.0], [54.7, 667.0], [54.8, 669.0], [54.9, 671.0], [55.0, 673.0], [55.1, 675.0], [55.2, 677.0], [55.3, 679.0], [55.4, 681.0], [55.5, 684.0], [55.6, 686.0], [55.7, 688.0], [55.8, 690.0], [55.9, 692.0], [56.0, 694.0], [56.1, 696.0], [56.2, 698.0], [56.3, 700.0], [56.4, 702.0], [56.5, 705.0], [56.6, 707.0], [56.7, 709.0], [56.8, 711.0], [56.9, 713.0], [57.0, 715.0], [57.1, 717.0], [57.2, 719.0], [57.3, 721.0], [57.4, 723.0], [57.5, 725.0], [57.6, 727.0], [57.7, 730.0], [57.8, 732.0], [57.9, 734.0], [58.0, 736.0], [58.1, 738.0], [58.2, 740.0], [58.3, 741.0], [58.4, 743.0], [58.5, 745.0], [58.6, 747.0], [58.7, 750.0], [58.8, 751.0], [58.9, 753.0], [59.0, 755.0], [59.1, 757.0], [59.2, 759.0], [59.3, 761.0], [59.4, 763.0], [59.5, 765.0], [59.6, 768.0], [59.7, 770.0], [59.8, 772.0], [59.9, 774.0], [60.0, 776.0], [60.1, 778.0], [60.2, 780.0], [60.3, 782.0], [60.4, 784.0], [60.5, 786.0], [60.6, 788.0], [60.7, 790.0], [60.8, 792.0], [60.9, 794.0], [61.0, 796.0], [61.1, 798.0], [61.2, 801.0], [61.3, 803.0], [61.4, 805.0], [61.5, 807.0], [61.6, 809.0], [61.7, 811.0], [61.8, 813.0], [61.9, 815.0], [62.0, 817.0], [62.1, 819.0], [62.2, 821.0], [62.3, 823.0], [62.4, 825.0], [62.5, 828.0], [62.6, 830.0], [62.7, 832.0], [62.8, 834.0], [62.9, 836.0], [63.0, 838.0], [63.1, 839.0], [63.2, 842.0], [63.3, 843.0], [63.4, 845.0], [63.5, 847.0], [63.6, 849.0], [63.7, 851.0], [63.8, 853.0], [63.9, 856.0], [64.0, 858.0], [64.1, 860.0], [64.2, 862.0], [64.3, 864.0], [64.4, 865.0], [64.5, 867.0], [64.6, 870.0], [64.7, 872.0], [64.8, 874.0], [64.9, 876.0], [65.0, 878.0], [65.1, 880.0], [65.2, 882.0], [65.3, 884.0], [65.4, 886.0], [65.5, 888.0], [65.6, 890.0], [65.7, 892.0], [65.8, 894.0], [65.9, 896.0], [66.0, 898.0], [66.1, 900.0], [66.2, 902.0], [66.3, 904.0], [66.4, 906.0], [66.5, 909.0], [66.6, 911.0], [66.7, 912.0], [66.8, 914.0], [66.9, 916.0], [67.0, 918.0], [67.1, 920.0], [67.2, 922.0], [67.3, 924.0], [67.4, 926.0], [67.5, 928.0], [67.6, 931.0], [67.7, 933.0], [67.8, 935.0], [67.9, 937.0], [68.0, 940.0], [68.1, 942.0], [68.2, 944.0], [68.3, 946.0], [68.4, 948.0], [68.5, 950.0], [68.6, 952.0], [68.7, 954.0], [68.8, 956.0], [68.9, 958.0], [69.0, 960.0], [69.1, 962.0], [69.2, 964.0], [69.3, 966.0], [69.4, 969.0], [69.5, 971.0], [69.6, 973.0], [69.7, 975.0], [69.8, 977.0], [69.9, 979.0], [70.0, 982.0], [70.1, 984.0], [70.2, 986.0], [70.3, 988.0], [70.4, 990.0], [70.5, 992.0], [70.6, 995.0], [70.7, 997.0], [70.8, 999.0], [70.9, 1001.0], [71.0, 1004.0], [71.1, 1006.0], [71.2, 1008.0], [71.3, 1010.0], [71.4, 1012.0], [71.5, 1014.0], [71.6, 1016.0], [71.7, 1019.0], [71.8, 1020.0], [71.9, 1022.0], [72.0, 1025.0], [72.1, 1027.0], [72.2, 1029.0], [72.3, 1031.0], [72.4, 1033.0], [72.5, 1035.0], [72.6, 1038.0], [72.7, 1040.0], [72.8, 1042.0], [72.9, 1044.0], [73.0, 1047.0], [73.1, 1049.0], [73.2, 1051.0], [73.3, 1053.0], [73.4, 1055.0], [73.5, 1057.0], [73.6, 1060.0], [73.7, 1062.0], [73.8, 1064.0], [73.9, 1066.0], [74.0, 1069.0], [74.1, 1071.0], [74.2, 1074.0], [74.3, 1076.0], [74.4, 1078.0], [74.5, 1080.0], [74.6, 1083.0], [74.7, 1085.0], [74.8, 1087.0], [74.9, 1089.0], [75.0, 1091.0], [75.1, 1093.0], [75.2, 1095.0], [75.3, 1098.0], [75.4, 1100.0], [75.5, 1102.0], [75.6, 1104.0], [75.7, 1106.0], [75.8, 1109.0], [75.9, 1112.0], [76.0, 1114.0], [76.1, 1117.0], [76.2, 1119.0], [76.3, 1122.0], [76.4, 1124.0], [76.5, 1127.0], [76.6, 1130.0], [76.7, 1132.0], [76.8, 1135.0], [76.9, 1137.0], [77.0, 1140.0], [77.1, 1142.0], [77.2, 1145.0], [77.3, 1148.0], [77.4, 1150.0], [77.5, 1153.0], [77.6, 1155.0], [77.7, 1157.0], [77.8, 1160.0], [77.9, 1163.0], [78.0, 1165.0], [78.1, 1167.0], [78.2, 1170.0], [78.3, 1172.0], [78.4, 1175.0], [78.5, 1177.0], [78.6, 1180.0], [78.7, 1183.0], [78.8, 1185.0], [78.9, 1188.0], [79.0, 1190.0], [79.1, 1193.0], [79.2, 1196.0], [79.3, 1198.0], [79.4, 1201.0], [79.5, 1204.0], [79.6, 1207.0], [79.7, 1209.0], [79.8, 1212.0], [79.9, 1214.0], [80.0, 1217.0], [80.1, 1219.0], [80.2, 1222.0], [80.3, 1225.0], [80.4, 1228.0], [80.5, 1230.0], [80.6, 1233.0], [80.7, 1235.0], [80.8, 1238.0], [80.9, 1241.0], [81.0, 1244.0], [81.1, 1247.0], [81.2, 1249.0], [81.3, 1252.0], [81.4, 1254.0], [81.5, 1257.0], [81.6, 1260.0], [81.7, 1263.0], [81.8, 1266.0], [81.9, 1269.0], [82.0, 1272.0], [82.1, 1275.0], [82.2, 1278.0], [82.3, 1281.0], [82.4, 1284.0], [82.5, 1287.0], [82.6, 1290.0], [82.7, 1293.0], [82.8, 1296.0], [82.9, 1299.0], [83.0, 1303.0], [83.1, 1306.0], [83.2, 1309.0], [83.3, 1312.0], [83.4, 1315.0], [83.5, 1319.0], [83.6, 1321.0], [83.7, 1325.0], [83.8, 1328.0], [83.9, 1331.0], [84.0, 1334.0], [84.1, 1338.0], [84.2, 1341.0], [84.3, 1344.0], [84.4, 1348.0], [84.5, 1351.0], [84.6, 1354.0], [84.7, 1358.0], [84.8, 1361.0], [84.9, 1365.0], [85.0, 1368.0], [85.1, 1372.0], [85.2, 1375.0], [85.3, 1378.0], [85.4, 1382.0], [85.5, 1385.0], [85.6, 1389.0], [85.7, 1392.0], [85.8, 1396.0], [85.9, 1399.0], [86.0, 1402.0], [86.1, 1406.0], [86.2, 1410.0], [86.3, 1414.0], [86.4, 1417.0], [86.5, 1421.0], [86.6, 1424.0], [86.7, 1428.0], [86.8, 1433.0], [86.9, 1435.0], [87.0, 1439.0], [87.1, 1443.0], [87.2, 1447.0], [87.3, 1451.0], [87.4, 1455.0], [87.5, 1459.0], [87.6, 1462.0], [87.7, 1467.0], [87.8, 1470.0], [87.9, 1475.0], [88.0, 1478.0], [88.1, 1483.0], [88.2, 1486.0], [88.3, 1490.0], [88.4, 1495.0], [88.5, 1499.0], [88.6, 1503.0], [88.7, 1507.0], [88.8, 1512.0], [88.9, 1516.0], [89.0, 1520.0], [89.1, 1524.0], [89.2, 1528.0], [89.3, 1533.0], [89.4, 1537.0], [89.5, 1542.0], [89.6, 1546.0], [89.7, 1551.0], [89.8, 1555.0], [89.9, 1560.0], [90.0, 1565.0], [90.1, 1570.0], [90.2, 1574.0], [90.3, 1580.0], [90.4, 1584.0], [90.5, 1589.0], [90.6, 1593.0], [90.7, 1599.0], [90.8, 1604.0], [90.9, 1609.0], [91.0, 1614.0], [91.1, 1619.0], [91.2, 1625.0], [91.3, 1630.0], [91.4, 1635.0], [91.5, 1639.0], [91.6, 1644.0], [91.7, 1650.0], [91.8, 1657.0], [91.9, 1661.0], [92.0, 1667.0], [92.1, 1673.0], [92.2, 1679.0], [92.3, 1685.0], [92.4, 1691.0], [92.5, 1698.0], [92.6, 1704.0], [92.7, 1709.0], [92.8, 1715.0], [92.9, 1721.0], [93.0, 1727.0], [93.1, 1733.0], [93.2, 1740.0], [93.3, 1746.0], [93.4, 1753.0], [93.5, 1759.0], [93.6, 1765.0], [93.7, 1772.0], [93.8, 1779.0], [93.9, 1786.0], [94.0, 1793.0], [94.1, 1801.0], [94.2, 1810.0], [94.3, 1819.0], [94.4, 1826.0], [94.5, 1835.0], [94.6, 1843.0], [94.7, 1852.0], [94.8, 1859.0], [94.9, 1867.0], [95.0, 1875.0], [95.1, 1883.0], [95.2, 1891.0], [95.3, 1900.0], [95.4, 1909.0], [95.5, 1916.0], [95.6, 1926.0], [95.7, 1935.0], [95.8, 1945.0], [95.9, 1958.0], [96.0, 1968.0], [96.1, 1978.0], [96.2, 1989.0], [96.3, 1999.0], [96.4, 2010.0], [96.5, 2020.0], [96.6, 2032.0], [96.7, 2043.0], [96.8, 2056.0], [96.9, 2069.0], [97.0, 2081.0], [97.1, 2095.0], [97.2, 2109.0], [97.3, 2123.0], [97.4, 2136.0], [97.5, 2152.0], [97.6, 2170.0], [97.7, 2185.0], [97.8, 2203.0], [97.9, 2220.0], [98.0, 2242.0], [98.1, 2259.0], [98.2, 2280.0], [98.3, 2301.0], [98.4, 2324.0], [98.5, 2349.0], [98.6, 2370.0], [98.7, 2395.0], [98.8, 2424.0], [98.9, 2456.0], [99.0, 2487.0], [99.1, 2523.0], [99.2, 2562.0], [99.3, 2601.0], [99.4, 2649.0], [99.5, 2705.0], [99.6, 2775.0], [99.7, 2879.0], [99.8, 2988.0], [99.9, 3172.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24555.0, "series": [{"data": [[0.0, 14535.0], [600.0, 5432.0], [700.0, 5712.0], [800.0, 5746.0], [900.0, 5582.0], [1000.0, 5333.0], [1100.0, 4675.0], [1200.0, 4163.0], [1300.0, 3533.0], [1400.0, 3038.0], [1500.0, 2583.0], [1600.0, 2113.0], [100.0, 24555.0], [1700.0, 1823.0], [1800.0, 1430.0], [1900.0, 1180.0], [2000.0, 980.0], [2100.0, 755.0], [2200.0, 598.0], [2300.0, 497.0], [2400.0, 369.0], [2500.0, 311.0], [2600.0, 227.0], [2800.0, 110.0], [2700.0, 157.0], [2900.0, 107.0], [3000.0, 78.0], [3100.0, 35.0], [200.0, 8577.0], [3200.0, 41.0], [3300.0, 19.0], [3400.0, 18.0], [3500.0, 14.0], [3600.0, 7.0], [3700.0, 5.0], [3800.0, 5.0], [3900.0, 1.0], [300.0, 4308.0], [400.0, 3916.0], [500.0, 4632.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 13437.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 55925.0, "series": [{"data": [[0.0, 55925.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 47838.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 13437.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.6707317073170735, "minX": 1.72848288E12, "maxY": 16.0, "series": [{"data": [[1.72848774E12, 12.0], [1.72848804E12, 12.0], [1.72848834E12, 12.0], [1.72848864E12, 12.0], [1.72848846E12, 12.0], [1.72848876E12, 12.0], [1.72848906E12, 12.0], [1.72848936E12, 12.0], [1.72848744E12, 12.0], [1.72848918E12, 12.0], [1.72848726E12, 11.922671353251307], [1.72848756E12, 12.0], [1.72848786E12, 12.0], [1.72848816E12, 12.0], [1.72848798E12, 12.0], [1.72848828E12, 12.0], [1.72848858E12, 12.0], [1.72848888E12, 12.0], [1.7284887E12, 12.0], [1.728489E12, 12.0], [1.7284893E12, 12.0], [1.72848738E12, 12.0], [1.72848768E12, 12.0], [1.72848942E12, 9.498312710911128], [1.7284875E12, 12.0], [1.7284878E12, 12.0], [1.7284881E12, 12.0], [1.72848948E12, 3.4813084112149535], [1.7284884E12, 12.0], [1.72848822E12, 12.0], [1.72848852E12, 12.0], [1.72848882E12, 12.0], [1.72848912E12, 12.0], [1.72848732E12, 12.0], [1.72848894E12, 12.0], [1.72848924E12, 12.0], [1.72848762E12, 12.0], [1.72848792E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72848288E12, 2.0], [1.72848306E12, 2.0], [1.72848294E12, 2.0], [1.72848312E12, 1.9939024390243902], [1.728483E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.7284845E12, 4.0], [1.7284848E12, 4.0], [1.7284839E12, 4.0], [1.7284842E12, 4.0], [1.7284833E12, 4.0], [1.7284836E12, 4.0], [1.72848462E12, 4.0], [1.72848492E12, 4.0], [1.72848402E12, 4.0], [1.72848432E12, 4.0], [1.72848342E12, 4.0], [1.72848372E12, 4.0], [1.72848312E12, 3.9954128440367], [1.72848474E12, 4.0], [1.72848504E12, 1.6707317073170735], [1.72848414E12, 4.0], [1.72848444E12, 4.0], [1.72848354E12, 4.0], [1.72848384E12, 4.0], [1.72848486E12, 4.0], [1.72848324E12, 4.0], [1.72848426E12, 4.0], [1.72848456E12, 4.0], [1.72848366E12, 4.0], [1.72848396E12, 4.0], [1.72848498E12, 3.1397590361445764], [1.72848336E12, 4.0], [1.72848438E12, 4.0], [1.72848468E12, 4.0], [1.72848378E12, 4.0], [1.72848408E12, 4.0], [1.72848318E12, 4.0], [1.72848348E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72848984E12, 16.0], [1.72848954E12, 16.0], [1.72849116E12, 16.0], [1.72849086E12, 16.0], [1.72849104E12, 16.0], [1.72849074E12, 16.0], [1.72849044E12, 16.0], [1.72849014E12, 16.0], [1.72849032E12, 16.0], [1.72849002E12, 16.0], [1.72848972E12, 16.0], [1.72849134E12, 11.442875481386395], [1.7284896E12, 16.0], [1.72849122E12, 16.0], [1.72849092E12, 16.0], [1.72849062E12, 16.0], [1.7284908E12, 16.0], [1.7284905E12, 16.0], [1.7284902E12, 16.0], [1.7284899E12, 16.0], [1.72849008E12, 16.0], [1.72848978E12, 16.0], [1.72848948E12, 15.895705521472395], [1.7284911E12, 16.0], [1.72849128E12, 16.0], [1.72849098E12, 16.0], [1.72849068E12, 16.0], [1.72849038E12, 16.0], [1.72849056E12, 16.0], [1.72849026E12, 16.0], [1.72848996E12, 16.0], [1.72848966E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.72848612E12, 8.0], [1.72848582E12, 8.0], [1.72848672E12, 8.0], [1.72848642E12, 8.0], [1.72848522E12, 8.0], [1.72848684E12, 8.0], [1.72848654E12, 8.0], [1.72848552E12, 8.0], [1.72848714E12, 8.0], [1.72848564E12, 8.0], [1.72848726E12, 1.8604651162790706], [1.72848534E12, 8.0], [1.72848624E12, 8.0], [1.72848594E12, 8.0], [1.72848636E12, 8.0], [1.72848504E12, 7.984716157205237], [1.72848606E12, 8.0], [1.72848696E12, 8.0], [1.72848666E12, 8.0], [1.72848708E12, 8.0], [1.72848678E12, 8.0], [1.72848576E12, 8.0], [1.72848516E12, 8.0], [1.72848546E12, 8.0], [1.72848588E12, 8.0], [1.72848558E12, 8.0], [1.72848648E12, 8.0], [1.72848618E12, 8.0], [1.7284866E12, 8.0], [1.7284863E12, 8.0], [1.7284872E12, 7.248750000000004], [1.72848528E12, 8.0], [1.7284869E12, 8.0], [1.7284854E12, 8.0], [1.72848702E12, 8.0], [1.7284851E12, 8.0], [1.728486E12, 8.0], [1.7284857E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72849134E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 431.5964467005075, "minX": 1.0, "maxY": 1117.3846153846155, "series": [{"data": [[2.0, 457.78208048595246], [8.0, 547.9837035630644], [9.0, 610.2486486486484], [10.0, 682.9656992084429], [11.0, 577.0652173913045], [3.0, 431.5964467005075], [12.0, 733.4588020327808], [13.0, 750.2985074626864], [14.0, 1117.3846153846155], [15.0, 895.2680000000001], [1.0, 541.6288659793812], [4.0, 470.37331048924455], [16.0, 936.2112590411634], [5.0, 540.3913043478262], [6.0, 481.82022471910113], [7.0, 532.4838709677418]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.725443686006823, 696.4234982935258]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72848288E12, "maxY": 5.4012005333333336E7, "series": [{"data": [[1.7284848E12, 2.5990945883333333E7], [1.72848582E12, 4.54470626E7], [1.72848804E12, 5.00149821E7], [1.72848684E12, 4.557727593333333E7], [1.7284836E12, 2.62085894E7], [1.72848462E12, 2.6295285433333334E7], [1.72848906E12, 5.088723855E7], [1.72849044E12, 5.095983168333333E7], [1.72848564E12, 4.348055443333333E7], [1.72848342E12, 2.7083398216666665E7], [1.72848786E12, 4.992363271666667E7], [1.7284896E12, 5.220780505E7], [1.72848444E12, 2.5506816933333334E7], [1.72848666E12, 4.354610263333333E7], [1.72848888E12, 4.870577436666667E7], [1.72849062E12, 5.235009471666667E7], [1.72848738E12, 4.862679971666667E7], [1.72848294E12, 1.351094925E7], [1.72848516E12, 4.215908295E7], [1.7284899E12, 5.4012005333333336E7], [1.72848942E12, 4.5731040483333334E7], [1.72849008E12, 5.1497359733333334E7], [1.7284911E12, 5.39319253E7], [1.72848396E12, 2.6453310666666668E7], [1.72848618E12, 4.4876131333333336E7], [1.7284884E12, 5.039479695E7], [1.72848498E12, 2.0318442416666668E7], [1.72849128E12, 5.239637503333333E7], [1.72848822E12, 4.879623615E7], [1.7284872E12, 4.3275902083333336E7], [1.72848378E12, 2.71117017E7], [1.72848702E12, 4.445582993333333E7], [1.72848924E12, 5.0465054666666664E7], [1.72849026E12, 5.29088833E7], [1.728486E12, 4.5110422E7], [1.7284845E12, 2.68185948E7], [1.72848774E12, 5.0126590733333334E7], [1.72848672E12, 4.445087013333333E7], [1.72849116E12, 5.268446765E7], [1.7284833E12, 2.57685049E7], [1.72848654E12, 4.360856745E7], [1.72848876E12, 4.985344878333333E7], [1.72848552E12, 4.342056303333333E7], [1.72849014E12, 5.2957495733333334E7], [1.72849032E12, 5.1566215233333334E7], [1.72848432E12, 2.598675335E7], [1.72848534E12, 4.31299612E7], [1.72848756E12, 5.1197887166666664E7], [1.72849134E12, 3.827221218333333E7], [1.72848312E12, 1.7110184E7], [1.72848636E12, 4.241903853333333E7], [1.72848858E12, 5.084216175E7], [1.72848414E12, 2.4831121483333334E7], [1.72848708E12, 4.514668121666667E7], [1.7284908E12, 5.11398443E7], [1.72848384E12, 2.52179945E7], [1.72848486E12, 2.647536115E7], [1.7284893E12, 4.941065406666667E7], [1.72848588E12, 4.397702511666667E7], [1.72848978E12, 5.204499268333333E7], [1.72848366E12, 2.7166405433333334E7], [1.7284881E12, 5.0878717733333334E7], [1.72849098E12, 5.34022836E7], [1.72848468E12, 2.689023465E7], [1.7284869E12, 4.419081171666667E7], [1.72848912E12, 4.941965886666667E7], [1.72848894E12, 5.0308347483333334E7], [1.72848996E12, 5.246053081666667E7], [1.72848348E12, 2.6860329533333335E7], [1.7284857E12, 4.43424562E7], [1.72848792E12, 4.8101460833333336E7], [1.72848984E12, 5.0607294083333336E7], [1.72848642E12, 4.541639238333333E7], [1.72848864E12, 4.8470755083333336E7], [1.72849086E12, 5.25842697E7], [1.7284842E12, 2.5849977466666665E7], [1.72848522E12, 4.629038538333333E7], [1.72848846E12, 4.84914253E7], [1.72849104E12, 5.13470153E7], [1.728483E12, 1.3420678433333334E7], [1.72848744E12, 5.0433480166666664E7], [1.72848402E12, 2.688586095E7], [1.72848726E12, 3.0885852533333335E7], [1.72849002E12, 5.163675981666667E7], [1.72848624E12, 4.450722006666667E7], [1.72848504E12, 2.7107649033333335E7], [1.72849122E12, 5.10838418E7], [1.72848606E12, 4.4134163416666664E7], [1.72848828E12, 4.983804021666667E7], [1.72848354E12, 2.5995583066666666E7], [1.72848678E12, 4.5788950666666664E7], [1.728489E12, 4.95167976E7], [1.7284905E12, 5.16499588E7], [1.72848576E12, 4.471905318333333E7], [1.72848456E12, 2.6938772666666668E7], [1.72848558E12, 4.324940918333333E7], [1.7284878E12, 5.0500528016666666E7], [1.72848948E12, 3.4180887333333336E7], [1.7284866E12, 4.3181130233333334E7], [1.72848336E12, 2.5792208283333335E7], [1.72848438E12, 2.57164131E7], [1.72848882E12, 4.77434758E7], [1.72849068E12, 5.31522705E7], [1.7284854E12, 4.5186029266666666E7], [1.72848318E12, 2.52597152E7], [1.72848762E12, 5.0444275166666664E7], [1.72848966E12, 5.2928795083333336E7], [1.72848288E12, 1.2709209633333333E7], [1.72848612E12, 4.296564305E7], [1.72848954E12, 5.0352487266666666E7], [1.7284839E12, 2.6841618866666667E7], [1.72848834E12, 4.749299156666667E7], [1.72849074E12, 5.400608938333333E7], [1.72848492E12, 2.4142681766666666E7], [1.72848714E12, 4.391311478333333E7], [1.72848936E12, 5.047349481666667E7], [1.72848918E12, 4.9328173666666664E7], [1.72848972E12, 5.16747093E7], [1.72848372E12, 2.59538034E7], [1.72848594E12, 4.422079953333333E7], [1.72848816E12, 4.921065553333333E7], [1.72848474E12, 2.4852245166666668E7], [1.72848798E12, 5.063626038333333E7], [1.72848696E12, 4.47711509E7], [1.72849092E12, 4.95077756E7], [1.7284887E12, 5.033794475E7], [1.7284902E12, 5.19544947E7], [1.72848324E12, 2.6192585733333334E7], [1.72848546E12, 4.510827081666667E7], [1.72848768E12, 5.087692875E7], [1.72848426E12, 2.7231922616666667E7], [1.7284875E12, 4.9958721666666664E7], [1.72848648E12, 4.517664475E7], [1.72848306E12, 1.3313526066666666E7], [1.72848852E12, 5.13555703E7], [1.7284863E12, 4.363295965E7], [1.72848528E12, 4.480194453333333E7], [1.72849038E12, 5.2211158266666666E7], [1.72848732E12, 5.1066831916666664E7], [1.72849056E12, 5.286876025E7], [1.72848408E12, 2.543261725E7], [1.7284851E12, 4.5112282266666666E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7284848E12, 0.0], [1.72848582E12, 0.0], [1.72848804E12, 0.0], [1.72848684E12, 0.0], [1.7284836E12, 0.0], [1.72848462E12, 0.0], [1.72848906E12, 0.0], [1.72849044E12, 0.0], [1.72848564E12, 0.0], [1.72848342E12, 0.0], [1.72848786E12, 0.0], [1.7284896E12, 0.0], [1.72848444E12, 0.0], [1.72848666E12, 0.0], [1.72848888E12, 0.0], [1.72849062E12, 0.0], [1.72848738E12, 0.0], [1.72848294E12, 0.0], [1.72848516E12, 0.0], [1.7284899E12, 0.0], [1.72848942E12, 0.0], [1.72849008E12, 0.0], [1.7284911E12, 0.0], [1.72848396E12, 0.0], [1.72848618E12, 0.0], [1.7284884E12, 0.0], [1.72848498E12, 0.0], [1.72849128E12, 0.0], [1.72848822E12, 0.0], [1.7284872E12, 0.0], [1.72848378E12, 0.0], [1.72848702E12, 0.0], [1.72848924E12, 0.0], [1.72849026E12, 0.0], [1.728486E12, 0.0], [1.7284845E12, 0.0], [1.72848774E12, 0.0], [1.72848672E12, 0.0], [1.72849116E12, 0.0], [1.7284833E12, 0.0], [1.72848654E12, 0.0], [1.72848876E12, 0.0], [1.72848552E12, 0.0], [1.72849014E12, 0.0], [1.72849032E12, 0.0], [1.72848432E12, 0.0], [1.72848534E12, 0.0], [1.72848756E12, 0.0], [1.72849134E12, 0.0], [1.72848312E12, 0.0], [1.72848636E12, 0.0], [1.72848858E12, 0.0], [1.72848414E12, 0.0], [1.72848708E12, 0.0], [1.7284908E12, 0.0], [1.72848384E12, 0.0], [1.72848486E12, 0.0], [1.7284893E12, 0.0], [1.72848588E12, 0.0], [1.72848978E12, 0.0], [1.72848366E12, 0.0], [1.7284881E12, 0.0], [1.72849098E12, 0.0], [1.72848468E12, 0.0], [1.7284869E12, 0.0], [1.72848912E12, 0.0], [1.72848894E12, 0.0], [1.72848996E12, 0.0], [1.72848348E12, 0.0], [1.7284857E12, 0.0], [1.72848792E12, 0.0], [1.72848984E12, 0.0], [1.72848642E12, 0.0], [1.72848864E12, 0.0], [1.72849086E12, 0.0], [1.7284842E12, 0.0], [1.72848522E12, 0.0], [1.72848846E12, 0.0], [1.72849104E12, 0.0], [1.728483E12, 0.0], [1.72848744E12, 0.0], [1.72848402E12, 0.0], [1.72848726E12, 0.0], [1.72849002E12, 0.0], [1.72848624E12, 0.0], [1.72848504E12, 0.0], [1.72849122E12, 0.0], [1.72848606E12, 0.0], [1.72848828E12, 0.0], [1.72848354E12, 0.0], [1.72848678E12, 0.0], [1.728489E12, 0.0], [1.7284905E12, 0.0], [1.72848576E12, 0.0], [1.72848456E12, 0.0], [1.72848558E12, 0.0], [1.7284878E12, 0.0], [1.72848948E12, 0.0], [1.7284866E12, 0.0], [1.72848336E12, 0.0], [1.72848438E12, 0.0], [1.72848882E12, 0.0], [1.72849068E12, 0.0], [1.7284854E12, 0.0], [1.72848318E12, 0.0], [1.72848762E12, 0.0], [1.72848966E12, 0.0], [1.72848288E12, 0.0], [1.72848612E12, 0.0], [1.72848954E12, 0.0], [1.7284839E12, 0.0], [1.72848834E12, 0.0], [1.72849074E12, 0.0], [1.72848492E12, 0.0], [1.72848714E12, 0.0], [1.72848936E12, 0.0], [1.72848918E12, 0.0], [1.72848972E12, 0.0], [1.72848372E12, 0.0], [1.72848594E12, 0.0], [1.72848816E12, 0.0], [1.72848474E12, 0.0], [1.72848798E12, 0.0], [1.72848696E12, 0.0], [1.72849092E12, 0.0], [1.7284887E12, 0.0], [1.7284902E12, 0.0], [1.72848324E12, 0.0], [1.72848546E12, 0.0], [1.72848768E12, 0.0], [1.72848426E12, 0.0], [1.7284875E12, 0.0], [1.72848648E12, 0.0], [1.72848306E12, 0.0], [1.72848852E12, 0.0], [1.7284863E12, 0.0], [1.72848528E12, 0.0], [1.72849038E12, 0.0], [1.72848732E12, 0.0], [1.72849056E12, 0.0], [1.72848408E12, 0.0], [1.7284851E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72849134E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 430.60994764397884, "minX": 1.72848288E12, "maxY": 1022.3226495726492, "series": [{"data": [[1.7284848E12, 495.23662551440367], [1.72848582E12, 546.6932725199541], [1.72848804E12, 730.4272727272735], [1.72848684E12, 561.7441588785044], [1.7284836E12, 484.3594377510042], [1.72848462E12, 488.5326530612246], [1.72848906E12, 723.0865191146886], [1.72849044E12, 911.8433048433052], [1.72848564E12, 545.9681093394086], [1.72848342E12, 481.05158730158706], [1.72848786E12, 702.0783365570599], [1.7284896E12, 925.9836223506736], [1.72848444E12, 458.0748560460652], [1.72848666E12, 544.7386363636364], [1.72848888E12, 694.4662813102123], [1.72849062E12, 943.7173699705592], [1.72848738E12, 724.5518630412893], [1.72848294E12, 446.93703703703727], [1.72848516E12, 533.4191750278712], [1.7284899E12, 956.035785288271], [1.72848942E12, 630.3802024746911], [1.72849008E12, 932.5968841285298], [1.7284911E12, 905.2577610536224], [1.72848396E12, 469.57729941291586], [1.72848618E12, 564.3561320754712], [1.7284884E12, 768.2636072572031], [1.72848498E12, 448.0795180722892], [1.72849128E12, 904.393226716839], [1.72848822E12, 749.5987590486045], [1.7284872E12, 542.7075000000003], [1.72848378E12, 455.90512333965813], [1.72848702E12, 553.8932714617168], [1.72848924E12, 746.5093167701864], [1.72849026E12, 978.5198776758411], [1.728486E12, 546.3325740318913], [1.7284845E12, 445.08487084870796], [1.72848774E12, 715.4149253731338], [1.72848672E12, 558.4224037339557], [1.72849116E12, 1007.6349372384933], [1.7284833E12, 469.7299412915851], [1.72848654E12, 533.4866666666666], [1.72848876E12, 726.0726538849642], [1.72848552E12, 556.3875432525953], [1.72849014E12, 945.3945044160936], [1.72849032E12, 910.1598864711456], [1.72848432E12, 450.29588014981283], [1.72848534E12, 541.4937853107352], [1.72848756E12, 732.9653061224499], [1.72849134E12, 722.1604621309366], [1.72848312E12, 430.60994764397884], [1.72848636E12, 560.0981308411214], [1.72848858E12, 730.6622718052729], [1.72848414E12, 456.5372848948376], [1.72848708E12, 552.3264367816087], [1.7284908E12, 958.167670682732], [1.72848384E12, 457.44337811900186], [1.72848486E12, 452.3175803402648], [1.7284893E12, 746.6843198338534], [1.72848588E12, 551.112903225806], [1.72848978E12, 910.9108159392798], [1.72848366E12, 512.8315565031985], [1.7284881E12, 715.3996023856861], [1.72849098E12, 942.5424063116361], [1.72848468E12, 497.9355509355508], [1.7284869E12, 543.5594563986418], [1.72848912E12, 737.2448770491807], [1.72848894E12, 771.0844017094021], [1.72848996E12, 973.0467955239053], [1.72848348E12, 463.3281553398059], [1.7284857E12, 570.1928571428575], [1.72848792E12, 731.3397959183673], [1.72848984E12, 910.5208333333336], [1.72848642E12, 546.992027334851], [1.72848864E12, 729.5376782077401], [1.72849086E12, 926.4610202117416], [1.7284842E12, 461.4069097888675], [1.72848522E12, 546.2403189066056], [1.72848846E12, 700.3914728682171], [1.72849104E12, 907.307183364839], [1.728483E12, 433.94927536231893], [1.72848744E12, 730.0030272452067], [1.72848402E12, 450.8536585365854], [1.72848726E12, 658.8106870229002], [1.72849002E12, 939.9304603330069], [1.72848624E12, 556.1995359628772], [1.72848504E12, 537.0333333333331], [1.72849122E12, 942.7233201581032], [1.72848606E12, 562.2643948296119], [1.72848828E12, 709.9476801579465], [1.72848354E12, 468.59215686274507], [1.72848678E12, 558.0628637951105], [1.728489E12, 745.4155440414513], [1.7284905E12, 943.9793103448285], [1.72848576E12, 553.3027522935786], [1.72848456E12, 478.0597609561755], [1.72848558E12, 526.3333333333321], [1.7284878E12, 763.8775292864756], [1.72848948E12, 761.1152204836412], [1.7284866E12, 525.3635371179043], [1.72848336E12, 502.1701680672271], [1.72848438E12, 470.20196078431377], [1.72848882E12, 724.812688821752], [1.72849068E12, 1022.3226495726492], [1.7284854E12, 558.7767441860465], [1.72848318E12, 473.1791338582677], [1.72848762E12, 763.7777777777785], [1.72848966E12, 949.8595450049462], [1.72848288E12, 463.1048387096773], [1.72848612E12, 558.7180974477963], [1.72848954E12, 908.9184060721062], [1.7284839E12, 506.97473684210496], [1.72848834E12, 722.3780241935488], [1.72849074E12, 925.3892617449676], [1.72848492E12, 441.54511970534105], [1.72848714E12, 561.5251461988303], [1.72848936E12, 769.3066239316242], [1.72848918E12, 687.9388145315478], [1.72848972E12, 899.9915413533831], [1.72848372E12, 495.76556016597505], [1.72848594E12, 515.8519313304726], [1.72848816E12, 795.7007786429368], [1.72848474E12, 463.11560693641616], [1.72848798E12, 733.3241308793464], [1.72848696E12, 550.9851088201608], [1.72849092E12, 920.2909090909087], [1.7284887E12, 731.0881458966575], [1.7284902E12, 944.7613412228787], [1.72848324E12, 460.77842003853584], [1.72848546E12, 519.1203904555318], [1.72848768E12, 774.5894396551719], [1.72848426E12, 491.35655737704957], [1.7284875E12, 766.0382571732205], [1.72848648E12, 550.826436781609], [1.72848306E12, 496.39256198347135], [1.72848852E12, 730.6206896551734], [1.7284863E12, 528.753018660813], [1.72848528E12, 543.0698985343859], [1.72849038E12, 919.8065134099613], [1.72848732E12, 694.051306873184], [1.72849056E12, 966.185671039354], [1.72848408E12, 448.2309124767227], [1.7284851E12, 560.056009334889]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72849134E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 283.9384057971015, "minX": 1.72848288E12, "maxY": 696.6089743589745, "series": [{"data": [[1.7284848E12, 327.41358024691357], [1.72848582E12, 364.66818700114], [1.72848804E12, 494.9989898989895], [1.72848684E12, 372.80140186915884], [1.7284836E12, 318.10040160642603], [1.72848462E12, 319.57755102040795], [1.72848906E12, 486.64889336016057], [1.72849044E12, 624.3247863247849], [1.72848564E12, 367.5011389521642], [1.72848342E12, 314.53174603174574], [1.72848786E12, 473.65087040618926], [1.7284896E12, 629.9845857418112], [1.72848444E12, 302.79846449136295], [1.72848666E12, 368.45795454545447], [1.72848888E12, 473.19364161849705], [1.72849062E12, 640.6261040235522], [1.72848738E12, 493.8036253776431], [1.72848294E12, 292.7296296296296], [1.72848516E12, 361.7346711259752], [1.7284899E12, 643.7296222664014], [1.72848942E12, 427.0337457817775], [1.72849008E12, 636.3037974683534], [1.7284911E12, 614.4553151458142], [1.72848396E12, 308.7808219178084], [1.72848618E12, 377.47405660377393], [1.7284884E12, 520.8719316969047], [1.72848498E12, 295.3518072289158], [1.72849128E12, 616.8626528692386], [1.72848822E12, 510.50258531540834], [1.7284872E12, 359.8637499999999], [1.72848378E12, 297.5407969639472], [1.72848702E12, 371.1577726218098], [1.72848924E12, 503.61387163561153], [1.72849026E12, 662.479102956168], [1.728486E12, 363.41457858769917], [1.7284845E12, 289.07380073800715], [1.72848774E12, 483.70447761194066], [1.72848672E12, 372.0933488914821], [1.72849116E12, 685.8797071129704], [1.7284833E12, 311.0156555772994], [1.72848654E12, 356.7000000000003], [1.72848876E12, 489.1957618567102], [1.72848552E12, 376.590542099193], [1.72849014E12, 643.8459273797857], [1.72849032E12, 623.1182592242193], [1.72848432E12, 297.8277153558049], [1.72848534E12, 366.08813559322084], [1.72848756E12, 494.02857142857164], [1.72849134E12, 491.4659820282418], [1.72848312E12, 287.37434554973805], [1.72848636E12, 378.6717289719626], [1.72848858E12, 492.80425963488915], [1.72848414E12, 304.2332695984701], [1.72848708E12, 370.2034482758615], [1.7284908E12, 656.0702811244978], [1.72848384E12, 302.2437619961614], [1.72848486E12, 294.6124763705104], [1.7284893E12, 507.84215991692645], [1.72848588E12, 370.97119815668253], [1.72848978E12, 627.6166982922205], [1.72848366E12, 335.75053304904094], [1.7284881E12, 482.55367793240583], [1.72849098E12, 638.2623274161738], [1.72848468E12, 324.82328482328455], [1.7284869E12, 365.52095130237797], [1.72848912E12, 501.036885245902], [1.72848894E12, 522.297008547008], [1.72848996E12, 662.388606307223], [1.72848348E12, 302.2349514563109], [1.7284857E12, 383.5619047619045], [1.72848792E12, 496.52551020408157], [1.72848984E12, 621.7717803030298], [1.72848642E12, 363.76195899772216], [1.72848864E12, 496.91038696537674], [1.72849086E12, 629.7545717035613], [1.7284842E12, 302.42802303262937], [1.72848522E12, 362.0968109339413], [1.72848846E12, 479.6812015503876], [1.72849104E12, 624.1446124763701], [1.728483E12, 283.9384057971015], [1.72848744E12, 493.29969727547945], [1.72848402E12, 292.3039399624767], [1.72848726E12, 445.66564885496183], [1.72849002E12, 645.2869735553376], [1.72848624E12, 372.2784222737819], [1.72848504E12, 361.8481481481481], [1.72849122E12, 649.2727272727275], [1.72848606E12, 376.46415981198663], [1.72848828E12, 479.8894373149064], [1.72848354E12, 308.82156862745137], [1.72848678E12, 372.07450523864964], [1.728489E12, 505.3989637305697], [1.7284905E12, 647.3093596059117], [1.72848576E12, 372.05733944954153], [1.72848456E12, 312.306772908367], [1.72848558E12, 355.39493949394915], [1.7284878E12, 515.387646432376], [1.72848948E12, 517.27027027027], [1.7284866E12, 352.5720524017466], [1.72848336E12, 333.14075630252137], [1.72848438E12, 311.43529411764723], [1.72848882E12, 493.41691842900303], [1.72849068E12, 696.6089743589745], [1.7284854E12, 372.3476744186049], [1.72848318E12, 312.58070866141725], [1.72848762E12, 516.0772486772485], [1.72848966E12, 644.8348170128577], [1.72848288E12, 306.89112903225805], [1.72848612E12, 378.435034802784], [1.72848954E12, 627.3757115749527], [1.7284839E12, 331.6484210526315], [1.72848834E12, 490.25907258064524], [1.72849074E12, 627.558005752636], [1.72848492E12, 294.71823204419854], [1.72848714E12, 376.854970760234], [1.72848936E12, 519.0352564102562], [1.72848918E12, 462.93116634799225], [1.72848972E12, 612.9877819548882], [1.72848372E12, 327.4626556016598], [1.72848594E12, 345.770386266095], [1.72848816E12, 535.6952169076752], [1.72848474E12, 309.743737957611], [1.72848798E12, 494.71165644171737], [1.72848696E12, 366.5292096219933], [1.72849092E12, 635.0401913875603], [1.7284887E12, 492.78419452887516], [1.7284902E12, 646.2662721893482], [1.72848324E12, 303.96917148362206], [1.72848546E12, 344.94685466377456], [1.72848768E12, 523.350215517241], [1.72848426E12, 321.08606557377055], [1.7284875E12, 519.3613177470771], [1.72848648E12, 366.3252873563222], [1.72848306E12, 331.29752066115714], [1.72848852E12, 492.3539553752528], [1.7284863E12, 355.6728869374315], [1.72848528E12, 363.81510710259323], [1.72849038E12, 626.6427203065134], [1.72848732E12, 464.5876089060989], [1.72849056E12, 657.9858728557007], [1.72848408E12, 296.73184357541896], [1.7284851E12, 377.42357059509965]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72849134E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72848288E12, "maxY": 4.9E-324, "series": [{"data": [[1.7284848E12, 0.0], [1.72848582E12, 0.0], [1.72848804E12, 0.0], [1.72848684E12, 0.0], [1.7284836E12, 0.0], [1.72848462E12, 0.0], [1.72848906E12, 0.0], [1.72849044E12, 0.0], [1.72848564E12, 0.0], [1.72848342E12, 0.0], [1.72848786E12, 0.0], [1.7284896E12, 0.0], [1.72848444E12, 0.0], [1.72848666E12, 0.0], [1.72848888E12, 0.0], [1.72849062E12, 0.0], [1.72848738E12, 0.0], [1.72848294E12, 0.0], [1.72848516E12, 0.0], [1.7284899E12, 0.0], [1.72848942E12, 0.0], [1.72849008E12, 0.0], [1.7284911E12, 0.0], [1.72848396E12, 0.0], [1.72848618E12, 0.0], [1.7284884E12, 0.0], [1.72848498E12, 0.0], [1.72849128E12, 0.0], [1.72848822E12, 0.0], [1.7284872E12, 0.0], [1.72848378E12, 0.0], [1.72848702E12, 0.0], [1.72848924E12, 0.0], [1.72849026E12, 0.0], [1.728486E12, 0.0], [1.7284845E12, 0.0], [1.72848774E12, 0.0], [1.72848672E12, 0.0], [1.72849116E12, 0.0], [1.7284833E12, 0.0], [1.72848654E12, 0.0], [1.72848876E12, 0.0], [1.72848552E12, 0.0], [1.72849014E12, 0.0], [1.72849032E12, 0.0], [1.72848432E12, 0.0], [1.72848534E12, 0.0], [1.72848756E12, 0.0], [1.72849134E12, 0.0], [1.72848312E12, 0.0], [1.72848636E12, 0.0], [1.72848858E12, 0.0], [1.72848414E12, 0.0], [1.72848708E12, 0.0], [1.7284908E12, 0.0], [1.72848384E12, 0.0], [1.72848486E12, 0.0], [1.7284893E12, 0.0], [1.72848588E12, 0.0], [1.72848978E12, 0.0], [1.72848366E12, 0.0], [1.7284881E12, 0.0], [1.72849098E12, 0.0], [1.72848468E12, 0.0], [1.7284869E12, 0.0], [1.72848912E12, 0.0], [1.72848894E12, 0.0], [1.72848996E12, 0.0], [1.72848348E12, 0.0], [1.7284857E12, 0.0], [1.72848792E12, 0.0], [1.72848984E12, 0.0], [1.72848642E12, 0.0], [1.72848864E12, 0.0], [1.72849086E12, 0.0], [1.7284842E12, 0.0], [1.72848522E12, 0.0], [1.72848846E12, 0.0], [1.72849104E12, 0.0], [1.728483E12, 0.0], [1.72848744E12, 0.0], [1.72848402E12, 0.0], [1.72848726E12, 0.0], [1.72849002E12, 0.0], [1.72848624E12, 0.0], [1.72848504E12, 0.0], [1.72849122E12, 0.0], [1.72848606E12, 0.0], [1.72848828E12, 0.0], [1.72848354E12, 0.0], [1.72848678E12, 0.0], [1.728489E12, 0.0], [1.7284905E12, 0.0], [1.72848576E12, 0.0], [1.72848456E12, 0.0], [1.72848558E12, 0.0], [1.7284878E12, 0.0], [1.72848948E12, 0.0], [1.7284866E12, 0.0], [1.72848336E12, 0.0], [1.72848438E12, 0.0], [1.72848882E12, 0.0], [1.72849068E12, 0.0], [1.7284854E12, 0.0], [1.72848318E12, 0.0], [1.72848762E12, 0.0], [1.72848966E12, 0.0], [1.72848288E12, 0.0], [1.72848612E12, 0.0], [1.72848954E12, 0.0], [1.7284839E12, 0.0], [1.72848834E12, 0.0], [1.72849074E12, 0.0], [1.72848492E12, 0.0], [1.72848714E12, 0.0], [1.72848936E12, 0.0], [1.72848918E12, 0.0], [1.72848972E12, 0.0], [1.72848372E12, 0.0], [1.72848594E12, 0.0], [1.72848816E12, 0.0], [1.72848474E12, 0.0], [1.72848798E12, 0.0], [1.72848696E12, 0.0], [1.72849092E12, 0.0], [1.7284887E12, 0.0], [1.7284902E12, 0.0], [1.72848324E12, 0.0], [1.72848546E12, 0.0], [1.72848768E12, 0.0], [1.72848426E12, 0.0], [1.7284875E12, 0.0], [1.72848648E12, 0.0], [1.72848306E12, 0.0], [1.72848852E12, 0.0], [1.7284863E12, 0.0], [1.72848528E12, 0.0], [1.72849038E12, 0.0], [1.72848732E12, 0.0], [1.72849056E12, 0.0], [1.72848408E12, 0.0], [1.7284851E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72849134E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.72848288E12, "maxY": 3900.0, "series": [{"data": [[1.7284848E12, 1624.0], [1.72848582E12, 2131.0], [1.72848804E12, 2831.0], [1.72848684E12, 2066.0], [1.7284836E12, 1885.0], [1.72848462E12, 1826.0], [1.72848906E12, 3011.0], [1.72849044E12, 3475.0], [1.72848564E12, 2004.0], [1.72848342E12, 1736.0], [1.72848786E12, 2917.0], [1.7284896E12, 3541.0], [1.72848444E12, 1554.0], [1.72848666E12, 2187.0], [1.72848888E12, 2732.0], [1.72849062E12, 3698.0], [1.72848738E12, 2731.0], [1.72848294E12, 1482.0], [1.72848516E12, 2079.0], [1.7284899E12, 3553.0], [1.72848942E12, 2519.0], [1.72849008E12, 3741.0], [1.7284911E12, 3189.0], [1.72848396E12, 1858.0], [1.72848618E12, 1890.0], [1.7284884E12, 2942.0], [1.72848498E12, 1608.0], [1.72849128E12, 3427.0], [1.72848822E12, 2951.0], [1.7284872E12, 1979.0], [1.72848378E12, 1586.0], [1.72848702E12, 2303.0], [1.72848924E12, 3004.0], [1.72849026E12, 3900.0], [1.728486E12, 1912.0], [1.7284845E12, 1674.0], [1.72848774E12, 2982.0], [1.72848672E12, 2029.0], [1.72849116E12, 3865.0], [1.7284833E12, 1718.0], [1.72848654E12, 2184.0], [1.72848876E12, 2633.0], [1.72848552E12, 2272.0], [1.72849014E12, 3886.0], [1.72849032E12, 3245.0], [1.72848432E12, 1623.0], [1.72848534E12, 1946.0], [1.72848756E12, 2686.0], [1.72849134E12, 3414.0], [1.72848312E12, 1700.0], [1.72848636E12, 1929.0], [1.72848858E12, 2975.0], [1.72848414E12, 1605.0], [1.72848708E12, 1850.0], [1.7284908E12, 3833.0], [1.72848384E12, 1948.0], [1.72848486E12, 1637.0], [1.7284893E12, 3082.0], [1.72848588E12, 2132.0], [1.72848978E12, 3569.0], [1.72848366E12, 1508.0], [1.7284881E12, 2530.0], [1.72849098E12, 3679.0], [1.72848468E12, 1587.0], [1.7284869E12, 1983.0], [1.72848912E12, 2969.0], [1.72848894E12, 2913.0], [1.72848996E12, 3759.0], [1.72848348E12, 1847.0], [1.7284857E12, 2018.0], [1.72848792E12, 2641.0], [1.72848984E12, 3449.0], [1.72848642E12, 1982.0], [1.72848864E12, 2902.0], [1.72849086E12, 3754.0], [1.7284842E12, 1744.0], [1.72848522E12, 1968.0], [1.72848846E12, 2923.0], [1.72849104E12, 3322.0], [1.728483E12, 1880.0], [1.72848744E12, 2633.0], [1.72848402E12, 1805.0], [1.72848726E12, 2676.0], [1.72849002E12, 3469.0], [1.72848624E12, 2026.0], [1.72848504E12, 1807.0], [1.72849122E12, 3808.0], [1.72848606E12, 2125.0], [1.72848828E12, 2637.0], [1.72848354E12, 1709.0], [1.72848678E12, 2293.0], [1.728489E12, 2914.0], [1.7284905E12, 3192.0], [1.72848576E12, 2026.0], [1.72848456E12, 1922.0], [1.72848558E12, 2048.0], [1.7284878E12, 2879.0], [1.72848948E12, 3057.0], [1.7284866E12, 2165.0], [1.72848336E12, 1578.0], [1.72848438E12, 1658.0], [1.72848882E12, 2977.0], [1.72849068E12, 3589.0], [1.7284854E12, 2012.0], [1.72848318E12, 1611.0], [1.72848762E12, 2725.0], [1.72848966E12, 3299.0], [1.72848288E12, 1926.0], [1.72848612E12, 2286.0], [1.72848954E12, 3697.0], [1.7284839E12, 1932.0], [1.72848834E12, 3028.0], [1.72849074E12, 3803.0], [1.72848492E12, 1864.0], [1.72848714E12, 2102.0], [1.72848936E12, 2717.0], [1.72848918E12, 2881.0], [1.72848972E12, 3534.0], [1.72848372E12, 1608.0], [1.72848594E12, 1898.0], [1.72848816E12, 3008.0], [1.72848474E12, 2092.0], [1.72848798E12, 2882.0], [1.72848696E12, 2103.0], [1.72849092E12, 3304.0], [1.7284887E12, 3005.0], [1.7284902E12, 3637.0], [1.72848324E12, 1663.0], [1.72848546E12, 2006.0], [1.72848768E12, 2872.0], [1.72848426E12, 1997.0], [1.7284875E12, 2680.0], [1.72848648E12, 2007.0], [1.72848306E12, 1506.0], [1.72848852E12, 2732.0], [1.7284863E12, 2112.0], [1.72848528E12, 1918.0], [1.72849038E12, 3664.0], [1.72848732E12, 2843.0], [1.72849056E12, 3500.0], [1.72848408E12, 1734.0], [1.7284851E12, 2203.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7284848E12, 1012.6], [1.72848582E12, 1192.8000000000002], [1.72848804E12, 1583.6], [1.72848684E12, 1198.7000000000007], [1.7284836E12, 1030.7000000000003], [1.72848462E12, 1079.5000000000002], [1.72848906E12, 1598.5], [1.72849044E12, 1999.8000000000002], [1.72848564E12, 1156.1], [1.72848342E12, 1006.0], [1.72848786E12, 1554.5], [1.7284896E12, 1981.5], [1.72848444E12, 987.0], [1.72848666E12, 1158.6999999999998], [1.72848888E12, 1536.1], [1.72849062E12, 2095.0], [1.72848738E12, 1577.4], [1.72848294E12, 1004.4000000000001], [1.72848516E12, 1169.2000000000005], [1.7284899E12, 2041.900000000001], [1.72848942E12, 1389.0], [1.72849008E12, 1962.6000000000004], [1.7284911E12, 1978.4], [1.72848396E12, 983.8], [1.72848618E12, 1163.3000000000002], [1.7284884E12, 1662.2], [1.72848498E12, 957.2], [1.72849128E12, 1963.0], [1.72848822E12, 1595.0], [1.7284872E12, 1160.6], [1.72848378E12, 1010.4], [1.72848702E12, 1184.8000000000002], [1.72848924E12, 1588.6000000000001], [1.72849026E12, 2074.6000000000004], [1.728486E12, 1165.5], [1.7284845E12, 1000.0999999999999], [1.72848774E12, 1590.4], [1.72848672E12, 1176.2000000000005], [1.72849116E12, 2103.9], [1.7284833E12, 1043.6], [1.72848654E12, 1138.9], [1.72848876E12, 1597.0], [1.72848552E12, 1170.0000000000002], [1.72849014E12, 2016.0], [1.72849032E12, 2054.8], [1.72848432E12, 974.5], [1.72848534E12, 1193.6], [1.72848756E12, 1586.8], [1.72849134E12, 1635.0], [1.72848312E12, 981.8], [1.72848636E12, 1198.6000000000001], [1.72848858E12, 1569.5000000000005], [1.72848414E12, 1014.6000000000001], [1.72848708E12, 1147.0], [1.7284908E12, 2010.1000000000004], [1.72848384E12, 1001.6], [1.72848486E12, 1011.0], [1.7284893E12, 1587.6], [1.72848588E12, 1204.4], [1.72848978E12, 2002.0], [1.72848366E12, 1074.0], [1.7284881E12, 1592.7000000000007], [1.72849098E12, 2078.5], [1.72848468E12, 1095.2], [1.7284869E12, 1190.8000000000002], [1.72848912E12, 1601.6000000000001], [1.72848894E12, 1656.2000000000003], [1.72848996E12, 2115.2000000000003], [1.72848348E12, 997.2000000000003], [1.7284857E12, 1194.7999999999997], [1.72848792E12, 1635.8999999999996], [1.72848984E12, 1937.9], [1.72848642E12, 1172.4], [1.72848864E12, 1581.7], [1.72849086E12, 2015.0], [1.7284842E12, 1036.8], [1.72848522E12, 1189.7000000000003], [1.72848846E12, 1602.5000000000002], [1.72849104E12, 1935.2], [1.728483E12, 1012.2000000000002], [1.72848744E12, 1591.4], [1.72848402E12, 1008.8000000000001], [1.72848726E12, 1560.3999999999996], [1.72849002E12, 2025.0], [1.72848624E12, 1166.7], [1.72848504E12, 1150.9], [1.72849122E12, 1963.8000000000002], [1.72848606E12, 1189.6000000000001], [1.72848828E12, 1582.6000000000004], [1.72848354E12, 1027.6000000000001], [1.72848678E12, 1194.0], [1.728489E12, 1561.1999999999998], [1.7284905E12, 2007.4], [1.72848576E12, 1144.2000000000003], [1.72848456E12, 1001.4], [1.72848558E12, 1133.0], [1.7284878E12, 1574.0], [1.72848948E12, 1770.2000000000003], [1.7284866E12, 1152.5000000000005], [1.72848336E12, 1035.1000000000001], [1.72848438E12, 1035.9], [1.72848882E12, 1527.6000000000001], [1.72849068E12, 2093.3], [1.7284854E12, 1179.5], [1.72848318E12, 1010.0000000000002], [1.72848762E12, 1669.5999999999997], [1.72848966E12, 2008.2000000000003], [1.72848288E12, 1005.2], [1.72848612E12, 1190.2000000000003], [1.72848954E12, 1978.5], [1.7284839E12, 1056.0], [1.72848834E12, 1579.1000000000001], [1.72849074E12, 2019.2], [1.72848492E12, 985.0], [1.72848714E12, 1198.0], [1.72848936E12, 1678.6000000000001], [1.72848918E12, 1534.2000000000003], [1.72848972E12, 1922.0], [1.72848372E12, 1084.8999999999999], [1.72848594E12, 1119.9000000000003], [1.72848816E12, 1703.0], [1.72848474E12, 993.0], [1.72848798E12, 1574.5], [1.72848696E12, 1156.0], [1.72849092E12, 1976.1999999999998], [1.7284887E12, 1632.2000000000003], [1.7284902E12, 1990.0], [1.72848324E12, 996.0], [1.72848546E12, 1144.0], [1.72848768E12, 1622.7000000000003], [1.72848426E12, 1030.2], [1.7284875E12, 1612.8000000000004], [1.72848648E12, 1168.5], [1.72848306E12, 1000.5000000000002], [1.72848852E12, 1636.3000000000002], [1.7284863E12, 1150.0], [1.72848528E12, 1196.0], [1.72849038E12, 2016.5], [1.72848732E12, 1553.6000000000001], [1.72849056E12, 2001.8000000000006], [1.72848408E12, 1004.0], [1.7284851E12, 1194.6000000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7284848E12, 1501.1999999999998], [1.72848582E12, 1728.88], [1.72848804E12, 2406.36], [1.72848684E12, 1778.0499999999984], [1.7284836E12, 1537.2099999999998], [1.72848462E12, 1545.1899999999978], [1.72848906E12, 2323.8499999999985], [1.72849044E12, 2837.420000000003], [1.72848564E12, 1683.9900000000007], [1.72848342E12, 1555.9999999999993], [1.72848786E12, 2369.750000000003], [1.7284896E12, 2852.22], [1.72848444E12, 1469.2599999999995], [1.72848666E12, 1673.7599999999998], [1.72848888E12, 2164.3299999999945], [1.72849062E12, 3048.3999999999996], [1.72848738E12, 2287.3599999999997], [1.72848294E12, 1426.29], [1.72848516E12, 1634.5399999999995], [1.7284899E12, 2959.7599999999984], [1.72848942E12, 2036.3000000000002], [1.72849008E12, 2963.2800000000043], [1.7284911E12, 2913.439999999997], [1.72848396E12, 1431.1999999999998], [1.72848618E12, 1693.2199999999998], [1.7284884E12, 2437.82], [1.72848498E12, 1399.8799999999992], [1.72849128E12, 2789.079999999997], [1.72848822E12, 2353.239999999998], [1.7284872E12, 1672.89], [1.72848378E12, 1360.2000000000003], [1.72848702E12, 1749.73], [1.72848924E12, 2470.240000000001], [1.72849026E12, 3046.2199999999984], [1.728486E12, 1606.2600000000002], [1.7284845E12, 1407.2500000000014], [1.72848774E12, 2424.1999999999925], [1.72848672E12, 1682.0399999999975], [1.72849116E12, 3042.7499999999986], [1.7284833E12, 1446.92], [1.72848654E12, 1674.93], [1.72848876E12, 2272.6400000000012], [1.72848552E12, 1689.9599999999982], [1.72849014E12, 3005.399999999996], [1.72849032E12, 2991.84], [1.72848432E12, 1351.2499999999995], [1.72848534E12, 1684.3199999999995], [1.72848756E12, 2354.229999999999], [1.72849134E12, 2572.200000000008], [1.72848312E12, 1377.5300000000002], [1.72848636E12, 1700.459999999999], [1.72848858E12, 2256.38], [1.72848414E12, 1414.2399999999998], [1.72848708E12, 1689.3199999999997], [1.7284908E12, 3102.6599999999967], [1.72848384E12, 1444.3999999999992], [1.72848486E12, 1475.9000000000012], [1.7284893E12, 2387.4800000000005], [1.72848588E12, 1657.0999999999995], [1.72848978E12, 2928.0000000000027], [1.72848366E12, 1402.2000000000005], [1.7284881E12, 2215.79], [1.72849098E12, 2966.8], [1.72848468E12, 1471.44], [1.7284869E12, 1649.6399999999999], [1.72848912E12, 2378.9000000000005], [1.72848894E12, 2411.15], [1.72848996E12, 2973.5199999999995], [1.72848348E12, 1496.6799999999994], [1.7284857E12, 1714.3900000000008], [1.72848792E12, 2288.649999999998], [1.72848984E12, 2934.7400000000075], [1.72848642E12, 1717.7300000000005], [1.72848864E12, 2285.229999999999], [1.72849086E12, 3106.999999999985], [1.7284842E12, 1493.56], [1.72848522E12, 1748.9400000000005], [1.72848846E12, 2273.7699999999986], [1.72849104E12, 2729.5300000000025], [1.728483E12, 1413.0900000000015], [1.72848744E12, 2229.6800000000007], [1.72848402E12, 1688.3599999999985], [1.72848726E12, 2305.1199999999985], [1.72849002E12, 2897.0199999999986], [1.72848624E12, 1750.0700000000002], [1.72848504E12, 1616.9600000000014], [1.72849122E12, 2858.3700000000003], [1.72848606E12, 1857.4], [1.72848828E12, 2324.7200000000007], [1.72848354E12, 1459.78], [1.72848678E12, 1816.0], [1.728489E12, 2378.0600000000004], [1.7284905E12, 2782.5600000000004], [1.72848576E12, 1771.54], [1.72848456E12, 1424.5299999999986], [1.72848558E12, 1665.8], [1.7284878E12, 2363.8], [1.72848948E12, 2738.96], [1.7284866E12, 1685.9400000000007], [1.72848336E12, 1441.3000000000002], [1.72848438E12, 1514.6799999999998], [1.72848882E12, 2330.319999999996], [1.72849068E12, 2904.0199999999995], [1.7284854E12, 1716.73], [1.72848318E12, 1369.4999999999984], [1.72848762E12, 2296.2599999999957], [1.72848966E12, 2955.4399999999996], [1.72848288E12, 1601.6899999999998], [1.72848612E12, 1693.8300000000004], [1.72848954E12, 2917.250000000001], [1.7284839E12, 1635.96], [1.72848834E12, 2281.329999999999], [1.72849074E12, 2848.9199999999996], [1.72848492E12, 1478.6799999999957], [1.72848714E12, 1670.5599999999986], [1.72848936E12, 2306.7799999999997], [1.72848918E12, 2099.18], [1.72848972E12, 2890.4499999999994], [1.72848372E12, 1511.7800000000007], [1.72848594E12, 1586.67], [1.72848816E12, 2436.0], [1.72848474E12, 1463.3999999999994], [1.72848798E12, 2356.4700000000003], [1.72848696E12, 1826.4199999999998], [1.72849092E12, 2708.24], [1.7284887E12, 2388.36], [1.7284902E12, 2868.6500000000005], [1.72848324E12, 1433.1999999999996], [1.72848546E12, 1640.54], [1.72848768E12, 2205.3900000000003], [1.72848426E12, 1548.7300000000005], [1.7284875E12, 2302.16], [1.72848648E12, 1736.7999999999993], [1.72848306E12, 1464.6799999999998], [1.72848852E12, 2245.3199999999997], [1.7284863E12, 1670.6], [1.72848528E12, 1734.2], [1.72849038E12, 2863.8999999999983], [1.72848732E12, 2419.3799999999987], [1.72849056E12, 2906.680000000002], [1.72848408E12, 1352.0800000000002], [1.7284851E12, 1808.2999999999993]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7284848E12, 1201.9499999999998], [1.72848582E12, 1413.199999999999], [1.72848804E12, 1874.9499999999994], [1.72848684E12, 1354.3], [1.7284836E12, 1199.4499999999996], [1.72848462E12, 1185.8], [1.72848906E12, 1888.25], [1.72849044E12, 2276.7], [1.72848564E12, 1326.05], [1.72848342E12, 1217.25], [1.72848786E12, 1806.75], [1.7284896E12, 2334.05], [1.72848444E12, 1200.8], [1.72848666E12, 1341.8999999999999], [1.72848888E12, 1775.05], [1.72849062E12, 2377.0], [1.72848738E12, 1800.3999999999996], [1.72848294E12, 1178.7499999999998], [1.72848516E12, 1326.3999999999996], [1.7284899E12, 2387.65], [1.72848942E12, 1539.0], [1.72849008E12, 2219.1999999999994], [1.7284911E12, 2278.6], [1.72848396E12, 1108.1999999999998], [1.72848618E12, 1368.0], [1.7284884E12, 1911.1999999999998], [1.72848498E12, 1106.6], [1.72849128E12, 2316.0], [1.72848822E12, 1861.9999999999995], [1.7284872E12, 1322.8999999999999], [1.72848378E12, 1132.6], [1.72848702E12, 1395.5999999999985], [1.72848924E12, 1807.9499999999998], [1.72849026E12, 2357.5999999999995], [1.728486E12, 1325.05], [1.7284845E12, 1156.1000000000001], [1.72848774E12, 1787.3999999999999], [1.72848672E12, 1374.3999999999996], [1.72849116E12, 2445.0], [1.7284833E12, 1157.3999999999999], [1.72848654E12, 1346.0], [1.72848876E12, 1830.7999999999997], [1.72848552E12, 1354.3999999999992], [1.72849014E12, 2363.0], [1.72849032E12, 2370.5999999999995], [1.72848432E12, 1133.25], [1.72848534E12, 1351.7999999999997], [1.72848756E12, 1839.9499999999998], [1.72849134E12, 1866.0], [1.72848312E12, 1129.3999999999999], [1.72848636E12, 1447.15], [1.72848858E12, 1861.9499999999998], [1.72848414E12, 1122.3999999999994], [1.72848708E12, 1309.6999999999996], [1.7284908E12, 2254.2999999999993], [1.72848384E12, 1120.2999999999997], [1.72848486E12, 1172.5], [1.7284893E12, 1848.1999999999998], [1.72848588E12, 1389.3999999999996], [1.72848978E12, 2340.5], [1.72848366E12, 1198.0], [1.7284881E12, 1819.65], [1.72849098E12, 2350.0], [1.72848468E12, 1240.1999999999998], [1.7284869E12, 1383.3999999999999], [1.72848912E12, 1873.2499999999995], [1.72848894E12, 1895.6], [1.72848996E12, 2375.2], [1.72848348E12, 1158.3999999999999], [1.7284857E12, 1387.6999999999996], [1.72848792E12, 1868.8999999999999], [1.72848984E12, 2261.2], [1.72848642E12, 1382.2499999999998], [1.72848864E12, 1860.499999999999], [1.72849086E12, 2342.0], [1.7284842E12, 1182.5999999999997], [1.72848522E12, 1403.3499999999997], [1.72848846E12, 1808.499999999999], [1.72849104E12, 2220.2], [1.728483E12, 1164.8999999999999], [1.72848744E12, 1803.4], [1.72848402E12, 1186.9999999999995], [1.72848726E12, 1755.6], [1.72849002E12, 2341.7], [1.72848624E12, 1394.8999999999987], [1.72848504E12, 1315.85], [1.72849122E12, 2275.3999999999996], [1.72848606E12, 1399.6], [1.72848828E12, 1862.8999999999999], [1.72848354E12, 1168.8], [1.72848678E12, 1382.0], [1.728489E12, 1759.0], [1.7284905E12, 2321.9999999999995], [1.72848576E12, 1298.199999999999], [1.72848456E12, 1162.1499999999994], [1.72848558E12, 1309.5], [1.7284878E12, 1821.0], [1.72848948E12, 2121.3999999999996], [1.7284866E12, 1358.3], [1.72848336E12, 1177.35], [1.72848438E12, 1167.8], [1.72848882E12, 1826.9999999999973], [1.72849068E12, 2382.3999999999996], [1.7284854E12, 1404.85], [1.72848318E12, 1109.55], [1.72848762E12, 1915.3999999999999], [1.72848966E12, 2363.0], [1.72848288E12, 1179.3499999999997], [1.72848612E12, 1400.0999999999995], [1.72848954E12, 2246.75], [1.7284839E12, 1195.2], [1.72848834E12, 1832.6999999999998], [1.72849074E12, 2274.3999999999996], [1.72848492E12, 1120.3999999999999], [1.72848714E12, 1365.9999999999995], [1.72848936E12, 1930.75], [1.72848918E12, 1788.65], [1.72848972E12, 2294.75], [1.72848372E12, 1201.3999999999999], [1.72848594E12, 1313.6999999999998], [1.72848816E12, 1945.0], [1.72848474E12, 1151.0], [1.72848798E12, 1832.999999999999], [1.72848696E12, 1343.6999999999996], [1.72849092E12, 2265.099999999999], [1.7284887E12, 1888.9999999999995], [1.7284902E12, 2255.75], [1.72848324E12, 1177.0], [1.72848546E12, 1330.6999999999998], [1.72848768E12, 1891.55], [1.72848426E12, 1223.9499999999996], [1.7284875E12, 1917.7999999999997], [1.72848648E12, 1337.4999999999993], [1.72848306E12, 1144.4], [1.72848852E12, 1890.1999999999998], [1.7284863E12, 1307.0], [1.72848528E12, 1345.999999999999], [1.72849038E12, 2317.5], [1.72848732E12, 1814.9999999999986], [1.72849056E12, 2311.4], [1.72848408E12, 1141.6999999999994], [1.7284851E12, 1381.3999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7284848E12, 34.0], [1.72848582E12, 39.0], [1.72848804E12, 44.0], [1.72848684E12, 33.0], [1.7284836E12, 46.0], [1.72848462E12, 38.0], [1.72848906E12, 47.0], [1.72849044E12, 67.0], [1.72848564E12, 37.0], [1.72848342E12, 37.0], [1.72848786E12, 45.0], [1.7284896E12, 74.0], [1.72848444E12, 38.0], [1.72848666E12, 39.0], [1.72848888E12, 44.0], [1.72849062E12, 13.0], [1.72848738E12, 38.0], [1.72848294E12, 41.0], [1.72848516E12, 43.0], [1.7284899E12, 69.0], [1.72848942E12, 41.0], [1.72849008E12, 49.0], [1.7284911E12, 62.0], [1.72848396E12, 40.0], [1.72848618E12, 41.0], [1.7284884E12, 49.0], [1.72848498E12, 42.0], [1.72849128E12, 32.0], [1.72848822E12, 38.0], [1.7284872E12, 44.0], [1.72848378E12, 41.0], [1.72848702E12, 42.0], [1.72848924E12, 43.0], [1.72849026E12, 67.0], [1.728486E12, 42.0], [1.7284845E12, 42.0], [1.72848774E12, 42.0], [1.72848672E12, 43.0], [1.72849116E12, 66.0], [1.7284833E12, 39.0], [1.72848654E12, 39.0], [1.72848876E12, 46.0], [1.72848552E12, 39.0], [1.72849014E12, 56.0], [1.72849032E12, 71.0], [1.72848432E12, 38.0], [1.72848534E12, 39.0], [1.72848756E12, 38.0], [1.72849134E12, 43.0], [1.72848312E12, 38.0], [1.72848636E12, 35.0], [1.72848858E12, 43.0], [1.72848414E12, 40.0], [1.72848708E12, 36.0], [1.7284908E12, 64.0], [1.72848384E12, 36.0], [1.72848486E12, 34.0], [1.7284893E12, 42.0], [1.72848588E12, 37.0], [1.72848978E12, 61.0], [1.72848366E12, 36.0], [1.7284881E12, 45.0], [1.72849098E12, 56.0], [1.72848468E12, 40.0], [1.7284869E12, 39.0], [1.72848912E12, 44.0], [1.72848894E12, 35.0], [1.72848996E12, 53.0], [1.72848348E12, 38.0], [1.7284857E12, 41.0], [1.72848792E12, 45.0], [1.72848984E12, 60.0], [1.72848642E12, 43.0], [1.72848864E12, 43.0], [1.72849086E12, 58.0], [1.7284842E12, 41.0], [1.72848522E12, 43.0], [1.72848846E12, 42.0], [1.72849104E12, 74.0], [1.728483E12, 40.0], [1.72848744E12, 43.0], [1.72848402E12, 38.0], [1.72848726E12, 44.0], [1.72849002E12, 56.0], [1.72848624E12, 35.0], [1.72848504E12, 40.0], [1.72849122E12, 60.0], [1.72848606E12, 41.0], [1.72848828E12, 41.0], [1.72848354E12, 39.0], [1.72848678E12, 40.0], [1.728489E12, 52.0], [1.7284905E12, 65.0], [1.72848576E12, 44.0], [1.72848456E12, 42.0], [1.72848558E12, 39.0], [1.7284878E12, 48.0], [1.72848948E12, 43.0], [1.7284866E12, 38.0], [1.72848336E12, 42.0], [1.72848438E12, 42.0], [1.72848882E12, 43.0], [1.72849068E12, 56.0], [1.7284854E12, 37.0], [1.72848318E12, 36.0], [1.72848762E12, 40.0], [1.72848966E12, 60.0], [1.72848288E12, 44.0], [1.72848612E12, 40.0], [1.72848954E12, 57.0], [1.7284839E12, 39.0], [1.72848834E12, 45.0], [1.72849074E12, 71.0], [1.72848492E12, 36.0], [1.72848714E12, 39.0], [1.72848936E12, 43.0], [1.72848918E12, 43.0], [1.72848972E12, 70.0], [1.72848372E12, 40.0], [1.72848594E12, 42.0], [1.72848816E12, 45.0], [1.72848474E12, 38.0], [1.72848798E12, 45.0], [1.72848696E12, 39.0], [1.72849092E12, 66.0], [1.7284887E12, 42.0], [1.7284902E12, 55.0], [1.72848324E12, 41.0], [1.72848546E12, 38.0], [1.72848768E12, 45.0], [1.72848426E12, 32.0], [1.7284875E12, 45.0], [1.72848648E12, 38.0], [1.72848306E12, 42.0], [1.72848852E12, 38.0], [1.7284863E12, 40.0], [1.72848528E12, 42.0], [1.72849038E12, 60.0], [1.72848732E12, 45.0], [1.72849056E12, 21.0], [1.72848408E12, 41.0], [1.7284851E12, 40.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7284848E12, 477.5], [1.72848582E12, 485.0], [1.72848804E12, 614.0], [1.72848684E12, 515.0], [1.7284836E12, 469.5], [1.72848462E12, 459.0], [1.72848906E12, 638.5], [1.72849044E12, 826.0], [1.72848564E12, 504.0], [1.72848342E12, 451.0], [1.72848786E12, 586.5], [1.7284896E12, 797.5], [1.72848444E12, 412.0], [1.72848666E12, 506.0], [1.72848888E12, 576.5], [1.72849062E12, 802.0], [1.72848738E12, 648.0], [1.72848294E12, 354.5], [1.72848516E12, 470.0], [1.7284899E12, 851.5], [1.72848942E12, 553.0], [1.72849008E12, 842.0], [1.7284911E12, 781.0], [1.72848396E12, 436.0], [1.72848618E12, 569.5], [1.7284884E12, 735.0], [1.72848498E12, 399.0], [1.72849128E12, 763.0], [1.72848822E12, 714.0], [1.7284872E12, 471.0], [1.72848378E12, 422.0], [1.72848702E12, 502.5], [1.72848924E12, 671.5], [1.72849026E12, 886.0], [1.728486E12, 483.0], [1.7284845E12, 347.5], [1.72848774E12, 617.0], [1.72848672E12, 533.0], [1.72849116E12, 998.0], [1.7284833E12, 445.0], [1.72848654E12, 457.5], [1.72848876E12, 660.0], [1.72848552E12, 493.0], [1.72849014E12, 898.0], [1.72849032E12, 788.0], [1.72848432E12, 382.0], [1.72848534E12, 487.0], [1.72848756E12, 657.0], [1.72849134E12, 594.0], [1.72848312E12, 363.0], [1.72848636E12, 496.0], [1.72848858E12, 625.5], [1.72848414E12, 401.0], [1.72848708E12, 517.0], [1.7284908E12, 896.0], [1.72848384E12, 386.0], [1.72848486E12, 347.0], [1.7284893E12, 700.0], [1.72848588E12, 497.0], [1.72848978E12, 802.5], [1.72848366E12, 520.0], [1.7284881E12, 650.0], [1.72849098E12, 808.0], [1.72848468E12, 483.0], [1.7284869E12, 464.0], [1.72848912E12, 666.5], [1.72848894E12, 739.0], [1.72848996E12, 893.0], [1.72848348E12, 404.0], [1.7284857E12, 559.0], [1.72848792E12, 632.0], [1.72848984E12, 836.5], [1.72848642E12, 473.0], [1.72848864E12, 679.0], [1.72849086E12, 843.0], [1.7284842E12, 434.0], [1.72848522E12, 475.5], [1.72848846E12, 563.5], [1.72849104E12, 833.5], [1.728483E12, 286.0], [1.72848744E12, 664.0], [1.72848402E12, 372.0], [1.72848726E12, 474.0], [1.72849002E12, 834.0], [1.72848624E12, 481.5], [1.72848504E12, 500.5], [1.72849122E12, 899.0], [1.72848606E12, 519.0], [1.72848828E12, 575.0], [1.72848354E12, 399.0], [1.72848678E12, 499.0], [1.728489E12, 718.0], [1.7284905E12, 897.0], [1.72848576E12, 509.5], [1.72848456E12, 451.5], [1.72848558E12, 467.0], [1.7284878E12, 709.0], [1.72848948E12, 558.0], [1.7284866E12, 430.5], [1.72848336E12, 478.0], [1.72848438E12, 410.5], [1.72848882E12, 638.0], [1.72849068E12, 1013.5], [1.7284854E12, 526.5], [1.72848318E12, 462.5], [1.72848762E12, 692.0], [1.72848966E12, 878.0], [1.72848288E12, 359.5], [1.72848612E12, 503.0], [1.72848954E12, 785.5], [1.7284839E12, 503.0], [1.72848834E12, 596.5], [1.72849074E12, 845.0], [1.72848492E12, 364.0], [1.72848714E12, 529.0], [1.72848936E12, 731.0], [1.72848918E12, 553.5], [1.72848972E12, 763.5], [1.72848372E12, 483.5], [1.72848594E12, 431.0], [1.72848816E12, 767.0], [1.72848474E12, 434.0], [1.72848798E12, 636.0], [1.72848696E12, 484.0], [1.72849092E12, 830.0], [1.7284887E12, 611.0], [1.7284902E12, 900.5], [1.72848324E12, 429.0], [1.72848546E12, 407.0], [1.72848768E12, 758.0], [1.72848426E12, 459.0], [1.7284875E12, 717.0], [1.72848648E12, 514.0], [1.72848306E12, 506.5], [1.72848852E12, 632.5], [1.7284863E12, 444.0], [1.72848528E12, 460.0], [1.72849038E12, 764.0], [1.72848732E12, 526.0], [1.72849056E12, 925.0], [1.72848408E12, 383.0], [1.7284851E12, 529.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72849134E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 198.0, "minX": 1.0, "maxY": 791.0, "series": [{"data": [[2.0, 732.5], [32.0, 198.0], [33.0, 328.0], [35.0, 227.0], [3.0, 620.0], [4.0, 632.0], [5.0, 620.0], [6.0, 611.0], [7.0, 555.5], [8.0, 534.5], [9.0, 541.0], [10.0, 574.0], [11.0, 615.0], [12.0, 635.5], [13.0, 663.0], [14.0, 643.0], [15.0, 625.0], [1.0, 791.0], [16.0, 577.0], [17.0, 571.0], [18.0, 514.0], [19.0, 469.5], [20.0, 466.5], [21.0, 394.5], [22.0, 329.5], [23.0, 302.5], [24.0, 314.5], [25.0, 289.5], [26.0, 268.5], [27.0, 270.0], [28.0, 263.5], [29.0, 286.0], [30.0, 238.0], [31.0, 208.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 35.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 124.5, "minX": 1.0, "maxY": 517.0, "series": [{"data": [[2.0, 483.0], [32.0, 124.5], [33.0, 226.0], [35.0, 140.0], [3.0, 419.0], [4.0, 430.0], [5.0, 420.0], [6.0, 411.5], [7.0, 392.0], [8.0, 379.0], [9.0, 377.0], [10.0, 401.5], [11.0, 429.0], [12.0, 447.5], [13.0, 475.0], [14.0, 458.0], [15.0, 456.0], [1.0, 517.0], [16.0, 417.0], [17.0, 416.0], [18.0, 375.0], [19.0, 344.5], [20.0, 345.5], [21.0, 277.5], [22.0, 218.5], [23.0, 197.0], [24.0, 198.0], [25.0, 186.5], [26.0, 161.5], [27.0, 163.0], [28.0, 157.5], [29.0, 177.0], [30.0, 143.0], [31.0, 131.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 35.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.033333333333333, "minX": 1.72848288E12, "maxY": 17.733333333333334, "series": [{"data": [[1.7284848E12, 8.1], [1.72848582E12, 14.616666666666667], [1.72848804E12, 16.5], [1.72848684E12, 14.266666666666667], [1.7284836E12, 8.3], [1.72848462E12, 8.166666666666666], [1.72848906E12, 16.566666666666666], [1.72849044E12, 17.55], [1.72848564E12, 14.633333333333333], [1.72848342E12, 8.4], [1.72848786E12, 17.233333333333334], [1.7284896E12, 17.3], [1.72848444E12, 8.683333333333334], [1.72848666E12, 14.666666666666666], [1.72848888E12, 17.3], [1.72849062E12, 16.983333333333334], [1.72848738E12, 16.55], [1.72848294E12, 4.5], [1.72848516E12, 14.95], [1.7284899E12, 16.766666666666666], [1.72848942E12, 14.683333333333334], [1.72849008E12, 17.116666666666667], [1.7284911E12, 17.716666666666665], [1.72848396E12, 8.516666666666667], [1.72848618E12, 14.133333333333333], [1.7284884E12, 15.616666666666667], [1.72848498E12, 6.883333333333334], [1.72849128E12, 17.716666666666665], [1.72848822E12, 16.116666666666667], [1.7284872E12, 13.25], [1.72848378E12, 8.783333333333333], [1.72848702E12, 14.366666666666667], [1.72848924E12, 16.1], [1.72849026E12, 16.35], [1.728486E12, 14.633333333333333], [1.7284845E12, 9.033333333333333], [1.72848774E12, 16.75], [1.72848672E12, 14.283333333333333], [1.72849116E12, 15.933333333333334], [1.7284833E12, 8.516666666666667], [1.72848654E12, 15.0], [1.72848876E12, 16.516666666666666], [1.72848552E12, 14.45], [1.72849014E12, 16.983333333333334], [1.72849032E12, 17.616666666666667], [1.72848432E12, 8.9], [1.72848534E12, 14.75], [1.72848756E12, 16.333333333333332], [1.72849134E12, 12.716666666666667], [1.72848312E12, 6.4], [1.72848636E12, 14.266666666666667], [1.72848858E12, 16.416666666666668], [1.72848414E12, 8.716666666666667], [1.72848708E12, 14.5], [1.7284908E12, 16.6], [1.72848384E12, 8.683333333333334], [1.72848486E12, 8.816666666666666], [1.7284893E12, 16.05], [1.72848588E12, 14.466666666666667], [1.72848978E12, 17.566666666666666], [1.72848366E12, 7.816666666666666], [1.7284881E12, 16.766666666666666], [1.72849098E12, 16.9], [1.72848468E12, 8.016666666666667], [1.7284869E12, 14.716666666666667], [1.72848912E12, 16.266666666666666], [1.72848894E12, 15.6], [1.72848996E12, 16.383333333333333], [1.72848348E12, 8.583333333333334], [1.7284857E12, 14.0], [1.72848792E12, 16.333333333333332], [1.72848984E12, 17.6], [1.72848642E12, 14.633333333333333], [1.72848864E12, 16.383333333333333], [1.72849086E12, 17.316666666666666], [1.7284842E12, 8.683333333333334], [1.72848522E12, 14.633333333333333], [1.72848846E12, 17.2], [1.72849104E12, 17.633333333333333], [1.728483E12, 4.6], [1.72848744E12, 16.516666666666666], [1.72848402E12, 8.883333333333333], [1.72848726E12, 11.066666666666666], [1.72849002E12, 17.016666666666666], [1.72848624E12, 14.366666666666667], [1.72848504E12, 9.1], [1.72849122E12, 16.866666666666667], [1.72848606E12, 14.183333333333334], [1.72848828E12, 16.883333333333333], [1.72848354E12, 8.5], [1.72848678E12, 14.316666666666666], [1.728489E12, 16.083333333333332], [1.7284905E12, 16.916666666666668], [1.72848576E12, 14.533333333333333], [1.72848456E12, 8.366666666666667], [1.72848558E12, 15.15], [1.7284878E12, 15.65], [1.72848948E12, 11.916666666666666], [1.7284866E12, 15.266666666666667], [1.72848336E12, 7.933333333333334], [1.72848438E12, 8.5], [1.72848882E12, 16.55], [1.72849068E12, 15.6], [1.7284854E12, 14.333333333333334], [1.72848318E12, 8.466666666666667], [1.72848762E12, 15.75], [1.72848966E12, 16.85], [1.72848288E12, 4.166666666666667], [1.72848612E12, 14.366666666666667], [1.72848954E12, 17.566666666666666], [1.7284839E12, 7.916666666666667], [1.72848834E12, 16.533333333333335], [1.72849074E12, 17.383333333333333], [1.72848492E12, 9.05], [1.72848714E12, 14.25], [1.72848936E12, 15.6], [1.72848918E12, 17.433333333333334], [1.72848972E12, 17.733333333333334], [1.72848372E12, 8.033333333333333], [1.72848594E12, 15.533333333333333], [1.72848816E12, 14.983333333333333], [1.72848474E12, 8.65], [1.72848798E12, 16.3], [1.72848696E12, 14.55], [1.72849092E12, 17.416666666666668], [1.7284887E12, 16.45], [1.7284902E12, 16.9], [1.72848324E12, 8.65], [1.72848546E12, 15.366666666666667], [1.72848768E12, 15.466666666666667], [1.72848426E12, 8.133333333333333], [1.7284875E12, 15.683333333333334], [1.72848648E12, 14.5], [1.72848306E12, 4.033333333333333], [1.72848852E12, 16.433333333333334], [1.7284863E12, 15.183333333333334], [1.72848528E12, 14.783333333333333], [1.72849038E12, 17.4], [1.72848732E12, 17.216666666666665], [1.72849056E12, 16.516666666666666], [1.72848408E12, 8.95], [1.7284851E12, 14.283333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72849134E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.033333333333333, "minX": 1.72848288E12, "maxY": 17.733333333333334, "series": [{"data": [[1.7284848E12, 8.1], [1.72848582E12, 14.616666666666667], [1.72848804E12, 16.5], [1.72848684E12, 14.266666666666667], [1.7284836E12, 8.3], [1.72848462E12, 8.166666666666666], [1.72848906E12, 16.566666666666666], [1.72849044E12, 17.55], [1.72848564E12, 14.633333333333333], [1.72848342E12, 8.4], [1.72848786E12, 17.233333333333334], [1.7284896E12, 17.3], [1.72848444E12, 8.683333333333334], [1.72848666E12, 14.666666666666666], [1.72848888E12, 17.3], [1.72849062E12, 16.983333333333334], [1.72848738E12, 16.55], [1.72848294E12, 4.5], [1.72848516E12, 14.95], [1.7284899E12, 16.766666666666666], [1.72848942E12, 14.816666666666666], [1.72849008E12, 17.116666666666667], [1.7284911E12, 17.716666666666665], [1.72848396E12, 8.516666666666667], [1.72848618E12, 14.133333333333333], [1.7284884E12, 15.616666666666667], [1.72848498E12, 6.916666666666667], [1.72849128E12, 17.716666666666665], [1.72848822E12, 16.116666666666667], [1.7284872E12, 13.333333333333334], [1.72848378E12, 8.783333333333333], [1.72848702E12, 14.366666666666667], [1.72848924E12, 16.1], [1.72849026E12, 16.35], [1.728486E12, 14.633333333333333], [1.7284845E12, 9.033333333333333], [1.72848774E12, 16.75], [1.72848672E12, 14.283333333333333], [1.72849116E12, 15.933333333333334], [1.7284833E12, 8.516666666666667], [1.72848654E12, 15.0], [1.72848876E12, 16.516666666666666], [1.72848552E12, 14.45], [1.72849014E12, 16.983333333333334], [1.72849032E12, 17.616666666666667], [1.72848432E12, 8.9], [1.72848534E12, 14.75], [1.72848756E12, 16.333333333333332], [1.72849134E12, 12.983333333333333], [1.72848312E12, 6.366666666666666], [1.72848636E12, 14.266666666666667], [1.72848858E12, 16.433333333333334], [1.72848414E12, 8.716666666666667], [1.72848708E12, 14.5], [1.7284908E12, 16.6], [1.72848384E12, 8.683333333333334], [1.72848486E12, 8.816666666666666], [1.7284893E12, 16.05], [1.72848588E12, 14.466666666666667], [1.72848978E12, 17.566666666666666], [1.72848366E12, 7.816666666666666], [1.7284881E12, 16.766666666666666], [1.72849098E12, 16.9], [1.72848468E12, 8.016666666666667], [1.7284869E12, 14.716666666666667], [1.72848912E12, 16.266666666666666], [1.72848894E12, 15.6], [1.72848996E12, 16.383333333333333], [1.72848348E12, 8.583333333333334], [1.7284857E12, 14.0], [1.72848792E12, 16.333333333333332], [1.72848984E12, 17.6], [1.72848642E12, 14.633333333333333], [1.72848864E12, 16.366666666666667], [1.72849086E12, 17.316666666666666], [1.7284842E12, 8.683333333333334], [1.72848522E12, 14.633333333333333], [1.72848846E12, 17.2], [1.72849104E12, 17.633333333333333], [1.728483E12, 4.6], [1.72848744E12, 16.516666666666666], [1.72848402E12, 8.883333333333333], [1.72848726E12, 10.916666666666666], [1.72849002E12, 17.016666666666666], [1.72848624E12, 14.366666666666667], [1.72848504E12, 9.0], [1.72849122E12, 16.866666666666667], [1.72848606E12, 14.183333333333334], [1.72848828E12, 16.883333333333333], [1.72848354E12, 8.5], [1.72848678E12, 14.316666666666666], [1.728489E12, 16.083333333333332], [1.7284905E12, 16.916666666666668], [1.72848576E12, 14.533333333333333], [1.72848456E12, 8.366666666666667], [1.72848558E12, 15.15], [1.7284878E12, 15.65], [1.72848948E12, 11.716666666666667], [1.7284866E12, 15.266666666666667], [1.72848336E12, 7.933333333333334], [1.72848438E12, 8.5], [1.72848882E12, 16.55], [1.72849068E12, 15.6], [1.7284854E12, 14.333333333333334], [1.72848318E12, 8.466666666666667], [1.72848762E12, 15.75], [1.72848966E12, 16.85], [1.72848288E12, 4.133333333333334], [1.72848612E12, 14.366666666666667], [1.72848954E12, 17.566666666666666], [1.7284839E12, 7.916666666666667], [1.72848834E12, 16.533333333333335], [1.72849074E12, 17.383333333333333], [1.72848492E12, 9.05], [1.72848714E12, 14.25], [1.72848936E12, 15.6], [1.72848918E12, 17.433333333333334], [1.72848972E12, 17.733333333333334], [1.72848372E12, 8.033333333333333], [1.72848594E12, 15.533333333333333], [1.72848816E12, 14.983333333333333], [1.72848474E12, 8.65], [1.72848798E12, 16.3], [1.72848696E12, 14.55], [1.72849092E12, 17.416666666666668], [1.7284887E12, 16.45], [1.7284902E12, 16.9], [1.72848324E12, 8.65], [1.72848546E12, 15.366666666666667], [1.72848768E12, 15.466666666666667], [1.72848426E12, 8.133333333333333], [1.7284875E12, 15.683333333333334], [1.72848648E12, 14.5], [1.72848306E12, 4.033333333333333], [1.72848852E12, 16.433333333333334], [1.7284863E12, 15.183333333333334], [1.72848528E12, 14.783333333333333], [1.72849038E12, 17.4], [1.72848732E12, 17.216666666666665], [1.72849056E12, 16.516666666666666], [1.72848408E12, 8.95], [1.7284851E12, 14.283333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72849134E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.033333333333333, "minX": 1.72848288E12, "maxY": 17.733333333333334, "series": [{"data": [[1.7284848E12, 8.1], [1.72848582E12, 14.616666666666667], [1.72848804E12, 16.5], [1.72848684E12, 14.266666666666667], [1.7284836E12, 8.3], [1.72848462E12, 8.166666666666666], [1.72848906E12, 16.566666666666666], [1.72849044E12, 17.55], [1.72848564E12, 14.633333333333333], [1.72848342E12, 8.4], [1.72848786E12, 17.233333333333334], [1.7284896E12, 17.3], [1.72848444E12, 8.683333333333334], [1.72848666E12, 14.666666666666666], [1.72848888E12, 17.3], [1.72849062E12, 16.983333333333334], [1.72848738E12, 16.55], [1.72848294E12, 4.5], [1.72848516E12, 14.95], [1.7284899E12, 16.766666666666666], [1.72848942E12, 14.816666666666666], [1.72849008E12, 17.116666666666667], [1.7284911E12, 17.716666666666665], [1.72848396E12, 8.516666666666667], [1.72848618E12, 14.133333333333333], [1.7284884E12, 15.616666666666667], [1.72848498E12, 6.916666666666667], [1.72849128E12, 17.716666666666665], [1.72848822E12, 16.116666666666667], [1.7284872E12, 13.333333333333334], [1.72848378E12, 8.783333333333333], [1.72848702E12, 14.366666666666667], [1.72848924E12, 16.1], [1.72849026E12, 16.35], [1.728486E12, 14.633333333333333], [1.7284845E12, 9.033333333333333], [1.72848774E12, 16.75], [1.72848672E12, 14.283333333333333], [1.72849116E12, 15.933333333333334], [1.7284833E12, 8.516666666666667], [1.72848654E12, 15.0], [1.72848876E12, 16.516666666666666], [1.72848552E12, 14.45], [1.72849014E12, 16.983333333333334], [1.72849032E12, 17.616666666666667], [1.72848432E12, 8.9], [1.72848534E12, 14.75], [1.72848756E12, 16.333333333333332], [1.72849134E12, 12.983333333333333], [1.72848312E12, 6.366666666666666], [1.72848636E12, 14.266666666666667], [1.72848858E12, 16.433333333333334], [1.72848414E12, 8.716666666666667], [1.72848708E12, 14.5], [1.7284908E12, 16.6], [1.72848384E12, 8.683333333333334], [1.72848486E12, 8.816666666666666], [1.7284893E12, 16.05], [1.72848588E12, 14.466666666666667], [1.72848978E12, 17.566666666666666], [1.72848366E12, 7.816666666666666], [1.7284881E12, 16.766666666666666], [1.72849098E12, 16.9], [1.72848468E12, 8.016666666666667], [1.7284869E12, 14.716666666666667], [1.72848912E12, 16.266666666666666], [1.72848894E12, 15.6], [1.72848996E12, 16.383333333333333], [1.72848348E12, 8.583333333333334], [1.7284857E12, 14.0], [1.72848792E12, 16.333333333333332], [1.72848984E12, 17.6], [1.72848642E12, 14.633333333333333], [1.72848864E12, 16.366666666666667], [1.72849086E12, 17.316666666666666], [1.7284842E12, 8.683333333333334], [1.72848522E12, 14.633333333333333], [1.72848846E12, 17.2], [1.72849104E12, 17.633333333333333], [1.728483E12, 4.6], [1.72848744E12, 16.516666666666666], [1.72848402E12, 8.883333333333333], [1.72848726E12, 10.916666666666666], [1.72849002E12, 17.016666666666666], [1.72848624E12, 14.366666666666667], [1.72848504E12, 9.0], [1.72849122E12, 16.866666666666667], [1.72848606E12, 14.183333333333334], [1.72848828E12, 16.883333333333333], [1.72848354E12, 8.5], [1.72848678E12, 14.316666666666666], [1.728489E12, 16.083333333333332], [1.7284905E12, 16.916666666666668], [1.72848576E12, 14.533333333333333], [1.72848456E12, 8.366666666666667], [1.72848558E12, 15.15], [1.7284878E12, 15.65], [1.72848948E12, 11.716666666666667], [1.7284866E12, 15.266666666666667], [1.72848336E12, 7.933333333333334], [1.72848438E12, 8.5], [1.72848882E12, 16.55], [1.72849068E12, 15.6], [1.7284854E12, 14.333333333333334], [1.72848318E12, 8.466666666666667], [1.72848762E12, 15.75], [1.72848966E12, 16.85], [1.72848288E12, 4.133333333333334], [1.72848612E12, 14.366666666666667], [1.72848954E12, 17.566666666666666], [1.7284839E12, 7.916666666666667], [1.72848834E12, 16.533333333333335], [1.72849074E12, 17.383333333333333], [1.72848492E12, 9.05], [1.72848714E12, 14.25], [1.72848936E12, 15.6], [1.72848918E12, 17.433333333333334], [1.72848972E12, 17.733333333333334], [1.72848372E12, 8.033333333333333], [1.72848594E12, 15.533333333333333], [1.72848816E12, 14.983333333333333], [1.72848474E12, 8.65], [1.72848798E12, 16.3], [1.72848696E12, 14.55], [1.72849092E12, 17.416666666666668], [1.7284887E12, 16.45], [1.7284902E12, 16.9], [1.72848324E12, 8.65], [1.72848546E12, 15.366666666666667], [1.72848768E12, 15.466666666666667], [1.72848426E12, 8.133333333333333], [1.7284875E12, 15.683333333333334], [1.72848648E12, 14.5], [1.72848306E12, 4.033333333333333], [1.72848852E12, 16.433333333333334], [1.7284863E12, 15.183333333333334], [1.72848528E12, 14.783333333333333], [1.72849038E12, 17.4], [1.72848732E12, 17.216666666666665], [1.72849056E12, 16.516666666666666], [1.72848408E12, 8.95], [1.7284851E12, 14.283333333333333]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72849134E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.033333333333333, "minX": 1.72848288E12, "maxY": 17.733333333333334, "series": [{"data": [[1.7284848E12, 8.1], [1.72848582E12, 14.616666666666667], [1.72848804E12, 16.5], [1.72848684E12, 14.266666666666667], [1.7284836E12, 8.3], [1.72848462E12, 8.166666666666666], [1.72848906E12, 16.566666666666666], [1.72849044E12, 17.55], [1.72848564E12, 14.633333333333333], [1.72848342E12, 8.4], [1.72848786E12, 17.233333333333334], [1.7284896E12, 17.3], [1.72848444E12, 8.683333333333334], [1.72848666E12, 14.666666666666666], [1.72848888E12, 17.3], [1.72849062E12, 16.983333333333334], [1.72848738E12, 16.55], [1.72848294E12, 4.5], [1.72848516E12, 14.95], [1.7284899E12, 16.766666666666666], [1.72848942E12, 14.816666666666666], [1.72849008E12, 17.116666666666667], [1.7284911E12, 17.716666666666665], [1.72848396E12, 8.516666666666667], [1.72848618E12, 14.133333333333333], [1.7284884E12, 15.616666666666667], [1.72848498E12, 6.916666666666667], [1.72849128E12, 17.716666666666665], [1.72848822E12, 16.116666666666667], [1.7284872E12, 13.333333333333334], [1.72848378E12, 8.783333333333333], [1.72848702E12, 14.366666666666667], [1.72848924E12, 16.1], [1.72849026E12, 16.35], [1.728486E12, 14.633333333333333], [1.7284845E12, 9.033333333333333], [1.72848774E12, 16.75], [1.72848672E12, 14.283333333333333], [1.72849116E12, 15.933333333333334], [1.7284833E12, 8.516666666666667], [1.72848654E12, 15.0], [1.72848876E12, 16.516666666666666], [1.72848552E12, 14.45], [1.72849014E12, 16.983333333333334], [1.72849032E12, 17.616666666666667], [1.72848432E12, 8.9], [1.72848534E12, 14.75], [1.72848756E12, 16.333333333333332], [1.72849134E12, 12.983333333333333], [1.72848312E12, 6.366666666666666], [1.72848636E12, 14.266666666666667], [1.72848858E12, 16.433333333333334], [1.72848414E12, 8.716666666666667], [1.72848708E12, 14.5], [1.7284908E12, 16.6], [1.72848384E12, 8.683333333333334], [1.72848486E12, 8.816666666666666], [1.7284893E12, 16.05], [1.72848588E12, 14.466666666666667], [1.72848978E12, 17.566666666666666], [1.72848366E12, 7.816666666666666], [1.7284881E12, 16.766666666666666], [1.72849098E12, 16.9], [1.72848468E12, 8.016666666666667], [1.7284869E12, 14.716666666666667], [1.72848912E12, 16.266666666666666], [1.72848894E12, 15.6], [1.72848996E12, 16.383333333333333], [1.72848348E12, 8.583333333333334], [1.7284857E12, 14.0], [1.72848792E12, 16.333333333333332], [1.72848984E12, 17.6], [1.72848642E12, 14.633333333333333], [1.72848864E12, 16.366666666666667], [1.72849086E12, 17.316666666666666], [1.7284842E12, 8.683333333333334], [1.72848522E12, 14.633333333333333], [1.72848846E12, 17.2], [1.72849104E12, 17.633333333333333], [1.728483E12, 4.6], [1.72848744E12, 16.516666666666666], [1.72848402E12, 8.883333333333333], [1.72848726E12, 10.916666666666666], [1.72849002E12, 17.016666666666666], [1.72848624E12, 14.366666666666667], [1.72848504E12, 9.0], [1.72849122E12, 16.866666666666667], [1.72848606E12, 14.183333333333334], [1.72848828E12, 16.883333333333333], [1.72848354E12, 8.5], [1.72848678E12, 14.316666666666666], [1.728489E12, 16.083333333333332], [1.7284905E12, 16.916666666666668], [1.72848576E12, 14.533333333333333], [1.72848456E12, 8.366666666666667], [1.72848558E12, 15.15], [1.7284878E12, 15.65], [1.72848948E12, 11.716666666666667], [1.7284866E12, 15.266666666666667], [1.72848336E12, 7.933333333333334], [1.72848438E12, 8.5], [1.72848882E12, 16.55], [1.72849068E12, 15.6], [1.7284854E12, 14.333333333333334], [1.72848318E12, 8.466666666666667], [1.72848762E12, 15.75], [1.72848966E12, 16.85], [1.72848288E12, 4.133333333333334], [1.72848612E12, 14.366666666666667], [1.72848954E12, 17.566666666666666], [1.7284839E12, 7.916666666666667], [1.72848834E12, 16.533333333333335], [1.72849074E12, 17.383333333333333], [1.72848492E12, 9.05], [1.72848714E12, 14.25], [1.72848936E12, 15.6], [1.72848918E12, 17.433333333333334], [1.72848972E12, 17.733333333333334], [1.72848372E12, 8.033333333333333], [1.72848594E12, 15.533333333333333], [1.72848816E12, 14.983333333333333], [1.72848474E12, 8.65], [1.72848798E12, 16.3], [1.72848696E12, 14.55], [1.72849092E12, 17.416666666666668], [1.7284887E12, 16.45], [1.7284902E12, 16.9], [1.72848324E12, 8.65], [1.72848546E12, 15.366666666666667], [1.72848768E12, 15.466666666666667], [1.72848426E12, 8.133333333333333], [1.7284875E12, 15.683333333333334], [1.72848648E12, 14.5], [1.72848306E12, 4.033333333333333], [1.72848852E12, 16.433333333333334], [1.7284863E12, 15.183333333333334], [1.72848528E12, 14.783333333333333], [1.72849038E12, 17.4], [1.72848732E12, 17.216666666666665], [1.72849056E12, 16.516666666666666], [1.72848408E12, 8.95], [1.7284851E12, 14.283333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72849134E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

