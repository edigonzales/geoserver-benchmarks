/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "maxY": 4170.0, "series": [{"data": [[0.0, 16.0], [0.1, 43.0], [0.2, 45.0], [0.3, 48.0], [0.4, 49.0], [0.5, 51.0], [0.6, 52.0], [0.7, 53.0], [0.8, 54.0], [0.9, 55.0], [1.0, 56.0], [1.1, 57.0], [1.2, 58.0], [1.3, 59.0], [1.4, 60.0], [1.5, 61.0], [1.6, 61.0], [1.7, 62.0], [1.8, 63.0], [1.9, 63.0], [2.0, 64.0], [2.1, 65.0], [2.2, 65.0], [2.3, 66.0], [2.4, 66.0], [2.5, 67.0], [2.6, 68.0], [2.7, 68.0], [2.8, 69.0], [2.9, 69.0], [3.0, 70.0], [3.1, 70.0], [3.2, 71.0], [3.3, 71.0], [3.4, 72.0], [3.5, 72.0], [3.6, 73.0], [3.7, 73.0], [3.8, 74.0], [3.9, 74.0], [4.0, 75.0], [4.1, 75.0], [4.2, 75.0], [4.3, 76.0], [4.4, 76.0], [4.5, 77.0], [4.6, 77.0], [4.7, 78.0], [4.8, 78.0], [4.9, 78.0], [5.0, 79.0], [5.1, 79.0], [5.2, 80.0], [5.3, 80.0], [5.4, 81.0], [5.5, 81.0], [5.6, 81.0], [5.7, 82.0], [5.8, 82.0], [5.9, 83.0], [6.0, 83.0], [6.1, 83.0], [6.2, 84.0], [6.3, 84.0], [6.4, 85.0], [6.5, 85.0], [6.6, 85.0], [6.7, 86.0], [6.8, 86.0], [6.9, 86.0], [7.0, 87.0], [7.1, 87.0], [7.2, 88.0], [7.3, 88.0], [7.4, 88.0], [7.5, 89.0], [7.6, 89.0], [7.7, 90.0], [7.8, 90.0], [7.9, 90.0], [8.0, 91.0], [8.1, 91.0], [8.2, 91.0], [8.3, 92.0], [8.4, 92.0], [8.5, 93.0], [8.6, 93.0], [8.7, 93.0], [8.8, 94.0], [8.9, 94.0], [9.0, 94.0], [9.1, 95.0], [9.2, 95.0], [9.3, 96.0], [9.4, 96.0], [9.5, 96.0], [9.6, 97.0], [9.7, 97.0], [9.8, 97.0], [9.9, 98.0], [10.0, 98.0], [10.1, 99.0], [10.2, 99.0], [10.3, 99.0], [10.4, 100.0], [10.5, 100.0], [10.6, 100.0], [10.7, 101.0], [10.8, 101.0], [10.9, 102.0], [11.0, 102.0], [11.1, 102.0], [11.2, 103.0], [11.3, 103.0], [11.4, 104.0], [11.5, 104.0], [11.6, 104.0], [11.7, 105.0], [11.8, 105.0], [11.9, 105.0], [12.0, 106.0], [12.1, 106.0], [12.2, 106.0], [12.3, 107.0], [12.4, 107.0], [12.5, 108.0], [12.6, 108.0], [12.7, 108.0], [12.8, 109.0], [12.9, 109.0], [13.0, 109.0], [13.1, 110.0], [13.2, 110.0], [13.3, 110.0], [13.4, 111.0], [13.5, 111.0], [13.6, 112.0], [13.7, 112.0], [13.8, 112.0], [13.9, 113.0], [14.0, 113.0], [14.1, 114.0], [14.2, 114.0], [14.3, 114.0], [14.4, 115.0], [14.5, 115.0], [14.6, 115.0], [14.7, 116.0], [14.8, 116.0], [14.9, 117.0], [15.0, 117.0], [15.1, 117.0], [15.2, 118.0], [15.3, 118.0], [15.4, 118.0], [15.5, 119.0], [15.6, 119.0], [15.7, 120.0], [15.8, 120.0], [15.9, 120.0], [16.0, 121.0], [16.1, 121.0], [16.2, 122.0], [16.3, 122.0], [16.4, 122.0], [16.5, 123.0], [16.6, 123.0], [16.7, 124.0], [16.8, 124.0], [16.9, 124.0], [17.0, 125.0], [17.1, 125.0], [17.2, 126.0], [17.3, 126.0], [17.4, 126.0], [17.5, 127.0], [17.6, 127.0], [17.7, 128.0], [17.8, 128.0], [17.9, 128.0], [18.0, 129.0], [18.1, 129.0], [18.2, 129.0], [18.3, 130.0], [18.4, 130.0], [18.5, 131.0], [18.6, 131.0], [18.7, 131.0], [18.8, 132.0], [18.9, 132.0], [19.0, 133.0], [19.1, 133.0], [19.2, 133.0], [19.3, 134.0], [19.4, 134.0], [19.5, 134.0], [19.6, 135.0], [19.7, 135.0], [19.8, 136.0], [19.9, 136.0], [20.0, 136.0], [20.1, 137.0], [20.2, 137.0], [20.3, 138.0], [20.4, 138.0], [20.5, 139.0], [20.6, 139.0], [20.7, 139.0], [20.8, 140.0], [20.9, 140.0], [21.0, 141.0], [21.1, 141.0], [21.2, 142.0], [21.3, 142.0], [21.4, 142.0], [21.5, 143.0], [21.6, 143.0], [21.7, 144.0], [21.8, 144.0], [21.9, 145.0], [22.0, 145.0], [22.1, 146.0], [22.2, 146.0], [22.3, 146.0], [22.4, 147.0], [22.5, 147.0], [22.6, 148.0], [22.7, 148.0], [22.8, 149.0], [22.9, 149.0], [23.0, 150.0], [23.1, 150.0], [23.2, 151.0], [23.3, 151.0], [23.4, 151.0], [23.5, 152.0], [23.6, 152.0], [23.7, 153.0], [23.8, 153.0], [23.9, 154.0], [24.0, 154.0], [24.1, 155.0], [24.2, 155.0], [24.3, 156.0], [24.4, 156.0], [24.5, 157.0], [24.6, 157.0], [24.7, 158.0], [24.8, 158.0], [24.9, 159.0], [25.0, 159.0], [25.1, 160.0], [25.2, 161.0], [25.3, 161.0], [25.4, 162.0], [25.5, 162.0], [25.6, 163.0], [25.7, 163.0], [25.8, 164.0], [25.9, 164.0], [26.0, 165.0], [26.1, 165.0], [26.2, 166.0], [26.3, 166.0], [26.4, 167.0], [26.5, 167.0], [26.6, 168.0], [26.7, 169.0], [26.8, 169.0], [26.9, 170.0], [27.0, 170.0], [27.1, 171.0], [27.2, 171.0], [27.3, 172.0], [27.4, 172.0], [27.5, 173.0], [27.6, 174.0], [27.7, 174.0], [27.8, 175.0], [27.9, 176.0], [28.0, 176.0], [28.1, 177.0], [28.2, 177.0], [28.3, 178.0], [28.4, 178.0], [28.5, 179.0], [28.6, 180.0], [28.7, 180.0], [28.8, 181.0], [28.9, 181.0], [29.0, 182.0], [29.1, 183.0], [29.2, 183.0], [29.3, 184.0], [29.4, 184.0], [29.5, 185.0], [29.6, 186.0], [29.7, 186.0], [29.8, 187.0], [29.9, 188.0], [30.0, 188.0], [30.1, 189.0], [30.2, 190.0], [30.3, 190.0], [30.4, 191.0], [30.5, 191.0], [30.6, 192.0], [30.7, 193.0], [30.8, 193.0], [30.9, 194.0], [31.0, 195.0], [31.1, 195.0], [31.2, 196.0], [31.3, 197.0], [31.4, 198.0], [31.5, 198.0], [31.6, 199.0], [31.7, 200.0], [31.8, 201.0], [31.9, 201.0], [32.0, 202.0], [32.1, 203.0], [32.2, 204.0], [32.3, 204.0], [32.4, 205.0], [32.5, 206.0], [32.6, 207.0], [32.7, 208.0], [32.8, 208.0], [32.9, 209.0], [33.0, 210.0], [33.1, 211.0], [33.2, 212.0], [33.3, 213.0], [33.4, 213.0], [33.5, 214.0], [33.6, 215.0], [33.7, 216.0], [33.8, 217.0], [33.9, 218.0], [34.0, 219.0], [34.1, 220.0], [34.2, 221.0], [34.3, 222.0], [34.4, 222.0], [34.5, 223.0], [34.6, 224.0], [34.7, 225.0], [34.8, 226.0], [34.9, 227.0], [35.0, 228.0], [35.1, 229.0], [35.2, 230.0], [35.3, 231.0], [35.4, 232.0], [35.5, 233.0], [35.6, 234.0], [35.7, 235.0], [35.8, 237.0], [35.9, 238.0], [36.0, 239.0], [36.1, 240.0], [36.2, 241.0], [36.3, 242.0], [36.4, 244.0], [36.5, 245.0], [36.6, 246.0], [36.7, 247.0], [36.8, 248.0], [36.9, 249.0], [37.0, 251.0], [37.1, 252.0], [37.2, 253.0], [37.3, 254.0], [37.4, 256.0], [37.5, 257.0], [37.6, 259.0], [37.7, 260.0], [37.8, 261.0], [37.9, 263.0], [38.0, 264.0], [38.1, 265.0], [38.2, 267.0], [38.3, 268.0], [38.4, 269.0], [38.5, 271.0], [38.6, 272.0], [38.7, 274.0], [38.8, 276.0], [38.9, 277.0], [39.0, 279.0], [39.1, 280.0], [39.2, 282.0], [39.3, 284.0], [39.4, 285.0], [39.5, 287.0], [39.6, 289.0], [39.7, 290.0], [39.8, 292.0], [39.9, 294.0], [40.0, 296.0], [40.1, 298.0], [40.2, 300.0], [40.3, 301.0], [40.4, 303.0], [40.5, 305.0], [40.6, 307.0], [40.7, 309.0], [40.8, 311.0], [40.9, 313.0], [41.0, 315.0], [41.1, 318.0], [41.2, 320.0], [41.3, 322.0], [41.4, 324.0], [41.5, 326.0], [41.6, 329.0], [41.7, 332.0], [41.8, 334.0], [41.9, 336.0], [42.0, 338.0], [42.1, 341.0], [42.2, 343.0], [42.3, 346.0], [42.4, 348.0], [42.5, 351.0], [42.6, 353.0], [42.7, 356.0], [42.8, 359.0], [42.9, 361.0], [43.0, 364.0], [43.1, 367.0], [43.2, 370.0], [43.3, 373.0], [43.4, 376.0], [43.5, 379.0], [43.6, 381.0], [43.7, 384.0], [43.8, 387.0], [43.9, 390.0], [44.0, 393.0], [44.1, 396.0], [44.2, 399.0], [44.3, 402.0], [44.4, 405.0], [44.5, 408.0], [44.6, 411.0], [44.7, 413.0], [44.8, 416.0], [44.9, 419.0], [45.0, 422.0], [45.1, 425.0], [45.2, 428.0], [45.3, 430.0], [45.4, 433.0], [45.5, 436.0], [45.6, 438.0], [45.7, 442.0], [45.8, 445.0], [45.9, 447.0], [46.0, 451.0], [46.1, 454.0], [46.2, 457.0], [46.3, 459.0], [46.4, 462.0], [46.5, 465.0], [46.6, 468.0], [46.7, 471.0], [46.8, 474.0], [46.9, 477.0], [47.0, 479.0], [47.1, 482.0], [47.2, 485.0], [47.3, 488.0], [47.4, 490.0], [47.5, 493.0], [47.6, 496.0], [47.7, 499.0], [47.8, 502.0], [47.9, 504.0], [48.0, 507.0], [48.1, 510.0], [48.2, 513.0], [48.3, 515.0], [48.4, 518.0], [48.5, 521.0], [48.6, 524.0], [48.7, 526.0], [48.8, 529.0], [48.9, 531.0], [49.0, 533.0], [49.1, 536.0], [49.2, 538.0], [49.3, 541.0], [49.4, 543.0], [49.5, 545.0], [49.6, 548.0], [49.7, 550.0], [49.8, 553.0], [49.9, 555.0], [50.0, 558.0], [50.1, 561.0], [50.2, 563.0], [50.3, 565.0], [50.4, 568.0], [50.5, 570.0], [50.6, 573.0], [50.7, 575.0], [50.8, 577.0], [50.9, 580.0], [51.0, 582.0], [51.1, 585.0], [51.2, 587.0], [51.3, 589.0], [51.4, 592.0], [51.5, 594.0], [51.6, 596.0], [51.7, 598.0], [51.8, 600.0], [51.9, 602.0], [52.0, 605.0], [52.1, 607.0], [52.2, 610.0], [52.3, 612.0], [52.4, 614.0], [52.5, 616.0], [52.6, 619.0], [52.7, 621.0], [52.8, 623.0], [52.9, 625.0], [53.0, 628.0], [53.1, 630.0], [53.2, 632.0], [53.3, 634.0], [53.4, 636.0], [53.5, 638.0], [53.6, 641.0], [53.7, 643.0], [53.8, 645.0], [53.9, 647.0], [54.0, 650.0], [54.1, 652.0], [54.2, 654.0], [54.3, 656.0], [54.4, 658.0], [54.5, 660.0], [54.6, 663.0], [54.7, 665.0], [54.8, 667.0], [54.9, 669.0], [55.0, 671.0], [55.1, 674.0], [55.2, 676.0], [55.3, 678.0], [55.4, 680.0], [55.5, 682.0], [55.6, 684.0], [55.7, 686.0], [55.8, 689.0], [55.9, 690.0], [56.0, 693.0], [56.1, 695.0], [56.2, 697.0], [56.3, 699.0], [56.4, 701.0], [56.5, 703.0], [56.6, 705.0], [56.7, 707.0], [56.8, 709.0], [56.9, 711.0], [57.0, 713.0], [57.1, 715.0], [57.2, 717.0], [57.3, 719.0], [57.4, 721.0], [57.5, 723.0], [57.6, 725.0], [57.7, 727.0], [57.8, 729.0], [57.9, 731.0], [58.0, 733.0], [58.1, 735.0], [58.2, 737.0], [58.3, 738.0], [58.4, 740.0], [58.5, 742.0], [58.6, 744.0], [58.7, 746.0], [58.8, 748.0], [58.9, 751.0], [59.0, 753.0], [59.1, 755.0], [59.2, 757.0], [59.3, 759.0], [59.4, 761.0], [59.5, 763.0], [59.6, 765.0], [59.7, 767.0], [59.8, 769.0], [59.9, 771.0], [60.0, 773.0], [60.1, 775.0], [60.2, 777.0], [60.3, 779.0], [60.4, 782.0], [60.5, 783.0], [60.6, 786.0], [60.7, 788.0], [60.8, 790.0], [60.9, 792.0], [61.0, 794.0], [61.1, 797.0], [61.2, 799.0], [61.3, 800.0], [61.4, 802.0], [61.5, 805.0], [61.6, 806.0], [61.7, 809.0], [61.8, 810.0], [61.9, 812.0], [62.0, 814.0], [62.1, 816.0], [62.2, 818.0], [62.3, 820.0], [62.4, 822.0], [62.5, 825.0], [62.6, 827.0], [62.7, 829.0], [62.8, 831.0], [62.9, 833.0], [63.0, 835.0], [63.1, 837.0], [63.2, 839.0], [63.3, 841.0], [63.4, 843.0], [63.5, 845.0], [63.6, 847.0], [63.7, 849.0], [63.8, 851.0], [63.9, 853.0], [64.0, 855.0], [64.1, 857.0], [64.2, 859.0], [64.3, 861.0], [64.4, 863.0], [64.5, 864.0], [64.6, 867.0], [64.7, 869.0], [64.8, 871.0], [64.9, 873.0], [65.0, 875.0], [65.1, 877.0], [65.2, 879.0], [65.3, 881.0], [65.4, 883.0], [65.5, 885.0], [65.6, 887.0], [65.7, 889.0], [65.8, 891.0], [65.9, 893.0], [66.0, 895.0], [66.1, 897.0], [66.2, 900.0], [66.3, 902.0], [66.4, 904.0], [66.5, 906.0], [66.6, 908.0], [66.7, 910.0], [66.8, 912.0], [66.9, 914.0], [67.0, 916.0], [67.1, 918.0], [67.2, 920.0], [67.3, 922.0], [67.4, 924.0], [67.5, 926.0], [67.6, 929.0], [67.7, 930.0], [67.8, 932.0], [67.9, 934.0], [68.0, 936.0], [68.1, 938.0], [68.2, 940.0], [68.3, 942.0], [68.4, 944.0], [68.5, 946.0], [68.6, 948.0], [68.7, 950.0], [68.8, 952.0], [68.9, 954.0], [69.0, 956.0], [69.1, 958.0], [69.2, 960.0], [69.3, 962.0], [69.4, 964.0], [69.5, 966.0], [69.6, 969.0], [69.7, 971.0], [69.8, 973.0], [69.9, 975.0], [70.0, 977.0], [70.1, 979.0], [70.2, 981.0], [70.3, 983.0], [70.4, 985.0], [70.5, 988.0], [70.6, 990.0], [70.7, 992.0], [70.8, 995.0], [70.9, 997.0], [71.0, 999.0], [71.1, 1001.0], [71.2, 1003.0], [71.3, 1005.0], [71.4, 1007.0], [71.5, 1009.0], [71.6, 1011.0], [71.7, 1013.0], [71.8, 1016.0], [71.9, 1018.0], [72.0, 1020.0], [72.1, 1022.0], [72.2, 1024.0], [72.3, 1026.0], [72.4, 1028.0], [72.5, 1031.0], [72.6, 1033.0], [72.7, 1035.0], [72.8, 1037.0], [72.9, 1040.0], [73.0, 1042.0], [73.1, 1044.0], [73.2, 1046.0], [73.3, 1048.0], [73.4, 1050.0], [73.5, 1052.0], [73.6, 1054.0], [73.7, 1056.0], [73.8, 1059.0], [73.9, 1061.0], [74.0, 1063.0], [74.1, 1065.0], [74.2, 1067.0], [74.3, 1069.0], [74.4, 1072.0], [74.5, 1074.0], [74.6, 1077.0], [74.7, 1079.0], [74.8, 1081.0], [74.9, 1084.0], [75.0, 1086.0], [75.1, 1088.0], [75.2, 1090.0], [75.3, 1092.0], [75.4, 1095.0], [75.5, 1097.0], [75.6, 1100.0], [75.7, 1102.0], [75.8, 1104.0], [75.9, 1107.0], [76.0, 1109.0], [76.1, 1112.0], [76.2, 1114.0], [76.3, 1116.0], [76.4, 1119.0], [76.5, 1121.0], [76.6, 1124.0], [76.7, 1126.0], [76.8, 1128.0], [76.9, 1130.0], [77.0, 1133.0], [77.1, 1135.0], [77.2, 1138.0], [77.3, 1141.0], [77.4, 1143.0], [77.5, 1145.0], [77.6, 1148.0], [77.7, 1150.0], [77.8, 1152.0], [77.9, 1155.0], [78.0, 1158.0], [78.1, 1160.0], [78.2, 1162.0], [78.3, 1165.0], [78.4, 1167.0], [78.5, 1170.0], [78.6, 1172.0], [78.7, 1175.0], [78.8, 1178.0], [78.9, 1181.0], [79.0, 1184.0], [79.1, 1187.0], [79.2, 1190.0], [79.3, 1192.0], [79.4, 1195.0], [79.5, 1197.0], [79.6, 1200.0], [79.7, 1203.0], [79.8, 1206.0], [79.9, 1208.0], [80.0, 1211.0], [80.1, 1214.0], [80.2, 1217.0], [80.3, 1219.0], [80.4, 1222.0], [80.5, 1226.0], [80.6, 1228.0], [80.7, 1230.0], [80.8, 1234.0], [80.9, 1236.0], [81.0, 1239.0], [81.1, 1242.0], [81.2, 1245.0], [81.3, 1248.0], [81.4, 1250.0], [81.5, 1253.0], [81.6, 1256.0], [81.7, 1259.0], [81.8, 1262.0], [81.9, 1265.0], [82.0, 1268.0], [82.1, 1271.0], [82.2, 1274.0], [82.3, 1277.0], [82.4, 1280.0], [82.5, 1283.0], [82.6, 1286.0], [82.7, 1289.0], [82.8, 1292.0], [82.9, 1295.0], [83.0, 1298.0], [83.1, 1301.0], [83.2, 1304.0], [83.3, 1307.0], [83.4, 1310.0], [83.5, 1313.0], [83.6, 1315.0], [83.7, 1319.0], [83.8, 1322.0], [83.9, 1325.0], [84.0, 1329.0], [84.1, 1332.0], [84.2, 1336.0], [84.3, 1339.0], [84.4, 1341.0], [84.5, 1345.0], [84.6, 1348.0], [84.7, 1351.0], [84.8, 1354.0], [84.9, 1358.0], [85.0, 1361.0], [85.1, 1365.0], [85.2, 1368.0], [85.3, 1372.0], [85.4, 1375.0], [85.5, 1378.0], [85.6, 1381.0], [85.7, 1385.0], [85.8, 1388.0], [85.9, 1392.0], [86.0, 1396.0], [86.1, 1400.0], [86.2, 1403.0], [86.3, 1407.0], [86.4, 1412.0], [86.5, 1415.0], [86.6, 1419.0], [86.7, 1423.0], [86.8, 1427.0], [86.9, 1430.0], [87.0, 1434.0], [87.1, 1438.0], [87.2, 1441.0], [87.3, 1444.0], [87.4, 1448.0], [87.5, 1452.0], [87.6, 1456.0], [87.7, 1460.0], [87.8, 1464.0], [87.9, 1468.0], [88.0, 1472.0], [88.1, 1476.0], [88.2, 1480.0], [88.3, 1484.0], [88.4, 1488.0], [88.5, 1492.0], [88.6, 1497.0], [88.7, 1500.0], [88.8, 1505.0], [88.9, 1509.0], [89.0, 1514.0], [89.1, 1518.0], [89.2, 1522.0], [89.3, 1527.0], [89.4, 1531.0], [89.5, 1536.0], [89.6, 1541.0], [89.7, 1545.0], [89.8, 1550.0], [89.9, 1554.0], [90.0, 1558.0], [90.1, 1562.0], [90.2, 1567.0], [90.3, 1572.0], [90.4, 1577.0], [90.5, 1583.0], [90.6, 1588.0], [90.7, 1593.0], [90.8, 1598.0], [90.9, 1603.0], [91.0, 1608.0], [91.1, 1614.0], [91.2, 1619.0], [91.3, 1624.0], [91.4, 1629.0], [91.5, 1634.0], [91.6, 1639.0], [91.7, 1644.0], [91.8, 1650.0], [91.9, 1655.0], [92.0, 1661.0], [92.1, 1667.0], [92.2, 1673.0], [92.3, 1678.0], [92.4, 1684.0], [92.5, 1691.0], [92.6, 1696.0], [92.7, 1701.0], [92.8, 1708.0], [92.9, 1714.0], [93.0, 1720.0], [93.1, 1727.0], [93.2, 1733.0], [93.3, 1740.0], [93.4, 1747.0], [93.5, 1754.0], [93.6, 1760.0], [93.7, 1767.0], [93.8, 1774.0], [93.9, 1780.0], [94.0, 1787.0], [94.1, 1795.0], [94.2, 1802.0], [94.3, 1810.0], [94.4, 1818.0], [94.5, 1826.0], [94.6, 1833.0], [94.7, 1841.0], [94.8, 1851.0], [94.9, 1859.0], [95.0, 1868.0], [95.1, 1878.0], [95.2, 1886.0], [95.3, 1896.0], [95.4, 1905.0], [95.5, 1916.0], [95.6, 1925.0], [95.7, 1935.0], [95.8, 1945.0], [95.9, 1957.0], [96.0, 1966.0], [96.1, 1977.0], [96.2, 1988.0], [96.3, 1999.0], [96.4, 2009.0], [96.5, 2021.0], [96.6, 2033.0], [96.7, 2045.0], [96.8, 2057.0], [96.9, 2068.0], [97.0, 2081.0], [97.1, 2092.0], [97.2, 2107.0], [97.3, 2121.0], [97.4, 2135.0], [97.5, 2150.0], [97.6, 2168.0], [97.7, 2183.0], [97.8, 2199.0], [97.9, 2216.0], [98.0, 2234.0], [98.1, 2251.0], [98.2, 2272.0], [98.3, 2295.0], [98.4, 2317.0], [98.5, 2342.0], [98.6, 2364.0], [98.7, 2395.0], [98.8, 2419.0], [98.9, 2452.0], [99.0, 2484.0], [99.1, 2517.0], [99.2, 2557.0], [99.3, 2600.0], [99.4, 2653.0], [99.5, 2709.0], [99.6, 2778.0], [99.7, 2881.0], [99.8, 3007.0], [99.9, 3174.0], [100.0, 4170.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 24949.0, "series": [{"data": [[0.0, 12125.0], [600.0, 5350.0], [700.0, 5762.0], [800.0, 5797.0], [900.0, 5674.0], [1000.0, 5333.0], [1100.0, 4688.0], [1200.0, 4061.0], [1300.0, 3555.0], [1400.0, 3042.0], [1500.0, 2519.0], [100.0, 24949.0], [1600.0, 2150.0], [1700.0, 1760.0], [1800.0, 1385.0], [1900.0, 1129.0], [2000.0, 984.0], [2100.0, 765.0], [2200.0, 607.0], [2300.0, 474.0], [2400.0, 381.0], [2500.0, 295.0], [2600.0, 209.0], [2800.0, 100.0], [2700.0, 174.0], [2900.0, 97.0], [3000.0, 92.0], [3100.0, 43.0], [200.0, 10021.0], [3300.0, 21.0], [3200.0, 37.0], [3400.0, 19.0], [3500.0, 12.0], [3600.0, 6.0], [3700.0, 3.0], [3800.0, 4.0], [3900.0, 2.0], [4100.0, 2.0], [300.0, 4726.0], [400.0, 4107.0], [500.0, 4740.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 13241.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 55969.0, "series": [{"data": [[0.0, 55969.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 47990.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 13241.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72857204E12, "maxY": 16.0, "series": [{"data": [[1.72857804E12, 12.0], [1.72857672E12, 12.0], [1.72857774E12, 12.0], [1.72857864E12, 7.266462480857579], [1.72857834E12, 12.0], [1.72857702E12, 12.0], [1.72857792E12, 12.0], [1.72857732E12, 12.0], [1.72857762E12, 12.0], [1.72857756E12, 12.0], [1.72857726E12, 12.0], [1.72857816E12, 12.0], [1.72857786E12, 12.0], [1.72857714E12, 12.0], [1.72857744E12, 12.0], [1.72857846E12, 12.0], [1.72857654E12, 12.0], [1.72857684E12, 12.0], [1.72857738E12, 12.0], [1.7285787E12, 1.8437499999999998], [1.72857678E12, 12.0], [1.72857768E12, 12.0], [1.72857708E12, 12.0], [1.72857666E12, 12.0], [1.72857828E12, 12.0], [1.72857696E12, 12.0], [1.72857798E12, 12.0], [1.72857858E12, 11.93326488706366], [1.7285769E12, 12.0], [1.72857852E12, 12.0], [1.7285772E12, 12.0], [1.72857822E12, 12.0], [1.7285766E12, 12.0], [1.7285778E12, 12.0], [1.72857648E12, 11.946952595936777], [1.7285775E12, 12.0], [1.7285784E12, 12.0], [1.7285781E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72857222E12, 2.0], [1.72857204E12, 2.0], [1.72857216E12, 2.0], [1.72857228E12, 1.8587570621468925], [1.7285721E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.7285727E12, 4.0], [1.728573E12, 4.0], [1.7285733E12, 4.0], [1.7285742E12, 1.0], [1.7285739E12, 4.0], [1.72857408E12, 4.0], [1.72857378E12, 4.0], [1.72857348E12, 4.0], [1.7285724E12, 4.0], [1.72857318E12, 4.0], [1.72857402E12, 4.0], [1.72857372E12, 4.0], [1.72857342E12, 4.0], [1.7285736E12, 4.0], [1.72857228E12, 3.994082840236689], [1.72857258E12, 4.0], [1.72857288E12, 4.0], [1.72857384E12, 4.0], [1.72857354E12, 4.0], [1.72857234E12, 4.0], [1.72857264E12, 4.0], [1.72857246E12, 4.0], [1.72857276E12, 4.0], [1.72857306E12, 4.0], [1.72857414E12, 3.698375870069608], [1.72857336E12, 4.0], [1.72857252E12, 4.0], [1.72857282E12, 4.0], [1.72857312E12, 4.0], [1.72857294E12, 4.0], [1.72857324E12, 4.0], [1.72857396E12, 4.0], [1.72857366E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72857966E12, 16.0], [1.72857996E12, 16.0], [1.72858026E12, 16.0], [1.72858056E12, 8.564254062038398], [1.72857924E12, 16.0], [1.72857894E12, 16.0], [1.72857954E12, 16.0], [1.72857984E12, 16.0], [1.72857948E12, 16.0], [1.72857918E12, 16.0], [1.72857978E12, 16.0], [1.72858008E12, 16.0], [1.72857876E12, 16.0], [1.72858038E12, 16.0], [1.72857936E12, 16.0], [1.72857906E12, 16.0], [1.728579E12, 16.0], [1.72858062E12, 1.0434782608695654], [1.7285787E12, 15.936868686868683], [1.7285796E12, 16.0], [1.7285793E12, 16.0], [1.7285799E12, 16.0], [1.7285802E12, 16.0], [1.72857888E12, 16.0], [1.7285805E12, 15.353107344632756], [1.72858014E12, 16.0], [1.72858044E12, 16.0], [1.72857912E12, 16.0], [1.72857882E12, 16.0], [1.72857942E12, 16.0], [1.72857972E12, 16.0], [1.72858002E12, 16.0], [1.72858032E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.7285748E12, 8.0], [1.72857642E12, 5.169686985172986], [1.7285745E12, 8.0], [1.7285742E12, 7.974452554744521], [1.72857582E12, 8.0], [1.72857612E12, 8.0], [1.7285757E12, 8.0], [1.728576E12, 8.0], [1.7285754E12, 8.0], [1.7285751E12, 8.0], [1.72857432E12, 8.0], [1.72857594E12, 8.0], [1.72857624E12, 8.0], [1.72857534E12, 8.0], [1.72857564E12, 8.0], [1.72857522E12, 8.0], [1.72857552E12, 8.0], [1.72857492E12, 8.0], [1.72857462E12, 8.0], [1.72857546E12, 8.0], [1.72857576E12, 8.0], [1.72857516E12, 8.0], [1.72857486E12, 8.0], [1.72857504E12, 8.0], [1.72857474E12, 8.0], [1.72857444E12, 8.0], [1.72857606E12, 8.0], [1.72857636E12, 7.859543817527018], [1.72857528E12, 8.0], [1.72857498E12, 8.0], [1.72857468E12, 8.0], [1.7285763E12, 8.0], [1.72857438E12, 8.0], [1.72857456E12, 8.0], [1.72857618E12, 8.0], [1.72857426E12, 8.0], [1.72857648E12, 1.6818181818181814], [1.72857558E12, 8.0], [1.72857588E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72858062E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 445.27074235807885, "minX": 1.0, "maxY": 943.3413753064084, "series": [{"data": [[2.0, 445.27074235807885], [8.0, 555.4501035856578], [9.0, 584.0209790209792], [10.0, 597.8651685393257], [11.0, 692.6128133704732], [3.0, 452.0334928229667], [12.0, 731.8616669959664], [13.0, 823.4444444444445], [14.0, 708.1871345029238], [15.0, 878.6470588235295], [1.0, 483.12500000000006], [4.0, 468.7176065162927], [16.0, 943.3413753064084], [5.0, 474.8181818181818], [6.0, 532.6507177033491], [7.0, 496.02666666666636]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.700025597269821, 698.4334044368501]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72857204E12, "maxY": 5.33951263E7, "series": [{"data": [[1.7285748E12, 4.17499063E7], [1.72857804E12, 4.857376113333333E7], [1.72857582E12, 4.4028301516666666E7], [1.72858026E12, 5.118336536666667E7], [1.72857924E12, 5.125944068333333E7], [1.72857378E12, 2.6627744616666667E7], [1.728576E12, 4.4328186083333336E7], [1.72857702E12, 5.0943297766666666E7], [1.7285724E12, 2.640972595E7], [1.72857342E12, 2.7356347783333335E7], [1.72857564E12, 4.44937111E7], [1.72857786E12, 4.8973316666666664E7], [1.72858008E12, 5.128284725E7], [1.7285736E12, 2.549158165E7], [1.72857258E12, 2.7008684616666667E7], [1.72857462E12, 4.567303586666667E7], [1.72857684E12, 5.104437625E7], [1.72857906E12, 5.139556156666667E7], [1.72857546E12, 4.417846963333333E7], [1.7285787E12, 4.0169090516666666E7], [1.72857204E12, 1.1217811333333334E7], [1.72857768E12, 4.905064285E7], [1.72857666E12, 4.9702943016666666E7], [1.7285799E12, 5.2402622333333336E7], [1.72857306E12, 2.6221221116666667E7], [1.72857444E12, 4.4227690766666666E7], [1.72857888E12, 5.166078611666667E7], [1.72857528E12, 4.323360431666667E7], [1.72857222E12, 1.36001211E7], [1.72857852E12, 4.890219745E7], [1.7285763E12, 4.426804036666667E7], [1.72857324E12, 2.49617166E7], [1.72857426E12, 4.43632068E7], [1.72857648E12, 4.4231129766666666E7], [1.72857972E12, 5.111433865E7], [1.7285775E12, 4.882972395E7], [1.7285727E12, 2.63727496E7], [1.7285739E12, 2.5006439466666665E7], [1.72857612E12, 4.219730556666667E7], [1.72857834E12, 4.986461888333333E7], [1.72858056E12, 3.2892370483333334E7], [1.72857408E12, 2.433039385E7], [1.7285751E12, 4.4097684583333336E7], [1.72857732E12, 5.1127819916666664E7], [1.72857954E12, 5.182816906666667E7], [1.72857594E12, 4.538665605E7], [1.72857918E12, 5.250781105E7], [1.72857372E12, 2.66352197E7], [1.72857816E12, 5.027280688333333E7], [1.72857714E12, 4.959136275E7], [1.72858038E12, 5.1984352333333336E7], [1.72857492E12, 4.180319838333333E7], [1.72857936E12, 5.24862775E7], [1.72857288E12, 2.5736515483333334E7], [1.728579E12, 5.229385211666667E7], [1.72857354E12, 2.5750089633333333E7], [1.72857576E12, 4.224601613333333E7], [1.72857234E12, 2.530701105E7], [1.72857678E12, 5.05357686E7], [1.72857474E12, 4.2332598516666666E7], [1.72857696E12, 5.007362375E7], [1.72857798E12, 4.8561144166666664E7], [1.7285802E12, 5.2696394833333336E7], [1.72857336E12, 2.59475693E7], [1.72857252E12, 2.561688585E7], [1.7285766E12, 4.937133981666667E7], [1.72857882E12, 5.2735737233333334E7], [1.72857438E12, 4.5778217766666666E7], [1.72857456E12, 4.29456308E7], [1.7285778E12, 4.962966386666667E7], [1.72857558E12, 4.417143525E7], [1.72858002E12, 5.197596438333333E7], [1.72857642E12, 3.0795456516666666E7], [1.72857966E12, 5.115165353333333E7], [1.728573E12, 2.5703257183333334E7], [1.72857864E12, 3.444261636666667E7], [1.7285742E12, 1.8234385766666666E7], [1.7285754E12, 4.289966103333333E7], [1.72857762E12, 4.9916387583333336E7], [1.72857984E12, 5.1645614083333336E7], [1.72857318E12, 2.6610580916666668E7], [1.72857948E12, 5.196131478333333E7], [1.72857402E12, 2.6786895466666665E7], [1.72857624E12, 4.498609671666667E7], [1.72857726E12, 4.99110094E7], [1.72857216E12, 1.3344306866666667E7], [1.72857522E12, 4.515061888333333E7], [1.72857744E12, 4.889831605E7], [1.72857846E12, 4.983120763333333E7], [1.72857384E12, 2.7162694716666665E7], [1.72857264E12, 2.6701429816666666E7], [1.72857486E12, 4.51688218E7], [1.72857708E12, 4.8031937166666664E7], [1.7285793E12, 5.1820384333333336E7], [1.72857246E12, 2.6516977683333334E7], [1.72857504E12, 4.380395595E7], [1.72857828E12, 5.03278878E7], [1.72857606E12, 4.45390564E7], [1.7285805E12, 5.168091765E7], [1.7285769E12, 5.0269838516666666E7], [1.72858014E12, 4.972999493333333E7], [1.72857282E12, 2.7604377083333332E7], [1.72857468E12, 4.30789898E7], [1.72857912E12, 5.2870394E7], [1.72857366E12, 2.7035607116666667E7], [1.72857588E12, 4.269632671666667E7], [1.7285781E12, 4.890561363333333E7], [1.72858032E12, 5.271459471666667E7], [1.7285745E12, 4.338431663333333E7], [1.72857672E12, 5.048489411666667E7], [1.72857774E12, 5.209556711666667E7], [1.72857996E12, 5.287972863333333E7], [1.7285733E12, 2.5209414066666666E7], [1.7285757E12, 4.383007146666667E7], [1.72857894E12, 5.117955378333333E7], [1.7285721E12, 1.4042566216666667E7], [1.72857348E12, 2.623169445E7], [1.72857792E12, 5.0975478016666666E7], [1.72857432E12, 4.1328313E7], [1.72857756E12, 4.97808634E7], [1.72857978E12, 5.33951263E7], [1.72857534E12, 4.5001936983333334E7], [1.72857876E12, 5.003332586666667E7], [1.72857228E12, 1.5657009516666668E7], [1.72857552E12, 4.1933386733333334E7], [1.72857654E12, 4.986563418333333E7], [1.72857738E12, 5.0241945483333334E7], [1.72858062E12, 1750131.5], [1.72857516E12, 4.168377996666667E7], [1.7285796E12, 5.155593605E7], [1.72857276E12, 2.5470202083333332E7], [1.72857414E12, 2.102482705E7], [1.72857636E12, 4.526657081666667E7], [1.72857858E12, 5.105567453333333E7], [1.72857498E12, 4.476719345E7], [1.7285772E12, 5.087661778333333E7], [1.72857822E12, 5.0140072E7], [1.72858044E12, 5.064248825E7], [1.72857312E12, 2.6753696683333334E7], [1.72857294E12, 2.6839598783333335E7], [1.72857618E12, 4.4948474166666664E7], [1.72857942E12, 5.21628218E7], [1.72857396E12, 2.57395801E7], [1.7285784E12, 4.9524413516666666E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7285748E12, 0.0], [1.72857804E12, 0.0], [1.72857582E12, 0.0], [1.72858026E12, 0.0], [1.72857924E12, 0.0], [1.72857378E12, 0.0], [1.728576E12, 0.0], [1.72857702E12, 0.0], [1.7285724E12, 0.0], [1.72857342E12, 0.0], [1.72857564E12, 0.0], [1.72857786E12, 0.0], [1.72858008E12, 0.0], [1.7285736E12, 0.0], [1.72857258E12, 0.0], [1.72857462E12, 0.0], [1.72857684E12, 0.0], [1.72857906E12, 0.0], [1.72857546E12, 0.0], [1.7285787E12, 0.0], [1.72857204E12, 0.0], [1.72857768E12, 0.0], [1.72857666E12, 0.0], [1.7285799E12, 0.0], [1.72857306E12, 0.0], [1.72857444E12, 0.0], [1.72857888E12, 0.0], [1.72857528E12, 0.0], [1.72857222E12, 0.0], [1.72857852E12, 0.0], [1.7285763E12, 0.0], [1.72857324E12, 0.0], [1.72857426E12, 0.0], [1.72857648E12, 0.0], [1.72857972E12, 0.0], [1.7285775E12, 0.0], [1.7285727E12, 0.0], [1.7285739E12, 0.0], [1.72857612E12, 0.0], [1.72857834E12, 0.0], [1.72858056E12, 0.0], [1.72857408E12, 0.0], [1.7285751E12, 0.0], [1.72857732E12, 0.0], [1.72857954E12, 0.0], [1.72857594E12, 0.0], [1.72857918E12, 0.0], [1.72857372E12, 0.0], [1.72857816E12, 0.0], [1.72857714E12, 0.0], [1.72858038E12, 0.0], [1.72857492E12, 0.0], [1.72857936E12, 0.0], [1.72857288E12, 0.0], [1.728579E12, 0.0], [1.72857354E12, 0.0], [1.72857576E12, 0.0], [1.72857234E12, 0.0], [1.72857678E12, 0.0], [1.72857474E12, 0.0], [1.72857696E12, 0.0], [1.72857798E12, 0.0], [1.7285802E12, 0.0], [1.72857336E12, 0.0], [1.72857252E12, 0.0], [1.7285766E12, 0.0], [1.72857882E12, 0.0], [1.72857438E12, 0.0], [1.72857456E12, 0.0], [1.7285778E12, 0.0], [1.72857558E12, 0.0], [1.72858002E12, 0.0], [1.72857642E12, 0.0], [1.72857966E12, 0.0], [1.728573E12, 0.0], [1.72857864E12, 0.0], [1.7285742E12, 0.0], [1.7285754E12, 0.0], [1.72857762E12, 0.0], [1.72857984E12, 0.0], [1.72857318E12, 0.0], [1.72857948E12, 0.0], [1.72857402E12, 0.0], [1.72857624E12, 0.0], [1.72857726E12, 0.0], [1.72857216E12, 0.0], [1.72857522E12, 0.0], [1.72857744E12, 0.0], [1.72857846E12, 0.0], [1.72857384E12, 0.0], [1.72857264E12, 0.0], [1.72857486E12, 0.0], [1.72857708E12, 0.0], [1.7285793E12, 0.0], [1.72857246E12, 0.0], [1.72857504E12, 0.0], [1.72857828E12, 0.0], [1.72857606E12, 0.0], [1.7285805E12, 0.0], [1.7285769E12, 0.0], [1.72858014E12, 0.0], [1.72857282E12, 0.0], [1.72857468E12, 0.0], [1.72857912E12, 0.0], [1.72857366E12, 0.0], [1.72857588E12, 0.0], [1.7285781E12, 0.0], [1.72858032E12, 0.0], [1.7285745E12, 0.0], [1.72857672E12, 0.0], [1.72857774E12, 0.0], [1.72857996E12, 0.0], [1.7285733E12, 0.0], [1.7285757E12, 0.0], [1.72857894E12, 0.0], [1.7285721E12, 0.0], [1.72857348E12, 0.0], [1.72857792E12, 0.0], [1.72857432E12, 0.0], [1.72857756E12, 0.0], [1.72857978E12, 0.0], [1.72857534E12, 0.0], [1.72857876E12, 0.0], [1.72857228E12, 0.0], [1.72857552E12, 0.0], [1.72857654E12, 0.0], [1.72857738E12, 0.0], [1.72858062E12, 0.0], [1.72857516E12, 0.0], [1.7285796E12, 0.0], [1.72857276E12, 0.0], [1.72857414E12, 0.0], [1.72857636E12, 0.0], [1.72857858E12, 0.0], [1.72857498E12, 0.0], [1.7285772E12, 0.0], [1.72857822E12, 0.0], [1.72858044E12, 0.0], [1.72857312E12, 0.0], [1.72857294E12, 0.0], [1.72857618E12, 0.0], [1.72857942E12, 0.0], [1.72857396E12, 0.0], [1.7285784E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72858062E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 425.72832369942194, "minX": 1.72857204E12, "maxY": 1024.129135538954, "series": [{"data": [[1.7285748E12, 536.4563758389266], [1.72857804E12, 703.6409001956944], [1.72857582E12, 555.2933643771825], [1.72858026E12, 934.5645792563608], [1.72857924E12, 932.6689320388344], [1.72857378E12, 490.0857142857142], [1.728576E12, 577.3125000000003], [1.72857702E12, 740.008213552361], [1.7285724E12, 466.9032882011608], [1.72857342E12, 482.6338028169014], [1.72857564E12, 561.4596491228068], [1.72857786E12, 746.2345041322316], [1.72858008E12, 911.64136622391], [1.7285736E12, 451.2716981132073], [1.72857258E12, 484.1257606490871], [1.72857462E12, 529.5876515986765], [1.72857684E12, 782.7456709956696], [1.72857906E12, 932.8844660194183], [1.72857546E12, 551.2793103448273], [1.7285787E12, 843.4953271028038], [1.72857204E12, 439.41013824884817], [1.72857768E12, 723.5319361277454], [1.72857666E12, 733.8302658486697], [1.7285799E12, 1024.129135538954], [1.72857306E12, 493.3755186721992], [1.72857444E12, 542.193220338983], [1.72857888E12, 919.4344497607658], [1.72857528E12, 572.4695340501795], [1.72857222E12, 482.20564516129025], [1.72857852E12, 750.8258602711155], [1.7285763E12, 563.1056338028172], [1.72857324E12, 442.7084870848709], [1.72857426E12, 572.2514898688913], [1.72857648E12, 699.387665198238], [1.72857972E12, 966.2880161127894], [1.7285775E12, 696.90356798457], [1.7285727E12, 456.5257142857144], [1.7285739E12, 447.41011235955085], [1.72857612E12, 559.8900584795318], [1.72857834E12, 706.6265884652985], [1.72858056E12, 602.7902511078294], [1.72857408E12, 444.40816326530626], [1.7285751E12, 529.5274725274732], [1.72857732E12, 710.9504950495054], [1.72857954E12, 910.4730368968774], [1.72857594E12, 557.6258741258742], [1.72857918E12, 957.389662027833], [1.72857372E12, 469.9058823529412], [1.72857816E12, 745.5638629283476], [1.72857714E12, 742.8577319587628], [1.72858038E12, 1013.7489451476795], [1.72857492E12, 571.8370986920332], [1.72857936E12, 940.1663405088069], [1.72857288E12, 499.6841004184096], [1.728579E12, 941.4228515624991], [1.72857354E12, 467.36062378167657], [1.72857576E12, 543.8563348416285], [1.72857234E12, 458.7745664739882], [1.72857678E12, 743.5082815734991], [1.72857474E12, 527.9162072767366], [1.72857696E12, 746.5968911917093], [1.72857798E12, 746.068393782384], [1.7285802E12, 942.2389813907939], [1.72857336E12, 471.9705304518665], [1.72857252E12, 508.4713375796178], [1.7285766E12, 713.8041338582684], [1.72857882E12, 945.9118811881192], [1.72857438E12, 550.0595647193587], [1.72857456E12, 569.1957295373659], [1.7285778E12, 721.8645937813445], [1.72857558E12, 557.2903600464573], [1.72858002E12, 985.0727459016397], [1.72857642E12, 479.96210873146595], [1.72857966E12, 921.6625119846603], [1.728573E12, 466.95164410058044], [1.72857864E12, 575.156202143951], [1.7285742E12, 530.5279329608941], [1.7285754E12, 577.5157004830911], [1.72857762E12, 747.7956431535267], [1.72857984E12, 942.0422396856578], [1.72857318E12, 459.91969407265793], [1.72857948E12, 967.9929149797557], [1.72857402E12, 445.24721189591094], [1.72857624E12, 551.5045662100456], [1.72857726E12, 732.1189024390239], [1.72857216E12, 435.3613138686132], [1.72857522E12, 559.1771561771566], [1.72857744E12, 752.1608832807574], [1.72857846E12, 754.229232386961], [1.72857384E12, 509.4968287526425], [1.72857264E12, 467.7087378640777], [1.72857486E12, 589.5575980392164], [1.72857708E12, 697.6530214424954], [1.7285793E12, 959.552104208416], [1.72857246E12, 455.4374999999997], [1.72857504E12, 561.2060889929741], [1.72857828E12, 734.7944501541622], [1.72857606E12, 555.1131639722863], [1.7285805E12, 882.2448210922781], [1.7285769E12, 745.250517598343], [1.72858014E12, 929.7444120505352], [1.72857282E12, 514.771367521368], [1.72857468E12, 571.3495838287764], [1.72857912E12, 973.3102040816319], [1.72857366E12, 444.538888888889], [1.72857588E12, 547.630681818181], [1.7285781E12, 739.3415132924339], [1.72858032E12, 921.8896353166979], [1.7285745E12, 554.6693735498835], [1.72857672E12, 762.183068783069], [1.72857774E12, 714.5444555444551], [1.72857996E12, 925.296724470134], [1.7285733E12, 449.9662288930581], [1.7285757E12, 536.3418994413406], [1.72857894E12, 885.3173431734318], [1.7285721E12, 426.61267605633805], [1.72857348E12, 454.20226843100215], [1.72857792E12, 694.5638297872342], [1.72857432E12, 547.9771689497719], [1.72857756E12, 723.6282828282837], [1.72857978E12, 968.8090909090909], [1.72857534E12, 566.8657243816264], [1.72857876E12, 943.472906403941], [1.72857228E12, 425.72832369942194], [1.72857552E12, 538.1973094170396], [1.72857654E12, 713.650398406374], [1.72857738E12, 770.8527214514403], [1.72858062E12, 647.0434782608695], [1.72857516E12, 542.1681715575623], [1.7285796E12, 926.9970986460349], [1.72857276E12, 487.30549898167004], [1.72857414E12, 452.99303944315517], [1.72857636E12, 566.6662665066021], [1.72857858E12, 738.1868583162212], [1.72857498E12, 559.29156908665], [1.7285772E12, 731.0800405268496], [1.72857822E12, 739.2663934426226], [1.72858044E12, 947.5530227948476], [1.72857312E12, 476.5366336633664], [1.72857294E12, 452.4264150943396], [1.72857618E12, 550.4856156501722], [1.72857942E12, 959.7567298105685], [1.72857396E12, 504.87002096436066], [1.7285784E12, 708.4719764011792]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72858062E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 278.45422535211236, "minX": 1.72857204E12, "maxY": 695.1120597652081, "series": [{"data": [[1.7285748E12, 363.0682326621929], [1.72857804E12, 479.5195694716242], [1.72857582E12, 376.293364377183], [1.72858026E12, 638.6917808219175], [1.72857924E12, 638.3436893203881], [1.72857378E12, 323.98163265306107], [1.728576E12, 385.6490384615389], [1.72857702E12, 499.95174537987674], [1.7285724E12, 311.34042553191455], [1.72857342E12, 318.6317907444664], [1.72857564E12, 374.7473684210528], [1.72857786E12, 507.01446280991746], [1.72858008E12, 617.3206831119546], [1.7285736E12, 301.7226415094339], [1.72857258E12, 319.42799188640987], [1.72857462E12, 352.27563395810324], [1.72857684E12, 528.5984848484849], [1.72857906E12, 631.705825242719], [1.72857546E12, 371.65862068965504], [1.7285787E12, 575.6039719626164], [1.72857204E12, 288.58525345622115], [1.72857768E12, 493.52095808383206], [1.72857666E12, 499.3578732106342], [1.7285799E12, 695.1120597652081], [1.72857306E12, 328.86721991701245], [1.72857444E12, 362.98305084745755], [1.72857888E12, 623.2593301435406], [1.72857528E12, 387.2580645161289], [1.72857222E12, 322.907258064516], [1.72857852E12, 512.7393117831076], [1.7285763E12, 381.3791079812207], [1.72857324E12, 296.84686346863447], [1.72857426E12, 387.470798569726], [1.72857648E12, 472.8337004405286], [1.72857972E12, 659.7089627391748], [1.7285775E12, 472.4763741562196], [1.7285727E12, 302.8019047619047], [1.7285739E12, 301.70411985018734], [1.72857612E12, 380.80818713450316], [1.72857834E12, 479.8846529814272], [1.72858056E12, 409.1728212703101], [1.72857408E12, 298.330241187384], [1.7285751E12, 358.00329670329666], [1.72857732E12, 479.5277227722776], [1.72857954E12, 618.8949858088931], [1.72857594E12, 372.5734265734266], [1.72857918E12, 649.5566600397616], [1.72857372E12, 310.38823529411775], [1.72857816E12, 505.31256490134956], [1.72857714E12, 506.1938144329897], [1.72858038E12, 685.2974683544303], [1.72857492E12, 389.14030915576694], [1.72857936E12, 640.5753424657531], [1.72857288E12, 332.70920502092025], [1.728579E12, 640.9990234374993], [1.72857354E12, 312.9454191033138], [1.72857576E12, 369.39366515837077], [1.72857234E12, 306.40462427745655], [1.72857678E12, 501.9875776397516], [1.72857474E12, 359.5733186328556], [1.72857696E12, 505.03626943005185], [1.72857798E12, 504.7502590673575], [1.7285802E12, 639.7081292850137], [1.72857336E12, 313.86836935167014], [1.72857252E12, 340.4755838641188], [1.7285766E12, 486.19783464566905], [1.72857882E12, 639.9613861386136], [1.72857438E12, 367.7697594501718], [1.72857456E12, 383.6085409252669], [1.7285778E12, 490.90170511534564], [1.72857558E12, 374.0882694541233], [1.72858002E12, 669.535860655737], [1.72857642E12, 320.0230642504118], [1.72857966E12, 627.3298178331738], [1.728573E12, 311.1431334622825], [1.72857864E12, 386.8254211332318], [1.7285742E12, 355.91061452513947], [1.7285754E12, 387.4239130434783], [1.72857762E12, 511.7686721991702], [1.72857984E12, 639.415520628683], [1.72857318E12, 302.7036328871892], [1.72857948E12, 652.1892712550615], [1.72857402E12, 292.52230483271336], [1.72857624E12, 368.9086757990867], [1.72857726E12, 497.5020325203259], [1.72857216E12, 288.03649635036516], [1.72857522E12, 375.4615384615382], [1.72857744E12, 511.88958990536275], [1.72857846E12, 511.5983175604628], [1.72857384E12, 334.0866807610992], [1.72857264E12, 307.7669902912621], [1.72857486E12, 396.10049019607806], [1.72857708E12, 474.26413255360615], [1.7285793E12, 647.9879759519035], [1.72857246E12, 302.0833333333331], [1.72857504E12, 378.9754098360654], [1.72857828E12, 497.449126413155], [1.72857606E12, 373.5993071593537], [1.7285805E12, 599.4180790960447], [1.7285769E12, 506.65320910973105], [1.72858014E12, 635.3051506316816], [1.72857282E12, 339.33760683760664], [1.72857468E12, 385.81331747919126], [1.72857912E12, 657.4908163265313], [1.72857366E12, 292.1351851851851], [1.72857588E12, 369.0204545454546], [1.7285781E12, 504.01840490797514], [1.72858032E12, 623.2994241842621], [1.7285745E12, 377.02088167053347], [1.72857672E12, 516.7915343915342], [1.72857774E12, 479.2407592407589], [1.72857996E12, 626.8747591522153], [1.7285733E12, 303.00562851782365], [1.7285757E12, 361.3128491620109], [1.72857894E12, 604.3570110701097], [1.7285721E12, 278.45422535211236], [1.72857348E12, 301.7466918714558], [1.72857792E12, 468.0183752417796], [1.72857432E12, 374.646118721461], [1.72857756E12, 489.1818181818185], [1.72857978E12, 653.8969696969689], [1.72857534E12, 381.2179034157832], [1.72857876E12, 643.3655172413796], [1.72857228E12, 283.768786127168], [1.72857552E12, 365.965246636772], [1.72857654E12, 482.27589641434236], [1.72857738E12, 521.7193169690504], [1.72858062E12, 431.21739130434787], [1.72857516E12, 367.6060948081263], [1.7285796E12, 628.2350096711792], [1.72857276E12, 324.5091649694504], [1.72857414E12, 302.0324825986078], [1.72857636E12, 377.0408163265307], [1.72857858E12, 498.46919917864494], [1.72857498E12, 376.68266978922696], [1.7285772E12, 496.7487335359678], [1.72857822E12, 502.4262295081965], [1.72858044E12, 648.423191278493], [1.72857312E12, 314.47524752475226], [1.72857294E12, 299.09245283018913], [1.72857618E12, 370.4407364787108], [1.72857942E12, 651.5383848454637], [1.72857396E12, 337.30398322851147], [1.7285784E12, 481.06293018682396]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72858062E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72857204E12, "maxY": 4.9E-324, "series": [{"data": [[1.7285748E12, 0.0], [1.72857804E12, 0.0], [1.72857582E12, 0.0], [1.72858026E12, 0.0], [1.72857924E12, 0.0], [1.72857378E12, 0.0], [1.728576E12, 0.0], [1.72857702E12, 0.0], [1.7285724E12, 0.0], [1.72857342E12, 0.0], [1.72857564E12, 0.0], [1.72857786E12, 0.0], [1.72858008E12, 0.0], [1.7285736E12, 0.0], [1.72857258E12, 0.0], [1.72857462E12, 0.0], [1.72857684E12, 0.0], [1.72857906E12, 0.0], [1.72857546E12, 0.0], [1.7285787E12, 0.0], [1.72857204E12, 0.0], [1.72857768E12, 0.0], [1.72857666E12, 0.0], [1.7285799E12, 0.0], [1.72857306E12, 0.0], [1.72857444E12, 0.0], [1.72857888E12, 0.0], [1.72857528E12, 0.0], [1.72857222E12, 0.0], [1.72857852E12, 0.0], [1.7285763E12, 0.0], [1.72857324E12, 0.0], [1.72857426E12, 0.0], [1.72857648E12, 0.0], [1.72857972E12, 0.0], [1.7285775E12, 0.0], [1.7285727E12, 0.0], [1.7285739E12, 0.0], [1.72857612E12, 0.0], [1.72857834E12, 0.0], [1.72858056E12, 0.0], [1.72857408E12, 0.0], [1.7285751E12, 0.0], [1.72857732E12, 0.0], [1.72857954E12, 0.0], [1.72857594E12, 0.0], [1.72857918E12, 0.0], [1.72857372E12, 0.0], [1.72857816E12, 0.0], [1.72857714E12, 0.0], [1.72858038E12, 0.0], [1.72857492E12, 0.0], [1.72857936E12, 0.0], [1.72857288E12, 0.0], [1.728579E12, 0.0], [1.72857354E12, 0.0], [1.72857576E12, 0.0], [1.72857234E12, 0.0], [1.72857678E12, 0.0], [1.72857474E12, 0.0], [1.72857696E12, 0.0], [1.72857798E12, 0.0], [1.7285802E12, 0.0], [1.72857336E12, 0.0], [1.72857252E12, 0.0], [1.7285766E12, 0.0], [1.72857882E12, 0.0], [1.72857438E12, 0.0], [1.72857456E12, 0.0], [1.7285778E12, 0.0], [1.72857558E12, 0.0], [1.72858002E12, 0.0], [1.72857642E12, 0.0], [1.72857966E12, 0.0], [1.728573E12, 0.0], [1.72857864E12, 0.0], [1.7285742E12, 0.0], [1.7285754E12, 0.0], [1.72857762E12, 0.0], [1.72857984E12, 0.0], [1.72857318E12, 0.0], [1.72857948E12, 0.0], [1.72857402E12, 0.0], [1.72857624E12, 0.0], [1.72857726E12, 0.0], [1.72857216E12, 0.0], [1.72857522E12, 0.0], [1.72857744E12, 0.0], [1.72857846E12, 0.0], [1.72857384E12, 0.0], [1.72857264E12, 0.0], [1.72857486E12, 0.0], [1.72857708E12, 0.0], [1.7285793E12, 0.0], [1.72857246E12, 0.0], [1.72857504E12, 0.0], [1.72857828E12, 0.0], [1.72857606E12, 0.0], [1.7285805E12, 0.0], [1.7285769E12, 0.0], [1.72858014E12, 0.0], [1.72857282E12, 0.0], [1.72857468E12, 0.0], [1.72857912E12, 0.0], [1.72857366E12, 0.0], [1.72857588E12, 0.0], [1.7285781E12, 0.0], [1.72858032E12, 0.0], [1.7285745E12, 0.0], [1.72857672E12, 0.0], [1.72857774E12, 0.0], [1.72857996E12, 0.0], [1.7285733E12, 0.0], [1.7285757E12, 0.0], [1.72857894E12, 0.0], [1.7285721E12, 0.0], [1.72857348E12, 0.0], [1.72857792E12, 0.0], [1.72857432E12, 0.0], [1.72857756E12, 0.0], [1.72857978E12, 0.0], [1.72857534E12, 0.0], [1.72857876E12, 0.0], [1.72857228E12, 0.0], [1.72857552E12, 0.0], [1.72857654E12, 0.0], [1.72857738E12, 0.0], [1.72858062E12, 0.0], [1.72857516E12, 0.0], [1.7285796E12, 0.0], [1.72857276E12, 0.0], [1.72857414E12, 0.0], [1.72857636E12, 0.0], [1.72857858E12, 0.0], [1.72857498E12, 0.0], [1.7285772E12, 0.0], [1.72857822E12, 0.0], [1.72858044E12, 0.0], [1.72857312E12, 0.0], [1.72857294E12, 0.0], [1.72857618E12, 0.0], [1.72857942E12, 0.0], [1.72857396E12, 0.0], [1.7285784E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72858062E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.72857204E12, "maxY": 4170.0, "series": [{"data": [[1.7285748E12, 2190.0], [1.72857804E12, 2947.0], [1.72857582E12, 2017.0], [1.72858026E12, 3296.0], [1.72857924E12, 3759.0], [1.72857378E12, 1813.0], [1.728576E12, 2208.0], [1.72857702E12, 2903.0], [1.7285724E12, 1672.0], [1.72857342E12, 1870.0], [1.72857564E12, 2147.0], [1.72857786E12, 2669.0], [1.72858008E12, 3533.0], [1.7285736E12, 1558.0], [1.72857258E12, 1679.0], [1.72857462E12, 2099.0], [1.72857684E12, 2712.0], [1.72857906E12, 3403.0], [1.72857546E12, 1940.0], [1.7285787E12, 3417.0], [1.72857204E12, 1569.0], [1.72857768E12, 2822.0], [1.72857666E12, 2835.0], [1.7285799E12, 3600.0], [1.72857306E12, 1949.0], [1.72857444E12, 2000.0], [1.72857888E12, 3479.0], [1.72857528E12, 2181.0], [1.72857222E12, 1481.0], [1.72857852E12, 2734.0], [1.7285763E12, 2026.0], [1.72857324E12, 1785.0], [1.72857426E12, 2204.0], [1.72857648E12, 2630.0], [1.72857972E12, 3109.0], [1.7285775E12, 2984.0], [1.7285727E12, 1698.0], [1.7285739E12, 1958.0], [1.72857612E12, 2484.0], [1.72857834E12, 2903.0], [1.72858056E12, 2816.0], [1.72857408E12, 1822.0], [1.7285751E12, 2093.0], [1.72857732E12, 2862.0], [1.72857954E12, 3283.0], [1.72857594E12, 1971.0], [1.72857918E12, 3790.0], [1.72857372E12, 1573.0], [1.72857816E12, 2437.0], [1.72857714E12, 2810.0], [1.72858038E12, 4125.0], [1.72857492E12, 1960.0], [1.72857936E12, 3464.0], [1.72857288E12, 1595.0], [1.728579E12, 3663.0], [1.72857354E12, 1628.0], [1.72857576E12, 2190.0], [1.72857234E12, 1536.0], [1.72857678E12, 2974.0], [1.72857474E12, 1999.0], [1.72857696E12, 3353.0], [1.72857798E12, 3088.0], [1.7285802E12, 3850.0], [1.72857336E12, 1642.0], [1.72857252E12, 1702.0], [1.7285766E12, 2470.0], [1.72857882E12, 3435.0], [1.72857438E12, 2082.0], [1.72857456E12, 2356.0], [1.7285778E12, 2794.0], [1.72857558E12, 2073.0], [1.72858002E12, 3774.0], [1.72857642E12, 1948.0], [1.72857966E12, 3156.0], [1.728573E12, 2004.0], [1.72857864E12, 2396.0], [1.7285742E12, 1734.0], [1.7285754E12, 2030.0], [1.72857762E12, 2896.0], [1.72857984E12, 3296.0], [1.72857318E12, 1791.0], [1.72857948E12, 4170.0], [1.72857402E12, 1651.0], [1.72857624E12, 2299.0], [1.72857726E12, 2648.0], [1.72857216E12, 1811.0], [1.72857522E12, 2063.0], [1.72857744E12, 3028.0], [1.72857846E12, 2996.0], [1.72857384E12, 1583.0], [1.72857264E12, 1881.0], [1.72857486E12, 2011.0], [1.72857708E12, 2685.0], [1.7285793E12, 3917.0], [1.72857246E12, 1565.0], [1.72857504E12, 2143.0], [1.72857828E12, 3009.0], [1.72857606E12, 2146.0], [1.7285805E12, 3398.0], [1.7285769E12, 2767.0], [1.72858014E12, 3577.0], [1.72857282E12, 1884.0], [1.72857468E12, 2188.0], [1.72857912E12, 3865.0], [1.72857366E12, 1559.0], [1.72857588E12, 2020.0], [1.7285781E12, 2771.0], [1.72858032E12, 3225.0], [1.7285745E12, 2093.0], [1.72857672E12, 2706.0], [1.72857774E12, 2705.0], [1.72857996E12, 3692.0], [1.7285733E12, 1594.0], [1.7285757E12, 1975.0], [1.72857894E12, 3365.0], [1.7285721E12, 1503.0], [1.72857348E12, 1604.0], [1.72857792E12, 2693.0], [1.72857432E12, 2407.0], [1.72857756E12, 2456.0], [1.72857978E12, 3995.0], [1.72857534E12, 2054.0], [1.72857876E12, 3363.0], [1.72857228E12, 1589.0], [1.72857552E12, 2144.0], [1.72857654E12, 2970.0], [1.72857738E12, 2955.0], [1.72858062E12, 1129.0], [1.72857516E12, 1918.0], [1.7285796E12, 3894.0], [1.72857276E12, 1729.0], [1.72857414E12, 1623.0], [1.72857636E12, 2105.0], [1.72857858E12, 2574.0], [1.72857498E12, 2097.0], [1.7285772E12, 2634.0], [1.72857822E12, 2961.0], [1.72858044E12, 3596.0], [1.72857312E12, 1875.0], [1.72857294E12, 1515.0], [1.72857618E12, 1961.0], [1.72857942E12, 3478.0], [1.72857396E12, 1679.0], [1.7285784E12, 2696.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7285748E12, 1184.0], [1.72857804E12, 1541.7], [1.72857582E12, 1208.0], [1.72858026E12, 1993.7], [1.72857924E12, 1979.6999999999998], [1.72857378E12, 1040.6000000000001], [1.728576E12, 1248.4], [1.72857702E12, 1567.5], [1.7285724E12, 1023.8], [1.72857342E12, 1013.4], [1.72857564E12, 1257.9999999999998], [1.72857786E12, 1586.6000000000001], [1.72858008E12, 2005.5], [1.7285736E12, 979.9000000000001], [1.72857258E12, 994.4000000000001], [1.72857462E12, 1206.6000000000001], [1.72857684E12, 1666.0], [1.72857906E12, 1973.3999999999999], [1.72857546E12, 1166.6999999999998], [1.7285787E12, 1880.6000000000001], [1.72857204E12, 951.6], [1.72857768E12, 1590.0], [1.72857666E12, 1572.4], [1.7285799E12, 2133.2000000000007], [1.72857306E12, 1035.0], [1.72857444E12, 1190.9999999999998], [1.72857888E12, 1943.1999999999998], [1.72857528E12, 1198.2], [1.72857222E12, 974.3], [1.72857852E12, 1615.0], [1.7285763E12, 1140.0000000000005], [1.72857324E12, 1015.8], [1.72857426E12, 1194.0], [1.72857648E12, 1602.2000000000003], [1.72857972E12, 2003.6], [1.7285775E12, 1536.6000000000004], [1.7285727E12, 1001.0], [1.7285739E12, 969.0], [1.72857612E12, 1199.1999999999998], [1.72857834E12, 1535.8000000000002], [1.72858056E12, 1320.8000000000006], [1.72857408E12, 994.0], [1.7285751E12, 1154.9], [1.72857732E12, 1521.9], [1.72857954E12, 2039.4], [1.72857594E12, 1179.8000000000002], [1.72857918E12, 2054.2000000000003], [1.72857372E12, 985.5000000000002], [1.72857816E12, 1573.6], [1.72857714E12, 1616.6999999999998], [1.72858038E12, 2132.0], [1.72857492E12, 1195.0], [1.72857936E12, 1955.1000000000001], [1.72857288E12, 1032.9], [1.728579E12, 2026.0], [1.72857354E12, 992.0], [1.72857576E12, 1157.0], [1.72857234E12, 965.0], [1.72857678E12, 1619.8000000000004], [1.72857474E12, 1120.2], [1.72857696E12, 1584.1999999999998], [1.72857798E12, 1606.1999999999998], [1.7285802E12, 2034.8000000000002], [1.72857336E12, 1056.0], [1.72857252E12, 1050.8], [1.7285766E12, 1562.9], [1.72857882E12, 2062.7], [1.72857438E12, 1170.2], [1.72857456E12, 1179.8000000000002], [1.7285778E12, 1589.4], [1.72857558E12, 1169.6000000000001], [1.72858002E12, 2040.6000000000008], [1.72857642E12, 1046.4], [1.72857966E12, 2025.4000000000005], [1.728573E12, 1027.2], [1.72857864E12, 1280.2000000000003], [1.7285742E12, 1157.7000000000003], [1.7285754E12, 1202.6000000000001], [1.72857762E12, 1578.5], [1.72857984E12, 2051.0], [1.72857318E12, 991.6], [1.72857948E12, 2055.2], [1.72857402E12, 1002.5000000000001], [1.72857624E12, 1193.2000000000003], [1.72857726E12, 1591.0], [1.72857216E12, 986.5], [1.72857522E12, 1188.2], [1.72857744E12, 1555.0000000000005], [1.72857846E12, 1561.8000000000002], [1.72857384E12, 1089.4], [1.72857264E12, 1025.0], [1.72857486E12, 1198.6000000000001], [1.72857708E12, 1548.0], [1.7285793E12, 2045.1], [1.72857246E12, 1003.2], [1.72857504E12, 1232.5], [1.72857828E12, 1594.4], [1.72857606E12, 1210.1000000000013], [1.7285805E12, 1944.4], [1.7285769E12, 1593.9], [1.72858014E12, 2023.0], [1.72857282E12, 1064.0000000000002], [1.72857468E12, 1209.8000000000006], [1.72857912E12, 2061.7], [1.72857366E12, 1002.4000000000002], [1.72857588E12, 1179.1], [1.7285781E12, 1560.2], [1.72858032E12, 2001.7], [1.7285745E12, 1200.7], [1.72857672E12, 1602.6], [1.72857774E12, 1574.6000000000008], [1.72857996E12, 1979.1], [1.7285733E12, 987.8000000000001], [1.7285757E12, 1127.0], [1.72857894E12, 1931.5], [1.7285721E12, 970.5], [1.72857348E12, 1011.0], [1.72857792E12, 1553.5], [1.72857432E12, 1200.3000000000002], [1.72857756E12, 1588.9], [1.72857978E12, 2024.1], [1.72857534E12, 1174.0], [1.72857876E12, 2008.1999999999998], [1.72857228E12, 977.5], [1.72857552E12, 1187.0], [1.72857654E12, 1594.5], [1.72857738E12, 1668.4], [1.72858062E12, 1101.4], [1.72857516E12, 1142.0], [1.7285796E12, 2003.5], [1.72857276E12, 1049.0], [1.72857414E12, 962.6], [1.72857636E12, 1192.6], [1.72857858E12, 1564.0], [1.72857498E12, 1197.0], [1.7285772E12, 1614.8000000000002], [1.72857822E12, 1558.9], [1.72858044E12, 1990.0], [1.72857312E12, 1014.6000000000005], [1.72857294E12, 1001.0000000000003], [1.72857618E12, 1146.0], [1.72857942E12, 2038.6], [1.72857396E12, 1019.2], [1.7285784E12, 1570.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7285748E12, 1651.2499999999989], [1.72857804E12, 2209.08], [1.72857582E12, 1704.3999999999996], [1.72858026E12, 2987.39], [1.72857924E12, 2909.9799999999977], [1.72857378E12, 1583.7899999999993], [1.728576E12, 1944.1099999999988], [1.72857702E12, 2453.75], [1.7285724E12, 1425.5800000000008], [1.72857342E12, 1560.8999999999992], [1.72857564E12, 1710.1599999999992], [1.72857786E12, 2310.0], [1.72858008E12, 3057.4000000000005], [1.7285736E12, 1492.1799999999987], [1.72857258E12, 1551.98], [1.72857462E12, 1739.9199999999978], [1.72857684E12, 2314.75], [1.72857906E12, 2832.38], [1.72857546E12, 1719.58], [1.7285787E12, 2770.8699999999994], [1.72857204E12, 1533.9799999999993], [1.72857768E12, 2206.920000000001], [1.72857666E12, 2281.5200000000004], [1.7285799E12, 2887.98], [1.72857306E12, 1576.9300000000005], [1.72857444E12, 1716.979999999999], [1.72857888E12, 2859.16], [1.72857528E12, 1856.1800000000003], [1.72857222E12, 1451.3199999999997], [1.72857852E12, 2241.1999999999994], [1.7285763E12, 1691.8200000000002], [1.72857324E12, 1438.490000000003], [1.72857426E12, 1808.2], [1.72857648E12, 2435.0], [1.72857972E12, 2876.5399999999995], [1.7285775E12, 2300.1799999999957], [1.7285727E12, 1449.74], [1.7285739E12, 1463.8499999999985], [1.72857612E12, 1763.5199999999966], [1.72857834E12, 2268.16], [1.72858056E12, 2221.280000000002], [1.72857408E12, 1494.8000000000013], [1.7285751E12, 1704.969999999999], [1.72857732E12, 2240.45], [1.72857954E12, 2906.42], [1.72857594E12, 1634.5599999999995], [1.72857918E12, 2972.1799999999985], [1.72857372E12, 1397.8999999999999], [1.72857816E12, 2235.8], [1.72857714E12, 2233.45], [1.72858038E12, 3027.02], [1.72857492E12, 1705.2800000000007], [1.72857936E12, 2826.47], [1.72857288E12, 1543.9399999999996], [1.728579E12, 2816.5], [1.72857354E12, 1532.16], [1.72857576E12, 1773.15], [1.72857234E12, 1313.3999999999987], [1.72857678E12, 2350.9400000000005], [1.72857474E12, 1680.759999999998], [1.72857696E12, 2383.0], [1.72857798E12, 2357.4400000000005], [1.7285802E12, 2928.0999999999976], [1.72857336E12, 1482.2999999999993], [1.72857252E12, 1445.7999999999997], [1.7285766E12, 2210.230000000003], [1.72857882E12, 3014.2499999999995], [1.72857438E12, 1737.34], [1.72857456E12, 1740.3199999999988], [1.7285778E12, 2339.3999999999996], [1.72857558E12, 1721.8], [1.72858002E12, 3188.4000000000015], [1.72857642E12, 1531.6799999999998], [1.72857966E12, 2748.2799999999993], [1.728573E12, 1560.4800000000007], [1.72857864E12, 2003.400000000005], [1.7285742E12, 1623.7300000000014], [1.7285754E12, 1787.4300000000012], [1.72857762E12, 2581.9500000000003], [1.72857984E12, 2951.0999999999995], [1.72857318E12, 1684.039999999999], [1.72857948E12, 2967.9500000000007], [1.72857402E12, 1510.6100000000001], [1.72857624E12, 1727.190000000001], [1.72857726E12, 2360.0499999999997], [1.72857216E12, 1364.25], [1.72857522E12, 1761.1899999999982], [1.72857744E12, 2250.0400000000004], [1.72857846E12, 2504.88], [1.72857384E12, 1480.0199999999998], [1.72857264E12, 1539.6799999999994], [1.72857486E12, 1723.9400000000007], [1.72857708E12, 2330.3200000000015], [1.7285793E12, 3079.04], [1.72857246E12, 1421.3900000000003], [1.72857504E12, 1719.7500000000007], [1.72857828E12, 2263.0], [1.72857606E12, 1729.9800000000002], [1.7285805E12, 2897.8299999999936], [1.7285769E12, 2137.65], [1.72858014E12, 2892.300000000004], [1.72857282E12, 1451.8600000000001], [1.72857468E12, 1820.7200000000014], [1.72857912E12, 2970.1299999999983], [1.72857366E12, 1393.0800000000004], [1.72857588E12, 1710.419999999999], [1.7285781E12, 2388.26], [1.72858032E12, 2755.259999999999], [1.7285745E12, 1728.92], [1.72857672E12, 2386.699999999998], [1.72857774E12, 2259.6400000000003], [1.72857996E12, 2860.029999999998], [1.7285733E12, 1412.6599999999999], [1.7285757E12, 1702.9999999999982], [1.72857894E12, 2873.350000000001], [1.7285721E12, 1416.7999999999997], [1.72857348E12, 1372.3000000000004], [1.72857792E12, 2316.050000000007], [1.72857432E12, 1712.5300000000002], [1.72857756E12, 2235.9000000000005], [1.72857978E12, 3047.27], [1.72857534E12, 1660.5], [1.72857876E12, 2869.1600000000008], [1.72857228E12, 1425.4199999999996], [1.72857552E12, 1735.7099999999966], [1.72857654E12, 2243.9], [1.72857738E12, 2437.5600000000004], [1.72858062E12, 1129.0], [1.72857516E12, 1658.86], [1.7285796E12, 2804.850000000001], [1.72857276E12, 1534.48], [1.72857414E12, 1420.0400000000002], [1.72857636E12, 1626.9399999999996], [1.72857858E12, 2244.0], [1.72857498E12, 1778.0], [1.7285772E12, 2279.0], [1.72857822E12, 2438.0900000000015], [1.72858044E12, 2832.399999999999], [1.72857312E12, 1514.6799999999998], [1.72857294E12, 1288.5899999999992], [1.72857618E12, 1712.6999999999973], [1.72857942E12, 2971.640000000005], [1.72857396E12, 1453.8799999999983], [1.7285784E12, 2170.0199999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7285748E12, 1326.75], [1.72857804E12, 1791.9499999999994], [1.72857582E12, 1376.0], [1.72858026E12, 2263.7], [1.72857924E12, 2287.3499999999985], [1.72857378E12, 1193.0], [1.728576E12, 1403.5999999999985], [1.72857702E12, 1831.25], [1.7285724E12, 1178.9999999999993], [1.72857342E12, 1172.9999999999995], [1.72857564E12, 1484.1999999999998], [1.72857786E12, 1810.7499999999998], [1.72858008E12, 2289.0], [1.7285736E12, 1155.6], [1.72857258E12, 1161.9999999999995], [1.72857462E12, 1383.5999999999985], [1.72857684E12, 1936.25], [1.72857906E12, 2283.5999999999995], [1.72857546E12, 1415.35], [1.7285787E12, 2151.7999999999993], [1.72857204E12, 1151.1], [1.72857768E12, 1798.0999999999995], [1.72857666E12, 1813.3999999999996], [1.7285799E12, 2398.999999999999], [1.72857306E12, 1165.55], [1.72857444E12, 1358.4999999999995], [1.72857888E12, 2224.7999999999997], [1.72857528E12, 1418.0], [1.72857222E12, 1123.9999999999995], [1.72857852E12, 1854.0], [1.7285763E12, 1370.849999999999], [1.72857324E12, 1121.5500000000002], [1.72857426E12, 1390.0], [1.72857648E12, 1830.7999999999984], [1.72857972E12, 2314.0999999999995], [1.7285775E12, 1806.0], [1.7285727E12, 1147.0], [1.7285739E12, 1132.75], [1.72857612E12, 1373.3999999999999], [1.72857834E12, 1800.3999999999994], [1.72858056E12, 1577.7000000000003], [1.72857408E12, 1132.0], [1.7285751E12, 1349.2499999999995], [1.72857732E12, 1765.4499999999998], [1.72857954E12, 2378.899999999999], [1.72857594E12, 1377.1], [1.72857918E12, 2348.6], [1.72857372E12, 1142.35], [1.72857816E12, 1809.1999999999998], [1.72857714E12, 1814.35], [1.72858038E12, 2435.5999999999995], [1.72857492E12, 1335.3999999999999], [1.72857936E12, 2282.7], [1.72857288E12, 1217.05], [1.728579E12, 2316.5], [1.72857354E12, 1156.0], [1.72857576E12, 1381.5], [1.72857234E12, 1118.0], [1.72857678E12, 1870.65], [1.72857474E12, 1309.7999999999997], [1.72857696E12, 1859.7999999999984], [1.72857798E12, 1819.9999999999993], [1.7285802E12, 2319.9], [1.72857336E12, 1175.0], [1.72857252E12, 1183.0], [1.7285766E12, 1787.0], [1.72857882E12, 2407.5999999999995], [1.72857438E12, 1378.0], [1.72857456E12, 1376.3999999999999], [1.7285778E12, 1823.4999999999995], [1.72857558E12, 1398.1999999999998], [1.72858002E12, 2345.75], [1.72857642E12, 1153.6], [1.72857966E12, 2242.7999999999993], [1.728573E12, 1148.1999999999996], [1.72857864E12, 1513.4999999999998], [1.7285742E12, 1351.45], [1.7285754E12, 1410.3999999999987], [1.72857762E12, 1863.5], [1.72857984E12, 2335.25], [1.72857318E12, 1184.3999999999999], [1.72857948E12, 2298.55], [1.72857402E12, 1180.1], [1.72857624E12, 1394.0499999999997], [1.72857726E12, 1872.75], [1.72857216E12, 1165.0], [1.72857522E12, 1340.999999999999], [1.72857744E12, 1804.3999999999996], [1.72857846E12, 1849.1999999999998], [1.72857384E12, 1243.2999999999995], [1.72857264E12, 1179.2], [1.72857486E12, 1391.4499999999998], [1.72857708E12, 1795.0499999999997], [1.7285793E12, 2336.4999999999995], [1.72857246E12, 1101.6499999999999], [1.72857504E12, 1422.75], [1.72857828E12, 1837.1999999999998], [1.72857606E12, 1361.65], [1.7285805E12, 2316.7], [1.7285769E12, 1818.85], [1.72858014E12, 2271.0], [1.72857282E12, 1209.1999999999998], [1.72857468E12, 1385.3999999999999], [1.72857912E12, 2402.7499999999995], [1.72857366E12, 1135.85], [1.72857588E12, 1350.199999999999], [1.7285781E12, 1762.05], [1.72858032E12, 2274.0999999999995], [1.7285745E12, 1401.6999999999998], [1.72857672E12, 1806.2999999999993], [1.72857774E12, 1864.7999999999997], [1.72857996E12, 2233.1499999999996], [1.7285733E12, 1088.1999999999998], [1.7285757E12, 1301.0], [1.72857894E12, 2309.25], [1.7285721E12, 1141.5], [1.72857348E12, 1157.0], [1.72857792E12, 1816.25], [1.72857432E12, 1390.4499999999998], [1.72857756E12, 1808.1499999999983], [1.72857978E12, 2371.8499999999976], [1.72857534E12, 1388.0], [1.72857876E12, 2352.999999999999], [1.72857228E12, 1106.7999999999997], [1.72857552E12, 1336.0499999999997], [1.72857654E12, 1803.25], [1.72857738E12, 1909.1999999999998], [1.72858062E12, 1126.2], [1.72857516E12, 1358.0], [1.7285796E12, 2335.25], [1.72857276E12, 1194.7999999999997], [1.72857414E12, 1106.5999999999997], [1.72857636E12, 1361.0], [1.72857858E12, 1771.75], [1.72857498E12, 1452.25], [1.7285772E12, 1842.3999999999996], [1.72857822E12, 1840.35], [1.72858044E12, 2329.5], [1.72857312E12, 1141.3], [1.72857294E12, 1136.45], [1.72857618E12, 1339.0], [1.72857942E12, 2317.5999999999995], [1.72857396E12, 1197.1999999999998], [1.7285784E12, 1804.1]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7285748E12, 41.0], [1.72857804E12, 45.0], [1.72857582E12, 38.0], [1.72858026E12, 67.0], [1.72857924E12, 58.0], [1.72857378E12, 39.0], [1.728576E12, 44.0], [1.72857702E12, 46.0], [1.7285724E12, 43.0], [1.72857342E12, 33.0], [1.72857564E12, 39.0], [1.72857786E12, 55.0], [1.72858008E12, 44.0], [1.7285736E12, 38.0], [1.72857258E12, 38.0], [1.72857462E12, 38.0], [1.72857684E12, 45.0], [1.72857906E12, 67.0], [1.72857546E12, 39.0], [1.7285787E12, 44.0], [1.72857204E12, 43.0], [1.72857768E12, 41.0], [1.72857666E12, 44.0], [1.7285799E12, 70.0], [1.72857306E12, 40.0], [1.72857444E12, 48.0], [1.72857888E12, 75.0], [1.72857528E12, 42.0], [1.72857222E12, 43.0], [1.72857852E12, 50.0], [1.7285763E12, 36.0], [1.72857324E12, 41.0], [1.72857426E12, 46.0], [1.72857648E12, 44.0], [1.72857972E12, 73.0], [1.7285775E12, 41.0], [1.7285727E12, 41.0], [1.7285739E12, 38.0], [1.72857612E12, 48.0], [1.72857834E12, 52.0], [1.72858056E12, 44.0], [1.72857408E12, 40.0], [1.7285751E12, 43.0], [1.72857732E12, 51.0], [1.72857954E12, 72.0], [1.72857594E12, 42.0], [1.72857918E12, 25.0], [1.72857372E12, 41.0], [1.72857816E12, 41.0], [1.72857714E12, 51.0], [1.72858038E12, 82.0], [1.72857492E12, 37.0], [1.72857936E12, 27.0], [1.72857288E12, 41.0], [1.728579E12, 72.0], [1.72857354E12, 43.0], [1.72857576E12, 39.0], [1.72857234E12, 41.0], [1.72857678E12, 44.0], [1.72857474E12, 45.0], [1.72857696E12, 45.0], [1.72857798E12, 46.0], [1.7285802E12, 16.0], [1.72857336E12, 40.0], [1.72857252E12, 42.0], [1.7285766E12, 41.0], [1.72857882E12, 65.0], [1.72857438E12, 41.0], [1.72857456E12, 48.0], [1.7285778E12, 45.0], [1.72857558E12, 41.0], [1.72858002E12, 64.0], [1.72857642E12, 42.0], [1.72857966E12, 68.0], [1.728573E12, 38.0], [1.72857864E12, 38.0], [1.7285742E12, 47.0], [1.7285754E12, 47.0], [1.72857762E12, 52.0], [1.72857984E12, 34.0], [1.72857318E12, 38.0], [1.72857948E12, 71.0], [1.72857402E12, 35.0], [1.72857624E12, 44.0], [1.72857726E12, 49.0], [1.72857216E12, 39.0], [1.72857522E12, 37.0], [1.72857744E12, 44.0], [1.72857846E12, 42.0], [1.72857384E12, 44.0], [1.72857264E12, 38.0], [1.72857486E12, 37.0], [1.72857708E12, 51.0], [1.7285793E12, 62.0], [1.72857246E12, 37.0], [1.72857504E12, 44.0], [1.72857828E12, 42.0], [1.72857606E12, 40.0], [1.7285805E12, 49.0], [1.7285769E12, 44.0], [1.72858014E12, 71.0], [1.72857282E12, 34.0], [1.72857468E12, 40.0], [1.72857912E12, 69.0], [1.72857366E12, 40.0], [1.72857588E12, 36.0], [1.7285781E12, 47.0], [1.72858032E12, 70.0], [1.7285745E12, 41.0], [1.72857672E12, 48.0], [1.72857774E12, 54.0], [1.72857996E12, 67.0], [1.7285733E12, 42.0], [1.7285757E12, 46.0], [1.72857894E12, 72.0], [1.7285721E12, 40.0], [1.72857348E12, 41.0], [1.72857792E12, 43.0], [1.72857432E12, 47.0], [1.72857756E12, 54.0], [1.72857978E12, 49.0], [1.72857534E12, 40.0], [1.72857876E12, 42.0], [1.72857228E12, 40.0], [1.72857552E12, 37.0], [1.72857654E12, 41.0], [1.72857738E12, 47.0], [1.72858062E12, 116.0], [1.72857516E12, 37.0], [1.7285796E12, 71.0], [1.72857276E12, 42.0], [1.72857414E12, 44.0], [1.72857636E12, 49.0], [1.72857858E12, 49.0], [1.72857498E12, 37.0], [1.7285772E12, 48.0], [1.72857822E12, 49.0], [1.72858044E12, 65.0], [1.72857312E12, 36.0], [1.72857294E12, 42.0], [1.72857618E12, 42.0], [1.72857942E12, 47.0], [1.72857396E12, 35.0], [1.7285784E12, 47.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7285748E12, 444.0], [1.72857804E12, 608.5], [1.72857582E12, 501.0], [1.72858026E12, 851.5], [1.72857924E12, 804.0], [1.72857378E12, 468.0], [1.728576E12, 510.0], [1.72857702E12, 658.5], [1.7285724E12, 432.0], [1.72857342E12, 455.0], [1.72857564E12, 488.0], [1.72857786E12, 711.5], [1.72858008E12, 792.0], [1.7285736E12, 402.5], [1.72857258E12, 457.0], [1.72857462E12, 418.0], [1.72857684E12, 725.5], [1.72857906E12, 854.0], [1.72857546E12, 473.0], [1.7285787E12, 603.0], [1.72857204E12, 345.0], [1.72857768E12, 648.0], [1.72857666E12, 668.5], [1.7285799E12, 1016.0], [1.72857306E12, 484.5], [1.72857444E12, 427.0], [1.72857888E12, 833.0], [1.72857528E12, 509.0], [1.72857222E12, 480.5], [1.72857852E12, 698.0], [1.7285763E12, 536.5], [1.72857324E12, 364.0], [1.72857426E12, 543.0], [1.72857648E12, 543.0], [1.72857972E12, 925.0], [1.7285775E12, 551.0], [1.7285727E12, 380.0], [1.7285739E12, 400.5], [1.72857612E12, 483.0], [1.72857834E12, 573.0], [1.72858056E12, 478.0], [1.72857408E12, 366.0], [1.7285751E12, 430.5], [1.72857732E12, 598.5], [1.72857954E12, 732.0], [1.72857594E12, 513.5], [1.72857918E12, 862.5], [1.72857372E12, 424.5], [1.72857816E12, 690.0], [1.72857714E12, 678.5], [1.72858038E12, 929.5], [1.72857492E12, 524.0], [1.72857936E12, 884.5], [1.72857288E12, 494.5], [1.728579E12, 848.5], [1.72857354E12, 419.0], [1.72857576E12, 458.0], [1.72857234E12, 426.0], [1.72857678E12, 659.5], [1.72857474E12, 451.0], [1.72857696E12, 682.0], [1.72857798E12, 640.0], [1.7285802E12, 819.0], [1.72857336E12, 452.0], [1.72857252E12, 479.0], [1.7285766E12, 639.5], [1.72857882E12, 796.0], [1.72857438E12, 492.0], [1.72857456E12, 552.0], [1.7285778E12, 596.0], [1.72857558E12, 491.0], [1.72858002E12, 922.0], [1.72857642E12, 414.0], [1.72857966E12, 849.0], [1.728573E12, 408.0], [1.72857864E12, 473.0], [1.7285742E12, 450.5], [1.7285754E12, 542.0], [1.72857762E12, 679.0], [1.72857984E12, 810.0], [1.72857318E12, 428.0], [1.72857948E12, 853.5], [1.72857402E12, 346.0], [1.72857624E12, 496.0], [1.72857726E12, 633.0], [1.72857216E12, 323.0], [1.72857522E12, 518.5], [1.72857744E12, 722.0], [1.72857846E12, 692.0], [1.72857384E12, 496.0], [1.72857264E12, 398.0], [1.72857486E12, 578.0], [1.72857708E12, 554.5], [1.7285793E12, 861.0], [1.72857246E12, 420.5], [1.72857504E12, 501.0], [1.72857828E12, 655.0], [1.72857606E12, 500.5], [1.7285805E12, 713.0], [1.7285769E12, 688.5], [1.72858014E12, 826.0], [1.72857282E12, 519.0], [1.72857468E12, 526.0], [1.72857912E12, 888.0], [1.72857366E12, 356.5], [1.72857588E12, 489.0], [1.7285781E12, 678.5], [1.72858032E12, 805.5], [1.7285745E12, 494.5], [1.72857672E12, 709.0], [1.72857774E12, 566.0], [1.72857996E12, 827.0], [1.7285733E12, 391.0], [1.7285757E12, 486.0], [1.72857894E12, 695.0], [1.7285721E12, 313.5], [1.72857348E12, 377.0], [1.72857792E12, 530.5], [1.72857432E12, 436.0], [1.72857756E12, 622.5], [1.72857978E12, 906.5], [1.72857534E12, 543.0], [1.72857876E12, 816.0], [1.72857228E12, 322.5], [1.72857552E12, 439.0], [1.72857654E12, 587.5], [1.72857738E12, 697.0], [1.72858062E12, 702.0], [1.72857516E12, 464.5], [1.7285796E12, 815.5], [1.72857276E12, 464.0], [1.72857414E12, 408.0], [1.72857636E12, 533.0], [1.72857858E12, 719.5], [1.72857498E12, 498.5], [1.7285772E12, 622.0], [1.72857822E12, 670.5], [1.72858044E12, 878.0], [1.72857312E12, 443.0], [1.72857294E12, 389.0], [1.72857618E12, 501.0], [1.72857942E12, 888.0], [1.72857396E12, 505.0], [1.7285784E12, 579.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72858062E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 186.0, "minX": 1.0, "maxY": 743.0, "series": [{"data": [[2.0, 727.5], [32.0, 270.0], [33.0, 257.5], [35.0, 186.0], [3.0, 656.0], [4.0, 607.0], [5.0, 604.0], [6.0, 603.5], [7.0, 564.0], [8.0, 532.5], [9.0, 561.0], [10.0, 550.0], [11.0, 607.0], [12.0, 627.0], [13.0, 659.5], [14.0, 643.0], [15.0, 628.0], [1.0, 743.0], [16.0, 590.0], [17.0, 562.0], [18.0, 514.5], [19.0, 468.0], [20.0, 462.0], [21.0, 395.0], [22.0, 365.0], [23.0, 321.0], [24.0, 310.5], [25.0, 283.0], [26.0, 291.5], [27.0, 290.0], [28.0, 277.0], [29.0, 290.5], [30.0, 301.0], [31.0, 330.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 35.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 122.0, "minX": 1.0, "maxY": 520.0, "series": [{"data": [[2.0, 486.5], [32.0, 173.0], [33.0, 195.0], [35.0, 122.0], [3.0, 452.0], [4.0, 408.0], [5.0, 414.0], [6.0, 420.0], [7.0, 392.0], [8.0, 379.5], [9.0, 395.0], [10.0, 390.0], [11.0, 433.0], [12.0, 448.0], [13.0, 474.0], [14.0, 462.0], [15.0, 449.0], [1.0, 520.0], [16.0, 431.0], [17.0, 406.0], [18.0, 378.0], [19.0, 342.0], [20.0, 328.0], [21.0, 261.0], [22.0, 248.5], [23.0, 209.0], [24.0, 202.0], [25.0, 172.0], [26.0, 183.0], [27.0, 175.0], [28.0, 162.0], [29.0, 188.0], [30.0, 191.0], [31.0, 205.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 35.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.35, "minX": 1.72857204E12, "maxY": 18.066666666666666, "series": [{"data": [[1.7285748E12, 14.9], [1.72857804E12, 17.033333333333335], [1.72857582E12, 14.316666666666666], [1.72858026E12, 17.033333333333335], [1.72857924E12, 17.166666666666668], [1.72857378E12, 8.166666666666666], [1.728576E12, 13.866666666666667], [1.72857702E12, 16.233333333333334], [1.7285724E12, 8.616666666666667], [1.72857342E12, 8.283333333333333], [1.72857564E12, 14.25], [1.72857786E12, 16.133333333333333], [1.72858008E12, 17.566666666666666], [1.7285736E12, 8.833333333333334], [1.72857258E12, 8.216666666666667], [1.72857462E12, 15.116666666666667], [1.72857684E12, 15.4], [1.72857906E12, 17.166666666666668], [1.72857546E12, 14.483333333333333], [1.7285787E12, 14.5], [1.72857204E12, 3.65], [1.72857768E12, 16.7], [1.72857666E12, 16.3], [1.7285799E12, 15.616666666666667], [1.72857306E12, 8.033333333333333], [1.72857444E12, 14.75], [1.72857888E12, 17.416666666666668], [1.72857528E12, 13.95], [1.72857222E12, 4.133333333333334], [1.72857852E12, 15.983333333333333], [1.7285763E12, 14.2], [1.72857324E12, 9.033333333333333], [1.72857426E12, 13.983333333333333], [1.72857648E12, 15.283333333333333], [1.72857972E12, 16.55], [1.7285775E12, 17.283333333333335], [1.7285727E12, 8.75], [1.7285739E12, 8.9], [1.72857612E12, 14.25], [1.72857834E12, 17.05], [1.72858056E12, 11.116666666666667], [1.72857408E12, 8.983333333333333], [1.7285751E12, 15.166666666666666], [1.72857732E12, 16.833333333333332], [1.72857954E12, 17.616666666666667], [1.72857594E12, 14.3], [1.72857918E12, 16.766666666666666], [1.72857372E12, 8.5], [1.72857816E12, 16.05], [1.72857714E12, 16.166666666666668], [1.72858038E12, 15.8], [1.72857492E12, 14.016666666666667], [1.72857936E12, 17.033333333333335], [1.72857288E12, 7.966666666666667], [1.728579E12, 17.066666666666666], [1.72857354E12, 8.55], [1.72857576E12, 14.733333333333333], [1.72857234E12, 8.65], [1.72857678E12, 16.1], [1.72857474E12, 15.116666666666667], [1.72857696E12, 16.083333333333332], [1.72857798E12, 16.083333333333332], [1.7285802E12, 17.016666666666666], [1.72857336E12, 8.483333333333333], [1.72857252E12, 7.85], [1.7285766E12, 16.933333333333334], [1.72857882E12, 16.833333333333332], [1.72857438E12, 14.55], [1.72857456E12, 14.05], [1.7285778E12, 16.616666666666667], [1.72857558E12, 14.35], [1.72858002E12, 16.266666666666666], [1.72857642E12, 10.05], [1.72857966E12, 17.383333333333333], [1.728573E12, 8.616666666666667], [1.72857864E12, 10.733333333333333], [1.7285742E12, 6.083333333333333], [1.7285754E12, 13.8], [1.72857762E12, 16.066666666666666], [1.72857984E12, 16.966666666666665], [1.72857318E12, 8.716666666666667], [1.72857948E12, 16.466666666666665], [1.72857402E12, 8.966666666666667], [1.72857624E12, 14.6], [1.72857726E12, 16.4], [1.72857216E12, 4.566666666666666], [1.72857522E12, 14.3], [1.72857744E12, 15.85], [1.72857846E12, 15.85], [1.72857384E12, 7.883333333333334], [1.72857264E12, 8.583333333333334], [1.72857486E12, 13.6], [1.72857708E12, 17.1], [1.7285793E12, 16.633333333333333], [1.72857246E12, 8.8], [1.72857504E12, 14.233333333333333], [1.72857828E12, 16.216666666666665], [1.72857606E12, 14.433333333333334], [1.7285805E12, 17.633333333333333], [1.7285769E12, 16.1], [1.72858014E12, 17.15], [1.72857282E12, 7.8], [1.72857468E12, 14.016666666666667], [1.72857912E12, 16.333333333333332], [1.72857366E12, 9.0], [1.72857588E12, 14.666666666666666], [1.7285781E12, 16.3], [1.72858032E12, 17.366666666666667], [1.7285745E12, 14.366666666666667], [1.72857672E12, 15.75], [1.72857774E12, 16.683333333333334], [1.72857996E12, 17.3], [1.7285733E12, 8.883333333333333], [1.7285757E12, 14.916666666666666], [1.72857894E12, 18.066666666666666], [1.7285721E12, 4.733333333333333], [1.72857348E12, 8.816666666666666], [1.72857792E12, 17.233333333333334], [1.72857432E12, 14.6], [1.72857756E12, 16.5], [1.72857978E12, 16.5], [1.72857534E12, 14.15], [1.72857876E12, 16.916666666666668], [1.72857228E12, 5.8], [1.72857552E12, 14.883333333333333], [1.72857654E12, 16.733333333333334], [1.72857738E12, 15.616666666666667], [1.72858062E12, 0.35], [1.72857516E12, 14.766666666666667], [1.7285796E12, 17.233333333333334], [1.72857276E12, 8.183333333333334], [1.72857414E12, 7.133333333333334], [1.72857636E12, 13.866666666666667], [1.72857858E12, 16.216666666666665], [1.72857498E12, 14.233333333333333], [1.7285772E12, 16.45], [1.72857822E12, 16.266666666666666], [1.72858044E12, 16.816666666666666], [1.72857312E12, 8.416666666666666], [1.72857294E12, 8.833333333333334], [1.72857618E12, 14.483333333333333], [1.72857942E12, 16.716666666666665], [1.72857396E12, 7.95], [1.7285784E12, 16.95]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72858062E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.72857204E12, "maxY": 18.066666666666666, "series": [{"data": [[1.7285748E12, 14.9], [1.72857804E12, 17.033333333333335], [1.72857582E12, 14.316666666666666], [1.72858026E12, 17.033333333333335], [1.72857924E12, 17.166666666666668], [1.72857378E12, 8.166666666666666], [1.728576E12, 13.866666666666667], [1.72857702E12, 16.233333333333334], [1.7285724E12, 8.616666666666667], [1.72857342E12, 8.283333333333333], [1.72857564E12, 14.25], [1.72857786E12, 16.133333333333333], [1.72858008E12, 17.566666666666666], [1.7285736E12, 8.833333333333334], [1.72857258E12, 8.216666666666667], [1.72857462E12, 15.116666666666667], [1.72857684E12, 15.4], [1.72857906E12, 17.166666666666668], [1.72857546E12, 14.5], [1.7285787E12, 14.266666666666667], [1.72857204E12, 3.6166666666666667], [1.72857768E12, 16.7], [1.72857666E12, 16.3], [1.7285799E12, 15.616666666666667], [1.72857306E12, 8.033333333333333], [1.72857444E12, 14.75], [1.72857888E12, 17.416666666666668], [1.72857528E12, 13.95], [1.72857222E12, 4.133333333333334], [1.72857852E12, 15.983333333333333], [1.7285763E12, 14.2], [1.72857324E12, 9.033333333333333], [1.72857426E12, 13.983333333333333], [1.72857648E12, 15.133333333333333], [1.72857972E12, 16.55], [1.7285775E12, 17.283333333333335], [1.7285727E12, 8.75], [1.7285739E12, 8.9], [1.72857612E12, 14.25], [1.72857834E12, 17.05], [1.72858056E12, 11.283333333333333], [1.72857408E12, 8.983333333333333], [1.7285751E12, 15.166666666666666], [1.72857732E12, 16.833333333333332], [1.72857954E12, 17.616666666666667], [1.72857594E12, 14.3], [1.72857918E12, 16.766666666666666], [1.72857372E12, 8.5], [1.72857816E12, 16.05], [1.72857714E12, 16.166666666666668], [1.72858038E12, 15.8], [1.72857492E12, 14.016666666666667], [1.72857936E12, 17.033333333333335], [1.72857288E12, 7.966666666666667], [1.728579E12, 17.066666666666666], [1.72857354E12, 8.55], [1.72857576E12, 14.733333333333333], [1.72857234E12, 8.65], [1.72857678E12, 16.1], [1.72857474E12, 15.116666666666667], [1.72857696E12, 16.083333333333332], [1.72857798E12, 16.083333333333332], [1.7285802E12, 17.016666666666666], [1.72857336E12, 8.483333333333333], [1.72857252E12, 7.85], [1.7285766E12, 16.933333333333334], [1.72857882E12, 16.833333333333332], [1.72857438E12, 14.55], [1.72857456E12, 14.05], [1.7285778E12, 16.616666666666667], [1.72857558E12, 14.35], [1.72858002E12, 16.266666666666666], [1.72857642E12, 10.116666666666667], [1.72857966E12, 17.383333333333333], [1.728573E12, 8.616666666666667], [1.72857864E12, 10.883333333333333], [1.7285742E12, 5.966666666666667], [1.7285754E12, 13.8], [1.72857762E12, 16.066666666666666], [1.72857984E12, 16.966666666666665], [1.72857318E12, 8.716666666666667], [1.72857948E12, 16.466666666666665], [1.72857402E12, 8.966666666666667], [1.72857624E12, 14.6], [1.72857726E12, 16.4], [1.72857216E12, 4.566666666666666], [1.72857522E12, 14.3], [1.72857744E12, 15.85], [1.72857846E12, 15.85], [1.72857384E12, 7.883333333333334], [1.72857264E12, 8.583333333333334], [1.72857486E12, 13.6], [1.72857708E12, 17.1], [1.7285793E12, 16.633333333333333], [1.72857246E12, 8.8], [1.72857504E12, 14.233333333333333], [1.72857828E12, 16.216666666666665], [1.72857606E12, 14.433333333333334], [1.7285805E12, 17.7], [1.7285769E12, 16.1], [1.72858014E12, 17.15], [1.72857282E12, 7.8], [1.72857468E12, 14.016666666666667], [1.72857912E12, 16.333333333333332], [1.72857366E12, 9.0], [1.72857588E12, 14.666666666666666], [1.7285781E12, 16.3], [1.72858032E12, 17.366666666666667], [1.7285745E12, 14.366666666666667], [1.72857672E12, 15.75], [1.72857774E12, 16.683333333333334], [1.72857996E12, 17.3], [1.7285733E12, 8.883333333333333], [1.7285757E12, 14.916666666666666], [1.72857894E12, 18.066666666666666], [1.7285721E12, 4.733333333333333], [1.72857348E12, 8.816666666666666], [1.72857792E12, 17.233333333333334], [1.72857432E12, 14.6], [1.72857756E12, 16.5], [1.72857978E12, 16.5], [1.72857534E12, 14.15], [1.72857876E12, 16.916666666666668], [1.72857228E12, 5.766666666666667], [1.72857552E12, 14.866666666666667], [1.72857654E12, 16.733333333333334], [1.72857738E12, 15.616666666666667], [1.72858062E12, 0.38333333333333336], [1.72857516E12, 14.766666666666667], [1.7285796E12, 17.233333333333334], [1.72857276E12, 8.183333333333334], [1.72857414E12, 7.183333333333334], [1.72857636E12, 13.883333333333333], [1.72857858E12, 16.233333333333334], [1.72857498E12, 14.233333333333333], [1.7285772E12, 16.45], [1.72857822E12, 16.266666666666666], [1.72858044E12, 16.816666666666666], [1.72857312E12, 8.416666666666666], [1.72857294E12, 8.833333333333334], [1.72857618E12, 14.483333333333333], [1.72857942E12, 16.716666666666665], [1.72857396E12, 7.95], [1.7285784E12, 16.95]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72858062E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.72857204E12, "maxY": 18.066666666666666, "series": [{"data": [[1.7285748E12, 14.9], [1.72857804E12, 17.033333333333335], [1.72857582E12, 14.316666666666666], [1.72858026E12, 17.033333333333335], [1.72857924E12, 17.166666666666668], [1.72857378E12, 8.166666666666666], [1.728576E12, 13.866666666666667], [1.72857702E12, 16.233333333333334], [1.7285724E12, 8.616666666666667], [1.72857342E12, 8.283333333333333], [1.72857564E12, 14.25], [1.72857786E12, 16.133333333333333], [1.72858008E12, 17.566666666666666], [1.7285736E12, 8.833333333333334], [1.72857258E12, 8.216666666666667], [1.72857462E12, 15.116666666666667], [1.72857684E12, 15.4], [1.72857906E12, 17.166666666666668], [1.72857546E12, 14.5], [1.7285787E12, 14.266666666666667], [1.72857204E12, 3.6166666666666667], [1.72857768E12, 16.7], [1.72857666E12, 16.3], [1.7285799E12, 15.616666666666667], [1.72857306E12, 8.033333333333333], [1.72857444E12, 14.75], [1.72857888E12, 17.416666666666668], [1.72857528E12, 13.95], [1.72857222E12, 4.133333333333334], [1.72857852E12, 15.983333333333333], [1.7285763E12, 14.2], [1.72857324E12, 9.033333333333333], [1.72857426E12, 13.983333333333333], [1.72857648E12, 15.133333333333333], [1.72857972E12, 16.55], [1.7285775E12, 17.283333333333335], [1.7285727E12, 8.75], [1.7285739E12, 8.9], [1.72857612E12, 14.25], [1.72857834E12, 17.05], [1.72858056E12, 11.283333333333333], [1.72857408E12, 8.983333333333333], [1.7285751E12, 15.166666666666666], [1.72857732E12, 16.833333333333332], [1.72857954E12, 17.616666666666667], [1.72857594E12, 14.3], [1.72857918E12, 16.766666666666666], [1.72857372E12, 8.5], [1.72857816E12, 16.05], [1.72857714E12, 16.166666666666668], [1.72858038E12, 15.8], [1.72857492E12, 14.016666666666667], [1.72857936E12, 17.033333333333335], [1.72857288E12, 7.966666666666667], [1.728579E12, 17.066666666666666], [1.72857354E12, 8.55], [1.72857576E12, 14.733333333333333], [1.72857234E12, 8.65], [1.72857678E12, 16.1], [1.72857474E12, 15.116666666666667], [1.72857696E12, 16.083333333333332], [1.72857798E12, 16.083333333333332], [1.7285802E12, 17.016666666666666], [1.72857336E12, 8.483333333333333], [1.72857252E12, 7.85], [1.7285766E12, 16.933333333333334], [1.72857882E12, 16.833333333333332], [1.72857438E12, 14.55], [1.72857456E12, 14.05], [1.7285778E12, 16.616666666666667], [1.72857558E12, 14.35], [1.72858002E12, 16.266666666666666], [1.72857642E12, 10.116666666666667], [1.72857966E12, 17.383333333333333], [1.728573E12, 8.616666666666667], [1.72857864E12, 10.883333333333333], [1.7285742E12, 5.966666666666667], [1.7285754E12, 13.8], [1.72857762E12, 16.066666666666666], [1.72857984E12, 16.966666666666665], [1.72857318E12, 8.716666666666667], [1.72857948E12, 16.466666666666665], [1.72857402E12, 8.966666666666667], [1.72857624E12, 14.6], [1.72857726E12, 16.4], [1.72857216E12, 4.566666666666666], [1.72857522E12, 14.3], [1.72857744E12, 15.85], [1.72857846E12, 15.85], [1.72857384E12, 7.883333333333334], [1.72857264E12, 8.583333333333334], [1.72857486E12, 13.6], [1.72857708E12, 17.1], [1.7285793E12, 16.633333333333333], [1.72857246E12, 8.8], [1.72857504E12, 14.233333333333333], [1.72857828E12, 16.216666666666665], [1.72857606E12, 14.433333333333334], [1.7285805E12, 17.7], [1.7285769E12, 16.1], [1.72858014E12, 17.15], [1.72857282E12, 7.8], [1.72857468E12, 14.016666666666667], [1.72857912E12, 16.333333333333332], [1.72857366E12, 9.0], [1.72857588E12, 14.666666666666666], [1.7285781E12, 16.3], [1.72858032E12, 17.366666666666667], [1.7285745E12, 14.366666666666667], [1.72857672E12, 15.75], [1.72857774E12, 16.683333333333334], [1.72857996E12, 17.3], [1.7285733E12, 8.883333333333333], [1.7285757E12, 14.916666666666666], [1.72857894E12, 18.066666666666666], [1.7285721E12, 4.733333333333333], [1.72857348E12, 8.816666666666666], [1.72857792E12, 17.233333333333334], [1.72857432E12, 14.6], [1.72857756E12, 16.5], [1.72857978E12, 16.5], [1.72857534E12, 14.15], [1.72857876E12, 16.916666666666668], [1.72857228E12, 5.766666666666667], [1.72857552E12, 14.866666666666667], [1.72857654E12, 16.733333333333334], [1.72857738E12, 15.616666666666667], [1.72858062E12, 0.38333333333333336], [1.72857516E12, 14.766666666666667], [1.7285796E12, 17.233333333333334], [1.72857276E12, 8.183333333333334], [1.72857414E12, 7.183333333333334], [1.72857636E12, 13.883333333333333], [1.72857858E12, 16.233333333333334], [1.72857498E12, 14.233333333333333], [1.7285772E12, 16.45], [1.72857822E12, 16.266666666666666], [1.72858044E12, 16.816666666666666], [1.72857312E12, 8.416666666666666], [1.72857294E12, 8.833333333333334], [1.72857618E12, 14.483333333333333], [1.72857942E12, 16.716666666666665], [1.72857396E12, 7.95], [1.7285784E12, 16.95]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72858062E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.72857204E12, "maxY": 18.066666666666666, "series": [{"data": [[1.7285748E12, 14.9], [1.72857804E12, 17.033333333333335], [1.72857582E12, 14.316666666666666], [1.72858026E12, 17.033333333333335], [1.72857924E12, 17.166666666666668], [1.72857378E12, 8.166666666666666], [1.728576E12, 13.866666666666667], [1.72857702E12, 16.233333333333334], [1.7285724E12, 8.616666666666667], [1.72857342E12, 8.283333333333333], [1.72857564E12, 14.25], [1.72857786E12, 16.133333333333333], [1.72858008E12, 17.566666666666666], [1.7285736E12, 8.833333333333334], [1.72857258E12, 8.216666666666667], [1.72857462E12, 15.116666666666667], [1.72857684E12, 15.4], [1.72857906E12, 17.166666666666668], [1.72857546E12, 14.5], [1.7285787E12, 14.266666666666667], [1.72857204E12, 3.6166666666666667], [1.72857768E12, 16.7], [1.72857666E12, 16.3], [1.7285799E12, 15.616666666666667], [1.72857306E12, 8.033333333333333], [1.72857444E12, 14.75], [1.72857888E12, 17.416666666666668], [1.72857528E12, 13.95], [1.72857222E12, 4.133333333333334], [1.72857852E12, 15.983333333333333], [1.7285763E12, 14.2], [1.72857324E12, 9.033333333333333], [1.72857426E12, 13.983333333333333], [1.72857648E12, 15.133333333333333], [1.72857972E12, 16.55], [1.7285775E12, 17.283333333333335], [1.7285727E12, 8.75], [1.7285739E12, 8.9], [1.72857612E12, 14.25], [1.72857834E12, 17.05], [1.72858056E12, 11.283333333333333], [1.72857408E12, 8.983333333333333], [1.7285751E12, 15.166666666666666], [1.72857732E12, 16.833333333333332], [1.72857954E12, 17.616666666666667], [1.72857594E12, 14.3], [1.72857918E12, 16.766666666666666], [1.72857372E12, 8.5], [1.72857816E12, 16.05], [1.72857714E12, 16.166666666666668], [1.72858038E12, 15.8], [1.72857492E12, 14.016666666666667], [1.72857936E12, 17.033333333333335], [1.72857288E12, 7.966666666666667], [1.728579E12, 17.066666666666666], [1.72857354E12, 8.55], [1.72857576E12, 14.733333333333333], [1.72857234E12, 8.65], [1.72857678E12, 16.1], [1.72857474E12, 15.116666666666667], [1.72857696E12, 16.083333333333332], [1.72857798E12, 16.083333333333332], [1.7285802E12, 17.016666666666666], [1.72857336E12, 8.483333333333333], [1.72857252E12, 7.85], [1.7285766E12, 16.933333333333334], [1.72857882E12, 16.833333333333332], [1.72857438E12, 14.55], [1.72857456E12, 14.05], [1.7285778E12, 16.616666666666667], [1.72857558E12, 14.35], [1.72858002E12, 16.266666666666666], [1.72857642E12, 10.116666666666667], [1.72857966E12, 17.383333333333333], [1.728573E12, 8.616666666666667], [1.72857864E12, 10.883333333333333], [1.7285742E12, 5.966666666666667], [1.7285754E12, 13.8], [1.72857762E12, 16.066666666666666], [1.72857984E12, 16.966666666666665], [1.72857318E12, 8.716666666666667], [1.72857948E12, 16.466666666666665], [1.72857402E12, 8.966666666666667], [1.72857624E12, 14.6], [1.72857726E12, 16.4], [1.72857216E12, 4.566666666666666], [1.72857522E12, 14.3], [1.72857744E12, 15.85], [1.72857846E12, 15.85], [1.72857384E12, 7.883333333333334], [1.72857264E12, 8.583333333333334], [1.72857486E12, 13.6], [1.72857708E12, 17.1], [1.7285793E12, 16.633333333333333], [1.72857246E12, 8.8], [1.72857504E12, 14.233333333333333], [1.72857828E12, 16.216666666666665], [1.72857606E12, 14.433333333333334], [1.7285805E12, 17.7], [1.7285769E12, 16.1], [1.72858014E12, 17.15], [1.72857282E12, 7.8], [1.72857468E12, 14.016666666666667], [1.72857912E12, 16.333333333333332], [1.72857366E12, 9.0], [1.72857588E12, 14.666666666666666], [1.7285781E12, 16.3], [1.72858032E12, 17.366666666666667], [1.7285745E12, 14.366666666666667], [1.72857672E12, 15.75], [1.72857774E12, 16.683333333333334], [1.72857996E12, 17.3], [1.7285733E12, 8.883333333333333], [1.7285757E12, 14.916666666666666], [1.72857894E12, 18.066666666666666], [1.7285721E12, 4.733333333333333], [1.72857348E12, 8.816666666666666], [1.72857792E12, 17.233333333333334], [1.72857432E12, 14.6], [1.72857756E12, 16.5], [1.72857978E12, 16.5], [1.72857534E12, 14.15], [1.72857876E12, 16.916666666666668], [1.72857228E12, 5.766666666666667], [1.72857552E12, 14.866666666666667], [1.72857654E12, 16.733333333333334], [1.72857738E12, 15.616666666666667], [1.72858062E12, 0.38333333333333336], [1.72857516E12, 14.766666666666667], [1.7285796E12, 17.233333333333334], [1.72857276E12, 8.183333333333334], [1.72857414E12, 7.183333333333334], [1.72857636E12, 13.883333333333333], [1.72857858E12, 16.233333333333334], [1.72857498E12, 14.233333333333333], [1.7285772E12, 16.45], [1.72857822E12, 16.266666666666666], [1.72858044E12, 16.816666666666666], [1.72857312E12, 8.416666666666666], [1.72857294E12, 8.833333333333334], [1.72857618E12, 14.483333333333333], [1.72857942E12, 16.716666666666665], [1.72857396E12, 7.95], [1.7285784E12, 16.95]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72858062E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

