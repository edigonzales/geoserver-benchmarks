/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 20.0, "minX": 0.0, "maxY": 3672.0, "series": [{"data": [[0.0, 20.0], [0.1, 32.0], [0.2, 34.0], [0.3, 35.0], [0.4, 37.0], [0.5, 38.0], [0.6, 39.0], [0.7, 40.0], [0.8, 40.0], [0.9, 41.0], [1.0, 42.0], [1.1, 43.0], [1.2, 44.0], [1.3, 44.0], [1.4, 45.0], [1.5, 45.0], [1.6, 46.0], [1.7, 47.0], [1.8, 47.0], [1.9, 48.0], [2.0, 48.0], [2.1, 49.0], [2.2, 49.0], [2.3, 50.0], [2.4, 50.0], [2.5, 51.0], [2.6, 51.0], [2.7, 52.0], [2.8, 52.0], [2.9, 52.0], [3.0, 53.0], [3.1, 53.0], [3.2, 54.0], [3.3, 54.0], [3.4, 54.0], [3.5, 55.0], [3.6, 55.0], [3.7, 56.0], [3.8, 56.0], [3.9, 56.0], [4.0, 57.0], [4.1, 57.0], [4.2, 57.0], [4.3, 58.0], [4.4, 58.0], [4.5, 58.0], [4.6, 59.0], [4.7, 59.0], [4.8, 59.0], [4.9, 60.0], [5.0, 60.0], [5.1, 60.0], [5.2, 61.0], [5.3, 61.0], [5.4, 61.0], [5.5, 62.0], [5.6, 62.0], [5.7, 62.0], [5.8, 63.0], [5.9, 63.0], [6.0, 64.0], [6.1, 64.0], [6.2, 64.0], [6.3, 64.0], [6.4, 65.0], [6.5, 65.0], [6.6, 65.0], [6.7, 66.0], [6.8, 66.0], [6.9, 66.0], [7.0, 67.0], [7.1, 67.0], [7.2, 67.0], [7.3, 68.0], [7.4, 68.0], [7.5, 68.0], [7.6, 68.0], [7.7, 69.0], [7.8, 69.0], [7.9, 69.0], [8.0, 70.0], [8.1, 70.0], [8.2, 70.0], [8.3, 71.0], [8.4, 71.0], [8.5, 71.0], [8.6, 71.0], [8.7, 72.0], [8.8, 72.0], [8.9, 72.0], [9.0, 73.0], [9.1, 73.0], [9.2, 73.0], [9.3, 73.0], [9.4, 74.0], [9.5, 74.0], [9.6, 74.0], [9.7, 75.0], [9.8, 75.0], [9.9, 75.0], [10.0, 75.0], [10.1, 76.0], [10.2, 76.0], [10.3, 76.0], [10.4, 77.0], [10.5, 77.0], [10.6, 77.0], [10.7, 77.0], [10.8, 78.0], [10.9, 78.0], [11.0, 78.0], [11.1, 79.0], [11.2, 79.0], [11.3, 79.0], [11.4, 79.0], [11.5, 80.0], [11.6, 80.0], [11.7, 80.0], [11.8, 81.0], [11.9, 81.0], [12.0, 81.0], [12.1, 81.0], [12.2, 82.0], [12.3, 82.0], [12.4, 82.0], [12.5, 82.0], [12.6, 83.0], [12.7, 83.0], [12.8, 83.0], [12.9, 84.0], [13.0, 84.0], [13.1, 84.0], [13.2, 84.0], [13.3, 85.0], [13.4, 85.0], [13.5, 85.0], [13.6, 85.0], [13.7, 86.0], [13.8, 86.0], [13.9, 86.0], [14.0, 87.0], [14.1, 87.0], [14.2, 87.0], [14.3, 88.0], [14.4, 88.0], [14.5, 88.0], [14.6, 88.0], [14.7, 89.0], [14.8, 89.0], [14.9, 89.0], [15.0, 90.0], [15.1, 90.0], [15.2, 90.0], [15.3, 90.0], [15.4, 91.0], [15.5, 91.0], [15.6, 91.0], [15.7, 91.0], [15.8, 92.0], [15.9, 92.0], [16.0, 92.0], [16.1, 93.0], [16.2, 93.0], [16.3, 93.0], [16.4, 94.0], [16.5, 94.0], [16.6, 94.0], [16.7, 94.0], [16.8, 95.0], [16.9, 95.0], [17.0, 95.0], [17.1, 96.0], [17.2, 96.0], [17.3, 96.0], [17.4, 97.0], [17.5, 97.0], [17.6, 97.0], [17.7, 97.0], [17.8, 98.0], [17.9, 98.0], [18.0, 98.0], [18.1, 99.0], [18.2, 99.0], [18.3, 99.0], [18.4, 100.0], [18.5, 100.0], [18.6, 100.0], [18.7, 100.0], [18.8, 101.0], [18.9, 101.0], [19.0, 101.0], [19.1, 102.0], [19.2, 102.0], [19.3, 102.0], [19.4, 103.0], [19.5, 103.0], [19.6, 103.0], [19.7, 103.0], [19.8, 104.0], [19.9, 104.0], [20.0, 105.0], [20.1, 105.0], [20.2, 105.0], [20.3, 106.0], [20.4, 106.0], [20.5, 106.0], [20.6, 106.0], [20.7, 107.0], [20.8, 107.0], [20.9, 108.0], [21.0, 108.0], [21.1, 108.0], [21.2, 109.0], [21.3, 109.0], [21.4, 109.0], [21.5, 110.0], [21.6, 110.0], [21.7, 110.0], [21.8, 111.0], [21.9, 111.0], [22.0, 111.0], [22.1, 112.0], [22.2, 112.0], [22.3, 112.0], [22.4, 113.0], [22.5, 113.0], [22.6, 114.0], [22.7, 114.0], [22.8, 114.0], [22.9, 115.0], [23.0, 115.0], [23.1, 115.0], [23.2, 116.0], [23.3, 116.0], [23.4, 116.0], [23.5, 117.0], [23.6, 117.0], [23.7, 118.0], [23.8, 118.0], [23.9, 118.0], [24.0, 119.0], [24.1, 119.0], [24.2, 120.0], [24.3, 120.0], [24.4, 120.0], [24.5, 121.0], [24.6, 121.0], [24.7, 122.0], [24.8, 122.0], [24.9, 122.0], [25.0, 123.0], [25.1, 123.0], [25.2, 124.0], [25.3, 124.0], [25.4, 125.0], [25.5, 125.0], [25.6, 126.0], [25.7, 126.0], [25.8, 126.0], [25.9, 127.0], [26.0, 127.0], [26.1, 128.0], [26.2, 128.0], [26.3, 129.0], [26.4, 129.0], [26.5, 129.0], [26.6, 130.0], [26.7, 130.0], [26.8, 131.0], [26.9, 131.0], [27.0, 132.0], [27.1, 132.0], [27.2, 133.0], [27.3, 133.0], [27.4, 134.0], [27.5, 134.0], [27.6, 134.0], [27.7, 135.0], [27.8, 135.0], [27.9, 136.0], [28.0, 136.0], [28.1, 137.0], [28.2, 137.0], [28.3, 138.0], [28.4, 138.0], [28.5, 139.0], [28.6, 139.0], [28.7, 140.0], [28.8, 140.0], [28.9, 141.0], [29.0, 141.0], [29.1, 142.0], [29.2, 143.0], [29.3, 143.0], [29.4, 144.0], [29.5, 144.0], [29.6, 145.0], [29.7, 145.0], [29.8, 146.0], [29.9, 146.0], [30.0, 147.0], [30.1, 148.0], [30.2, 148.0], [30.3, 149.0], [30.4, 149.0], [30.5, 150.0], [30.6, 150.0], [30.7, 151.0], [30.8, 151.0], [30.9, 152.0], [31.0, 153.0], [31.1, 153.0], [31.2, 154.0], [31.3, 154.0], [31.4, 155.0], [31.5, 156.0], [31.6, 156.0], [31.7, 157.0], [31.8, 157.0], [31.9, 158.0], [32.0, 159.0], [32.1, 159.0], [32.2, 160.0], [32.3, 160.0], [32.4, 161.0], [32.5, 162.0], [32.6, 162.0], [32.7, 163.0], [32.8, 164.0], [32.9, 165.0], [33.0, 165.0], [33.1, 166.0], [33.2, 167.0], [33.3, 167.0], [33.4, 168.0], [33.5, 169.0], [33.6, 169.0], [33.7, 170.0], [33.8, 171.0], [33.9, 171.0], [34.0, 172.0], [34.1, 173.0], [34.2, 174.0], [34.3, 174.0], [34.4, 175.0], [34.5, 176.0], [34.6, 177.0], [34.7, 178.0], [34.8, 178.0], [34.9, 179.0], [35.0, 180.0], [35.1, 181.0], [35.2, 182.0], [35.3, 183.0], [35.4, 183.0], [35.5, 184.0], [35.6, 185.0], [35.7, 186.0], [35.8, 187.0], [35.9, 187.0], [36.0, 188.0], [36.1, 189.0], [36.2, 190.0], [36.3, 191.0], [36.4, 192.0], [36.5, 193.0], [36.6, 194.0], [36.7, 195.0], [36.8, 195.0], [36.9, 196.0], [37.0, 197.0], [37.1, 198.0], [37.2, 199.0], [37.3, 200.0], [37.4, 201.0], [37.5, 202.0], [37.6, 203.0], [37.7, 204.0], [37.8, 205.0], [37.9, 206.0], [38.0, 207.0], [38.1, 208.0], [38.2, 209.0], [38.3, 210.0], [38.4, 212.0], [38.5, 213.0], [38.6, 214.0], [38.7, 215.0], [38.8, 216.0], [38.9, 217.0], [39.0, 219.0], [39.1, 220.0], [39.2, 221.0], [39.3, 222.0], [39.4, 223.0], [39.5, 225.0], [39.6, 226.0], [39.7, 227.0], [39.8, 228.0], [39.9, 230.0], [40.0, 231.0], [40.1, 232.0], [40.2, 234.0], [40.3, 235.0], [40.4, 236.0], [40.5, 238.0], [40.6, 239.0], [40.7, 240.0], [40.8, 242.0], [40.9, 243.0], [41.0, 245.0], [41.1, 246.0], [41.2, 248.0], [41.3, 249.0], [41.4, 251.0], [41.5, 252.0], [41.6, 254.0], [41.7, 255.0], [41.8, 257.0], [41.9, 259.0], [42.0, 260.0], [42.1, 262.0], [42.2, 263.0], [42.3, 265.0], [42.4, 266.0], [42.5, 268.0], [42.6, 270.0], [42.7, 272.0], [42.8, 274.0], [42.9, 275.0], [43.0, 277.0], [43.1, 279.0], [43.2, 281.0], [43.3, 283.0], [43.4, 285.0], [43.5, 287.0], [43.6, 289.0], [43.7, 291.0], [43.8, 293.0], [43.9, 295.0], [44.0, 297.0], [44.1, 299.0], [44.2, 301.0], [44.3, 303.0], [44.4, 305.0], [44.5, 307.0], [44.6, 309.0], [44.7, 311.0], [44.8, 314.0], [44.9, 316.0], [45.0, 318.0], [45.1, 320.0], [45.2, 322.0], [45.3, 325.0], [45.4, 327.0], [45.5, 329.0], [45.6, 331.0], [45.7, 334.0], [45.8, 336.0], [45.9, 339.0], [46.0, 341.0], [46.1, 343.0], [46.2, 346.0], [46.3, 348.0], [46.4, 350.0], [46.5, 353.0], [46.6, 355.0], [46.7, 357.0], [46.8, 360.0], [46.9, 362.0], [47.0, 365.0], [47.1, 367.0], [47.2, 370.0], [47.3, 372.0], [47.4, 374.0], [47.5, 377.0], [47.6, 379.0], [47.7, 381.0], [47.8, 384.0], [47.9, 386.0], [48.0, 389.0], [48.1, 391.0], [48.2, 394.0], [48.3, 396.0], [48.4, 398.0], [48.5, 400.0], [48.6, 403.0], [48.7, 405.0], [48.8, 408.0], [48.9, 410.0], [49.0, 413.0], [49.1, 415.0], [49.2, 417.0], [49.3, 419.0], [49.4, 421.0], [49.5, 423.0], [49.6, 425.0], [49.7, 428.0], [49.8, 430.0], [49.9, 432.0], [50.0, 434.0], [50.1, 437.0], [50.2, 439.0], [50.3, 441.0], [50.4, 443.0], [50.5, 445.0], [50.6, 447.0], [50.7, 450.0], [50.8, 452.0], [50.9, 454.0], [51.0, 456.0], [51.1, 458.0], [51.2, 461.0], [51.3, 463.0], [51.4, 465.0], [51.5, 467.0], [51.6, 469.0], [51.7, 471.0], [51.8, 474.0], [51.9, 476.0], [52.0, 478.0], [52.1, 480.0], [52.2, 482.0], [52.3, 484.0], [52.4, 486.0], [52.5, 487.0], [52.6, 489.0], [52.7, 491.0], [52.8, 493.0], [52.9, 495.0], [53.0, 497.0], [53.1, 499.0], [53.2, 501.0], [53.3, 503.0], [53.4, 505.0], [53.5, 507.0], [53.6, 509.0], [53.7, 511.0], [53.8, 512.0], [53.9, 515.0], [54.0, 517.0], [54.1, 518.0], [54.2, 520.0], [54.3, 522.0], [54.4, 524.0], [54.5, 526.0], [54.6, 528.0], [54.7, 529.0], [54.8, 531.0], [54.9, 533.0], [55.0, 535.0], [55.1, 537.0], [55.2, 539.0], [55.3, 540.0], [55.4, 542.0], [55.5, 544.0], [55.6, 546.0], [55.7, 548.0], [55.8, 550.0], [55.9, 552.0], [56.0, 554.0], [56.1, 555.0], [56.2, 557.0], [56.3, 559.0], [56.4, 561.0], [56.5, 562.0], [56.6, 564.0], [56.7, 566.0], [56.8, 567.0], [56.9, 569.0], [57.0, 570.0], [57.1, 572.0], [57.2, 574.0], [57.3, 576.0], [57.4, 578.0], [57.5, 579.0], [57.6, 581.0], [57.7, 583.0], [57.8, 585.0], [57.9, 586.0], [58.0, 589.0], [58.1, 590.0], [58.2, 592.0], [58.3, 594.0], [58.4, 595.0], [58.5, 597.0], [58.6, 599.0], [58.7, 601.0], [58.8, 603.0], [58.9, 605.0], [59.0, 607.0], [59.1, 608.0], [59.2, 610.0], [59.3, 612.0], [59.4, 613.0], [59.5, 615.0], [59.6, 617.0], [59.7, 619.0], [59.8, 621.0], [59.9, 623.0], [60.0, 624.0], [60.1, 626.0], [60.2, 628.0], [60.3, 629.0], [60.4, 631.0], [60.5, 633.0], [60.6, 635.0], [60.7, 637.0], [60.8, 638.0], [60.9, 640.0], [61.0, 642.0], [61.1, 643.0], [61.2, 645.0], [61.3, 647.0], [61.4, 648.0], [61.5, 650.0], [61.6, 652.0], [61.7, 654.0], [61.8, 655.0], [61.9, 657.0], [62.0, 659.0], [62.1, 661.0], [62.2, 662.0], [62.3, 664.0], [62.4, 666.0], [62.5, 667.0], [62.6, 669.0], [62.7, 671.0], [62.8, 673.0], [62.9, 675.0], [63.0, 677.0], [63.1, 678.0], [63.2, 680.0], [63.3, 682.0], [63.4, 683.0], [63.5, 685.0], [63.6, 687.0], [63.7, 689.0], [63.8, 690.0], [63.9, 692.0], [64.0, 694.0], [64.1, 696.0], [64.2, 698.0], [64.3, 700.0], [64.4, 702.0], [64.5, 703.0], [64.6, 705.0], [64.7, 707.0], [64.8, 708.0], [64.9, 710.0], [65.0, 712.0], [65.1, 714.0], [65.2, 716.0], [65.3, 717.0], [65.4, 719.0], [65.5, 721.0], [65.6, 722.0], [65.7, 724.0], [65.8, 726.0], [65.9, 727.0], [66.0, 729.0], [66.1, 731.0], [66.2, 733.0], [66.3, 735.0], [66.4, 737.0], [66.5, 738.0], [66.6, 740.0], [66.7, 742.0], [66.8, 744.0], [66.9, 746.0], [67.0, 748.0], [67.1, 749.0], [67.2, 751.0], [67.3, 753.0], [67.4, 755.0], [67.5, 756.0], [67.6, 758.0], [67.7, 760.0], [67.8, 762.0], [67.9, 763.0], [68.0, 765.0], [68.1, 767.0], [68.2, 768.0], [68.3, 770.0], [68.4, 772.0], [68.5, 774.0], [68.6, 776.0], [68.7, 777.0], [68.8, 779.0], [68.9, 781.0], [69.0, 782.0], [69.1, 784.0], [69.2, 786.0], [69.3, 788.0], [69.4, 790.0], [69.5, 792.0], [69.6, 794.0], [69.7, 795.0], [69.8, 797.0], [69.9, 799.0], [70.0, 801.0], [70.1, 802.0], [70.2, 804.0], [70.3, 806.0], [70.4, 808.0], [70.5, 810.0], [70.6, 812.0], [70.7, 813.0], [70.8, 815.0], [70.9, 817.0], [71.0, 818.0], [71.1, 820.0], [71.2, 822.0], [71.3, 824.0], [71.4, 826.0], [71.5, 828.0], [71.6, 830.0], [71.7, 832.0], [71.8, 834.0], [71.9, 836.0], [72.0, 837.0], [72.1, 839.0], [72.2, 841.0], [72.3, 843.0], [72.4, 845.0], [72.5, 846.0], [72.6, 848.0], [72.7, 850.0], [72.8, 852.0], [72.9, 854.0], [73.0, 856.0], [73.1, 858.0], [73.2, 860.0], [73.3, 862.0], [73.4, 863.0], [73.5, 865.0], [73.6, 868.0], [73.7, 869.0], [73.8, 871.0], [73.9, 873.0], [74.0, 876.0], [74.1, 878.0], [74.2, 880.0], [74.3, 882.0], [74.4, 884.0], [74.5, 886.0], [74.6, 887.0], [74.7, 889.0], [74.8, 891.0], [74.9, 894.0], [75.0, 895.0], [75.1, 897.0], [75.2, 900.0], [75.3, 901.0], [75.4, 903.0], [75.5, 905.0], [75.6, 907.0], [75.7, 909.0], [75.8, 911.0], [75.9, 913.0], [76.0, 915.0], [76.1, 917.0], [76.2, 919.0], [76.3, 920.0], [76.4, 922.0], [76.5, 924.0], [76.6, 926.0], [76.7, 928.0], [76.8, 930.0], [76.9, 933.0], [77.0, 935.0], [77.1, 937.0], [77.2, 939.0], [77.3, 941.0], [77.4, 943.0], [77.5, 945.0], [77.6, 947.0], [77.7, 949.0], [77.8, 952.0], [77.9, 954.0], [78.0, 956.0], [78.1, 958.0], [78.2, 960.0], [78.3, 963.0], [78.4, 964.0], [78.5, 966.0], [78.6, 968.0], [78.7, 970.0], [78.8, 972.0], [78.9, 974.0], [79.0, 977.0], [79.1, 979.0], [79.2, 981.0], [79.3, 983.0], [79.4, 986.0], [79.5, 988.0], [79.6, 990.0], [79.7, 993.0], [79.8, 995.0], [79.9, 997.0], [80.0, 999.0], [80.1, 1002.0], [80.2, 1004.0], [80.3, 1006.0], [80.4, 1008.0], [80.5, 1010.0], [80.6, 1012.0], [80.7, 1014.0], [80.8, 1016.0], [80.9, 1018.0], [81.0, 1020.0], [81.1, 1023.0], [81.2, 1025.0], [81.3, 1028.0], [81.4, 1030.0], [81.5, 1033.0], [81.6, 1035.0], [81.7, 1038.0], [81.8, 1040.0], [81.9, 1043.0], [82.0, 1046.0], [82.1, 1048.0], [82.2, 1051.0], [82.3, 1053.0], [82.4, 1056.0], [82.5, 1059.0], [82.6, 1061.0], [82.7, 1064.0], [82.8, 1066.0], [82.9, 1069.0], [83.0, 1071.0], [83.1, 1074.0], [83.2, 1076.0], [83.3, 1079.0], [83.4, 1082.0], [83.5, 1084.0], [83.6, 1087.0], [83.7, 1090.0], [83.8, 1093.0], [83.9, 1096.0], [84.0, 1099.0], [84.1, 1102.0], [84.2, 1105.0], [84.3, 1107.0], [84.4, 1110.0], [84.5, 1112.0], [84.6, 1116.0], [84.7, 1119.0], [84.8, 1122.0], [84.9, 1125.0], [85.0, 1128.0], [85.1, 1131.0], [85.2, 1134.0], [85.3, 1137.0], [85.4, 1140.0], [85.5, 1143.0], [85.6, 1146.0], [85.7, 1149.0], [85.8, 1151.0], [85.9, 1154.0], [86.0, 1157.0], [86.1, 1160.0], [86.2, 1163.0], [86.3, 1167.0], [86.4, 1170.0], [86.5, 1173.0], [86.6, 1176.0], [86.7, 1178.0], [86.8, 1182.0], [86.9, 1185.0], [87.0, 1188.0], [87.1, 1191.0], [87.2, 1194.0], [87.3, 1198.0], [87.4, 1201.0], [87.5, 1205.0], [87.6, 1208.0], [87.7, 1212.0], [87.8, 1216.0], [87.9, 1219.0], [88.0, 1222.0], [88.1, 1226.0], [88.2, 1230.0], [88.3, 1233.0], [88.4, 1237.0], [88.5, 1240.0], [88.6, 1244.0], [88.7, 1248.0], [88.8, 1251.0], [88.9, 1255.0], [89.0, 1259.0], [89.1, 1262.0], [89.2, 1266.0], [89.3, 1270.0], [89.4, 1273.0], [89.5, 1277.0], [89.6, 1281.0], [89.7, 1284.0], [89.8, 1289.0], [89.9, 1292.0], [90.0, 1297.0], [90.1, 1301.0], [90.2, 1305.0], [90.3, 1309.0], [90.4, 1313.0], [90.5, 1317.0], [90.6, 1321.0], [90.7, 1326.0], [90.8, 1330.0], [90.9, 1334.0], [91.0, 1339.0], [91.1, 1343.0], [91.2, 1347.0], [91.3, 1352.0], [91.4, 1357.0], [91.5, 1361.0], [91.6, 1367.0], [91.7, 1371.0], [91.8, 1376.0], [91.9, 1381.0], [92.0, 1387.0], [92.1, 1392.0], [92.2, 1398.0], [92.3, 1403.0], [92.4, 1407.0], [92.5, 1413.0], [92.6, 1419.0], [92.7, 1423.0], [92.8, 1428.0], [92.9, 1433.0], [93.0, 1439.0], [93.1, 1444.0], [93.2, 1450.0], [93.3, 1456.0], [93.4, 1462.0], [93.5, 1469.0], [93.6, 1476.0], [93.7, 1483.0], [93.8, 1487.0], [93.9, 1494.0], [94.0, 1500.0], [94.1, 1506.0], [94.2, 1512.0], [94.3, 1518.0], [94.4, 1525.0], [94.5, 1530.0], [94.6, 1537.0], [94.7, 1544.0], [94.8, 1551.0], [94.9, 1559.0], [95.0, 1566.0], [95.1, 1575.0], [95.2, 1582.0], [95.3, 1590.0], [95.4, 1597.0], [95.5, 1605.0], [95.6, 1614.0], [95.7, 1622.0], [95.8, 1630.0], [95.9, 1640.0], [96.0, 1649.0], [96.1, 1658.0], [96.2, 1667.0], [96.3, 1676.0], [96.4, 1686.0], [96.5, 1696.0], [96.6, 1706.0], [96.7, 1716.0], [96.8, 1728.0], [96.9, 1739.0], [97.0, 1753.0], [97.1, 1766.0], [97.2, 1779.0], [97.3, 1791.0], [97.4, 1804.0], [97.5, 1815.0], [97.6, 1831.0], [97.7, 1845.0], [97.8, 1860.0], [97.9, 1876.0], [98.0, 1891.0], [98.1, 1909.0], [98.2, 1928.0], [98.3, 1949.0], [98.4, 1966.0], [98.5, 1986.0], [98.6, 2008.0], [98.7, 2032.0], [98.8, 2057.0], [98.9, 2085.0], [99.0, 2116.0], [99.1, 2154.0], [99.2, 2186.0], [99.3, 2225.0], [99.4, 2262.0], [99.5, 2316.0], [99.6, 2384.0], [99.7, 2455.0], [99.8, 2576.0], [99.9, 2751.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 22058.0, "series": [{"data": [[0.0, 21555.0], [600.0, 6630.0], [700.0, 6615.0], [800.0, 6179.0], [900.0, 5643.0], [1000.0, 4703.0], [1100.0, 3899.0], [1200.0, 3194.0], [1300.0, 2516.0], [1400.0, 2073.0], [1500.0, 1686.0], [100.0, 22058.0], [1600.0, 1293.0], [1700.0, 989.0], [1800.0, 786.0], [1900.0, 607.0], [2000.0, 449.0], [2100.0, 338.0], [2300.0, 187.0], [2200.0, 267.0], [2400.0, 139.0], [2500.0, 95.0], [2600.0, 60.0], [2800.0, 27.0], [2700.0, 56.0], [2900.0, 21.0], [3000.0, 19.0], [3100.0, 7.0], [200.0, 8117.0], [3200.0, 9.0], [3300.0, 3.0], [3400.0, 1.0], [3500.0, 1.0], [3600.0, 3.0], [300.0, 5078.0], [400.0, 5465.0], [500.0, 6432.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7024.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 62343.0, "series": [{"data": [[0.0, 62343.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 47833.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7024.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72879494E12, "maxY": 16.0, "series": [{"data": [[1.72879902E12, 12.0], [1.72879932E12, 12.0], [1.72879962E12, 12.0], [1.72880052E12, 4.640167364016733], [1.72880022E12, 12.0], [1.72879992E12, 12.0], [1.7287989E12, 12.0], [1.7287992E12, 12.0], [1.7287995E12, 12.0], [1.7287998E12, 12.0], [1.72879878E12, 12.0], [1.7288004E12, 12.0], [1.72879908E12, 12.0], [1.7288001E12, 12.0], [1.72879938E12, 12.0], [1.72879968E12, 12.0], [1.72880016E12, 12.0], [1.72879986E12, 12.0], [1.72879896E12, 12.0], [1.72879926E12, 12.0], [1.72879956E12, 12.0], [1.72880028E12, 12.0], [1.72879998E12, 12.0], [1.72879884E12, 12.0], [1.72880034E12, 12.0], [1.72879914E12, 12.0], [1.72880004E12, 12.0], [1.72879944E12, 12.0], [1.72879974E12, 12.0], [1.72879872E12, 11.934383202099735], [1.72880046E12, 10.344858156028375]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72879512E12, 2.0], [1.72879518E12, 1.8969957081545068], [1.728795E12, 2.0], [1.72879506E12, 2.0], [1.72879494E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72879518E12, 3.978260869565218], [1.72879608E12, 4.0], [1.72879548E12, 4.0], [1.72879578E12, 4.0], [1.72879668E12, 4.0], [1.72879536E12, 4.0], [1.72879638E12, 4.0], [1.72879596E12, 4.0], [1.72879566E12, 4.0], [1.72879656E12, 4.0], [1.72879626E12, 4.0], [1.72879554E12, 4.0], [1.72879686E12, 1.0], [1.72879584E12, 4.0], [1.72879524E12, 4.0], [1.72879644E12, 4.0], [1.72879614E12, 4.0], [1.72879674E12, 4.0], [1.72879572E12, 4.0], [1.72879542E12, 4.0], [1.72879632E12, 4.0], [1.72879602E12, 4.0], [1.7287953E12, 4.0], [1.7287956E12, 4.0], [1.72879662E12, 4.0], [1.7287962E12, 4.0], [1.7287959E12, 4.0], [1.7287968E12, 3.391959798994972], [1.7287965E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72880112E12, 16.0], [1.72880082E12, 16.0], [1.72880052E12, 15.924393723252505], [1.72880184E12, 16.0], [1.72880154E12, 16.0], [1.72880124E12, 16.0], [1.72880094E12, 16.0], [1.7288016E12, 16.0], [1.7288013E12, 16.0], [1.728801E12, 16.0], [1.7288007E12, 16.0], [1.72880202E12, 11.16934046345811], [1.72880172E12, 16.0], [1.72880142E12, 16.0], [1.72880178E12, 16.0], [1.72880208E12, 1.7428571428571429], [1.72880148E12, 16.0], [1.72880118E12, 16.0], [1.72880088E12, 16.0], [1.72880058E12, 16.0], [1.7288019E12, 16.0], [1.72880064E12, 16.0], [1.72880166E12, 16.0], [1.72880196E12, 15.990314769975784], [1.72880136E12, 16.0], [1.72880106E12, 16.0], [1.72880076E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.7287974E12, 8.0], [1.7287971E12, 8.0], [1.7287977E12, 8.0], [1.728798E12, 8.0], [1.7287983E12, 8.0], [1.7287986E12, 8.0], [1.72879728E12, 8.0], [1.72879698E12, 8.0], [1.72879758E12, 8.0], [1.72879788E12, 8.0], [1.72879818E12, 8.0], [1.72879848E12, 8.0], [1.72879716E12, 8.0], [1.72879686E12, 7.975845410628018], [1.72879746E12, 8.0], [1.72879776E12, 8.0], [1.72879806E12, 8.0], [1.72879836E12, 8.0], [1.72879704E12, 8.0], [1.72879866E12, 6.585964912280701], [1.72879764E12, 8.0], [1.72879734E12, 8.0], [1.72879794E12, 8.0], [1.72879824E12, 8.0], [1.72879692E12, 8.0], [1.72879854E12, 8.0], [1.72879752E12, 8.0], [1.72879722E12, 8.0], [1.72879782E12, 8.0], [1.72879812E12, 8.0], [1.72879842E12, 8.0], [1.72879872E12, 2.683098591549297]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72880208E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 375.9170731707315, "minX": 1.0, "maxY": 763.3431315294295, "series": [{"data": [[2.0, 396.2066508313534], [8.0, 455.28955166810175], [9.0, 427.3673469387753], [10.0, 549.4750000000001], [11.0, 577.1201550387597], [3.0, 375.9170731707315], [12.0, 594.6108811864085], [13.0, 595.4909090909089], [14.0, 610.9907407407406], [15.0, 634.174377224199], [1.0, 415.5904761904761], [4.0, 404.88701560140834], [16.0, 763.3431315294295], [5.0, 407.2096219931272], [6.0, 466.7590361445781], [7.0, 436.32019704433526]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.701749146757681, 571.396168941983]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72879494E12, "maxY": 6.0621324333333336E7, "series": [{"data": [[1.72879902E12, 5.902476693333333E7], [1.72879578E12, 3.13230152E7], [1.728798E12, 5.1411000083333336E7], [1.72880022E12, 5.7437153233333334E7], [1.72880124E12, 5.931372145E7], [1.72879698E12, 5.0446357083333336E7], [1.7287992E12, 5.6566372916666664E7], [1.7288016E12, 5.7378413916666664E7], [1.72879596E12, 3.029658715E7], [1.72879818E12, 5.156584213333333E7], [1.72879716E12, 5.261351965E7], [1.7288004E12, 5.657504006666667E7], [1.72879494E12, 3124722.3833333333], [1.72879938E12, 5.738940118333333E7], [1.72880142E12, 5.990906663333333E7], [1.72879512E12, 1.5890417116666667E7], [1.72880178E12, 5.823120368333333E7], [1.72879614E12, 3.0474827533333335E7], [1.72879836E12, 5.26152364E7], [1.72879734E12, 5.150499855E7], [1.72879956E12, 5.680380946666667E7], [1.72880058E12, 5.7319363333333336E7], [1.72879632E12, 2.98473492E7], [1.7287953E12, 3.0845917983333334E7], [1.72879854E12, 5.243208886666667E7], [1.72879752E12, 5.27690835E7], [1.72880196E12, 5.742869361666667E7], [1.72879974E12, 5.9958087266666666E7], [1.72880076E12, 5.902278611666667E7], [1.7287965E12, 3.0058229633333333E7], [1.72879872E12, 4.111660318333333E7], [1.7287971E12, 5.168999246666667E7], [1.72879932E12, 5.7264765416666664E7], [1.72879608E12, 2.8506848466666665E7], [1.72880052E12, 4.12268126E7], [1.72879506E12, 1.4984557816666666E7], [1.7287983E12, 5.2225108333333336E7], [1.72880154E12, 5.956822453333333E7], [1.72879728E12, 4.85657476E7], [1.7287995E12, 5.480350835E7], [1.72879626E12, 2.9417488216666665E7], [1.72879848E12, 5.251006606666667E7], [1.7288007E12, 5.755854281666667E7], [1.72880172E12, 5.7565721916666664E7], [1.72879524E12, 2.9125144983333334E7], [1.72879746E12, 5.0846855833333336E7], [1.72879968E12, 5.605533468333333E7], [1.72879644E12, 3.1632612116666667E7], [1.72879986E12, 5.731243305E7], [1.72880208E12, 2198002.783333333], [1.72879866E12, 4.478193496666667E7], [1.72879764E12, 5.1135685266666666E7], [1.72880088E12, 6.03891839E7], [1.72879542E12, 3.0075049116666667E7], [1.7288019E12, 5.755960593333333E7], [1.7287956E12, 3.0520732566666666E7], [1.72879884E12, 5.652489205E7], [1.72879662E12, 2.94544066E7], [1.72880004E12, 5.5507725916666664E7], [1.72879782E12, 5.244294215E7], [1.72880106E12, 5.891828336666667E7], [1.7287968E12, 1.9601213683333334E7], [1.7287974E12, 5.312303518333333E7], [1.72880082E12, 5.9331578516666666E7], [1.72879518E12, 1.7018142883333333E7], [1.72879962E12, 5.6478181E7], [1.72880184E12, 6.0621324333333336E7], [1.72879536E12, 2.9723464466666665E7], [1.72879638E12, 3.0496166716666665E7], [1.7287986E12, 5.212752575E7], [1.72879758E12, 5.137678506666667E7], [1.7287998E12, 5.848610261666667E7], [1.728801E12, 5.832365031666667E7], [1.72879656E12, 3.0881143E7], [1.72879554E12, 3.0320530433333334E7], [1.72879878E12, 5.745130993333333E7], [1.72880202E12, 4.9199081333333336E7], [1.72879776E12, 5.13156631E7], [1.72880016E12, 5.845233986666667E7], [1.72879674E12, 2.8510247616666667E7], [1.72879896E12, 5.74936326E7], [1.72880118E12, 5.798871653333333E7], [1.72879572E12, 3.0356967866666667E7], [1.72879794E12, 5.182545803333333E7], [1.72879998E12, 5.5228219983333334E7], [1.72879692E12, 5.251149103333333E7], [1.72880034E12, 5.788565325E7], [1.72879914E12, 5.7164046833333336E7], [1.72880136E12, 5.7605583166666664E7], [1.7287959E12, 3.02834891E7], [1.72879812E12, 5.216110746666667E7], [1.72880112E12, 5.948851131666667E7], [1.72879548E12, 3.1299025516666666E7], [1.7287977E12, 5.299493538333333E7], [1.72879668E12, 3.07281873E7], [1.72879992E12, 5.80604574E7], [1.7287989E12, 5.7240972016666666E7], [1.72880094E12, 5.7513905233333334E7], [1.7288013E12, 5.7933906083333336E7], [1.72879566E12, 3.1219287783333335E7], [1.72879788E12, 5.1645447766666666E7], [1.72879686E12, 2.4680753366666667E7], [1.72879908E12, 5.730944421666667E7], [1.7288001E12, 5.690192478333333E7], [1.72879584E12, 2.954120805E7], [1.72879806E12, 5.3037691516666666E7], [1.72879704E12, 5.425385336666667E7], [1.72880148E12, 6.051976375E7], [1.72879926E12, 5.58167411E7], [1.72880028E12, 5.6564634983333334E7], [1.72879602E12, 2.9437959416666668E7], [1.72879824E12, 5.0363752516666666E7], [1.72880064E12, 6.035066556666667E7], [1.728795E12, 1.596790445E7], [1.72879722E12, 5.351165461666667E7], [1.72879944E12, 5.7718095833333336E7], [1.72880166E12, 5.70752481E7], [1.7287962E12, 3.13717094E7], [1.72879842E12, 5.15118273E7], [1.72880046E12, 5.533189931666667E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72879902E12, 0.0], [1.72879578E12, 0.0], [1.728798E12, 0.0], [1.72880022E12, 0.0], [1.72880124E12, 0.0], [1.72879698E12, 0.0], [1.7287992E12, 0.0], [1.7288016E12, 0.0], [1.72879596E12, 0.0], [1.72879818E12, 0.0], [1.72879716E12, 0.0], [1.7288004E12, 0.0], [1.72879494E12, 0.0], [1.72879938E12, 0.0], [1.72880142E12, 0.0], [1.72879512E12, 0.0], [1.72880178E12, 0.0], [1.72879614E12, 0.0], [1.72879836E12, 0.0], [1.72879734E12, 0.0], [1.72879956E12, 0.0], [1.72880058E12, 0.0], [1.72879632E12, 0.0], [1.7287953E12, 0.0], [1.72879854E12, 0.0], [1.72879752E12, 0.0], [1.72880196E12, 0.0], [1.72879974E12, 0.0], [1.72880076E12, 0.0], [1.7287965E12, 0.0], [1.72879872E12, 0.0], [1.7287971E12, 0.0], [1.72879932E12, 0.0], [1.72879608E12, 0.0], [1.72880052E12, 0.0], [1.72879506E12, 0.0], [1.7287983E12, 0.0], [1.72880154E12, 0.0], [1.72879728E12, 0.0], [1.7287995E12, 0.0], [1.72879626E12, 0.0], [1.72879848E12, 0.0], [1.7288007E12, 0.0], [1.72880172E12, 0.0], [1.72879524E12, 0.0], [1.72879746E12, 0.0], [1.72879968E12, 0.0], [1.72879644E12, 0.0], [1.72879986E12, 0.0], [1.72880208E12, 0.0], [1.72879866E12, 0.0], [1.72879764E12, 0.0], [1.72880088E12, 0.0], [1.72879542E12, 0.0], [1.7288019E12, 0.0], [1.7287956E12, 0.0], [1.72879884E12, 0.0], [1.72879662E12, 0.0], [1.72880004E12, 0.0], [1.72879782E12, 0.0], [1.72880106E12, 0.0], [1.7287968E12, 0.0], [1.7287974E12, 0.0], [1.72880082E12, 0.0], [1.72879518E12, 0.0], [1.72879962E12, 0.0], [1.72880184E12, 0.0], [1.72879536E12, 0.0], [1.72879638E12, 0.0], [1.7287986E12, 0.0], [1.72879758E12, 0.0], [1.7287998E12, 0.0], [1.728801E12, 0.0], [1.72879656E12, 0.0], [1.72879554E12, 0.0], [1.72879878E12, 0.0], [1.72880202E12, 0.0], [1.72879776E12, 0.0], [1.72880016E12, 0.0], [1.72879674E12, 0.0], [1.72879896E12, 0.0], [1.72880118E12, 0.0], [1.72879572E12, 0.0], [1.72879794E12, 0.0], [1.72879998E12, 0.0], [1.72879692E12, 0.0], [1.72880034E12, 0.0], [1.72879914E12, 0.0], [1.72880136E12, 0.0], [1.7287959E12, 0.0], [1.72879812E12, 0.0], [1.72880112E12, 0.0], [1.72879548E12, 0.0], [1.7287977E12, 0.0], [1.72879668E12, 0.0], [1.72879992E12, 0.0], [1.7287989E12, 0.0], [1.72880094E12, 0.0], [1.7288013E12, 0.0], [1.72879566E12, 0.0], [1.72879788E12, 0.0], [1.72879686E12, 0.0], [1.72879908E12, 0.0], [1.7288001E12, 0.0], [1.72879584E12, 0.0], [1.72879806E12, 0.0], [1.72879704E12, 0.0], [1.72880148E12, 0.0], [1.72879926E12, 0.0], [1.72880028E12, 0.0], [1.72879602E12, 0.0], [1.72879824E12, 0.0], [1.72880064E12, 0.0], [1.728795E12, 0.0], [1.72879722E12, 0.0], [1.72879944E12, 0.0], [1.72880166E12, 0.0], [1.7287962E12, 0.0], [1.72879842E12, 0.0], [1.72880046E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72880208E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 372.6145552560646, "minX": 1.72879494E12, "maxY": 818.045996592846, "series": [{"data": [[1.72879902E12, 640.5766488413543], [1.72879578E12, 400.60767946577636], [1.728798E12, 452.1794145420205], [1.72880022E12, 594.8715824357915], [1.72880124E12, 736.6316193399841], [1.72879698E12, 447.9281716417908], [1.7287992E12, 571.471563981042], [1.7288016E12, 781.1371428571441], [1.72879596E12, 400.5993322203674], [1.72879818E12, 451.1713747645953], [1.72879716E12, 458.43923444976065], [1.7288004E12, 605.2848739495793], [1.72879494E12, 445.53703703703707], [1.72879938E12, 574.9463570856689], [1.72880142E12, 745.1920684292378], [1.72879512E12, 412.3356164383561], [1.72880178E12, 745.3001543209878], [1.72879614E12, 399.30232558139545], [1.72879836E12, 465.2383720930236], [1.72879734E12, 444.11726685133897], [1.72879956E12, 580.0080064051238], [1.72880058E12, 749.7289062499996], [1.72879632E12, 388.82096774193514], [1.7287953E12, 419.73380035026224], [1.72879854E12, 463.4584139264986], [1.72879752E12, 453.15297450424924], [1.72880196E12, 775.7094430992739], [1.72879974E12, 592.5770816158283], [1.72880076E12, 742.4396284829714], [1.7287965E12, 427.0910714285715], [1.72879872E12, 542.1471238938052], [1.7287971E12, 452.3427230046947], [1.72879932E12, 599.3441396508729], [1.72879608E12, 402.1010101010104], [1.72880052E12, 631.4425531914897], [1.72879506E12, 399.7408637873754], [1.7287983E12, 466.2833495618308], [1.72880154E12, 768.9671737389914], [1.72879728E12, 450.88983050847503], [1.7287995E12, 610.3183361629892], [1.72879626E12, 404.85279187817264], [1.72879848E12, 458.55980861244046], [1.7288007E12, 742.0372670807457], [1.72880172E12, 777.846905537459], [1.72879524E12, 390.2227642276426], [1.72879746E12, 457.81792183031513], [1.72879968E12, 563.2373145979698], [1.72879644E12, 410.2282793867123], [1.72879986E12, 600.4555278470491], [1.72880208E12, 479.62857142857143], [1.72879866E12, 446.5719298245613], [1.72879764E12, 432.09810981098104], [1.72880088E12, 767.8107028753996], [1.72879542E12, 437.0072727272728], [1.7288019E12, 790.9555555555553], [1.7287956E12, 417.3402777777777], [1.72879884E12, 576.2365677626316], [1.72879662E12, 420.75837742504433], [1.72880004E12, 582.5970755483348], [1.72879782E12, 466.54785156249983], [1.72880106E12, 774.4807383627614], [1.7287968E12, 386.96482412060317], [1.7287974E12, 468.15820312499983], [1.72880082E12, 763.4187153053143], [1.72879518E12, 372.6145552560646], [1.72879962E12, 605.9999999999985], [1.72880184E12, 753.3610023492563], [1.72879536E12, 389.81596091205193], [1.72879638E12, 390.60755336617365], [1.7287986E12, 464.40579710144965], [1.72879758E12, 448.9199623352166], [1.7287998E12, 600.565943238731], [1.728801E12, 778.2228525121557], [1.72879656E12, 404.3572621035061], [1.72879554E12, 392.71522094926365], [1.72879878E12, 578.1733870967731], [1.72880202E12, 552.269162210338], [1.72879776E12, 468.91156462585053], [1.72880016E12, 598.2205638474298], [1.72879674E12, 378.48031496063027], [1.72879896E12, 589.426819296811], [1.72880118E12, 765.4692246203036], [1.72879572E12, 420.18848167539244], [1.72879794E12, 441.80420860018336], [1.72879998E12, 584.156401944895], [1.72879692E12, 470.73647984267444], [1.72880034E12, 617.3055793991417], [1.72879914E12, 607.8336148648643], [1.72880136E12, 785.987694831829], [1.7287959E12, 412.0979381443297], [1.72879812E12, 442.738051470588], [1.72880112E12, 776.3644480519479], [1.72879548E12, 410.343053173242], [1.7287977E12, 470.3571428571429], [1.72879668E12, 397.41225165562867], [1.72879992E12, 580.3631961259082], [1.7287989E12, 620.4678111587984], [1.72880094E12, 761.7774244833074], [1.7288013E12, 756.978773584906], [1.72879566E12, 444.26815642458064], [1.72879788E12, 458.0966507177031], [1.72879686E12, 448.21686746987933], [1.72879908E12, 602.8671152228768], [1.7288001E12, 617.9289383561646], [1.72879584E12, 417.8919860627175], [1.72879806E12, 465.8412852969815], [1.72879704E12, 448.47943925233636], [1.72880148E12, 818.045996592846], [1.72879926E12, 594.7475165562904], [1.72880028E12, 561.437158469946], [1.72879602E12, 375.3630672926445], [1.72879824E12, 441.9253456221199], [1.72880064E12, 765.8423566878998], [1.728795E12, 373.47500000000025], [1.72879722E12, 433.30595667870057], [1.72879944E12, 624.5758889852547], [1.72880166E12, 734.1084797555384], [1.7287962E12, 408.78438030560255], [1.72879842E12, 455.9800947867298], [1.72880046E12, 549.4884751773053]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72880208E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 245.45624999999998, "minX": 1.72879494E12, "maxY": 564.5817717206137, "series": [{"data": [[1.72879902E12, 435.01158645276286], [1.72879578E12, 263.49081803005004], [1.728798E12, 304.2152974504251], [1.72880022E12, 407.1781275890638], [1.72880124E12, 508.7421335379895], [1.72879698E12, 305.1809701492533], [1.7287992E12, 391.97867298578194], [1.7288016E12, 541.7379591836733], [1.72879596E12, 264.5292153589317], [1.72879818E12, 306.90489642184554], [1.72879716E12, 309.1215311004783], [1.7288004E12, 418.0201680672265], [1.72879494E12, 298.37037037037044], [1.72879938E12, 392.7750200160124], [1.72880142E12, 510.01399688958037], [1.72879512E12, 274.9828767123286], [1.72880178E12, 514.7978395061722], [1.72879614E12, 266.6710963455151], [1.72879836E12, 313.1831395348842], [1.72879734E12, 301.70637119113564], [1.72879956E12, 397.0472377902327], [1.72880058E12, 517.5210937500009], [1.72879632E12, 260.74838709677425], [1.7287953E12, 280.3677758318737], [1.72879854E12, 312.3384912959381], [1.72879752E12, 304.45042492917844], [1.72880196E12, 539.8062953995146], [1.72879974E12, 401.8227535037099], [1.72880076E12, 514.1068111455106], [1.7287965E12, 284.3571428571428], [1.72879872E12, 370.3738938053093], [1.7287971E12, 306.4028169014087], [1.72879932E12, 411.61679135494603], [1.72879608E12, 272.72390572390543], [1.72880052E12, 436.21170212765946], [1.72879506E12, 269.01661129568095], [1.7287983E12, 313.7877312560856], [1.72880154E12, 528.0952762209774], [1.72879728E12, 309.7645951035787], [1.7287995E12, 423.81578947368445], [1.72879626E12, 272.41116751269004], [1.72879848E12, 308.34736842105303], [1.7288007E12, 513.6436335403724], [1.72880172E12, 539.1099348534194], [1.72879524E12, 261.70081300812967], [1.72879746E12, 310.9590085795993], [1.72879968E12, 389.36455893832925], [1.72879644E12, 270.8517887563884], [1.72879986E12, 412.85702410640005], [1.72880208E12, 320.9714285714286], [1.72879866E12, 298.9017543859651], [1.72879764E12, 292.94509450945105], [1.72880088E12, 526.8722044728448], [1.72879542E12, 294.0181818181822], [1.7288019E12, 548.1061728395052], [1.7287956E12, 276.80902777777777], [1.72879884E12, 396.6543704891737], [1.72879662E12, 283.19929453262785], [1.72880004E12, 400.85783915515816], [1.72879782E12, 312.6757812499998], [1.72880106E12, 533.3635634028899], [1.7287968E12, 257.65829145728634], [1.7287974E12, 316.2294921875002], [1.72880082E12, 523.5828707375088], [1.72879518E12, 251.2722371967658], [1.72879962E12, 415.0890585241734], [1.72880184E12, 517.3586530931881], [1.72879536E12, 260.38273615635177], [1.72879638E12, 259.82101806239694], [1.7287986E12, 312.4347826086956], [1.72879758E12, 303.24764595103613], [1.7287998E12, 409.5534223706178], [1.728801E12, 539.8038897893033], [1.72879656E12, 269.25709515859774], [1.72879554E12, 261.57119476268406], [1.72879878E12, 396.45806451612924], [1.72880202E12, 378.88680926916214], [1.72879776E12, 317.93974732750297], [1.72880016E12, 408.67744610281915], [1.72879674E12, 256.0881889763779], [1.72879896E12, 404.64840556009824], [1.72880118E12, 528.6338928856918], [1.72879572E12, 280.1692844677136], [1.72879794E12, 299.98353156450133], [1.72879998E12, 403.08914100486237], [1.72879692E12, 319.7748279252708], [1.72880034E12, 421.5433476394848], [1.72879914E12, 415.74070945945977], [1.72880136E12, 546.2264150943381], [1.7287959E12, 275.2302405498278], [1.72879812E12, 297.2325367647056], [1.72880112E12, 534.6055194805194], [1.72879548E12, 271.5986277873072], [1.7287977E12, 315.3356164383557], [1.72879668E12, 263.85596026490083], [1.72879992E12, 394.50524616626325], [1.7287989E12, 425.35879828326154], [1.72880094E12, 528.9292527821943], [1.7288013E12, 523.0133647798743], [1.72879566E12, 294.73929236499066], [1.72879788E12, 309.5339712918666], [1.72879686E12, 303.7931726907631], [1.72879908E12, 413.7182506307819], [1.7288001E12, 425.97688356164446], [1.72879584E12, 281.3937282229962], [1.72879806E12, 311.9337877312559], [1.72879704E12, 299.26542056074805], [1.72880148E12, 564.5817717206137], [1.72879926E12, 409.750827814569], [1.72880028E12, 383.2076502732249], [1.72879602E12, 252.0328638497652], [1.72879824E12, 298.43686635944687], [1.72880064E12, 524.3750000000006], [1.728795E12, 245.45624999999998], [1.72879722E12, 290.20758122743706], [1.72879944E12, 426.6964440589768], [1.72880166E12, 506.59893048128373], [1.7287962E12, 270.0067911714773], [1.72879842E12, 308.517535545024], [1.72880046E12, 374.69680851063833]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72880208E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72879494E12, "maxY": 4.9E-324, "series": [{"data": [[1.72879902E12, 0.0], [1.72879578E12, 0.0], [1.728798E12, 0.0], [1.72880022E12, 0.0], [1.72880124E12, 0.0], [1.72879698E12, 0.0], [1.7287992E12, 0.0], [1.7288016E12, 0.0], [1.72879596E12, 0.0], [1.72879818E12, 0.0], [1.72879716E12, 0.0], [1.7288004E12, 0.0], [1.72879494E12, 0.0], [1.72879938E12, 0.0], [1.72880142E12, 0.0], [1.72879512E12, 0.0], [1.72880178E12, 0.0], [1.72879614E12, 0.0], [1.72879836E12, 0.0], [1.72879734E12, 0.0], [1.72879956E12, 0.0], [1.72880058E12, 0.0], [1.72879632E12, 0.0], [1.7287953E12, 0.0], [1.72879854E12, 0.0], [1.72879752E12, 0.0], [1.72880196E12, 0.0], [1.72879974E12, 0.0], [1.72880076E12, 0.0], [1.7287965E12, 0.0], [1.72879872E12, 0.0], [1.7287971E12, 0.0], [1.72879932E12, 0.0], [1.72879608E12, 0.0], [1.72880052E12, 0.0], [1.72879506E12, 0.0], [1.7287983E12, 0.0], [1.72880154E12, 0.0], [1.72879728E12, 0.0], [1.7287995E12, 0.0], [1.72879626E12, 0.0], [1.72879848E12, 0.0], [1.7288007E12, 0.0], [1.72880172E12, 0.0], [1.72879524E12, 0.0], [1.72879746E12, 0.0], [1.72879968E12, 0.0], [1.72879644E12, 0.0], [1.72879986E12, 0.0], [1.72880208E12, 0.0], [1.72879866E12, 0.0], [1.72879764E12, 0.0], [1.72880088E12, 0.0], [1.72879542E12, 0.0], [1.7288019E12, 0.0], [1.7287956E12, 0.0], [1.72879884E12, 0.0], [1.72879662E12, 0.0], [1.72880004E12, 0.0], [1.72879782E12, 0.0], [1.72880106E12, 0.0], [1.7287968E12, 0.0], [1.7287974E12, 0.0], [1.72880082E12, 0.0], [1.72879518E12, 0.0], [1.72879962E12, 0.0], [1.72880184E12, 0.0], [1.72879536E12, 0.0], [1.72879638E12, 0.0], [1.7287986E12, 0.0], [1.72879758E12, 0.0], [1.7287998E12, 0.0], [1.728801E12, 0.0], [1.72879656E12, 0.0], [1.72879554E12, 0.0], [1.72879878E12, 0.0], [1.72880202E12, 0.0], [1.72879776E12, 0.0], [1.72880016E12, 0.0], [1.72879674E12, 0.0], [1.72879896E12, 0.0], [1.72880118E12, 0.0], [1.72879572E12, 0.0], [1.72879794E12, 0.0], [1.72879998E12, 0.0], [1.72879692E12, 0.0], [1.72880034E12, 0.0], [1.72879914E12, 0.0], [1.72880136E12, 0.0], [1.7287959E12, 0.0], [1.72879812E12, 0.0], [1.72880112E12, 0.0], [1.72879548E12, 0.0], [1.7287977E12, 0.0], [1.72879668E12, 0.0], [1.72879992E12, 0.0], [1.7287989E12, 0.0], [1.72880094E12, 0.0], [1.7288013E12, 0.0], [1.72879566E12, 0.0], [1.72879788E12, 0.0], [1.72879686E12, 0.0], [1.72879908E12, 0.0], [1.7288001E12, 0.0], [1.72879584E12, 0.0], [1.72879806E12, 0.0], [1.72879704E12, 0.0], [1.72880148E12, 0.0], [1.72879926E12, 0.0], [1.72880028E12, 0.0], [1.72879602E12, 0.0], [1.72879824E12, 0.0], [1.72880064E12, 0.0], [1.728795E12, 0.0], [1.72879722E12, 0.0], [1.72879944E12, 0.0], [1.72880166E12, 0.0], [1.7287962E12, 0.0], [1.72879842E12, 0.0], [1.72880046E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72880208E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 20.0, "minX": 1.72879494E12, "maxY": 3672.0, "series": [{"data": [[1.72879902E12, 2285.0], [1.72879578E12, 1724.0], [1.728798E12, 1706.0], [1.72880022E12, 2626.0], [1.72880124E12, 3002.0], [1.72879698E12, 1811.0], [1.7287992E12, 2583.0], [1.7288016E12, 3672.0], [1.72879596E12, 1657.0], [1.72879818E12, 1800.0], [1.72879716E12, 1820.0], [1.7288004E12, 2599.0], [1.72879494E12, 1430.0], [1.72879938E12, 2176.0], [1.72880142E12, 3124.0], [1.72879512E12, 1334.0], [1.72880178E12, 3020.0], [1.72879614E12, 1799.0], [1.72879836E12, 1880.0], [1.72879734E12, 1823.0], [1.72879956E12, 2539.0], [1.72880058E12, 3186.0], [1.72879632E12, 1393.0], [1.7287953E12, 1403.0], [1.72879854E12, 1721.0], [1.72879752E12, 1823.0], [1.72880196E12, 2989.0], [1.72879974E12, 2585.0], [1.72880076E12, 3253.0], [1.7287965E12, 1619.0], [1.72879872E12, 2340.0], [1.7287971E12, 1804.0], [1.72879932E12, 2311.0], [1.72879608E12, 1425.0], [1.72880052E12, 3200.0], [1.72879506E12, 1624.0], [1.7287983E12, 2014.0], [1.72880154E12, 3554.0], [1.72879728E12, 1937.0], [1.7287995E12, 2491.0], [1.72879626E12, 1421.0], [1.72879848E12, 1856.0], [1.7288007E12, 2996.0], [1.72880172E12, 3245.0], [1.72879524E12, 1370.0], [1.72879746E12, 1737.0], [1.72879968E12, 2583.0], [1.72879644E12, 1807.0], [1.72879986E12, 2367.0], [1.72880208E12, 1013.0], [1.72879866E12, 1905.0], [1.72879764E12, 1715.0], [1.72880088E12, 3426.0], [1.72879542E12, 1460.0], [1.7288019E12, 3646.0], [1.7287956E12, 1607.0], [1.72879884E12, 2423.0], [1.72879662E12, 1777.0], [1.72880004E12, 2614.0], [1.72879782E12, 1617.0], [1.72880106E12, 3300.0], [1.7287968E12, 1433.0], [1.7287974E12, 1674.0], [1.72880082E12, 3021.0], [1.72879518E12, 1416.0], [1.72879962E12, 2343.0], [1.72880184E12, 2949.0], [1.72879536E12, 1421.0], [1.72879638E12, 1434.0], [1.7287986E12, 1797.0], [1.72879758E12, 1805.0], [1.7287998E12, 2654.0], [1.728801E12, 3357.0], [1.72879656E12, 1543.0], [1.72879554E12, 1460.0], [1.72879878E12, 2468.0], [1.72880202E12, 2502.0], [1.72879776E12, 1820.0], [1.72880016E12, 2485.0], [1.72879674E12, 1629.0], [1.72879896E12, 2377.0], [1.72880118E12, 3287.0], [1.72879572E12, 1464.0], [1.72879794E12, 1712.0], [1.72879998E12, 2547.0], [1.72879692E12, 1908.0], [1.72880034E12, 2454.0], [1.72879914E12, 2830.0], [1.72880136E12, 2879.0], [1.7287959E12, 1625.0], [1.72879812E12, 1748.0], [1.72880112E12, 3639.0], [1.72879548E12, 1645.0], [1.7287977E12, 1837.0], [1.72879668E12, 1430.0], [1.72879992E12, 2354.0], [1.7287989E12, 2417.0], [1.72880094E12, 3128.0], [1.7288013E12, 3170.0], [1.72879566E12, 1320.0], [1.72879788E12, 1900.0], [1.72879686E12, 1658.0], [1.72879908E12, 2474.0], [1.7288001E12, 2351.0], [1.72879584E12, 1721.0], [1.72879806E12, 1653.0], [1.72879704E12, 1705.0], [1.72880148E12, 2819.0], [1.72879926E12, 2738.0], [1.72880028E12, 2374.0], [1.72879602E12, 1513.0], [1.72879824E12, 1849.0], [1.72880064E12, 3006.0], [1.728795E12, 1363.0], [1.72879722E12, 1793.0], [1.72879944E12, 2904.0], [1.72880166E12, 3260.0], [1.7287962E12, 1405.0], [1.72879842E12, 1735.0], [1.72880046E12, 2237.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72879902E12, 33.0], [1.72879578E12, 29.0], [1.728798E12, 30.0], [1.72880022E12, 36.0], [1.72880124E12, 38.0], [1.72879698E12, 31.0], [1.7287992E12, 35.0], [1.7288016E12, 46.0], [1.72879596E12, 28.0], [1.72879818E12, 29.0], [1.72879716E12, 32.0], [1.7288004E12, 33.0], [1.72879494E12, 39.0], [1.72879938E12, 31.0], [1.72880142E12, 45.0], [1.72879512E12, 35.0], [1.72880178E12, 46.0], [1.72879614E12, 28.0], [1.72879836E12, 25.0], [1.72879734E12, 28.0], [1.72879956E12, 33.0], [1.72880058E12, 57.0], [1.72879632E12, 29.0], [1.7287953E12, 33.0], [1.72879854E12, 24.0], [1.72879752E12, 31.0], [1.72880196E12, 50.0], [1.72879974E12, 32.0], [1.72880076E12, 53.0], [1.7287965E12, 28.0], [1.72879872E12, 35.0], [1.7287971E12, 32.0], [1.72879932E12, 31.0], [1.72879608E12, 33.0], [1.72880052E12, 33.0], [1.72879506E12, 29.0], [1.7287983E12, 27.0], [1.72880154E12, 47.0], [1.72879728E12, 30.0], [1.7287995E12, 33.0], [1.72879626E12, 33.0], [1.72879848E12, 30.0], [1.7288007E12, 49.0], [1.72880172E12, 54.0], [1.72879524E12, 28.0], [1.72879746E12, 29.0], [1.72879968E12, 35.0], [1.72879644E12, 29.0], [1.72879986E12, 38.0], [1.72880208E12, 45.0], [1.72879866E12, 33.0], [1.72879764E12, 32.0], [1.72880088E12, 53.0], [1.72879542E12, 30.0], [1.7288019E12, 40.0], [1.7287956E12, 31.0], [1.72879884E12, 30.0], [1.72879662E12, 26.0], [1.72880004E12, 34.0], [1.72879782E12, 28.0], [1.72880106E12, 47.0], [1.7287968E12, 33.0], [1.7287974E12, 31.0], [1.72880082E12, 55.0], [1.72879518E12, 31.0], [1.72879962E12, 32.0], [1.72880184E12, 47.0], [1.72879536E12, 34.0], [1.72879638E12, 30.0], [1.7287986E12, 27.0], [1.72879758E12, 32.0], [1.7287998E12, 35.0], [1.728801E12, 47.0], [1.72879656E12, 30.0], [1.72879554E12, 30.0], [1.72879878E12, 35.0], [1.72880202E12, 32.0], [1.72879776E12, 29.0], [1.72880016E12, 30.0], [1.72879674E12, 29.0], [1.72879896E12, 30.0], [1.72880118E12, 51.0], [1.72879572E12, 33.0], [1.72879794E12, 29.0], [1.72879998E12, 20.0], [1.72879692E12, 25.0], [1.72880034E12, 32.0], [1.72879914E12, 32.0], [1.72880136E12, 54.0], [1.7287959E12, 28.0], [1.72879812E12, 32.0], [1.72880112E12, 48.0], [1.72879548E12, 27.0], [1.7287977E12, 27.0], [1.72879668E12, 30.0], [1.72879992E12, 33.0], [1.7287989E12, 37.0], [1.72880094E12, 52.0], [1.7288013E12, 50.0], [1.72879566E12, 33.0], [1.72879788E12, 27.0], [1.72879686E12, 29.0], [1.72879908E12, 29.0], [1.7288001E12, 37.0], [1.72879584E12, 32.0], [1.72879806E12, 33.0], [1.72879704E12, 29.0], [1.72880148E12, 49.0], [1.72879926E12, 25.0], [1.72880028E12, 25.0], [1.72879602E12, 27.0], [1.72879824E12, 33.0], [1.72880064E12, 52.0], [1.728795E12, 32.0], [1.72879722E12, 27.0], [1.72879944E12, 38.0], [1.72880166E12, 56.0], [1.7287962E12, 32.0], [1.72879842E12, 30.0], [1.72880046E12, 30.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72879902E12, 1398.4], [1.72879578E12, 897.0], [1.728798E12, 998.0], [1.72880022E12, 1322.2], [1.72880124E12, 1664.8000000000004], [1.72879698E12, 974.5000000000002], [1.7287992E12, 1297.3], [1.7288016E12, 1702.4], [1.72879596E12, 876.0], [1.72879818E12, 997.4000000000001], [1.72879716E12, 983.0], [1.7288004E12, 1327.9], [1.72879494E12, 1096.5], [1.72879938E12, 1317.0], [1.72880142E12, 1667.0], [1.72879512E12, 874.4], [1.72880178E12, 1666.8999999999999], [1.72879614E12, 868.4000000000001], [1.72879836E12, 1017.0], [1.72879734E12, 963.8000000000001], [1.72879956E12, 1335.0], [1.72880058E12, 1696.8000000000002], [1.72879632E12, 842.8], [1.7287953E12, 896.0000000000007], [1.72879854E12, 1013.5], [1.72879752E12, 998.0], [1.72880196E12, 1689.0], [1.72879974E12, 1344.0000000000007], [1.72880076E12, 1670.4], [1.7287965E12, 922.4000000000002], [1.72879872E12, 1228.0], [1.7287971E12, 1011.4], [1.72879932E12, 1341.200000000001], [1.72879608E12, 884.0], [1.72880052E12, 1461.1], [1.72879506E12, 858.6], [1.7287983E12, 1002.2], [1.72880154E12, 1702.0], [1.72879728E12, 953.7], [1.7287995E12, 1313.2000000000003], [1.72879626E12, 874.8000000000001], [1.72879848E12, 984.4], [1.7288007E12, 1603.0], [1.72880172E12, 1732.4000000000005], [1.72879524E12, 857.8], [1.72879746E12, 951.0], [1.72879968E12, 1261.6], [1.72879644E12, 877.4000000000001], [1.72879986E12, 1327.6000000000008], [1.72880208E12, 946.4], [1.72879866E12, 975.5999999999999], [1.72879764E12, 941.8000000000001], [1.72880088E12, 1739.7], [1.72879542E12, 880.3000000000002], [1.7288019E12, 1744.4000000000005], [1.7287956E12, 903.3000000000001], [1.72879884E12, 1311.2], [1.72879662E12, 848.4], [1.72880004E12, 1308.9999999999998], [1.72879782E12, 987.5], [1.72880106E12, 1663.3], [1.7287968E12, 829.2], [1.7287974E12, 997.5], [1.72880082E12, 1677.8], [1.72879518E12, 818.4000000000001], [1.72879962E12, 1346.0], [1.72880184E12, 1681.2], [1.72879536E12, 865.0], [1.72879638E12, 848.0], [1.7287986E12, 987.3999999999999], [1.72879758E12, 987.7], [1.7287998E12, 1327.2000000000003], [1.728801E12, 1674.5], [1.72879656E12, 896.0], [1.72879554E12, 867.8000000000001], [1.72879878E12, 1313.9], [1.72880202E12, 1268.0000000000005], [1.72879776E12, 1004.0], [1.72880016E12, 1345.1999999999998], [1.72879674E12, 835.4], [1.72879896E12, 1327.6000000000001], [1.72880118E12, 1728.9999999999998], [1.72879572E12, 921.6], [1.72879794E12, 976.6], [1.72879998E12, 1270.5], [1.72879692E12, 1012.2], [1.72880034E12, 1318.2000000000003], [1.72879914E12, 1319.0], [1.72880136E12, 1701.0], [1.7287959E12, 833.1000000000001], [1.72879812E12, 965.1], [1.72880112E12, 1708.4], [1.72879548E12, 890.0000000000003], [1.7287977E12, 994.7], [1.72879668E12, 870.5], [1.72879992E12, 1329.0], [1.7287989E12, 1332.4], [1.72880094E12, 1661.2000000000003], [1.7288013E12, 1679.8000000000002], [1.72879566E12, 918.0], [1.72879788E12, 976.4], [1.72879686E12, 958.2000000000003], [1.72879908E12, 1331.0], [1.7288001E12, 1322.1000000000001], [1.72879584E12, 881.0], [1.72879806E12, 995.6000000000001], [1.72879704E12, 980.9], [1.72880148E12, 1785.0], [1.72879926E12, 1324.4000000000005], [1.72880028E12, 1253.3999999999999], [1.72879602E12, 842.0], [1.72879824E12, 963.4], [1.72880064E12, 1683.4999999999998], [1.728795E12, 804.0], [1.72879722E12, 966.1], [1.72879944E12, 1385.8000000000004], [1.72880166E12, 1667.0], [1.7287962E12, 917.0], [1.72879842E12, 982.5999999999999], [1.72880046E12, 1226.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72879902E12, 2006.6299999999997], [1.72879578E12, 1254.0], [1.728798E12, 1446.8000000000006], [1.72880022E12, 2055.120000000001], [1.72880124E12, 2519.1600000000008], [1.72879698E12, 1370.35], [1.7287992E12, 1907.8899999999976], [1.7288016E12, 2596.44], [1.72879596E12, 1416.0], [1.72879818E12, 1499.37], [1.72879716E12, 1485.079999999998], [1.7288004E12, 1941.2699999999998], [1.72879494E12, 1430.0], [1.72879938E12, 1970.5], [1.72880142E12, 2607.209999999998], [1.72879512E12, 1283.49], [1.72880178E12, 2511.1099999999988], [1.72879614E12, 1215.6200000000013], [1.72879836E12, 1449.0999999999988], [1.72879734E12, 1430.2000000000037], [1.72879956E12, 1914.0], [1.72880058E12, 2366.76], [1.72879632E12, 1283.2699999999995], [1.7287953E12, 1212.7999999999997], [1.72879854E12, 1478.2500000000005], [1.72879752E12, 1444.400000000001], [1.72880196E12, 2431.9999999999995], [1.72879974E12, 2017.7599999999984], [1.72880076E12, 2430.1599999999944], [1.7287965E12, 1244.6499999999996], [1.72879872E12, 1972.3000000000006], [1.7287971E12, 1447.0199999999998], [1.72879932E12, 1996.840000000001], [1.72879608E12, 1233.6499999999994], [1.72880052E12, 2305.77], [1.72879506E12, 1204.8200000000002], [1.7287983E12, 1439.9200000000003], [1.72880154E12, 2463.0], [1.72879728E12, 1437.4699999999966], [1.7287995E12, 1929.6200000000008], [1.72879626E12, 1246.4000000000012], [1.72879848E12, 1469.62], [1.7288007E12, 2443.33], [1.72880172E12, 2468.880000000001], [1.72879524E12, 1163.52], [1.72879746E12, 1447.0], [1.72879968E12, 1917.520000000004], [1.72879644E12, 1228.64], [1.72879986E12, 1995.6400000000012], [1.72880208E12, 1013.0], [1.72879866E12, 1386.279999999998], [1.72879764E12, 1393.1599999999992], [1.72880088E12, 2586.3900000000012], [1.72879542E12, 1337.94], [1.7288019E12, 2569.7999999999984], [1.7287956E12, 1340.4000000000015], [1.72879884E12, 1845.08], [1.72879662E12, 1277.1600000000008], [1.72880004E12, 1938.0000000000048], [1.72879782E12, 1434.0], [1.72880106E12, 2470.0099999999993], [1.7287968E12, 1202.999999999999], [1.7287974E12, 1461.75], [1.72880082E12, 2466.659999999999], [1.72879518E12, 1175.4799999999996], [1.72879962E12, 1967.2000000000019], [1.72880184E12, 2463.8400000000006], [1.72879536E12, 1223.5000000000002], [1.72879638E12, 1238.8999999999987], [1.7287986E12, 1392.0], [1.72879758E12, 1434.37], [1.7287998E12, 2011.08], [1.728801E12, 2548.300000000004], [1.72879656E12, 1242.0], [1.72879554E12, 1217.1599999999999], [1.72879878E12, 1926.5699999999981], [1.72880202E12, 2030.1099999999992], [1.72879776E12, 1458.1000000000006], [1.72880016E12, 2024.880000000001], [1.72879674E12, 1243.6], [1.72879896E12, 1958.4399999999998], [1.72880118E12, 2412.7200000000003], [1.72879572E12, 1260.0199999999998], [1.72879794E12, 1448.139999999999], [1.72879998E12, 1884.0500000000015], [1.72879692E12, 1626.239999999998], [1.72880034E12, 2129.4399999999946], [1.72879914E12, 2063.950000000001], [1.72880136E12, 2470.9999999999995], [1.7287959E12, 1391.5499999999993], [1.72879812E12, 1431.7599999999984], [1.72880112E12, 2473.860000000004], [1.72879548E12, 1331.0], [1.7287977E12, 1531.4099999999994], [1.72879668E12, 1274.5000000000014], [1.72879992E12, 1887.3999999999992], [1.7287989E12, 2001.5599999999972], [1.72880094E12, 2455.6400000000003], [1.7288013E12, 2427.619999999998], [1.72879566E12, 1204.6000000000001], [1.72879788E12, 1476.7799999999997], [1.72879686E12, 1310.01], [1.72879908E12, 1907.7999999999993], [1.7288001E12, 2005.62], [1.72879584E12, 1367.25], [1.72879806E12, 1489.760000000001], [1.72879704E12, 1440.2199999999993], [1.72880148E12, 2477.75], [1.72879926E12, 1892.0], [1.72880028E12, 1871.1600000000008], [1.72879602E12, 1199.2000000000003], [1.72879824E12, 1499.9800000000007], [1.72880064E12, 2550.6000000000013], [1.728795E12, 1320.0700000000006], [1.72879722E12, 1424.4600000000005], [1.72879944E12, 1902.3000000000002], [1.72880166E12, 2601.9000000000065], [1.7287962E12, 1312.2000000000003], [1.72879842E12, 1449.0], [1.72880046E12, 1874.13]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72879902E12, 574.5], [1.72879578E12, 366.0], [1.728798E12, 376.0], [1.72880022E12, 478.0], [1.72880124E12, 499.0], [1.72879698E12, 386.5], [1.7287992E12, 436.0], [1.7288016E12, 640.0], [1.72879596E12, 368.0], [1.72879818E12, 370.0], [1.72879716E12, 415.0], [1.7288004E12, 535.5], [1.72879494E12, 360.0], [1.72879938E12, 400.0], [1.72880142E12, 563.0], [1.72879512E12, 397.5], [1.72880178E12, 557.5], [1.72879614E12, 359.5], [1.72879836E12, 404.5], [1.72879734E12, 374.0], [1.72879956E12, 398.0], [1.72880058E12, 544.5], [1.72879632E12, 310.0], [1.7287953E12, 397.0], [1.72879854E12, 416.0], [1.72879752E12, 373.0], [1.72880196E12, 661.0], [1.72879974E12, 453.0], [1.72880076E12, 573.0], [1.7287965E12, 403.0], [1.72879872E12, 353.0], [1.7287971E12, 378.0], [1.72879932E12, 478.0], [1.72879608E12, 350.0], [1.72880052E12, 416.0], [1.72879506E12, 353.0], [1.7287983E12, 407.0], [1.72880154E12, 622.0], [1.72879728E12, 399.5], [1.7287995E12, 555.0], [1.72879626E12, 375.0], [1.72879848E12, 390.0], [1.7288007E12, 570.0], [1.72880172E12, 652.5], [1.72879524E12, 346.0], [1.72879746E12, 424.0], [1.72879968E12, 426.0], [1.72879644E12, 366.0], [1.72879986E12, 517.0], [1.72880208E12, 543.0], [1.72879866E12, 392.0], [1.72879764E12, 341.0], [1.72880088E12, 588.5], [1.72879542E12, 434.5], [1.7288019E12, 677.0], [1.7287956E12, 389.0], [1.72879884E12, 469.0], [1.72879662E12, 403.0], [1.72880004E12, 450.0], [1.72879782E12, 456.0], [1.72880106E12, 658.0], [1.7287968E12, 322.5], [1.7287974E12, 418.5], [1.72880082E12, 608.0], [1.72879518E12, 298.0], [1.72879962E12, 532.0], [1.72880184E12, 570.0], [1.72879536E12, 322.5], [1.72879638E12, 341.0], [1.7287986E12, 424.0], [1.72879758E12, 386.0], [1.7287998E12, 441.0], [1.728801E12, 664.0], [1.72879656E12, 362.0], [1.72879554E12, 338.0], [1.72879878E12, 413.0], [1.72880202E12, 405.5], [1.72879776E12, 424.0], [1.72880016E12, 484.0], [1.72879674E12, 304.0], [1.72879896E12, 466.0], [1.72880118E12, 592.0], [1.72879572E12, 386.0], [1.72879794E12, 346.0], [1.72879998E12, 465.0], [1.72879692E12, 437.0], [1.72880034E12, 537.0], [1.72879914E12, 501.0], [1.72880136E12, 702.0], [1.7287959E12, 381.0], [1.72879812E12, 349.5], [1.72880112E12, 647.5], [1.72879548E12, 357.0], [1.7287977E12, 419.0], [1.72879668E12, 337.5], [1.72879992E12, 394.0], [1.7287989E12, 549.0], [1.72880094E12, 638.5], [1.7288013E12, 618.0], [1.72879566E12, 450.0], [1.72879788E12, 391.0], [1.72879686E12, 400.5], [1.72879908E12, 523.0], [1.7288001E12, 553.0], [1.72879584E12, 370.0], [1.72879806E12, 426.0], [1.72879704E12, 343.5], [1.72880148E12, 728.0], [1.72879926E12, 498.0], [1.72880028E12, 388.0], [1.72879602E12, 296.0], [1.72879824E12, 380.0], [1.72880064E12, 603.5], [1.728795E12, 256.5], [1.72879722E12, 325.5], [1.72879944E12, 526.0], [1.72880166E12, 533.0], [1.7287962E12, 345.0], [1.72879842E12, 387.0], [1.72880046E12, 461.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72879902E12, 1625.85], [1.72879578E12, 1009.0], [1.728798E12, 1154.0], [1.72880022E12, 1558.7999999999988], [1.72880124E12, 1970.1999999999996], [1.72879698E12, 1139.35], [1.7287992E12, 1528.7999999999984], [1.7288016E12, 1925.7], [1.72879596E12, 1014.0], [1.72879818E12, 1170.5499999999997], [1.72879716E12, 1149.6999999999994], [1.7288004E12, 1559.2500000000002], [1.72879494E12, 1238.0], [1.72879938E12, 1548.5], [1.72880142E12, 1919.6499999999999], [1.72879512E12, 994.2999999999994], [1.72880178E12, 1965.199999999999], [1.72879614E12, 996.8000000000002], [1.72879836E12, 1172.0999999999995], [1.72879734E12, 1100.6], [1.72879956E12, 1570.0], [1.72880058E12, 1963.9], [1.72879632E12, 1011.9499999999999], [1.7287953E12, 1047.8], [1.72879854E12, 1177.5], [1.72879752E12, 1187.0], [1.72880196E12, 1980.0], [1.72879974E12, 1548.8999999999999], [1.72880076E12, 1978.35], [1.7287965E12, 1021.9499999999999], [1.72879872E12, 1511.75], [1.7287971E12, 1173.7999999999997], [1.72879932E12, 1554.8], [1.72879608E12, 987.25], [1.72880052E12, 1741.9499999999998], [1.72879506E12, 996.8], [1.7287983E12, 1179.7999999999997], [1.72880154E12, 1951.5], [1.72879728E12, 1103.8999999999987], [1.7287995E12, 1499.3999999999996], [1.72879626E12, 983.9999999999999], [1.72879848E12, 1139.1], [1.7288007E12, 1931.8499999999997], [1.72880172E12, 1965.7499999999998], [1.72879524E12, 977.1999999999996], [1.72879746E12, 1079.0], [1.72879968E12, 1455.0], [1.72879644E12, 1011.4000000000001], [1.72879986E12, 1538.6], [1.72880208E12, 984.1999999999998], [1.72879866E12, 1079.7999999999997], [1.72879764E12, 1084.5999999999995], [1.72880088E12, 2035.8999999999987], [1.72879542E12, 1034.1499999999996], [1.7288019E12, 2016.4000000000003], [1.7287956E12, 1032.0], [1.72879884E12, 1505.1999999999998], [1.72879662E12, 1000.4000000000001], [1.72880004E12, 1514.3999999999999], [1.72879782E12, 1168.0], [1.72880106E12, 1962.9499999999996], [1.7287968E12, 997.3999999999996], [1.7287974E12, 1168.25], [1.72880082E12, 1951.7999999999984], [1.72879518E12, 957.5999999999999], [1.72879962E12, 1574.0], [1.72880184E12, 1964.8999999999992], [1.72879536E12, 971.5], [1.72879638E12, 992.0], [1.7287986E12, 1165.6], [1.72879758E12, 1141.6999999999998], [1.7287998E12, 1608.05], [1.728801E12, 1893.25], [1.72879656E12, 1034.0], [1.72879554E12, 997.0], [1.72879878E12, 1511.9], [1.72880202E12, 1522.5499999999997], [1.72879776E12, 1197.0], [1.72880016E12, 1578.5999999999995], [1.72879674E12, 984.5999999999995], [1.72879896E12, 1522.7999999999995], [1.72880118E12, 1965.3999999999999], [1.72879572E12, 1018.8999999999999], [1.72879794E12, 1128.3], [1.72879998E12, 1518.25], [1.72879692E12, 1176.6999999999994], [1.72880034E12, 1529.3000000000004], [1.72879914E12, 1547.25], [1.72880136E12, 2046.0], [1.7287959E12, 1018.4500000000004], [1.72879812E12, 1154.0], [1.72880112E12, 1962.6999999999998], [1.72879548E12, 996.1999999999998], [1.7287977E12, 1162.4499999999985], [1.72879668E12, 1011.5], [1.72879992E12, 1526.0], [1.7287989E12, 1563.7000000000005], [1.72880094E12, 1966.2499999999998], [1.7288013E12, 1974.35], [1.72879566E12, 1024.1999999999996], [1.72879788E12, 1171.3999999999999], [1.72879686E12, 1117.1999999999998], [1.72879908E12, 1535.5], [1.7288001E12, 1517.1], [1.72879584E12, 1010.25], [1.72879806E12, 1179.6], [1.72879704E12, 1165.35], [1.72880148E12, 1990.25], [1.72879926E12, 1547.55], [1.72880028E12, 1481.4999999999993], [1.72879602E12, 958.0], [1.72879824E12, 1100.7], [1.72880064E12, 1987.1499999999999], [1.728795E12, 961.1499999999999], [1.72879722E12, 1126.2999999999997], [1.72879944E12, 1560.9999999999995], [1.72880166E12, 1940.0], [1.7287962E12, 1048.0], [1.72879842E12, 1150.7999999999993], [1.72880046E12, 1429.8499999999997]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72880208E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 188.5, "minX": 1.0, "maxY": 837.0, "series": [{"data": [[2.0, 594.0], [32.0, 214.5], [33.0, 252.0], [34.0, 188.5], [35.0, 241.0], [36.0, 254.0], [40.0, 211.5], [3.0, 557.5], [4.0, 463.5], [5.0, 519.5], [6.0, 541.5], [7.0, 500.0], [8.0, 465.5], [9.0, 447.0], [10.0, 398.5], [11.0, 395.0], [12.0, 416.0], [13.0, 471.0], [14.0, 498.0], [15.0, 532.0], [1.0, 837.0], [16.0, 534.0], [17.0, 508.5], [18.0, 526.5], [19.0, 474.0], [20.0, 448.0], [21.0, 394.0], [22.0, 401.0], [23.0, 335.5], [24.0, 327.0], [25.0, 327.0], [26.0, 278.5], [27.0, 279.5], [28.0, 267.5], [29.0, 227.0], [30.0, 244.5], [31.0, 237.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 115.0, "minX": 1.0, "maxY": 546.0, "series": [{"data": [[2.0, 395.5], [32.0, 141.0], [33.0, 158.0], [34.0, 115.0], [35.0, 148.5], [36.0, 166.5], [40.0, 128.5], [3.0, 391.0], [4.0, 326.5], [5.0, 356.5], [6.0, 364.0], [7.0, 350.0], [8.0, 330.0], [9.0, 319.0], [10.0, 283.0], [11.0, 284.0], [12.0, 303.0], [13.0, 338.0], [14.0, 356.0], [15.0, 378.0], [1.0, 546.0], [16.0, 382.0], [17.0, 372.0], [18.0, 379.0], [19.0, 344.0], [20.0, 329.0], [21.0, 288.0], [22.0, 299.0], [23.0, 243.0], [24.0, 231.5], [25.0, 239.0], [26.0, 196.0], [27.0, 191.0], [28.0, 178.5], [29.0, 154.0], [30.0, 163.5], [31.0, 165.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.55, "minX": 1.72879494E12, "maxY": 21.816666666666666, "series": [{"data": [[1.72879902E12, 18.7], [1.72879578E12, 9.983333333333333], [1.728798E12, 17.65], [1.72880022E12, 20.133333333333333], [1.72880124E12, 21.716666666666665], [1.72879698E12, 17.866666666666667], [1.7287992E12, 21.1], [1.7288016E12, 20.416666666666668], [1.72879596E12, 9.983333333333333], [1.72879818E12, 17.7], [1.72879716E12, 17.416666666666668], [1.7288004E12, 19.833333333333332], [1.72879494E12, 0.9333333333333333], [1.72879938E12, 20.816666666666666], [1.72880142E12, 21.433333333333334], [1.72879512E12, 4.866666666666666], [1.72880178E12, 21.6], [1.72879614E12, 10.033333333333333], [1.72879836E12, 17.2], [1.72879734E12, 18.05], [1.72879956E12, 20.816666666666666], [1.72880058E12, 21.333333333333332], [1.72879632E12, 10.316666666666666], [1.7287953E12, 9.516666666666667], [1.72879854E12, 17.233333333333334], [1.72879752E12, 17.65], [1.72880196E12, 20.633333333333333], [1.72879974E12, 20.216666666666665], [1.72880076E12, 21.533333333333335], [1.7287965E12, 9.333333333333334], [1.72879872E12, 15.216666666666667], [1.7287971E12, 17.75], [1.72879932E12, 20.05], [1.72879608E12, 9.9], [1.72880052E12, 15.816666666666666], [1.72879506E12, 5.016666666666667], [1.7287983E12, 17.116666666666667], [1.72880154E12, 20.816666666666666], [1.72879728E12, 17.7], [1.7287995E12, 19.633333333333333], [1.72879626E12, 9.85], [1.72879848E12, 17.416666666666668], [1.7288007E12, 21.466666666666665], [1.72880172E12, 20.466666666666665], [1.72879524E12, 10.25], [1.72879746E12, 17.483333333333334], [1.72879968E12, 21.35], [1.72879644E12, 9.783333333333333], [1.72879986E12, 20.033333333333335], [1.72880208E12, 0.55], [1.72879866E12, 14.166666666666666], [1.72879764E12, 18.516666666666666], [1.72880088E12, 20.866666666666667], [1.72879542E12, 9.166666666666666], [1.7288019E12, 20.25], [1.7287956E12, 9.6], [1.72879884E12, 20.783333333333335], [1.72879662E12, 9.45], [1.72880004E12, 20.516666666666666], [1.72879782E12, 17.066666666666666], [1.72880106E12, 20.766666666666666], [1.7287968E12, 6.583333333333333], [1.7287974E12, 17.066666666666666], [1.72880082E12, 21.016666666666666], [1.72879518E12, 6.216666666666667], [1.72879962E12, 19.65], [1.72880184E12, 21.283333333333335], [1.72879536E12, 10.233333333333333], [1.72879638E12, 10.166666666666666], [1.7287986E12, 17.25], [1.72879758E12, 17.7], [1.7287998E12, 19.966666666666665], [1.728801E12, 20.566666666666666], [1.72879656E12, 9.983333333333333], [1.72879554E12, 10.183333333333334], [1.72879878E12, 20.666666666666668], [1.72880202E12, 18.483333333333334], [1.72879776E12, 17.15], [1.72880016E12, 20.083333333333332], [1.72879674E12, 10.583333333333334], [1.72879896E12, 20.383333333333333], [1.72880118E12, 20.85], [1.72879572E12, 9.55], [1.72879794E12, 18.216666666666665], [1.72879998E12, 20.566666666666666], [1.72879692E12, 16.95], [1.72880034E12, 19.416666666666668], [1.72879914E12, 19.733333333333334], [1.72880136E12, 20.316666666666666], [1.7287959E12, 9.7], [1.72879812E12, 18.133333333333333], [1.72880112E12, 20.533333333333335], [1.72879548E12, 9.716666666666667], [1.7287977E12, 17.033333333333335], [1.72879668E12, 10.066666666666666], [1.72879992E12, 20.666666666666668], [1.7287989E12, 19.416666666666668], [1.72880094E12, 20.966666666666665], [1.7288013E12, 21.2], [1.72879566E12, 8.95], [1.72879788E12, 17.416666666666668], [1.72879686E12, 8.416666666666666], [1.72879908E12, 19.816666666666666], [1.7288001E12, 19.466666666666665], [1.72879584E12, 9.566666666666666], [1.72879806E12, 17.116666666666667], [1.72879704E12, 17.833333333333332], [1.72880148E12, 19.566666666666666], [1.72879926E12, 20.133333333333333], [1.72880028E12, 21.35], [1.72879602E12, 10.65], [1.72879824E12, 18.083333333333332], [1.72880064E12, 20.933333333333334], [1.728795E12, 5.333333333333333], [1.72879722E12, 18.466666666666665], [1.72879944E12, 19.216666666666665], [1.72880166E12, 21.816666666666666], [1.7287962E12, 9.816666666666666], [1.72879842E12, 17.583333333333332], [1.72880046E12, 18.716666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72880208E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.72879494E12, "maxY": 21.816666666666666, "series": [{"data": [[1.72879902E12, 18.7], [1.72879578E12, 9.983333333333333], [1.728798E12, 17.65], [1.72880022E12, 20.116666666666667], [1.72880124E12, 21.716666666666665], [1.72879698E12, 17.866666666666667], [1.7287992E12, 21.1], [1.7288016E12, 20.416666666666668], [1.72879596E12, 9.983333333333333], [1.72879818E12, 17.7], [1.72879716E12, 17.416666666666668], [1.7288004E12, 19.833333333333332], [1.72879494E12, 0.9], [1.72879938E12, 20.816666666666666], [1.72880142E12, 21.433333333333334], [1.72879512E12, 4.866666666666666], [1.72880178E12, 21.6], [1.72879614E12, 10.033333333333333], [1.72879836E12, 17.2], [1.72879734E12, 18.05], [1.72879956E12, 20.816666666666666], [1.72880058E12, 21.333333333333332], [1.72879632E12, 10.333333333333334], [1.7287953E12, 9.516666666666667], [1.72879854E12, 17.233333333333334], [1.72879752E12, 17.65], [1.72880196E12, 20.65], [1.72879974E12, 20.216666666666665], [1.72880076E12, 21.533333333333335], [1.7287965E12, 9.333333333333334], [1.72879872E12, 15.066666666666666], [1.7287971E12, 17.75], [1.72879932E12, 20.05], [1.72879608E12, 9.9], [1.72880052E12, 15.666666666666666], [1.72879506E12, 5.016666666666667], [1.7287983E12, 17.116666666666667], [1.72880154E12, 20.816666666666666], [1.72879728E12, 17.7], [1.7287995E12, 19.633333333333333], [1.72879626E12, 9.85], [1.72879848E12, 17.416666666666668], [1.7288007E12, 21.466666666666665], [1.72880172E12, 20.466666666666665], [1.72879524E12, 10.25], [1.72879746E12, 17.483333333333334], [1.72879968E12, 21.35], [1.72879644E12, 9.783333333333333], [1.72879986E12, 20.05], [1.72880208E12, 0.5833333333333334], [1.72879866E12, 14.25], [1.72879764E12, 18.516666666666666], [1.72880088E12, 20.866666666666667], [1.72879542E12, 9.166666666666666], [1.7288019E12, 20.25], [1.7287956E12, 9.6], [1.72879884E12, 20.783333333333335], [1.72879662E12, 9.45], [1.72880004E12, 20.516666666666666], [1.72879782E12, 17.066666666666666], [1.72880106E12, 20.766666666666666], [1.7287968E12, 6.633333333333334], [1.7287974E12, 17.066666666666666], [1.72880082E12, 21.016666666666666], [1.72879518E12, 6.183333333333334], [1.72879962E12, 19.65], [1.72880184E12, 21.283333333333335], [1.72879536E12, 10.233333333333333], [1.72879638E12, 10.15], [1.7287986E12, 17.25], [1.72879758E12, 17.7], [1.7287998E12, 19.966666666666665], [1.728801E12, 20.566666666666666], [1.72879656E12, 9.983333333333333], [1.72879554E12, 10.183333333333334], [1.72879878E12, 20.666666666666668], [1.72880202E12, 18.7], [1.72879776E12, 17.15], [1.72880016E12, 20.1], [1.72879674E12, 10.583333333333334], [1.72879896E12, 20.383333333333333], [1.72880118E12, 20.85], [1.72879572E12, 9.55], [1.72879794E12, 18.216666666666665], [1.72879998E12, 20.566666666666666], [1.72879692E12, 16.95], [1.72880034E12, 19.416666666666668], [1.72879914E12, 19.733333333333334], [1.72880136E12, 20.316666666666666], [1.7287959E12, 9.7], [1.72879812E12, 18.133333333333333], [1.72880112E12, 20.533333333333335], [1.72879548E12, 9.716666666666667], [1.7287977E12, 17.033333333333335], [1.72879668E12, 10.066666666666666], [1.72879992E12, 20.65], [1.7287989E12, 19.416666666666668], [1.72880094E12, 20.966666666666665], [1.7288013E12, 21.2], [1.72879566E12, 8.95], [1.72879788E12, 17.416666666666668], [1.72879686E12, 8.3], [1.72879908E12, 19.816666666666666], [1.7288001E12, 19.466666666666665], [1.72879584E12, 9.566666666666666], [1.72879806E12, 17.116666666666667], [1.72879704E12, 17.833333333333332], [1.72880148E12, 19.566666666666666], [1.72879926E12, 20.133333333333333], [1.72880028E12, 21.35], [1.72879602E12, 10.65], [1.72879824E12, 18.083333333333332], [1.72880064E12, 20.933333333333334], [1.728795E12, 5.333333333333333], [1.72879722E12, 18.466666666666665], [1.72879944E12, 19.216666666666665], [1.72880166E12, 21.816666666666666], [1.7287962E12, 9.816666666666666], [1.72879842E12, 17.583333333333332], [1.72880046E12, 18.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72880208E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.72879494E12, "maxY": 21.816666666666666, "series": [{"data": [[1.72879902E12, 18.7], [1.72879578E12, 9.983333333333333], [1.728798E12, 17.65], [1.72880022E12, 20.116666666666667], [1.72880124E12, 21.716666666666665], [1.72879698E12, 17.866666666666667], [1.7287992E12, 21.1], [1.7288016E12, 20.416666666666668], [1.72879596E12, 9.983333333333333], [1.72879818E12, 17.7], [1.72879716E12, 17.416666666666668], [1.7288004E12, 19.833333333333332], [1.72879494E12, 0.9], [1.72879938E12, 20.816666666666666], [1.72880142E12, 21.433333333333334], [1.72879512E12, 4.866666666666666], [1.72880178E12, 21.6], [1.72879614E12, 10.033333333333333], [1.72879836E12, 17.2], [1.72879734E12, 18.05], [1.72879956E12, 20.816666666666666], [1.72880058E12, 21.333333333333332], [1.72879632E12, 10.333333333333334], [1.7287953E12, 9.516666666666667], [1.72879854E12, 17.233333333333334], [1.72879752E12, 17.65], [1.72880196E12, 20.65], [1.72879974E12, 20.216666666666665], [1.72880076E12, 21.533333333333335], [1.7287965E12, 9.333333333333334], [1.72879872E12, 15.066666666666666], [1.7287971E12, 17.75], [1.72879932E12, 20.05], [1.72879608E12, 9.9], [1.72880052E12, 15.666666666666666], [1.72879506E12, 5.016666666666667], [1.7287983E12, 17.116666666666667], [1.72880154E12, 20.816666666666666], [1.72879728E12, 17.7], [1.7287995E12, 19.633333333333333], [1.72879626E12, 9.85], [1.72879848E12, 17.416666666666668], [1.7288007E12, 21.466666666666665], [1.72880172E12, 20.466666666666665], [1.72879524E12, 10.25], [1.72879746E12, 17.483333333333334], [1.72879968E12, 21.35], [1.72879644E12, 9.783333333333333], [1.72879986E12, 20.05], [1.72880208E12, 0.5833333333333334], [1.72879866E12, 14.25], [1.72879764E12, 18.516666666666666], [1.72880088E12, 20.866666666666667], [1.72879542E12, 9.166666666666666], [1.7288019E12, 20.25], [1.7287956E12, 9.6], [1.72879884E12, 20.783333333333335], [1.72879662E12, 9.45], [1.72880004E12, 20.516666666666666], [1.72879782E12, 17.066666666666666], [1.72880106E12, 20.766666666666666], [1.7287968E12, 6.633333333333334], [1.7287974E12, 17.066666666666666], [1.72880082E12, 21.016666666666666], [1.72879518E12, 6.183333333333334], [1.72879962E12, 19.65], [1.72880184E12, 21.283333333333335], [1.72879536E12, 10.233333333333333], [1.72879638E12, 10.15], [1.7287986E12, 17.25], [1.72879758E12, 17.7], [1.7287998E12, 19.966666666666665], [1.728801E12, 20.566666666666666], [1.72879656E12, 9.983333333333333], [1.72879554E12, 10.183333333333334], [1.72879878E12, 20.666666666666668], [1.72880202E12, 18.7], [1.72879776E12, 17.15], [1.72880016E12, 20.1], [1.72879674E12, 10.583333333333334], [1.72879896E12, 20.383333333333333], [1.72880118E12, 20.85], [1.72879572E12, 9.55], [1.72879794E12, 18.216666666666665], [1.72879998E12, 20.566666666666666], [1.72879692E12, 16.95], [1.72880034E12, 19.416666666666668], [1.72879914E12, 19.733333333333334], [1.72880136E12, 20.316666666666666], [1.7287959E12, 9.7], [1.72879812E12, 18.133333333333333], [1.72880112E12, 20.533333333333335], [1.72879548E12, 9.716666666666667], [1.7287977E12, 17.033333333333335], [1.72879668E12, 10.066666666666666], [1.72879992E12, 20.65], [1.7287989E12, 19.416666666666668], [1.72880094E12, 20.966666666666665], [1.7288013E12, 21.2], [1.72879566E12, 8.95], [1.72879788E12, 17.416666666666668], [1.72879686E12, 8.3], [1.72879908E12, 19.816666666666666], [1.7288001E12, 19.466666666666665], [1.72879584E12, 9.566666666666666], [1.72879806E12, 17.116666666666667], [1.72879704E12, 17.833333333333332], [1.72880148E12, 19.566666666666666], [1.72879926E12, 20.133333333333333], [1.72880028E12, 21.35], [1.72879602E12, 10.65], [1.72879824E12, 18.083333333333332], [1.72880064E12, 20.933333333333334], [1.728795E12, 5.333333333333333], [1.72879722E12, 18.466666666666665], [1.72879944E12, 19.216666666666665], [1.72880166E12, 21.816666666666666], [1.7287962E12, 9.816666666666666], [1.72879842E12, 17.583333333333332], [1.72880046E12, 18.8]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72880208E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.72879494E12, "maxY": 21.816666666666666, "series": [{"data": [[1.72879902E12, 18.7], [1.72879578E12, 9.983333333333333], [1.728798E12, 17.65], [1.72880022E12, 20.116666666666667], [1.72880124E12, 21.716666666666665], [1.72879698E12, 17.866666666666667], [1.7287992E12, 21.1], [1.7288016E12, 20.416666666666668], [1.72879596E12, 9.983333333333333], [1.72879818E12, 17.7], [1.72879716E12, 17.416666666666668], [1.7288004E12, 19.833333333333332], [1.72879494E12, 0.9], [1.72879938E12, 20.816666666666666], [1.72880142E12, 21.433333333333334], [1.72879512E12, 4.866666666666666], [1.72880178E12, 21.6], [1.72879614E12, 10.033333333333333], [1.72879836E12, 17.2], [1.72879734E12, 18.05], [1.72879956E12, 20.816666666666666], [1.72880058E12, 21.333333333333332], [1.72879632E12, 10.333333333333334], [1.7287953E12, 9.516666666666667], [1.72879854E12, 17.233333333333334], [1.72879752E12, 17.65], [1.72880196E12, 20.65], [1.72879974E12, 20.216666666666665], [1.72880076E12, 21.533333333333335], [1.7287965E12, 9.333333333333334], [1.72879872E12, 15.066666666666666], [1.7287971E12, 17.75], [1.72879932E12, 20.05], [1.72879608E12, 9.9], [1.72880052E12, 15.666666666666666], [1.72879506E12, 5.016666666666667], [1.7287983E12, 17.116666666666667], [1.72880154E12, 20.816666666666666], [1.72879728E12, 17.7], [1.7287995E12, 19.633333333333333], [1.72879626E12, 9.85], [1.72879848E12, 17.416666666666668], [1.7288007E12, 21.466666666666665], [1.72880172E12, 20.466666666666665], [1.72879524E12, 10.25], [1.72879746E12, 17.483333333333334], [1.72879968E12, 21.35], [1.72879644E12, 9.783333333333333], [1.72879986E12, 20.05], [1.72880208E12, 0.5833333333333334], [1.72879866E12, 14.25], [1.72879764E12, 18.516666666666666], [1.72880088E12, 20.866666666666667], [1.72879542E12, 9.166666666666666], [1.7288019E12, 20.25], [1.7287956E12, 9.6], [1.72879884E12, 20.783333333333335], [1.72879662E12, 9.45], [1.72880004E12, 20.516666666666666], [1.72879782E12, 17.066666666666666], [1.72880106E12, 20.766666666666666], [1.7287968E12, 6.633333333333334], [1.7287974E12, 17.066666666666666], [1.72880082E12, 21.016666666666666], [1.72879518E12, 6.183333333333334], [1.72879962E12, 19.65], [1.72880184E12, 21.283333333333335], [1.72879536E12, 10.233333333333333], [1.72879638E12, 10.15], [1.7287986E12, 17.25], [1.72879758E12, 17.7], [1.7287998E12, 19.966666666666665], [1.728801E12, 20.566666666666666], [1.72879656E12, 9.983333333333333], [1.72879554E12, 10.183333333333334], [1.72879878E12, 20.666666666666668], [1.72880202E12, 18.7], [1.72879776E12, 17.15], [1.72880016E12, 20.1], [1.72879674E12, 10.583333333333334], [1.72879896E12, 20.383333333333333], [1.72880118E12, 20.85], [1.72879572E12, 9.55], [1.72879794E12, 18.216666666666665], [1.72879998E12, 20.566666666666666], [1.72879692E12, 16.95], [1.72880034E12, 19.416666666666668], [1.72879914E12, 19.733333333333334], [1.72880136E12, 20.316666666666666], [1.7287959E12, 9.7], [1.72879812E12, 18.133333333333333], [1.72880112E12, 20.533333333333335], [1.72879548E12, 9.716666666666667], [1.7287977E12, 17.033333333333335], [1.72879668E12, 10.066666666666666], [1.72879992E12, 20.65], [1.7287989E12, 19.416666666666668], [1.72880094E12, 20.966666666666665], [1.7288013E12, 21.2], [1.72879566E12, 8.95], [1.72879788E12, 17.416666666666668], [1.72879686E12, 8.3], [1.72879908E12, 19.816666666666666], [1.7288001E12, 19.466666666666665], [1.72879584E12, 9.566666666666666], [1.72879806E12, 17.116666666666667], [1.72879704E12, 17.833333333333332], [1.72880148E12, 19.566666666666666], [1.72879926E12, 20.133333333333333], [1.72880028E12, 21.35], [1.72879602E12, 10.65], [1.72879824E12, 18.083333333333332], [1.72880064E12, 20.933333333333334], [1.728795E12, 5.333333333333333], [1.72879722E12, 18.466666666666665], [1.72879944E12, 19.216666666666665], [1.72880166E12, 21.816666666666666], [1.7287962E12, 9.816666666666666], [1.72879842E12, 17.583333333333332], [1.72880046E12, 18.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72880208E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

