/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 27.0, "minX": 0.0, "maxY": 3634.0, "series": [{"data": [[0.0, 27.0], [0.1, 36.0], [0.2, 38.0], [0.3, 40.0], [0.4, 42.0], [0.5, 43.0], [0.6, 44.0], [0.7, 45.0], [0.8, 46.0], [0.9, 47.0], [1.0, 47.0], [1.1, 48.0], [1.2, 49.0], [1.3, 50.0], [1.4, 50.0], [1.5, 51.0], [1.6, 52.0], [1.7, 52.0], [1.8, 53.0], [1.9, 53.0], [2.0, 54.0], [2.1, 55.0], [2.2, 55.0], [2.3, 56.0], [2.4, 56.0], [2.5, 57.0], [2.6, 57.0], [2.7, 57.0], [2.8, 58.0], [2.9, 58.0], [3.0, 59.0], [3.1, 59.0], [3.2, 60.0], [3.3, 60.0], [3.4, 61.0], [3.5, 61.0], [3.6, 61.0], [3.7, 62.0], [3.8, 62.0], [3.9, 63.0], [4.0, 63.0], [4.1, 64.0], [4.2, 64.0], [4.3, 64.0], [4.4, 65.0], [4.5, 65.0], [4.6, 65.0], [4.7, 66.0], [4.8, 66.0], [4.9, 67.0], [5.0, 67.0], [5.1, 67.0], [5.2, 68.0], [5.3, 68.0], [5.4, 68.0], [5.5, 69.0], [5.6, 69.0], [5.7, 70.0], [5.8, 70.0], [5.9, 70.0], [6.0, 71.0], [6.1, 71.0], [6.2, 71.0], [6.3, 72.0], [6.4, 72.0], [6.5, 72.0], [6.6, 73.0], [6.7, 73.0], [6.8, 73.0], [6.9, 73.0], [7.0, 74.0], [7.1, 74.0], [7.2, 74.0], [7.3, 75.0], [7.4, 75.0], [7.5, 75.0], [7.6, 76.0], [7.7, 76.0], [7.8, 76.0], [7.9, 77.0], [8.0, 77.0], [8.1, 77.0], [8.2, 78.0], [8.3, 78.0], [8.4, 78.0], [8.5, 79.0], [8.6, 79.0], [8.7, 79.0], [8.8, 79.0], [8.9, 80.0], [9.0, 80.0], [9.1, 80.0], [9.2, 81.0], [9.3, 81.0], [9.4, 81.0], [9.5, 82.0], [9.6, 82.0], [9.7, 82.0], [9.8, 82.0], [9.9, 83.0], [10.0, 83.0], [10.1, 83.0], [10.2, 84.0], [10.3, 84.0], [10.4, 84.0], [10.5, 85.0], [10.6, 85.0], [10.7, 85.0], [10.8, 86.0], [10.9, 86.0], [11.0, 86.0], [11.1, 87.0], [11.2, 87.0], [11.3, 87.0], [11.4, 88.0], [11.5, 88.0], [11.6, 88.0], [11.7, 89.0], [11.8, 89.0], [11.9, 89.0], [12.0, 89.0], [12.1, 90.0], [12.2, 90.0], [12.3, 90.0], [12.4, 91.0], [12.5, 91.0], [12.6, 91.0], [12.7, 92.0], [12.8, 92.0], [12.9, 92.0], [13.0, 93.0], [13.1, 93.0], [13.2, 93.0], [13.3, 94.0], [13.4, 94.0], [13.5, 94.0], [13.6, 95.0], [13.7, 95.0], [13.8, 95.0], [13.9, 96.0], [14.0, 96.0], [14.1, 96.0], [14.2, 97.0], [14.3, 97.0], [14.4, 97.0], [14.5, 98.0], [14.6, 98.0], [14.7, 98.0], [14.8, 98.0], [14.9, 99.0], [15.0, 99.0], [15.1, 99.0], [15.2, 100.0], [15.3, 100.0], [15.4, 100.0], [15.5, 101.0], [15.6, 101.0], [15.7, 101.0], [15.8, 102.0], [15.9, 102.0], [16.0, 102.0], [16.1, 103.0], [16.2, 103.0], [16.3, 103.0], [16.4, 104.0], [16.5, 104.0], [16.6, 104.0], [16.7, 105.0], [16.8, 105.0], [16.9, 105.0], [17.0, 106.0], [17.1, 106.0], [17.2, 106.0], [17.3, 107.0], [17.4, 107.0], [17.5, 107.0], [17.6, 108.0], [17.7, 108.0], [17.8, 109.0], [17.9, 109.0], [18.0, 109.0], [18.1, 110.0], [18.2, 110.0], [18.3, 110.0], [18.4, 111.0], [18.5, 111.0], [18.6, 111.0], [18.7, 112.0], [18.8, 112.0], [18.9, 112.0], [19.0, 113.0], [19.1, 113.0], [19.2, 113.0], [19.3, 114.0], [19.4, 114.0], [19.5, 114.0], [19.6, 115.0], [19.7, 115.0], [19.8, 116.0], [19.9, 116.0], [20.0, 116.0], [20.1, 117.0], [20.2, 117.0], [20.3, 117.0], [20.4, 118.0], [20.5, 118.0], [20.6, 118.0], [20.7, 119.0], [20.8, 119.0], [20.9, 119.0], [21.0, 120.0], [21.1, 120.0], [21.2, 121.0], [21.3, 121.0], [21.4, 121.0], [21.5, 122.0], [21.6, 122.0], [21.7, 122.0], [21.8, 123.0], [21.9, 123.0], [22.0, 124.0], [22.1, 124.0], [22.2, 124.0], [22.3, 125.0], [22.4, 125.0], [22.5, 125.0], [22.6, 126.0], [22.7, 126.0], [22.8, 127.0], [22.9, 127.0], [23.0, 127.0], [23.1, 128.0], [23.2, 128.0], [23.3, 129.0], [23.4, 129.0], [23.5, 129.0], [23.6, 130.0], [23.7, 130.0], [23.8, 131.0], [23.9, 131.0], [24.0, 132.0], [24.1, 132.0], [24.2, 132.0], [24.3, 133.0], [24.4, 133.0], [24.5, 134.0], [24.6, 134.0], [24.7, 135.0], [24.8, 135.0], [24.9, 135.0], [25.0, 136.0], [25.1, 136.0], [25.2, 137.0], [25.3, 137.0], [25.4, 138.0], [25.5, 138.0], [25.6, 138.0], [25.7, 139.0], [25.8, 139.0], [25.9, 140.0], [26.0, 140.0], [26.1, 141.0], [26.2, 141.0], [26.3, 142.0], [26.4, 142.0], [26.5, 142.0], [26.6, 143.0], [26.7, 143.0], [26.8, 144.0], [26.9, 144.0], [27.0, 145.0], [27.1, 145.0], [27.2, 146.0], [27.3, 146.0], [27.4, 146.0], [27.5, 147.0], [27.6, 147.0], [27.7, 148.0], [27.8, 148.0], [27.9, 149.0], [28.0, 149.0], [28.1, 150.0], [28.2, 150.0], [28.3, 151.0], [28.4, 151.0], [28.5, 152.0], [28.6, 152.0], [28.7, 153.0], [28.8, 153.0], [28.9, 154.0], [29.0, 154.0], [29.1, 155.0], [29.2, 156.0], [29.3, 156.0], [29.4, 157.0], [29.5, 157.0], [29.6, 158.0], [29.7, 158.0], [29.8, 159.0], [29.9, 159.0], [30.0, 160.0], [30.1, 160.0], [30.2, 161.0], [30.3, 162.0], [30.4, 162.0], [30.5, 163.0], [30.6, 163.0], [30.7, 164.0], [30.8, 164.0], [30.9, 165.0], [31.0, 166.0], [31.1, 166.0], [31.2, 167.0], [31.3, 167.0], [31.4, 168.0], [31.5, 168.0], [31.6, 169.0], [31.7, 170.0], [31.8, 170.0], [31.9, 171.0], [32.0, 172.0], [32.1, 172.0], [32.2, 173.0], [32.3, 174.0], [32.4, 174.0], [32.5, 175.0], [32.6, 176.0], [32.7, 176.0], [32.8, 177.0], [32.9, 178.0], [33.0, 178.0], [33.1, 179.0], [33.2, 180.0], [33.3, 181.0], [33.4, 181.0], [33.5, 182.0], [33.6, 183.0], [33.7, 183.0], [33.8, 184.0], [33.9, 185.0], [34.0, 185.0], [34.1, 186.0], [34.2, 187.0], [34.3, 188.0], [34.4, 189.0], [34.5, 189.0], [34.6, 190.0], [34.7, 191.0], [34.8, 192.0], [34.9, 193.0], [35.0, 193.0], [35.1, 194.0], [35.2, 195.0], [35.3, 196.0], [35.4, 197.0], [35.5, 198.0], [35.6, 199.0], [35.7, 200.0], [35.8, 201.0], [35.9, 202.0], [36.0, 203.0], [36.1, 203.0], [36.2, 204.0], [36.3, 205.0], [36.4, 206.0], [36.5, 207.0], [36.6, 208.0], [36.7, 209.0], [36.8, 210.0], [36.9, 211.0], [37.0, 212.0], [37.1, 213.0], [37.2, 214.0], [37.3, 216.0], [37.4, 217.0], [37.5, 218.0], [37.6, 219.0], [37.7, 220.0], [37.8, 221.0], [37.9, 222.0], [38.0, 224.0], [38.1, 225.0], [38.2, 226.0], [38.3, 228.0], [38.4, 229.0], [38.5, 230.0], [38.6, 231.0], [38.7, 233.0], [38.8, 234.0], [38.9, 236.0], [39.0, 237.0], [39.1, 238.0], [39.2, 240.0], [39.3, 241.0], [39.4, 243.0], [39.5, 244.0], [39.6, 245.0], [39.7, 247.0], [39.8, 248.0], [39.9, 250.0], [40.0, 251.0], [40.1, 253.0], [40.2, 254.0], [40.3, 256.0], [40.4, 258.0], [40.5, 259.0], [40.6, 261.0], [40.7, 263.0], [40.8, 265.0], [40.9, 267.0], [41.0, 268.0], [41.1, 270.0], [41.2, 272.0], [41.3, 274.0], [41.4, 275.0], [41.5, 277.0], [41.6, 279.0], [41.7, 281.0], [41.8, 283.0], [41.9, 285.0], [42.0, 287.0], [42.1, 289.0], [42.2, 291.0], [42.3, 293.0], [42.4, 295.0], [42.5, 297.0], [42.6, 300.0], [42.7, 302.0], [42.8, 304.0], [42.9, 306.0], [43.0, 309.0], [43.1, 311.0], [43.2, 314.0], [43.3, 316.0], [43.4, 318.0], [43.5, 320.0], [43.6, 322.0], [43.7, 325.0], [43.8, 327.0], [43.9, 329.0], [44.0, 332.0], [44.1, 334.0], [44.2, 337.0], [44.3, 339.0], [44.4, 341.0], [44.5, 344.0], [44.6, 346.0], [44.7, 348.0], [44.8, 351.0], [44.9, 353.0], [45.0, 355.0], [45.1, 358.0], [45.2, 360.0], [45.3, 363.0], [45.4, 365.0], [45.5, 367.0], [45.6, 370.0], [45.7, 373.0], [45.8, 375.0], [45.9, 377.0], [46.0, 380.0], [46.1, 382.0], [46.2, 385.0], [46.3, 387.0], [46.4, 390.0], [46.5, 392.0], [46.6, 394.0], [46.7, 397.0], [46.8, 399.0], [46.9, 402.0], [47.0, 404.0], [47.1, 407.0], [47.2, 409.0], [47.3, 412.0], [47.4, 414.0], [47.5, 416.0], [47.6, 419.0], [47.7, 421.0], [47.8, 423.0], [47.9, 426.0], [48.0, 428.0], [48.1, 431.0], [48.2, 433.0], [48.3, 435.0], [48.4, 437.0], [48.5, 439.0], [48.6, 442.0], [48.7, 444.0], [48.8, 446.0], [48.9, 448.0], [49.0, 450.0], [49.1, 452.0], [49.2, 455.0], [49.3, 457.0], [49.4, 458.0], [49.5, 460.0], [49.6, 462.0], [49.7, 464.0], [49.8, 466.0], [49.9, 469.0], [50.0, 471.0], [50.1, 474.0], [50.2, 476.0], [50.3, 478.0], [50.4, 480.0], [50.5, 482.0], [50.6, 484.0], [50.7, 486.0], [50.8, 488.0], [50.9, 490.0], [51.0, 492.0], [51.1, 494.0], [51.2, 497.0], [51.3, 499.0], [51.4, 500.0], [51.5, 502.0], [51.6, 504.0], [51.7, 506.0], [51.8, 508.0], [51.9, 510.0], [52.0, 512.0], [52.1, 514.0], [52.2, 516.0], [52.3, 518.0], [52.4, 520.0], [52.5, 522.0], [52.6, 524.0], [52.7, 526.0], [52.8, 527.0], [52.9, 529.0], [53.0, 531.0], [53.1, 533.0], [53.2, 535.0], [53.3, 537.0], [53.4, 539.0], [53.5, 541.0], [53.6, 543.0], [53.7, 545.0], [53.8, 547.0], [53.9, 548.0], [54.0, 550.0], [54.1, 552.0], [54.2, 554.0], [54.3, 556.0], [54.4, 557.0], [54.5, 559.0], [54.6, 561.0], [54.7, 563.0], [54.8, 565.0], [54.9, 566.0], [55.0, 568.0], [55.1, 570.0], [55.2, 572.0], [55.3, 574.0], [55.4, 576.0], [55.5, 577.0], [55.6, 580.0], [55.7, 581.0], [55.8, 583.0], [55.9, 585.0], [56.0, 587.0], [56.1, 589.0], [56.2, 591.0], [56.3, 592.0], [56.4, 594.0], [56.5, 596.0], [56.6, 598.0], [56.7, 599.0], [56.8, 601.0], [56.9, 603.0], [57.0, 605.0], [57.1, 606.0], [57.2, 608.0], [57.3, 610.0], [57.4, 612.0], [57.5, 613.0], [57.6, 615.0], [57.7, 617.0], [57.8, 619.0], [57.9, 621.0], [58.0, 623.0], [58.1, 624.0], [58.2, 626.0], [58.3, 628.0], [58.4, 630.0], [58.5, 631.0], [58.6, 633.0], [58.7, 635.0], [58.8, 637.0], [58.9, 638.0], [59.0, 640.0], [59.1, 642.0], [59.2, 644.0], [59.3, 646.0], [59.4, 647.0], [59.5, 649.0], [59.6, 651.0], [59.7, 653.0], [59.8, 654.0], [59.9, 656.0], [60.0, 658.0], [60.1, 660.0], [60.2, 661.0], [60.3, 663.0], [60.4, 665.0], [60.5, 667.0], [60.6, 668.0], [60.7, 670.0], [60.8, 672.0], [60.9, 673.0], [61.0, 675.0], [61.1, 677.0], [61.2, 679.0], [61.3, 680.0], [61.4, 682.0], [61.5, 684.0], [61.6, 686.0], [61.7, 688.0], [61.8, 690.0], [61.9, 691.0], [62.0, 693.0], [62.1, 694.0], [62.2, 696.0], [62.3, 698.0], [62.4, 699.0], [62.5, 701.0], [62.6, 703.0], [62.7, 704.0], [62.8, 706.0], [62.9, 708.0], [63.0, 710.0], [63.1, 711.0], [63.2, 713.0], [63.3, 714.0], [63.4, 716.0], [63.5, 718.0], [63.6, 719.0], [63.7, 721.0], [63.8, 723.0], [63.9, 724.0], [64.0, 726.0], [64.1, 728.0], [64.2, 730.0], [64.3, 732.0], [64.4, 734.0], [64.5, 735.0], [64.6, 737.0], [64.7, 738.0], [64.8, 740.0], [64.9, 742.0], [65.0, 744.0], [65.1, 745.0], [65.2, 747.0], [65.3, 749.0], [65.4, 750.0], [65.5, 752.0], [65.6, 754.0], [65.7, 755.0], [65.8, 757.0], [65.9, 759.0], [66.0, 761.0], [66.1, 763.0], [66.2, 764.0], [66.3, 766.0], [66.4, 768.0], [66.5, 770.0], [66.6, 771.0], [66.7, 773.0], [66.8, 775.0], [66.9, 777.0], [67.0, 778.0], [67.1, 780.0], [67.2, 782.0], [67.3, 784.0], [67.4, 786.0], [67.5, 788.0], [67.6, 789.0], [67.7, 791.0], [67.8, 793.0], [67.9, 795.0], [68.0, 797.0], [68.1, 798.0], [68.2, 800.0], [68.3, 802.0], [68.4, 804.0], [68.5, 805.0], [68.6, 807.0], [68.7, 809.0], [68.8, 811.0], [68.9, 813.0], [69.0, 814.0], [69.1, 816.0], [69.2, 818.0], [69.3, 820.0], [69.4, 822.0], [69.5, 823.0], [69.6, 825.0], [69.7, 827.0], [69.8, 829.0], [69.9, 830.0], [70.0, 832.0], [70.1, 834.0], [70.2, 836.0], [70.3, 838.0], [70.4, 840.0], [70.5, 842.0], [70.6, 843.0], [70.7, 845.0], [70.8, 847.0], [70.9, 849.0], [71.0, 851.0], [71.1, 853.0], [71.2, 855.0], [71.3, 856.0], [71.4, 858.0], [71.5, 860.0], [71.6, 862.0], [71.7, 864.0], [71.8, 866.0], [71.9, 867.0], [72.0, 869.0], [72.1, 871.0], [72.2, 873.0], [72.3, 875.0], [72.4, 877.0], [72.5, 879.0], [72.6, 880.0], [72.7, 883.0], [72.8, 885.0], [72.9, 887.0], [73.0, 888.0], [73.1, 890.0], [73.2, 892.0], [73.3, 895.0], [73.4, 897.0], [73.5, 899.0], [73.6, 901.0], [73.7, 902.0], [73.8, 904.0], [73.9, 906.0], [74.0, 908.0], [74.1, 910.0], [74.2, 912.0], [74.3, 914.0], [74.4, 916.0], [74.5, 917.0], [74.6, 920.0], [74.7, 921.0], [74.8, 923.0], [74.9, 925.0], [75.0, 927.0], [75.1, 929.0], [75.2, 931.0], [75.3, 933.0], [75.4, 935.0], [75.5, 937.0], [75.6, 939.0], [75.7, 942.0], [75.8, 944.0], [75.9, 946.0], [76.0, 948.0], [76.1, 950.0], [76.2, 952.0], [76.3, 954.0], [76.4, 956.0], [76.5, 958.0], [76.6, 961.0], [76.7, 963.0], [76.8, 965.0], [76.9, 967.0], [77.0, 969.0], [77.1, 971.0], [77.2, 973.0], [77.3, 975.0], [77.4, 977.0], [77.5, 979.0], [77.6, 981.0], [77.7, 983.0], [77.8, 986.0], [77.9, 988.0], [78.0, 990.0], [78.1, 993.0], [78.2, 995.0], [78.3, 997.0], [78.4, 1000.0], [78.5, 1002.0], [78.6, 1004.0], [78.7, 1006.0], [78.8, 1008.0], [78.9, 1010.0], [79.0, 1013.0], [79.1, 1015.0], [79.2, 1018.0], [79.3, 1020.0], [79.4, 1022.0], [79.5, 1024.0], [79.6, 1026.0], [79.7, 1028.0], [79.8, 1031.0], [79.9, 1033.0], [80.0, 1035.0], [80.1, 1037.0], [80.2, 1039.0], [80.3, 1042.0], [80.4, 1044.0], [80.5, 1047.0], [80.6, 1049.0], [80.7, 1051.0], [80.8, 1054.0], [80.9, 1057.0], [81.0, 1059.0], [81.1, 1062.0], [81.2, 1064.0], [81.3, 1067.0], [81.4, 1069.0], [81.5, 1072.0], [81.6, 1074.0], [81.7, 1077.0], [81.8, 1079.0], [81.9, 1082.0], [82.0, 1084.0], [82.1, 1087.0], [82.2, 1090.0], [82.3, 1092.0], [82.4, 1095.0], [82.5, 1098.0], [82.6, 1100.0], [82.7, 1103.0], [82.8, 1105.0], [82.9, 1108.0], [83.0, 1111.0], [83.1, 1114.0], [83.2, 1116.0], [83.3, 1119.0], [83.4, 1122.0], [83.5, 1124.0], [83.6, 1127.0], [83.7, 1129.0], [83.8, 1132.0], [83.9, 1134.0], [84.0, 1137.0], [84.1, 1140.0], [84.2, 1143.0], [84.3, 1146.0], [84.4, 1149.0], [84.5, 1151.0], [84.6, 1154.0], [84.7, 1157.0], [84.8, 1160.0], [84.9, 1162.0], [85.0, 1165.0], [85.1, 1168.0], [85.2, 1171.0], [85.3, 1174.0], [85.4, 1178.0], [85.5, 1181.0], [85.6, 1184.0], [85.7, 1186.0], [85.8, 1190.0], [85.9, 1192.0], [86.0, 1195.0], [86.1, 1199.0], [86.2, 1202.0], [86.3, 1205.0], [86.4, 1209.0], [86.5, 1212.0], [86.6, 1215.0], [86.7, 1218.0], [86.8, 1222.0], [86.9, 1225.0], [87.0, 1228.0], [87.1, 1231.0], [87.2, 1235.0], [87.3, 1238.0], [87.4, 1241.0], [87.5, 1244.0], [87.6, 1248.0], [87.7, 1251.0], [87.8, 1255.0], [87.9, 1258.0], [88.0, 1262.0], [88.1, 1265.0], [88.2, 1269.0], [88.3, 1273.0], [88.4, 1276.0], [88.5, 1280.0], [88.6, 1284.0], [88.7, 1288.0], [88.8, 1292.0], [88.9, 1295.0], [89.0, 1299.0], [89.1, 1303.0], [89.2, 1307.0], [89.3, 1310.0], [89.4, 1313.0], [89.5, 1318.0], [89.6, 1321.0], [89.7, 1325.0], [89.8, 1330.0], [89.9, 1334.0], [90.0, 1338.0], [90.1, 1342.0], [90.2, 1346.0], [90.3, 1350.0], [90.4, 1354.0], [90.5, 1358.0], [90.6, 1362.0], [90.7, 1365.0], [90.8, 1370.0], [90.9, 1375.0], [91.0, 1379.0], [91.1, 1383.0], [91.2, 1388.0], [91.3, 1392.0], [91.4, 1397.0], [91.5, 1402.0], [91.6, 1407.0], [91.7, 1411.0], [91.8, 1417.0], [91.9, 1422.0], [92.0, 1427.0], [92.1, 1432.0], [92.2, 1437.0], [92.3, 1441.0], [92.4, 1446.0], [92.5, 1452.0], [92.6, 1458.0], [92.7, 1463.0], [92.8, 1469.0], [92.9, 1475.0], [93.0, 1481.0], [93.1, 1487.0], [93.2, 1492.0], [93.3, 1499.0], [93.4, 1504.0], [93.5, 1510.0], [93.6, 1516.0], [93.7, 1522.0], [93.8, 1528.0], [93.9, 1534.0], [94.0, 1540.0], [94.1, 1546.0], [94.2, 1552.0], [94.3, 1559.0], [94.4, 1566.0], [94.5, 1572.0], [94.6, 1580.0], [94.7, 1587.0], [94.8, 1594.0], [94.9, 1601.0], [95.0, 1608.0], [95.1, 1615.0], [95.2, 1622.0], [95.3, 1630.0], [95.4, 1638.0], [95.5, 1645.0], [95.6, 1652.0], [95.7, 1660.0], [95.8, 1668.0], [95.9, 1679.0], [96.0, 1690.0], [96.1, 1699.0], [96.2, 1708.0], [96.3, 1717.0], [96.4, 1726.0], [96.5, 1735.0], [96.6, 1746.0], [96.7, 1757.0], [96.8, 1767.0], [96.9, 1778.0], [97.0, 1791.0], [97.1, 1804.0], [97.2, 1817.0], [97.3, 1828.0], [97.4, 1842.0], [97.5, 1854.0], [97.6, 1869.0], [97.7, 1882.0], [97.8, 1897.0], [97.9, 1911.0], [98.0, 1927.0], [98.1, 1945.0], [98.2, 1962.0], [98.3, 1979.0], [98.4, 2000.0], [98.5, 2024.0], [98.6, 2046.0], [98.7, 2072.0], [98.8, 2099.0], [98.9, 2120.0], [99.0, 2147.0], [99.1, 2178.0], [99.2, 2217.0], [99.3, 2260.0], [99.4, 2301.0], [99.5, 2349.0], [99.6, 2415.0], [99.7, 2491.0], [99.8, 2594.0], [99.9, 2754.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24060.0, "series": [{"data": [[0.0, 17752.0], [600.0, 6679.0], [700.0, 6748.0], [800.0, 6311.0], [900.0, 5683.0], [1000.0, 4882.0], [1100.0, 4169.0], [1200.0, 3401.0], [1300.0, 2851.0], [1400.0, 2179.0], [1500.0, 1839.0], [100.0, 24060.0], [1600.0, 1430.0], [1700.0, 1126.0], [1800.0, 891.0], [1900.0, 668.0], [2000.0, 478.0], [2100.0, 416.0], [2200.0, 278.0], [2300.0, 218.0], [2400.0, 152.0], [2500.0, 110.0], [2600.0, 79.0], [2700.0, 50.0], [2800.0, 37.0], [2900.0, 21.0], [3000.0, 21.0], [3100.0, 2.0], [200.0, 8108.0], [3300.0, 2.0], [3200.0, 11.0], [3400.0, 4.0], [3500.0, 1.0], [3600.0, 1.0], [300.0, 4952.0], [400.0, 5302.0], [500.0, 6288.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7809.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 60253.0, "series": [{"data": [[0.0, 60253.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 49138.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7809.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72882326E12, "maxY": 16.0, "series": [{"data": [[1.72882746E12, 12.0], [1.72882776E12, 12.0], [1.72882878E12, 12.0], [1.72882716E12, 12.0], [1.72882866E12, 12.0], [1.72882896E12, 8.324532453245329], [1.72882806E12, 12.0], [1.72882836E12, 12.0], [1.72882794E12, 12.0], [1.72882824E12, 12.0], [1.72882734E12, 12.0], [1.72882764E12, 12.0], [1.72882722E12, 12.0], [1.72882752E12, 12.0], [1.72882854E12, 12.0], [1.72882884E12, 12.0], [1.72882842E12, 12.0], [1.72882872E12, 12.0], [1.72882782E12, 12.0], [1.72882812E12, 12.0], [1.7288277E12, 12.0], [1.728828E12, 12.0], [1.72882902E12, 1.627737226277372], [1.7288271E12, 11.92246835443038], [1.7288274E12, 12.0], [1.7288289E12, 11.625344352617075], [1.72882728E12, 12.0], [1.7288283E12, 12.0], [1.7288286E12, 12.0], [1.72882818E12, 12.0], [1.72882848E12, 12.0], [1.72882758E12, 12.0], [1.72882788E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72882326E12, 2.0], [1.72882338E12, 2.0], [1.7288235E12, 1.902061855670103], [1.72882332E12, 2.0], [1.72882344E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72882374E12, 4.0], [1.72882404E12, 4.0], [1.72882434E12, 4.0], [1.72882464E12, 4.0], [1.72882446E12, 4.0], [1.72882512E12, 3.680232558139536], [1.72882476E12, 4.0], [1.72882356E12, 4.0], [1.72882386E12, 4.0], [1.72882416E12, 4.0], [1.72882398E12, 4.0], [1.72882428E12, 4.0], [1.72882458E12, 4.0], [1.728825E12, 4.0], [1.72882488E12, 4.0], [1.7288247E12, 4.0], [1.72882368E12, 4.0], [1.7288235E12, 3.9865470852017943], [1.7288238E12, 4.0], [1.7288241E12, 4.0], [1.7288244E12, 4.0], [1.72882518E12, 1.0], [1.72882422E12, 4.0], [1.72882452E12, 4.0], [1.72882506E12, 4.0], [1.72882482E12, 4.0], [1.72882494E12, 4.0], [1.72882362E12, 4.0], [1.72882392E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72882968E12, 16.0], [1.72882908E12, 16.0], [1.72882938E12, 16.0], [1.72883028E12, 16.0], [1.72882998E12, 16.0], [1.72883058E12, 13.555189456342639], [1.72882956E12, 16.0], [1.72882926E12, 16.0], [1.72883016E12, 16.0], [1.72882986E12, 16.0], [1.72882914E12, 16.0], [1.72883046E12, 16.0], [1.72882944E12, 16.0], [1.72883004E12, 16.0], [1.72882974E12, 16.0], [1.72883064E12, 6.773076923076917], [1.72883034E12, 16.0], [1.72882932E12, 16.0], [1.72882902E12, 15.836795252225519], [1.72882992E12, 16.0], [1.72882962E12, 16.0], [1.72883052E12, 16.0], [1.72883022E12, 16.0], [1.7288292E12, 16.0], [1.7288298E12, 16.0], [1.7288295E12, 16.0], [1.7288304E12, 16.0], [1.7288301E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.72882584E12, 8.0], [1.72882554E12, 8.0], [1.72882524E12, 8.0], [1.72882686E12, 8.0], [1.72882704E12, 5.6574074074074145], [1.72882674E12, 8.0], [1.72882644E12, 8.0], [1.72882614E12, 8.0], [1.72882632E12, 8.0], [1.72882602E12, 8.0], [1.72882572E12, 8.0], [1.72882542E12, 8.0], [1.7288256E12, 8.0], [1.7288253E12, 8.0], [1.72882692E12, 8.0], [1.72882662E12, 8.0], [1.7288268E12, 8.0], [1.7288265E12, 8.0], [1.7288262E12, 8.0], [1.7288259E12, 8.0], [1.72882608E12, 8.0], [1.72882578E12, 8.0], [1.72882548E12, 8.0], [1.7288271E12, 1.0], [1.72882518E12, 7.991379310344834], [1.72882536E12, 8.0], [1.72882698E12, 8.0], [1.72882668E12, 8.0], [1.72882638E12, 8.0], [1.72882656E12, 8.0], [1.72882626E12, 8.0], [1.72882596E12, 8.0], [1.72882566E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72883064E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 384.4980694980695, "minX": 1.0, "maxY": 801.7217763157878, "series": [{"data": [[2.0, 398.356720827179], [8.0, 474.9312411291573], [9.0, 498.2264150943395], [10.0, 561.9628906249997], [11.0, 624.4708520179369], [3.0, 384.4980694980695], [12.0, 627.9975468267514], [13.0, 608.3580901856764], [14.0, 705.1657754010695], [15.0, 733.523465703971], [1.0, 403.51851851851825], [4.0, 407.8255075743281], [16.0, 801.7217763157878], [5.0, 460.7500000000001], [6.0, 436.1768292682926], [7.0, 438.7124600638976]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.675358361774643, 596.8486518771301]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72882326E12, "maxY": 6.29256815E7, "series": [{"data": [[1.72882584E12, 5.21932253E7], [1.72882464E12, 2.95923549E7], [1.72882686E12, 5.1856452983333334E7], [1.72882908E12, 5.938627045E7], [1.72882446E12, 3.0491995116666667E7], [1.72882704E12, 3.3317613966666665E7], [1.72883028E12, 6.009205661666667E7], [1.72882806E12, 5.8538958916666664E7], [1.72882344E12, 1.553016275E7], [1.72882326E12, 6258328.5], [1.72882824E12, 5.885768571666667E7], [1.72882602E12, 5.209929468333333E7], [1.72882926E12, 6.019863156666667E7], [1.72882722E12, 5.6590788166666664E7], [1.72882428E12, 3.027927595E7], [1.72883046E12, 6.149457546666667E7], [1.728825E12, 3.0493265116666667E7], [1.72882944E12, 6.246890286666667E7], [1.7288265E12, 5.031440521666667E7], [1.72882872E12, 5.7695132233333334E7], [1.72882974E12, 5.9997073733333334E7], [1.7288277E12, 5.878120056666667E7], [1.7288238E12, 3.141732995E7], [1.72882548E12, 5.1851359833333336E7], [1.72882992E12, 6.038854405E7], [1.7288289E12, 5.825542738333333E7], [1.72882482E12, 2.9858341533333335E7], [1.72882668E12, 5.218193361666667E7], [1.72882362E12, 3.03500274E7], [1.72882566E12, 4.972763761666667E7], [1.72882788E12, 5.89180127E7], [1.7288301E12, 6.126114481666667E7], [1.72882374E12, 2.988248135E7], [1.72882716E12, 5.930111745E7], [1.72882938E12, 6.175200886666667E7], [1.72882512E12, 2.5492728783333335E7], [1.72882476E12, 3.1473226866666667E7], [1.72882614E12, 5.153503911666667E7], [1.72882836E12, 5.905434425E7], [1.72883058E12, 5.874697295E7], [1.72882632E12, 5.180925245E7], [1.72882956E12, 6.1897187983333334E7], [1.72882356E12, 2.9072242233333334E7], [1.72882734E12, 5.989539628333333E7], [1.7288253E12, 5.2232383016666666E7], [1.72882752E12, 5.7907850266666666E7], [1.72882458E12, 2.96180059E7], [1.72882854E12, 5.8234357233333334E7], [1.7288268E12, 4.987656545E7], [1.72883004E12, 6.226751731666667E7], [1.72882782E12, 5.953448343333333E7], [1.72882578E12, 5.103537288333333E7], [1.728828E12, 5.603268936666667E7], [1.7288241E12, 3.10419701E7], [1.72882902E12, 2.272878765E7], [1.72882698E12, 5.18346012E7], [1.72883022E12, 5.995895256666667E7], [1.7288292E12, 6.108611203333333E7], [1.72882494E12, 2.9665796016666666E7], [1.72882818E12, 5.962298696666667E7], [1.7288304E12, 6.125684831666667E7], [1.72882596E12, 5.0268618166666664E7], [1.72882392E12, 2.9556838466666665E7], [1.72882746E12, 5.975826756666667E7], [1.72882404E12, 3.03569414E7], [1.72882524E12, 4.943658875E7], [1.72882968E12, 6.165687275E7], [1.72882866E12, 5.8797506516666666E7], [1.72882644E12, 5.132953163333333E7], [1.72882386E12, 2.9864904616666667E7], [1.72882542E12, 4.991915545E7], [1.72882764E12, 5.617359118333333E7], [1.72882986E12, 6.0751524333333336E7], [1.7288256E12, 4.897921135E7], [1.72882488E12, 3.0143835416666668E7], [1.72882662E12, 5.248207753333333E7], [1.72882884E12, 5.81932713E7], [1.72882338E12, 1.4952118633333333E7], [1.72883034E12, 6.205076815E7], [1.7288259E12, 5.0568873E7], [1.72882812E12, 5.706983961666667E7], [1.72882608E12, 5.105783275E7], [1.72882932E12, 5.996390668333333E7], [1.7288271E12, 3.3493619183333334E7], [1.7288244E12, 2.886985525E7], [1.72882422E12, 3.03712747E7], [1.72883052E12, 6.044816121666667E7], [1.72882506E12, 2.85933628E7], [1.72882728E12, 5.7776919733333334E7], [1.7288283E12, 5.7544232016666666E7], [1.72882626E12, 4.950307895E7], [1.72882848E12, 5.767038188333333E7], [1.7288295E12, 5.99423701E7], [1.72882554E12, 5.137234471666667E7], [1.72882776E12, 5.693943563333333E7], [1.72882434E12, 2.945804665E7], [1.72882878E12, 5.8318381483333334E7], [1.72882674E12, 5.256785415E7], [1.72882896E12, 4.6224246E7], [1.72882998E12, 6.29256815E7], [1.72882794E12, 5.69777438E7], [1.72882572E12, 5.15032371E7], [1.72883016E12, 6.1680360233333334E7], [1.72882416E12, 2.949998265E7], [1.72882398E12, 3.089975885E7], [1.72882914E12, 6.1056671916666664E7], [1.72882692E12, 5.211503428333333E7], [1.7288247E12, 3.07448237E7], [1.72882842E12, 5.60610973E7], [1.7288262E12, 5.147382855E7], [1.72883064E12, 2.5967203616666667E7], [1.72882368E12, 2.9066954733333334E7], [1.7288235E12, 1.8582838783333335E7], [1.72882518E12, 4.94630544E7], [1.7288274E12, 5.822091045E7], [1.72882962E12, 6.202570011666667E7], [1.72882536E12, 5.246337056666667E7], [1.72882452E12, 3.1827718733333334E7], [1.72882638E12, 5.156384685E7], [1.7288286E12, 5.8600297233333334E7], [1.72882656E12, 5.024482946666667E7], [1.7288298E12, 6.177292103333333E7], [1.72882332E12, 1.5009389816666666E7], [1.72882758E12, 5.864025713333333E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72882584E12, 0.0], [1.72882464E12, 0.0], [1.72882686E12, 0.0], [1.72882908E12, 0.0], [1.72882446E12, 0.0], [1.72882704E12, 0.0], [1.72883028E12, 0.0], [1.72882806E12, 0.0], [1.72882344E12, 0.0], [1.72882326E12, 0.0], [1.72882824E12, 0.0], [1.72882602E12, 0.0], [1.72882926E12, 0.0], [1.72882722E12, 0.0], [1.72882428E12, 0.0], [1.72883046E12, 0.0], [1.728825E12, 0.0], [1.72882944E12, 0.0], [1.7288265E12, 0.0], [1.72882872E12, 0.0], [1.72882974E12, 0.0], [1.7288277E12, 0.0], [1.7288238E12, 0.0], [1.72882548E12, 0.0], [1.72882992E12, 0.0], [1.7288289E12, 0.0], [1.72882482E12, 0.0], [1.72882668E12, 0.0], [1.72882362E12, 0.0], [1.72882566E12, 0.0], [1.72882788E12, 0.0], [1.7288301E12, 0.0], [1.72882374E12, 0.0], [1.72882716E12, 0.0], [1.72882938E12, 0.0], [1.72882512E12, 0.0], [1.72882476E12, 0.0], [1.72882614E12, 0.0], [1.72882836E12, 0.0], [1.72883058E12, 0.0], [1.72882632E12, 0.0], [1.72882956E12, 0.0], [1.72882356E12, 0.0], [1.72882734E12, 0.0], [1.7288253E12, 0.0], [1.72882752E12, 0.0], [1.72882458E12, 0.0], [1.72882854E12, 0.0], [1.7288268E12, 0.0], [1.72883004E12, 0.0], [1.72882782E12, 0.0], [1.72882578E12, 0.0], [1.728828E12, 0.0], [1.7288241E12, 0.0], [1.72882902E12, 0.0], [1.72882698E12, 0.0], [1.72883022E12, 0.0], [1.7288292E12, 0.0], [1.72882494E12, 0.0], [1.72882818E12, 0.0], [1.7288304E12, 0.0], [1.72882596E12, 0.0], [1.72882392E12, 0.0], [1.72882746E12, 0.0], [1.72882404E12, 0.0], [1.72882524E12, 0.0], [1.72882968E12, 0.0], [1.72882866E12, 0.0], [1.72882644E12, 0.0], [1.72882386E12, 0.0], [1.72882542E12, 0.0], [1.72882764E12, 0.0], [1.72882986E12, 0.0], [1.7288256E12, 0.0], [1.72882488E12, 0.0], [1.72882662E12, 0.0], [1.72882884E12, 0.0], [1.72882338E12, 0.0], [1.72883034E12, 0.0], [1.7288259E12, 0.0], [1.72882812E12, 0.0], [1.72882608E12, 0.0], [1.72882932E12, 0.0], [1.7288271E12, 0.0], [1.7288244E12, 0.0], [1.72882422E12, 0.0], [1.72883052E12, 0.0], [1.72882506E12, 0.0], [1.72882728E12, 0.0], [1.7288283E12, 0.0], [1.72882626E12, 0.0], [1.72882848E12, 0.0], [1.7288295E12, 0.0], [1.72882554E12, 0.0], [1.72882776E12, 0.0], [1.72882434E12, 0.0], [1.72882878E12, 0.0], [1.72882674E12, 0.0], [1.72882896E12, 0.0], [1.72882998E12, 0.0], [1.72882794E12, 0.0], [1.72882572E12, 0.0], [1.72883016E12, 0.0], [1.72882416E12, 0.0], [1.72882398E12, 0.0], [1.72882914E12, 0.0], [1.72882692E12, 0.0], [1.7288247E12, 0.0], [1.72882842E12, 0.0], [1.7288262E12, 0.0], [1.72883064E12, 0.0], [1.72882368E12, 0.0], [1.7288235E12, 0.0], [1.72882518E12, 0.0], [1.7288274E12, 0.0], [1.72882962E12, 0.0], [1.72882536E12, 0.0], [1.72882452E12, 0.0], [1.72882638E12, 0.0], [1.7288286E12, 0.0], [1.72882656E12, 0.0], [1.7288298E12, 0.0], [1.72882332E12, 0.0], [1.72882758E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72883064E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 371.7482014388487, "minX": 1.72882326E12, "maxY": 858.3985701519218, "series": [{"data": [[1.72882584E12, 471.90147783251166], [1.72882464E12, 390.33496732026146], [1.72882686E12, 469.2949218749997], [1.72882908E12, 782.2860635696811], [1.72882446E12, 397.5124792013311], [1.72882704E12, 433.15123456790093], [1.72883028E12, 795.0807248764405], [1.72882806E12, 660.4931002759877], [1.72882344E12, 411.4965753424655], [1.72882326E12, 461.57142857142867], [1.72882824E12, 633.8273127753309], [1.72882602E12, 486.2618806875631], [1.72882926E12, 754.6653605015675], [1.72882722E12, 608.4848229342327], [1.72882428E12, 404.0989932885908], [1.72883046E12, 840.2688927943756], [1.728825E12, 403.1197301854979], [1.72882944E12, 808.6783919597991], [1.7288265E12, 456.1421755725193], [1.72882872E12, 594.7127572016466], [1.72882974E12, 775.7844408427867], [1.7288277E12, 635.250886524822], [1.7288238E12, 416.9391304347828], [1.72882548E12, 482.43115577889455], [1.72882992E12, 834.9486062717772], [1.7288289E12, 640.8264462809918], [1.72882482E12, 435.26181818181817], [1.72882668E12, 480.5385385385382], [1.72882362E12, 422.1247803163443], [1.72882566E12, 454.31563981042666], [1.72882788E12, 672.1164958061516], [1.7288301E12, 808.3053435114504], [1.72882374E12, 436.856102003643], [1.72882716E12, 623.0103716508203], [1.72882938E12, 825.4194659776049], [1.72882512E12, 397.1434108527131], [1.72882476E12, 411.44957264957236], [1.72882614E12, 486.37322515212963], [1.72882836E12, 600.2516722408036], [1.72883058E12, 672.506589785832], [1.72882632E12, 478.04676616915435], [1.72882956E12, 803.6746887966813], [1.72882356E12, 407.6609880749575], [1.72882734E12, 646.5067506750676], [1.7288253E12, 469.1108930323846], [1.72882752E12, 639.5437499999998], [1.72882458E12, 402.3082077051928], [1.72882854E12, 651.1252268602541], [1.7288268E12, 483.9697275479316], [1.72883004E12, 858.3985701519218], [1.72882782E12, 623.00344530577], [1.72882578E12, 483.1527638190957], [1.728828E12, 589.5298935298938], [1.7288241E12, 403.9848484848484], [1.72882902E12, 656.6687763713087], [1.72882698E12, 489.42711518858334], [1.72883022E12, 780.1752241238795], [1.7288292E12, 799.503322259135], [1.72882494E12, 423.85764499121234], [1.72882818E12, 613.4786324786326], [1.7288304E12, 772.9469879518072], [1.72882596E12, 451.16603773584916], [1.72882392E12, 426.76460176991185], [1.72882746E12, 666.3612132352935], [1.72882404E12, 421.25654450261777], [1.72882524E12, 460.6586768935768], [1.72882968E12, 828.8043103448276], [1.72882866E12, 626.5118317265562], [1.72882644E12, 458.52390057361407], [1.72882386E12, 401.8157453936349], [1.72882542E12, 468.91380999020595], [1.72882764E12, 604.5714285714295], [1.72882986E12, 775.5831987075925], [1.7288256E12, 467.19121951219483], [1.72882488E12, 404.3445945945945], [1.72882662E12, 487.8481141692153], [1.72882884E12, 638.565523306948], [1.72882338E12, 400.03678929765897], [1.72883034E12, 793.6627906976752], [1.7288259E12, 473.141871921182], [1.72882812E12, 609.1320437342295], [1.72882608E12, 487.65615462868783], [1.72882932E12, 808.6663851351348], [1.7288271E12, 579.3537803138366], [1.7288244E12, 399.4733333333333], [1.72882422E12, 409.3521367521364], [1.72883052E12, 822.5456095481667], [1.72882506E12, 379.58003169572123], [1.72882728E12, 635.8053097345135], [1.7288283E12, 626.1214223764098], [1.72882626E12, 462.1833976833972], [1.72882848E12, 596.5410107705061], [1.7288295E12, 790.704658901831], [1.72882554E12, 468.52246093750006], [1.72882776E12, 618.5469422911267], [1.72882434E12, 383.2404458598725], [1.72882878E12, 627.6368421052638], [1.72882674E12, 484.21327967806803], [1.72882896E12, 507.38393839383883], [1.72882998E12, 786.7726901062963], [1.72882794E12, 640.7682709447402], [1.72882572E12, 496.5046439628481], [1.72883016E12, 820.8102127659578], [1.72882416E12, 417.12390924956355], [1.72882398E12, 451.33017077798877], [1.72882914E12, 802.9354568315177], [1.72882692E12, 483.258291457286], [1.7288247E12, 390.85203252032517], [1.72882842E12, 630.9693251533737], [1.7288262E12, 482.35907723169476], [1.72883064E12, 461.24615384615385], [1.72882368E12, 398.07960199004975], [1.7288235E12, 371.7482014388487], [1.72882518E12, 494.0675965665235], [1.7288274E12, 644.287511230907], [1.72882962E12, 805.6158382476835], [1.72882536E12, 472.9069539666992], [1.72882452E12, 407.2335025380711], [1.72882638E12, 469.5034213098726], [1.7288286E12, 644.3884444444445], [1.72882656E12, 471.6774509803924], [1.7288298E12, 787.8498769483165], [1.72882332E12, 376.3438485804418], [1.72882758E12, 637.5052910052907]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72883064E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 244.98321342925644, "minX": 1.72882326E12, "maxY": 574.7247542448612, "series": [{"data": [[1.72882584E12, 313.63054187192125], [1.72882464E12, 258.21241830065395], [1.72882686E12, 311.2568359375001], [1.72882908E12, 529.4580277098604], [1.72882446E12, 259.314475873544], [1.72882704E12, 285.1280864197527], [1.72883028E12, 536.5263591433268], [1.72882806E12, 441.8712051517939], [1.72882344E12, 270.0684931506848], [1.72882326E12, 300.66326530612247], [1.72882824E12, 421.8008810572688], [1.72882602E12, 322.07684529828094], [1.72882926E12, 508.5485893416928], [1.72882722E12, 407.59527824620574], [1.72882428E12, 262.988255033557], [1.72883046E12, 562.3119507908616], [1.728825E12, 262.3558178752106], [1.72882944E12, 539.4530988274696], [1.7288265E12, 303.8482824427479], [1.72882872E12, 398.8279835390952], [1.72882974E12, 521.7917341977311], [1.7288277E12, 423.3554964539001], [1.7288238E12, 268.8243478260869], [1.72882548E12, 318.23417085427104], [1.72882992E12, 562.4015679442518], [1.7288289E12, 426.80624426078924], [1.72882482E12, 285.5818181818181], [1.72882668E12, 317.6826826826825], [1.72882362E12, 276.0931458699474], [1.72882566E12, 305.1118483412327], [1.72882788E12, 447.8490214352286], [1.7288301E12, 541.605597964375], [1.72882374E12, 287.3515482695811], [1.72882716E12, 413.82541054451224], [1.72882938E12, 549.0585701981054], [1.72882512E12, 261.93217054263573], [1.72882476E12, 267.6478632478629], [1.72882614E12, 321.35496957403706], [1.72882836E12, 399.8603678929766], [1.72883058E12, 449.96128500823687], [1.72882632E12, 315.97910447761177], [1.72882956E12, 537.380912863071], [1.72882356E12, 267.0374787052813], [1.72882734E12, 429.79297929793], [1.7288253E12, 310.06967615309134], [1.72882752E12, 428.5374999999991], [1.72882458E12, 266.1222780569515], [1.72882854E12, 435.9918330308531], [1.7288268E12, 324.24016145307735], [1.72883004E12, 574.7247542448612], [1.72882782E12, 415.1937984496126], [1.72882578E12, 321.68140703517577], [1.728828E12, 394.5675675675683], [1.7288241E12, 262.9124579124578], [1.72882902E12, 441.5295358649791], [1.72882698E12, 325.08766564729905], [1.72883022E12, 523.6731866340665], [1.7288292E12, 534.8604651162788], [1.72882494E12, 281.493848857645], [1.72882818E12, 408.0247863247866], [1.7288304E12, 519.1662650602412], [1.72882596E12, 302.3066037735852], [1.72882392E12, 281.52920353982296], [1.72882746E12, 444.2261029411764], [1.72882404E12, 277.3263525305411], [1.72882524E12, 309.51390220517743], [1.72882968E12, 553.1965517241387], [1.72882866E12, 418.2594215600346], [1.72882644E12, 303.2189292543017], [1.72882386E12, 262.4103852596318], [1.72882542E12, 313.02056807051946], [1.72882764E12, 406.6873949579832], [1.72882986E12, 522.6873990306938], [1.7288256E12, 312.76878048780515], [1.72882488E12, 265.197635135135], [1.72882662E12, 320.826707441386], [1.72882884E12, 429.67282321899773], [1.72882338E12, 263.2709030100335], [1.72883034E12, 532.3961794019934], [1.7288259E12, 316.8354679802958], [1.72882812E12, 410.62657695542475], [1.72882608E12, 325.50457782299094], [1.72882932E12, 546.1427364864866], [1.7288271E12, 387.97717546362367], [1.7288244E12, 264.44666666666654], [1.72882422E12, 268.145299145299], [1.72883052E12, 556.2591645353791], [1.72882506E12, 251.0744849445323], [1.72882728E12, 426.49026548672543], [1.7288283E12, 420.62792714657473], [1.72882626E12, 309.8899613899615], [1.72882848E12, 400.1052195526094], [1.7288295E12, 535.0324459234598], [1.72882554E12, 310.64355468750006], [1.72882776E12, 417.5762273901809], [1.72882434E12, 252.43949044585986], [1.72882878E12, 417.92982456140396], [1.72882674E12, 320.3661971830988], [1.72882896E12, 337.7348734873491], [1.72882998E12, 525.0776778413726], [1.72882794E12, 432.53565062388594], [1.72882572E12, 331.181630546956], [1.72883016E12, 550.0587234042558], [1.72882416E12, 275.6893542757417], [1.72882398E12, 295.56925996204967], [1.72882914E12, 535.2422464375526], [1.72882692E12, 321.83618090452273], [1.7288247E12, 255.36422764227626], [1.72882842E12, 424.31025416301486], [1.7288262E12, 321.2316950852561], [1.72883064E12, 308.19807692307705], [1.72882368E12, 262.0597014925375], [1.7288235E12, 244.98321342925644], [1.72882518E12, 330.95600858369033], [1.7288274E12, 429.04941599281227], [1.72882962E12, 539.0808761583825], [1.72882536E12, 313.69833496571925], [1.72882452E12, 264.15397631133686], [1.72882638E12, 312.7849462365589], [1.7288286E12, 430.0417777777777], [1.72882656E12, 316.9294117647058], [1.7288298E12, 527.892534864643], [1.72882332E12, 245.16088328075696], [1.72882758E12, 424.82098765432124]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72883064E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72882326E12, "maxY": 4.9E-324, "series": [{"data": [[1.72882584E12, 0.0], [1.72882464E12, 0.0], [1.72882686E12, 0.0], [1.72882908E12, 0.0], [1.72882446E12, 0.0], [1.72882704E12, 0.0], [1.72883028E12, 0.0], [1.72882806E12, 0.0], [1.72882344E12, 0.0], [1.72882326E12, 0.0], [1.72882824E12, 0.0], [1.72882602E12, 0.0], [1.72882926E12, 0.0], [1.72882722E12, 0.0], [1.72882428E12, 0.0], [1.72883046E12, 0.0], [1.728825E12, 0.0], [1.72882944E12, 0.0], [1.7288265E12, 0.0], [1.72882872E12, 0.0], [1.72882974E12, 0.0], [1.7288277E12, 0.0], [1.7288238E12, 0.0], [1.72882548E12, 0.0], [1.72882992E12, 0.0], [1.7288289E12, 0.0], [1.72882482E12, 0.0], [1.72882668E12, 0.0], [1.72882362E12, 0.0], [1.72882566E12, 0.0], [1.72882788E12, 0.0], [1.7288301E12, 0.0], [1.72882374E12, 0.0], [1.72882716E12, 0.0], [1.72882938E12, 0.0], [1.72882512E12, 0.0], [1.72882476E12, 0.0], [1.72882614E12, 0.0], [1.72882836E12, 0.0], [1.72883058E12, 0.0], [1.72882632E12, 0.0], [1.72882956E12, 0.0], [1.72882356E12, 0.0], [1.72882734E12, 0.0], [1.7288253E12, 0.0], [1.72882752E12, 0.0], [1.72882458E12, 0.0], [1.72882854E12, 0.0], [1.7288268E12, 0.0], [1.72883004E12, 0.0], [1.72882782E12, 0.0], [1.72882578E12, 0.0], [1.728828E12, 0.0], [1.7288241E12, 0.0], [1.72882902E12, 0.0], [1.72882698E12, 0.0], [1.72883022E12, 0.0], [1.7288292E12, 0.0], [1.72882494E12, 0.0], [1.72882818E12, 0.0], [1.7288304E12, 0.0], [1.72882596E12, 0.0], [1.72882392E12, 0.0], [1.72882746E12, 0.0], [1.72882404E12, 0.0], [1.72882524E12, 0.0], [1.72882968E12, 0.0], [1.72882866E12, 0.0], [1.72882644E12, 0.0], [1.72882386E12, 0.0], [1.72882542E12, 0.0], [1.72882764E12, 0.0], [1.72882986E12, 0.0], [1.7288256E12, 0.0], [1.72882488E12, 0.0], [1.72882662E12, 0.0], [1.72882884E12, 0.0], [1.72882338E12, 0.0], [1.72883034E12, 0.0], [1.7288259E12, 0.0], [1.72882812E12, 0.0], [1.72882608E12, 0.0], [1.72882932E12, 0.0], [1.7288271E12, 0.0], [1.7288244E12, 0.0], [1.72882422E12, 0.0], [1.72883052E12, 0.0], [1.72882506E12, 0.0], [1.72882728E12, 0.0], [1.7288283E12, 0.0], [1.72882626E12, 0.0], [1.72882848E12, 0.0], [1.7288295E12, 0.0], [1.72882554E12, 0.0], [1.72882776E12, 0.0], [1.72882434E12, 0.0], [1.72882878E12, 0.0], [1.72882674E12, 0.0], [1.72882896E12, 0.0], [1.72882998E12, 0.0], [1.72882794E12, 0.0], [1.72882572E12, 0.0], [1.72883016E12, 0.0], [1.72882416E12, 0.0], [1.72882398E12, 0.0], [1.72882914E12, 0.0], [1.72882692E12, 0.0], [1.7288247E12, 0.0], [1.72882842E12, 0.0], [1.7288262E12, 0.0], [1.72883064E12, 0.0], [1.72882368E12, 0.0], [1.7288235E12, 0.0], [1.72882518E12, 0.0], [1.7288274E12, 0.0], [1.72882962E12, 0.0], [1.72882536E12, 0.0], [1.72882452E12, 0.0], [1.72882638E12, 0.0], [1.7288286E12, 0.0], [1.72882656E12, 0.0], [1.7288298E12, 0.0], [1.72882332E12, 0.0], [1.72882758E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72883064E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.72882326E12, "maxY": 3634.0, "series": [{"data": [[1.72882584E12, 1800.0], [1.72882464E12, 1388.0], [1.72882686E12, 2155.0], [1.72882908E12, 3089.0], [1.72882446E12, 1673.0], [1.72882704E12, 1796.0], [1.72883028E12, 3182.0], [1.72882806E12, 2450.0], [1.72882344E12, 1351.0], [1.72882326E12, 1553.0], [1.72882824E12, 2447.0], [1.72882602E12, 1854.0], [1.72882926E12, 3050.0], [1.72882722E12, 2432.0], [1.72882428E12, 1583.0], [1.72883046E12, 3557.0], [1.728825E12, 1460.0], [1.72882944E12, 3249.0], [1.7288265E12, 1834.0], [1.72882872E12, 2471.0], [1.72882974E12, 3238.0], [1.7288277E12, 2606.0], [1.7288238E12, 1732.0], [1.72882548E12, 1964.0], [1.72882992E12, 2841.0], [1.7288289E12, 2594.0], [1.72882482E12, 1586.0], [1.72882668E12, 2108.0], [1.72882362E12, 1502.0], [1.72882566E12, 1994.0], [1.72882788E12, 2990.0], [1.7288301E12, 2863.0], [1.72882374E12, 1489.0], [1.72882716E12, 2471.0], [1.72882938E12, 3034.0], [1.72882512E12, 1451.0], [1.72882476E12, 1779.0], [1.72882614E12, 1781.0], [1.72882836E12, 2296.0], [1.72883058E12, 2563.0], [1.72882632E12, 1826.0], [1.72882956E12, 3634.0], [1.72882356E12, 1365.0], [1.72882734E12, 2587.0], [1.7288253E12, 1715.0], [1.72882752E12, 2871.0], [1.72882458E12, 1440.0], [1.72882854E12, 2293.0], [1.7288268E12, 1839.0], [1.72883004E12, 3247.0], [1.72882782E12, 2373.0], [1.72882578E12, 1788.0], [1.728828E12, 2744.0], [1.7288241E12, 1725.0], [1.72882902E12, 2465.0], [1.72882698E12, 2080.0], [1.72883022E12, 3277.0], [1.7288292E12, 3007.0], [1.72882494E12, 1798.0], [1.72882818E12, 2444.0], [1.7288304E12, 2875.0], [1.72882596E12, 1643.0], [1.72882392E12, 1701.0], [1.72882746E12, 2442.0], [1.72882404E12, 1397.0], [1.72882524E12, 1959.0], [1.72882968E12, 3425.0], [1.72882866E12, 2802.0], [1.72882644E12, 1732.0], [1.72882386E12, 1488.0], [1.72882542E12, 1928.0], [1.72882764E12, 2545.0], [1.72882986E12, 2863.0], [1.7288256E12, 2040.0], [1.72882488E12, 1548.0], [1.72882662E12, 1679.0], [1.72882884E12, 2539.0], [1.72882338E12, 1605.0], [1.72883034E12, 2817.0], [1.7288259E12, 1765.0], [1.72882812E12, 2591.0], [1.72882608E12, 1841.0], [1.72882932E12, 3376.0], [1.7288271E12, 2319.0], [1.7288244E12, 1378.0], [1.72882422E12, 1709.0], [1.72883052E12, 3473.0], [1.72882506E12, 1653.0], [1.72882728E12, 2349.0], [1.7288283E12, 2415.0], [1.72882626E12, 1926.0], [1.72882848E12, 2724.0], [1.7288295E12, 3457.0], [1.72882554E12, 1784.0], [1.72882776E12, 2485.0], [1.72882434E12, 1652.0], [1.72882878E12, 2454.0], [1.72882674E12, 1736.0], [1.72882896E12, 2244.0], [1.72882998E12, 3244.0], [1.72882794E12, 2682.0], [1.72882572E12, 1853.0], [1.72883016E12, 3434.0], [1.72882416E12, 1713.0], [1.72882398E12, 1275.0], [1.72882914E12, 3011.0], [1.72882692E12, 1656.0], [1.7288247E12, 1449.0], [1.72882842E12, 2742.0], [1.7288262E12, 1690.0], [1.72883064E12, 1760.0], [1.72882368E12, 1432.0], [1.7288235E12, 1440.0], [1.72882518E12, 1729.0], [1.7288274E12, 2764.0], [1.72882962E12, 3253.0], [1.72882536E12, 1786.0], [1.72882452E12, 1464.0], [1.72882638E12, 1788.0], [1.7288286E12, 2363.0], [1.72882656E12, 1820.0], [1.7288298E12, 3294.0], [1.72882332E12, 1365.0], [1.72882758E12, 2700.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72882584E12, 33.0], [1.72882464E12, 33.0], [1.72882686E12, 34.0], [1.72882908E12, 52.0], [1.72882446E12, 35.0], [1.72882704E12, 34.0], [1.72883028E12, 62.0], [1.72882806E12, 40.0], [1.72882344E12, 37.0], [1.72882326E12, 44.0], [1.72882824E12, 41.0], [1.72882602E12, 30.0], [1.72882926E12, 62.0], [1.72882722E12, 40.0], [1.72882428E12, 33.0], [1.72883046E12, 61.0], [1.728825E12, 30.0], [1.72882944E12, 50.0], [1.7288265E12, 32.0], [1.72882872E12, 38.0], [1.72882974E12, 65.0], [1.7288277E12, 35.0], [1.7288238E12, 33.0], [1.72882548E12, 36.0], [1.72882992E12, 57.0], [1.7288289E12, 36.0], [1.72882482E12, 38.0], [1.72882668E12, 38.0], [1.72882362E12, 38.0], [1.72882566E12, 34.0], [1.72882788E12, 34.0], [1.7288301E12, 65.0], [1.72882374E12, 38.0], [1.72882716E12, 38.0], [1.72882938E12, 60.0], [1.72882512E12, 38.0], [1.72882476E12, 32.0], [1.72882614E12, 33.0], [1.72882836E12, 38.0], [1.72883058E12, 35.0], [1.72882632E12, 31.0], [1.72882956E12, 54.0], [1.72882356E12, 34.0], [1.72882734E12, 35.0], [1.7288253E12, 32.0], [1.72882752E12, 39.0], [1.72882458E12, 34.0], [1.72882854E12, 39.0], [1.7288268E12, 34.0], [1.72883004E12, 65.0], [1.72882782E12, 37.0], [1.72882578E12, 32.0], [1.728828E12, 43.0], [1.7288241E12, 36.0], [1.72882902E12, 37.0], [1.72882698E12, 37.0], [1.72883022E12, 59.0], [1.7288292E12, 57.0], [1.72882494E12, 30.0], [1.72882818E12, 40.0], [1.7288304E12, 57.0], [1.72882596E12, 36.0], [1.72882392E12, 35.0], [1.72882746E12, 35.0], [1.72882404E12, 35.0], [1.72882524E12, 34.0], [1.72882968E12, 57.0], [1.72882866E12, 41.0], [1.72882644E12, 37.0], [1.72882386E12, 35.0], [1.72882542E12, 34.0], [1.72882764E12, 36.0], [1.72882986E12, 54.0], [1.7288256E12, 32.0], [1.72882488E12, 34.0], [1.72882662E12, 35.0], [1.72882884E12, 39.0], [1.72882338E12, 37.0], [1.72883034E12, 59.0], [1.7288259E12, 31.0], [1.72882812E12, 38.0], [1.72882608E12, 34.0], [1.72882932E12, 57.0], [1.7288271E12, 35.0], [1.7288244E12, 35.0], [1.72882422E12, 32.0], [1.72883052E12, 57.0], [1.72882506E12, 33.0], [1.72882728E12, 40.0], [1.7288283E12, 40.0], [1.72882626E12, 33.0], [1.72882848E12, 36.0], [1.7288295E12, 63.0], [1.72882554E12, 36.0], [1.72882776E12, 40.0], [1.72882434E12, 34.0], [1.72882878E12, 43.0], [1.72882674E12, 27.0], [1.72882896E12, 31.0], [1.72882998E12, 57.0], [1.72882794E12, 42.0], [1.72882572E12, 33.0], [1.72883016E12, 62.0], [1.72882416E12, 36.0], [1.72882398E12, 30.0], [1.72882914E12, 54.0], [1.72882692E12, 31.0], [1.7288247E12, 34.0], [1.72882842E12, 40.0], [1.7288262E12, 35.0], [1.72883064E12, 37.0], [1.72882368E12, 35.0], [1.7288235E12, 34.0], [1.72882518E12, 32.0], [1.7288274E12, 44.0], [1.72882962E12, 63.0], [1.72882536E12, 33.0], [1.72882452E12, 35.0], [1.72882638E12, 32.0], [1.7288286E12, 42.0], [1.72882656E12, 38.0], [1.7288298E12, 64.0], [1.72882332E12, 40.0], [1.72882758E12, 39.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72882584E12, 1045.1999999999998], [1.72882464E12, 861.7], [1.72882686E12, 1010.0], [1.72882908E12, 1709.0], [1.72882446E12, 873.8000000000001], [1.72882704E12, 940.5000000000001], [1.72883028E12, 1714.0], [1.72882806E12, 1424.0], [1.72882344E12, 870.0999999999999], [1.72882326E12, 1000.8000000000002], [1.72882824E12, 1385.8], [1.72882602E12, 1015.0], [1.72882926E12, 1645.8999999999999], [1.72882722E12, 1366.6], [1.72882428E12, 859.2000000000003], [1.72883046E12, 1782.3000000000004], [1.728825E12, 877.6], [1.72882944E12, 1747.0], [1.7288265E12, 985.9000000000002], [1.72882872E12, 1328.8000000000002], [1.72882974E12, 1721.0], [1.7288277E12, 1397.5], [1.7288238E12, 900.8], [1.72882548E12, 1066.9999999999998], [1.72882992E12, 1735.700000000001], [1.7288289E12, 1380.0], [1.72882482E12, 939.1000000000004], [1.72882668E12, 1031.0], [1.72882362E12, 897.0], [1.72882566E12, 995.0], [1.72882788E12, 1453.0], [1.7288301E12, 1753.0], [1.72882374E12, 878.0], [1.72882716E12, 1387.6000000000004], [1.72882938E12, 1754.7999999999997], [1.72882512E12, 856.3], [1.72882476E12, 879.8], [1.72882614E12, 1030.0], [1.72882836E12, 1353.3999999999996], [1.72883058E12, 1507.0], [1.72882632E12, 1010.1999999999999], [1.72882956E12, 1724.4], [1.72882356E12, 879.0], [1.72882734E12, 1362.0], [1.7288253E12, 1005.0], [1.72882752E12, 1394.9], [1.72882458E12, 866.8000000000002], [1.72882854E12, 1403.7], [1.7288268E12, 1006.6000000000001], [1.72883004E12, 1829.0], [1.72882782E12, 1356.0], [1.72882578E12, 992.4], [1.728828E12, 1320.8], [1.7288241E12, 890.0], [1.72882902E12, 1502.0], [1.72882698E12, 1052.8000000000006], [1.72883022E12, 1703.0000000000002], [1.7288292E12, 1722.5], [1.72882494E12, 869.0], [1.72882818E12, 1369.1000000000008], [1.7288304E12, 1686.2000000000003], [1.72882596E12, 982.9], [1.72882392E12, 911.2], [1.72882746E12, 1422.1], [1.72882404E12, 926.8000000000004], [1.72882524E12, 994.2000000000002], [1.72882968E12, 1786.5000000000005], [1.72882866E12, 1388.8], [1.72882644E12, 965.2000000000003], [1.72882386E12, 886.0], [1.72882542E12, 1022.4000000000002], [1.72882764E12, 1348.8000000000002], [1.72882986E12, 1682.5000000000007], [1.7288256E12, 978.5999999999999], [1.72882488E12, 892.1000000000001], [1.72882662E12, 1040.4], [1.72882884E12, 1369.8000000000002], [1.72882338E12, 879.0], [1.72883034E12, 1736.5], [1.7288259E12, 1022.5999999999999], [1.72882812E12, 1326.0], [1.72882608E12, 1039.2000000000003], [1.72882932E12, 1728.0], [1.7288271E12, 1301.8000000000006], [1.7288244E12, 886.6999999999999], [1.72882422E12, 847.1999999999999], [1.72883052E12, 1727.6000000000015], [1.72882506E12, 855.2000000000003], [1.72882728E12, 1405.0], [1.7288283E12, 1344.0000000000007], [1.72882626E12, 1012.8000000000004], [1.72882848E12, 1322.8000000000002], [1.7288295E12, 1678.7], [1.72882554E12, 1020.5], [1.72882776E12, 1375.6], [1.72882434E12, 867.1], [1.72882878E12, 1341.7000000000003], [1.72882674E12, 1058.0], [1.72882896E12, 1119.0], [1.72882998E12, 1719.0], [1.72882794E12, 1329.4], [1.72882572E12, 1034.0], [1.72883016E12, 1726.4], [1.72882416E12, 913.6], [1.72882398E12, 913.8], [1.72882914E12, 1724.0], [1.72882692E12, 1006.5999999999999], [1.7288247E12, 860.1999999999999], [1.72882842E12, 1370.0], [1.7288262E12, 1046.2], [1.72883064E12, 1020.3000000000002], [1.72882368E12, 878.0000000000001], [1.7288235E12, 818.3999999999999], [1.72882518E12, 1071.0], [1.7288274E12, 1398.6], [1.72882962E12, 1695.8000000000002], [1.72882536E12, 1042.0], [1.72882452E12, 918.0000000000007], [1.72882638E12, 1048.6], [1.7288286E12, 1394.8], [1.72882656E12, 1028.5999999999997], [1.7288298E12, 1728.0], [1.72882332E12, 844.1999999999998], [1.72882758E12, 1360.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72882584E12, 1522.2800000000007], [1.72882464E12, 1283.83], [1.72882686E12, 1586.5], [1.72882908E12, 2565.2400000000007], [1.72882446E12, 1226.2800000000007], [1.72882704E12, 1398.1], [1.72883028E12, 2441.399999999998], [1.72882806E12, 2081.6799999999957], [1.72882344E12, 1286.1399999999999], [1.72882326E12, 1553.0], [1.72882824E12, 2004.560000000003], [1.72882602E12, 1532.0000000000002], [1.72882926E12, 2424.6800000000003], [1.72882722E12, 1975.7299999999975], [1.72882428E12, 1396.9599999999991], [1.72883046E12, 2569.429999999994], [1.728825E12, 1289.9199999999983], [1.72882944E12, 2571.4999999999995], [1.7288265E12, 1501.08], [1.72882872E12, 1913.3599999999997], [1.72882974E12, 2567.0000000000036], [1.7288277E12, 2005.42], [1.7288238E12, 1343.88], [1.72882548E12, 1615.1599999999999], [1.72882992E12, 2497.02], [1.7288289E12, 1912.8999999999974], [1.72882482E12, 1320.6800000000003], [1.72882668E12, 1657.0], [1.72882362E12, 1256.9999999999995], [1.72882566E12, 1389.7600000000002], [1.72882788E12, 2102.5199999999995], [1.7288301E12, 2467.2000000000003], [1.72882374E12, 1331.5], [1.72882716E12, 2039.500000000009], [1.72882938E12, 2587.7599999999998], [1.72882512E12, 1210.83], [1.72882476E12, 1243.3199999999995], [1.72882614E12, 1471.12], [1.72882836E12, 2052.0299999999997], [1.72883058E12, 2287.6499999999974], [1.72882632E12, 1529.0599999999972], [1.72882956E12, 2665.3600000000024], [1.72882356E12, 1201.68], [1.72882734E12, 2107.4399999999987], [1.7288253E12, 1583.3999999999994], [1.72882752E12, 2069.16], [1.72882458E12, 1282.0], [1.72882854E12, 2071.7300000000005], [1.7288268E12, 1501.320000000001], [1.72883004E12, 2548.0], [1.72882782E12, 2007.2599999999968], [1.72882578E12, 1480.1599999999999], [1.728828E12, 1969.079999999999], [1.7288241E12, 1239.5499999999995], [1.72882902E12, 2247.25], [1.72882698E12, 1441.4999999999986], [1.72883022E12, 2526.6000000000004], [1.7288292E12, 2621.7000000000003], [1.72882494E12, 1268.0999999999974], [1.72882818E12, 2015.7299999999987], [1.7288304E12, 2526.5599999999995], [1.72882596E12, 1413.3600000000024], [1.72882392E12, 1355.0000000000016], [1.72882746E12, 1866.509999999996], [1.72882404E12, 1266.5799999999992], [1.72882524E12, 1582.6799999999985], [1.72882968E12, 2497.5600000000004], [1.72882866E12, 2021.1599999999999], [1.72882644E12, 1549.0099999999995], [1.72882386E12, 1250.7399999999993], [1.72882542E12, 1511.8599999999976], [1.72882764E12, 1950.8699999999965], [1.72882986E12, 2344.299999999997], [1.7288256E12, 1490.9000000000008], [1.72882488E12, 1286.2800000000002], [1.72882662E12, 1465.1599999999994], [1.72882884E12, 2019.159999999998], [1.72882338E12, 1226.0], [1.72883034E12, 2420.2500000000036], [1.7288259E12, 1484.2000000000003], [1.72882812E12, 2090.5999999999967], [1.72882608E12, 1554.3199999999993], [1.72882932E12, 2481.300000000002], [1.7288271E12, 1960.4200000000005], [1.7288244E12, 1296.6800000000003], [1.72882422E12, 1322.2399999999998], [1.72883052E12, 2522.24], [1.72882506E12, 1225.7199999999998], [1.72882728E12, 1961.0700000000002], [1.7288283E12, 2038.9600000000028], [1.72882626E12, 1464.039999999999], [1.72882848E12, 2031.9600000000028], [1.7288295E12, 2504.4900000000007], [1.72882554E12, 1494.5], [1.72882776E12, 1943.9399999999926], [1.72882434E12, 1299.4400000000023], [1.72882878E12, 1983.2099999999984], [1.72882674E12, 1595.05], [1.72882896E12, 1680.799999999998], [1.72882998E12, 2578.52], [1.72882794E12, 2021.54], [1.72882572E12, 1495.0], [1.72883016E12, 2707.9600000000005], [1.72882416E12, 1425.2999999999995], [1.72882398E12, 1221.3600000000004], [1.72882914E12, 2450.06], [1.72882692E12, 1439.5999999999995], [1.7288247E12, 1247.9200000000012], [1.72882842E12, 2071.4399999999987], [1.7288262E12, 1522.02], [1.72883064E12, 1313.0], [1.72882368E12, 1253.2000000000007], [1.7288235E12, 1190.56], [1.72882518E12, 1545.67], [1.7288274E12, 2124.459999999999], [1.72882962E12, 2485.3599999999997], [1.72882536E12, 1475.78], [1.72882452E12, 1300.6400000000003], [1.72882638E12, 1473.04], [1.7288286E12, 2058.9400000000005], [1.72882656E12, 1467.7399999999998], [1.7288298E12, 2535.199999999999], [1.72882332E12, 1271.4399999999994], [1.72882758E12, 2159.5000000000027]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72882584E12, 399.0], [1.72882464E12, 326.0], [1.72882686E12, 389.5], [1.72882908E12, 629.0], [1.72882446E12, 370.0], [1.72882704E12, 367.5], [1.72883028E12, 709.5], [1.72882806E12, 608.0], [1.72882344E12, 392.5], [1.72882326E12, 378.0], [1.72882824E12, 525.0], [1.72882602E12, 431.0], [1.72882926E12, 587.0], [1.72882722E12, 537.5], [1.72882428E12, 363.5], [1.72883046E12, 786.0], [1.728825E12, 337.0], [1.72882944E12, 701.5], [1.7288265E12, 387.0], [1.72882872E12, 449.0], [1.72882974E12, 661.0], [1.7288277E12, 538.0], [1.7288238E12, 361.0], [1.72882548E12, 432.0], [1.72882992E12, 807.5], [1.7288289E12, 594.0], [1.72882482E12, 401.5], [1.72882668E12, 409.0], [1.72882362E12, 404.0], [1.72882566E12, 366.0], [1.72882788E12, 602.0], [1.7288301E12, 749.0], [1.72882374E12, 422.0], [1.72882716E12, 508.0], [1.72882938E12, 742.0], [1.72882512E12, 369.0], [1.72882476E12, 369.0], [1.72882614E12, 469.5], [1.72882836E12, 454.0], [1.72883058E12, 508.0], [1.72882632E12, 418.0], [1.72882956E12, 700.0], [1.72882356E12, 365.0], [1.72882734E12, 580.0], [1.7288253E12, 388.0], [1.72882752E12, 563.5], [1.72882458E12, 370.0], [1.72882854E12, 595.5], [1.7288268E12, 432.0], [1.72883004E12, 798.0], [1.72882782E12, 529.0], [1.72882578E12, 456.0], [1.728828E12, 428.0], [1.7288241E12, 366.0], [1.72882902E12, 499.5], [1.72882698E12, 444.0], [1.72883022E12, 655.0], [1.7288292E12, 690.0], [1.72882494E12, 405.0], [1.72882818E12, 494.5], [1.7288304E12, 638.0], [1.72882596E12, 365.0], [1.72882392E12, 386.0], [1.72882746E12, 641.0], [1.72882404E12, 380.0], [1.72882524E12, 383.0], [1.72882968E12, 748.5], [1.72882866E12, 520.0], [1.72882644E12, 375.5], [1.72882386E12, 344.0], [1.72882542E12, 425.0], [1.72882764E12, 479.5], [1.72882986E12, 673.0], [1.7288256E12, 414.0], [1.72882488E12, 353.5], [1.72882662E12, 436.0], [1.72882884E12, 568.0], [1.72882338E12, 326.0], [1.72883034E12, 683.0], [1.7288259E12, 422.0], [1.72882812E12, 510.0], [1.72882608E12, 441.0], [1.72882932E12, 742.5], [1.7288271E12, 417.0], [1.7288244E12, 337.0], [1.72882422E12, 383.0], [1.72883052E12, 759.0], [1.72882506E12, 279.0], [1.72882728E12, 576.5], [1.7288283E12, 570.0], [1.72882626E12, 380.0], [1.72882848E12, 478.0], [1.7288295E12, 670.0], [1.72882554E12, 406.0], [1.72882776E12, 519.0], [1.72882434E12, 317.5], [1.72882878E12, 537.0], [1.72882674E12, 431.5], [1.72882896E12, 414.0], [1.72882998E12, 681.0], [1.72882794E12, 583.5], [1.72882572E12, 471.0], [1.72883016E12, 733.0], [1.72882416E12, 373.0], [1.72882398E12, 448.0], [1.72882914E12, 664.0], [1.72882692E12, 457.0], [1.7288247E12, 323.0], [1.72882842E12, 553.0], [1.7288262E12, 427.0], [1.72883064E12, 412.0], [1.72882368E12, 338.0], [1.7288235E12, 292.0], [1.72882518E12, 462.5], [1.7288274E12, 568.0], [1.72882962E12, 747.0], [1.72882536E12, 389.0], [1.72882452E12, 346.0], [1.72882638E12, 396.0], [1.7288286E12, 568.0], [1.72882656E12, 433.5], [1.7288298E12, 639.0], [1.72882332E12, 262.0], [1.72882758E12, 576.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72882584E12, 1232.3999999999999], [1.72882464E12, 1028.7], [1.72882686E12, 1186.0], [1.72882908E12, 1980.3999999999992], [1.72882446E12, 1005.5999999999999], [1.72882704E12, 1049.6499999999999], [1.72883028E12, 1973.0], [1.72882806E12, 1678.7999999999984], [1.72882344E12, 998.7499999999998], [1.72882326E12, 1327.1], [1.72882824E12, 1597.2], [1.72882602E12, 1200.5], [1.72882926E12, 1998.4999999999986], [1.72882722E12, 1565.9499999999996], [1.72882428E12, 1016.0], [1.72883046E12, 2069.05], [1.728825E12, 1024.4999999999993], [1.72882944E12, 2037.5], [1.7288265E12, 1198.6499999999999], [1.72882872E12, 1541.6000000000004], [1.72882974E12, 2001.0], [1.7288277E12, 1643.3499999999992], [1.7288238E12, 1020.3999999999985], [1.72882548E12, 1237.7999999999997], [1.72882992E12, 2040.3999999999996], [1.7288289E12, 1623.5], [1.72882482E12, 1043.2499999999995], [1.72882668E12, 1220.0], [1.72882362E12, 1017.0], [1.72882566E12, 1114.0], [1.72882788E12, 1665.7999999999997], [1.7288301E12, 1961.0], [1.72882374E12, 1050.0], [1.72882716E12, 1645.2999999999997], [1.72882938E12, 2037.0], [1.72882512E12, 982.5999999999999], [1.72882476E12, 1034.7999999999997], [1.72882614E12, 1205.3], [1.72882836E12, 1574.4999999999986], [1.72883058E12, 1783.5], [1.72882632E12, 1210.3999999999999], [1.72882956E12, 1987.6000000000004], [1.72882356E12, 997.8000000000002], [1.72882734E12, 1614.7999999999997], [1.7288253E12, 1180.0], [1.72882752E12, 1610.5000000000005], [1.72882458E12, 1005.1], [1.72882854E12, 1594.349999999999], [1.7288268E12, 1181.7999999999997], [1.72883004E12, 2022.0], [1.72882782E12, 1582.599999999998], [1.72882578E12, 1155.7999999999997], [1.728828E12, 1536.199999999999], [1.7288241E12, 1002.25], [1.72882902E12, 1820.0], [1.72882698E12, 1189.9], [1.72883022E12, 2005.7999999999988], [1.7288292E12, 1958.0], [1.72882494E12, 1031.5], [1.72882818E12, 1567.1500000000003], [1.7288304E12, 2003.5000000000002], [1.72882596E12, 1160.0], [1.72882392E12, 1027.3999999999999], [1.72882746E12, 1602.8499999999997], [1.72882404E12, 1032.6], [1.72882524E12, 1155.7999999999997], [1.72882968E12, 2027.95], [1.72882866E12, 1634.599999999998], [1.72882644E12, 1131.65], [1.72882386E12, 1023.1], [1.72882542E12, 1184.6999999999994], [1.72882764E12, 1528.2500000000002], [1.72882986E12, 1922.0], [1.7288256E12, 1155.799999999999], [1.72882488E12, 1057.0500000000002], [1.72882662E12, 1219.9], [1.72882884E12, 1622.2999999999997], [1.72882338E12, 1039.0], [1.72883034E12, 1973.25], [1.7288259E12, 1192.7999999999997], [1.72882812E12, 1522.5], [1.72882608E12, 1212.8], [1.72882932E12, 1952.25], [1.7288271E12, 1585.9999999999998], [1.7288244E12, 987.8499999999998], [1.72882422E12, 988.0], [1.72883052E12, 2039.0], [1.72882506E12, 1010.3999999999996], [1.72882728E12, 1598.7000000000003], [1.7288283E12, 1617.1999999999998], [1.72882626E12, 1143.3], [1.72882848E12, 1520.7999999999997], [1.7288295E12, 2003.699999999998], [1.72882554E12, 1196.75], [1.72882776E12, 1576.7999999999997], [1.72882434E12, 993.8999999999992], [1.72882878E12, 1562.4000000000005], [1.72882674E12, 1210.5], [1.72882896E12, 1283.0], [1.72882998E12, 1953.5999999999997], [1.72882794E12, 1583.6499999999992], [1.72882572E12, 1218.5], [1.72883016E12, 1963.6000000000004], [1.72882416E12, 1009.7999999999997], [1.72882398E12, 1036.3999999999999], [1.72882914E12, 2000.0], [1.72882692E12, 1139.3999999999999], [1.7288247E12, 985.9999999999993], [1.72882842E12, 1574.0], [1.7288262E12, 1219.1], [1.72883064E12, 1125.85], [1.72882368E12, 997.3999999999999], [1.7288235E12, 961.9999999999997], [1.72882518E12, 1223.0], [1.7288274E12, 1610.8999999999999], [1.72882962E12, 1917.9999999999995], [1.72882536E12, 1177.8], [1.72882452E12, 1047.9999999999995], [1.72882638E12, 1224.1999999999998], [1.7288286E12, 1600.4], [1.72882656E12, 1191.6499999999996], [1.7288298E12, 2004.0], [1.72882332E12, 1000.3], [1.72882758E12, 1574.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72883064E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 228.0, "minX": 1.0, "maxY": 842.0, "series": [{"data": [[2.0, 551.0], [32.0, 232.5], [33.0, 239.0], [34.0, 231.5], [35.0, 228.0], [36.0, 339.0], [3.0, 531.0], [4.0, 507.0], [5.0, 514.0], [6.0, 532.0], [7.0, 511.0], [8.0, 462.0], [9.0, 455.5], [10.0, 447.5], [11.0, 447.0], [12.0, 483.5], [13.0, 486.0], [14.0, 525.5], [15.0, 565.0], [1.0, 842.0], [16.0, 567.5], [17.0, 561.0], [18.0, 516.0], [19.0, 490.0], [20.0, 481.5], [21.0, 430.5], [22.0, 421.0], [23.0, 366.0], [24.0, 339.0], [25.0, 298.0], [26.0, 338.0], [27.0, 250.5], [28.0, 266.0], [29.0, 237.0], [30.0, 242.5], [31.0, 247.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 36.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 135.5, "minX": 1.0, "maxY": 534.0, "series": [{"data": [[2.0, 384.0], [32.0, 149.0], [33.0, 139.0], [34.0, 135.5], [35.0, 168.5], [36.0, 178.0], [3.0, 349.0], [4.0, 346.5], [5.0, 355.0], [6.0, 361.5], [7.0, 350.0], [8.0, 326.0], [9.0, 319.0], [10.0, 316.0], [11.0, 318.0], [12.0, 339.0], [13.0, 344.0], [14.0, 372.0], [15.0, 401.5], [1.0, 534.0], [16.0, 399.0], [17.0, 401.0], [18.0, 374.0], [19.0, 355.0], [20.0, 348.0], [21.0, 311.0], [22.0, 302.5], [23.0, 259.0], [24.0, 224.0], [25.0, 199.0], [26.0, 218.0], [27.0, 154.0], [28.0, 164.0], [29.0, 145.0], [30.0, 145.0], [31.0, 150.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 36.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.72882326E12, "maxY": 21.266666666666666, "series": [{"data": [[1.72882584E12, 16.916666666666668], [1.72882464E12, 10.2], [1.72882686E12, 17.066666666666666], [1.72882908E12, 20.45], [1.72882446E12, 10.016666666666667], [1.72882704E12, 10.683333333333334], [1.72883028E12, 20.233333333333334], [1.72882806E12, 18.116666666666667], [1.72882344E12, 4.866666666666666], [1.72882326E12, 1.6666666666666667], [1.72882824E12, 18.916666666666668], [1.72882602E12, 16.483333333333334], [1.72882926E12, 21.266666666666666], [1.72882722E12, 19.766666666666666], [1.72882428E12, 9.933333333333334], [1.72883046E12, 18.966666666666665], [1.728825E12, 9.883333333333333], [1.72882944E12, 19.9], [1.7288265E12, 17.466666666666665], [1.72882872E12, 20.25], [1.72882974E12, 20.566666666666666], [1.7288277E12, 18.8], [1.7288238E12, 9.583333333333334], [1.72882548E12, 16.583333333333332], [1.72882992E12, 19.133333333333333], [1.7288289E12, 18.116666666666667], [1.72882482E12, 9.166666666666666], [1.72882668E12, 16.65], [1.72882362E12, 9.483333333333333], [1.72882566E12, 17.583333333333332], [1.72882788E12, 17.883333333333333], [1.7288301E12, 19.65], [1.72882374E12, 9.15], [1.72882716E12, 19.283333333333335], [1.72882938E12, 19.35], [1.72882512E12, 8.55], [1.72882476E12, 9.75], [1.72882614E12, 16.433333333333334], [1.72882836E12, 19.933333333333334], [1.72883058E12, 20.116666666666667], [1.72882632E12, 16.75], [1.72882956E12, 20.083333333333332], [1.72882356E12, 9.783333333333333], [1.72882734E12, 18.516666666666666], [1.7288253E12, 16.983333333333334], [1.72882752E12, 18.666666666666668], [1.72882458E12, 9.95], [1.72882854E12, 18.366666666666667], [1.7288268E12, 16.516666666666666], [1.72883004E12, 18.65], [1.72882782E12, 19.35], [1.72882578E12, 16.583333333333332], [1.728828E12, 20.35], [1.7288241E12, 9.9], [1.72882902E12, 8.116666666666667], [1.72882698E12, 16.35], [1.72883022E12, 20.45], [1.7288292E12, 20.066666666666666], [1.72882494E12, 9.483333333333333], [1.72882818E12, 19.5], [1.7288304E12, 20.75], [1.72882596E12, 17.666666666666668], [1.72882392E12, 9.416666666666666], [1.72882746E12, 18.133333333333333], [1.72882404E12, 9.55], [1.72882524E12, 17.383333333333333], [1.72882968E12, 19.333333333333332], [1.72882866E12, 19.016666666666666], [1.72882644E12, 17.433333333333334], [1.72882386E12, 9.95], [1.72882542E12, 17.016666666666666], [1.72882764E12, 19.833333333333332], [1.72882986E12, 20.633333333333333], [1.7288256E12, 17.083333333333332], [1.72882488E12, 9.866666666666667], [1.72882662E12, 16.35], [1.72882884E12, 18.95], [1.72882338E12, 4.983333333333333], [1.72883034E12, 20.066666666666666], [1.7288259E12, 16.916666666666668], [1.72882812E12, 19.816666666666666], [1.72882608E12, 16.383333333333333], [1.72882932E12, 19.733333333333334], [1.7288271E12, 11.866666666666667], [1.7288244E12, 10.0], [1.72882422E12, 9.75], [1.72883052E12, 19.55], [1.72882506E12, 10.516666666666667], [1.72882728E12, 18.833333333333332], [1.7288283E12, 19.216666666666665], [1.72882626E12, 17.266666666666666], [1.72882848E12, 20.116666666666667], [1.7288295E12, 20.033333333333335], [1.72882554E12, 17.066666666666666], [1.72882776E12, 19.35], [1.72882434E12, 10.466666666666667], [1.72882878E12, 19.0], [1.72882674E12, 16.566666666666666], [1.72882896E12, 15.033333333333333], [1.72882998E12, 20.383333333333333], [1.72882794E12, 18.7], [1.72882572E12, 16.15], [1.72883016E12, 19.583333333333332], [1.72882416E12, 9.55], [1.72882398E12, 8.783333333333333], [1.72882914E12, 19.883333333333333], [1.72882692E12, 16.583333333333332], [1.7288247E12, 10.25], [1.72882842E12, 19.016666666666666], [1.7288262E12, 16.616666666666667], [1.72883064E12, 8.516666666666667], [1.72882368E12, 10.05], [1.7288235E12, 6.983333333333333], [1.72882518E12, 15.65], [1.7288274E12, 18.55], [1.72882962E12, 19.783333333333335], [1.72882536E12, 17.016666666666666], [1.72882452E12, 9.85], [1.72882638E12, 17.05], [1.7288286E12, 18.75], [1.72882656E12, 17.0], [1.7288298E12, 20.316666666666666], [1.72882332E12, 5.283333333333333], [1.72882758E12, 18.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72883064E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.6333333333333333, "minX": 1.72882326E12, "maxY": 21.266666666666666, "series": [{"data": [[1.72882584E12, 16.916666666666668], [1.72882464E12, 10.2], [1.72882686E12, 17.066666666666666], [1.72882908E12, 20.45], [1.72882446E12, 10.016666666666667], [1.72882704E12, 10.8], [1.72883028E12, 20.233333333333334], [1.72882806E12, 18.116666666666667], [1.72882344E12, 4.866666666666666], [1.72882326E12, 1.6333333333333333], [1.72882824E12, 18.916666666666668], [1.72882602E12, 16.483333333333334], [1.72882926E12, 21.266666666666666], [1.72882722E12, 19.766666666666666], [1.72882428E12, 9.933333333333334], [1.72883046E12, 18.966666666666665], [1.728825E12, 9.883333333333333], [1.72882944E12, 19.9], [1.7288265E12, 17.466666666666665], [1.72882872E12, 20.25], [1.72882974E12, 20.566666666666666], [1.7288277E12, 18.8], [1.7288238E12, 9.583333333333334], [1.72882548E12, 16.583333333333332], [1.72882992E12, 19.133333333333333], [1.7288289E12, 18.15], [1.72882482E12, 9.166666666666666], [1.72882668E12, 16.65], [1.72882362E12, 9.483333333333333], [1.72882566E12, 17.583333333333332], [1.72882788E12, 17.883333333333333], [1.7288301E12, 19.65], [1.72882374E12, 9.15], [1.72882716E12, 19.283333333333335], [1.72882938E12, 19.35], [1.72882512E12, 8.6], [1.72882476E12, 9.75], [1.72882614E12, 16.433333333333334], [1.72882836E12, 19.933333333333334], [1.72883058E12, 20.233333333333334], [1.72882632E12, 16.75], [1.72882956E12, 20.083333333333332], [1.72882356E12, 9.783333333333333], [1.72882734E12, 18.516666666666666], [1.7288253E12, 16.983333333333334], [1.72882752E12, 18.666666666666668], [1.72882458E12, 9.95], [1.72882854E12, 18.366666666666667], [1.7288268E12, 16.516666666666666], [1.72883004E12, 18.65], [1.72882782E12, 19.35], [1.72882578E12, 16.583333333333332], [1.728828E12, 20.35], [1.7288241E12, 9.9], [1.72882902E12, 7.9], [1.72882698E12, 16.35], [1.72883022E12, 20.45], [1.7288292E12, 20.066666666666666], [1.72882494E12, 9.483333333333333], [1.72882818E12, 19.5], [1.7288304E12, 20.75], [1.72882596E12, 17.666666666666668], [1.72882392E12, 9.416666666666666], [1.72882746E12, 18.133333333333333], [1.72882404E12, 9.55], [1.72882524E12, 17.383333333333333], [1.72882968E12, 19.333333333333332], [1.72882866E12, 19.016666666666666], [1.72882644E12, 17.433333333333334], [1.72882386E12, 9.95], [1.72882542E12, 17.016666666666666], [1.72882764E12, 19.833333333333332], [1.72882986E12, 20.633333333333333], [1.7288256E12, 17.083333333333332], [1.72882488E12, 9.866666666666667], [1.72882662E12, 16.35], [1.72882884E12, 18.95], [1.72882338E12, 4.983333333333333], [1.72883034E12, 20.066666666666666], [1.7288259E12, 16.916666666666668], [1.72882812E12, 19.816666666666666], [1.72882608E12, 16.383333333333333], [1.72882932E12, 19.733333333333334], [1.7288271E12, 11.683333333333334], [1.7288244E12, 10.0], [1.72882422E12, 9.75], [1.72883052E12, 19.55], [1.72882506E12, 10.516666666666667], [1.72882728E12, 18.833333333333332], [1.7288283E12, 19.216666666666665], [1.72882626E12, 17.266666666666666], [1.72882848E12, 20.116666666666667], [1.7288295E12, 20.033333333333335], [1.72882554E12, 17.066666666666666], [1.72882776E12, 19.35], [1.72882434E12, 10.466666666666667], [1.72882878E12, 19.0], [1.72882674E12, 16.566666666666666], [1.72882896E12, 15.15], [1.72882998E12, 20.383333333333333], [1.72882794E12, 18.7], [1.72882572E12, 16.15], [1.72883016E12, 19.583333333333332], [1.72882416E12, 9.55], [1.72882398E12, 8.783333333333333], [1.72882914E12, 19.883333333333333], [1.72882692E12, 16.583333333333332], [1.7288247E12, 10.25], [1.72882842E12, 19.016666666666666], [1.7288262E12, 16.616666666666667], [1.72883064E12, 8.666666666666666], [1.72882368E12, 10.05], [1.7288235E12, 6.95], [1.72882518E12, 15.533333333333333], [1.7288274E12, 18.55], [1.72882962E12, 19.783333333333335], [1.72882536E12, 17.016666666666666], [1.72882452E12, 9.85], [1.72882638E12, 17.05], [1.7288286E12, 18.75], [1.72882656E12, 17.0], [1.7288298E12, 20.316666666666666], [1.72882332E12, 5.283333333333333], [1.72882758E12, 18.9]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72883064E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.6333333333333333, "minX": 1.72882326E12, "maxY": 21.266666666666666, "series": [{"data": [[1.72882584E12, 16.916666666666668], [1.72882464E12, 10.2], [1.72882686E12, 17.066666666666666], [1.72882908E12, 20.45], [1.72882446E12, 10.016666666666667], [1.72882704E12, 10.8], [1.72883028E12, 20.233333333333334], [1.72882806E12, 18.116666666666667], [1.72882344E12, 4.866666666666666], [1.72882326E12, 1.6333333333333333], [1.72882824E12, 18.916666666666668], [1.72882602E12, 16.483333333333334], [1.72882926E12, 21.266666666666666], [1.72882722E12, 19.766666666666666], [1.72882428E12, 9.933333333333334], [1.72883046E12, 18.966666666666665], [1.728825E12, 9.883333333333333], [1.72882944E12, 19.9], [1.7288265E12, 17.466666666666665], [1.72882872E12, 20.25], [1.72882974E12, 20.566666666666666], [1.7288277E12, 18.8], [1.7288238E12, 9.583333333333334], [1.72882548E12, 16.583333333333332], [1.72882992E12, 19.133333333333333], [1.7288289E12, 18.15], [1.72882482E12, 9.166666666666666], [1.72882668E12, 16.65], [1.72882362E12, 9.483333333333333], [1.72882566E12, 17.583333333333332], [1.72882788E12, 17.883333333333333], [1.7288301E12, 19.65], [1.72882374E12, 9.15], [1.72882716E12, 19.283333333333335], [1.72882938E12, 19.35], [1.72882512E12, 8.6], [1.72882476E12, 9.75], [1.72882614E12, 16.433333333333334], [1.72882836E12, 19.933333333333334], [1.72883058E12, 20.233333333333334], [1.72882632E12, 16.75], [1.72882956E12, 20.083333333333332], [1.72882356E12, 9.783333333333333], [1.72882734E12, 18.516666666666666], [1.7288253E12, 16.983333333333334], [1.72882752E12, 18.666666666666668], [1.72882458E12, 9.95], [1.72882854E12, 18.366666666666667], [1.7288268E12, 16.516666666666666], [1.72883004E12, 18.65], [1.72882782E12, 19.35], [1.72882578E12, 16.583333333333332], [1.728828E12, 20.35], [1.7288241E12, 9.9], [1.72882902E12, 7.9], [1.72882698E12, 16.35], [1.72883022E12, 20.45], [1.7288292E12, 20.066666666666666], [1.72882494E12, 9.483333333333333], [1.72882818E12, 19.5], [1.7288304E12, 20.75], [1.72882596E12, 17.666666666666668], [1.72882392E12, 9.416666666666666], [1.72882746E12, 18.133333333333333], [1.72882404E12, 9.55], [1.72882524E12, 17.383333333333333], [1.72882968E12, 19.333333333333332], [1.72882866E12, 19.016666666666666], [1.72882644E12, 17.433333333333334], [1.72882386E12, 9.95], [1.72882542E12, 17.016666666666666], [1.72882764E12, 19.833333333333332], [1.72882986E12, 20.633333333333333], [1.7288256E12, 17.083333333333332], [1.72882488E12, 9.866666666666667], [1.72882662E12, 16.35], [1.72882884E12, 18.95], [1.72882338E12, 4.983333333333333], [1.72883034E12, 20.066666666666666], [1.7288259E12, 16.916666666666668], [1.72882812E12, 19.816666666666666], [1.72882608E12, 16.383333333333333], [1.72882932E12, 19.733333333333334], [1.7288271E12, 11.683333333333334], [1.7288244E12, 10.0], [1.72882422E12, 9.75], [1.72883052E12, 19.55], [1.72882506E12, 10.516666666666667], [1.72882728E12, 18.833333333333332], [1.7288283E12, 19.216666666666665], [1.72882626E12, 17.266666666666666], [1.72882848E12, 20.116666666666667], [1.7288295E12, 20.033333333333335], [1.72882554E12, 17.066666666666666], [1.72882776E12, 19.35], [1.72882434E12, 10.466666666666667], [1.72882878E12, 19.0], [1.72882674E12, 16.566666666666666], [1.72882896E12, 15.15], [1.72882998E12, 20.383333333333333], [1.72882794E12, 18.7], [1.72882572E12, 16.15], [1.72883016E12, 19.583333333333332], [1.72882416E12, 9.55], [1.72882398E12, 8.783333333333333], [1.72882914E12, 19.883333333333333], [1.72882692E12, 16.583333333333332], [1.7288247E12, 10.25], [1.72882842E12, 19.016666666666666], [1.7288262E12, 16.616666666666667], [1.72883064E12, 8.666666666666666], [1.72882368E12, 10.05], [1.7288235E12, 6.95], [1.72882518E12, 15.533333333333333], [1.7288274E12, 18.55], [1.72882962E12, 19.783333333333335], [1.72882536E12, 17.016666666666666], [1.72882452E12, 9.85], [1.72882638E12, 17.05], [1.7288286E12, 18.75], [1.72882656E12, 17.0], [1.7288298E12, 20.316666666666666], [1.72882332E12, 5.283333333333333], [1.72882758E12, 18.9]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72883064E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.6333333333333333, "minX": 1.72882326E12, "maxY": 21.266666666666666, "series": [{"data": [[1.72882584E12, 16.916666666666668], [1.72882464E12, 10.2], [1.72882686E12, 17.066666666666666], [1.72882908E12, 20.45], [1.72882446E12, 10.016666666666667], [1.72882704E12, 10.8], [1.72883028E12, 20.233333333333334], [1.72882806E12, 18.116666666666667], [1.72882344E12, 4.866666666666666], [1.72882326E12, 1.6333333333333333], [1.72882824E12, 18.916666666666668], [1.72882602E12, 16.483333333333334], [1.72882926E12, 21.266666666666666], [1.72882722E12, 19.766666666666666], [1.72882428E12, 9.933333333333334], [1.72883046E12, 18.966666666666665], [1.728825E12, 9.883333333333333], [1.72882944E12, 19.9], [1.7288265E12, 17.466666666666665], [1.72882872E12, 20.25], [1.72882974E12, 20.566666666666666], [1.7288277E12, 18.8], [1.7288238E12, 9.583333333333334], [1.72882548E12, 16.583333333333332], [1.72882992E12, 19.133333333333333], [1.7288289E12, 18.15], [1.72882482E12, 9.166666666666666], [1.72882668E12, 16.65], [1.72882362E12, 9.483333333333333], [1.72882566E12, 17.583333333333332], [1.72882788E12, 17.883333333333333], [1.7288301E12, 19.65], [1.72882374E12, 9.15], [1.72882716E12, 19.283333333333335], [1.72882938E12, 19.35], [1.72882512E12, 8.6], [1.72882476E12, 9.75], [1.72882614E12, 16.433333333333334], [1.72882836E12, 19.933333333333334], [1.72883058E12, 20.233333333333334], [1.72882632E12, 16.75], [1.72882956E12, 20.083333333333332], [1.72882356E12, 9.783333333333333], [1.72882734E12, 18.516666666666666], [1.7288253E12, 16.983333333333334], [1.72882752E12, 18.666666666666668], [1.72882458E12, 9.95], [1.72882854E12, 18.366666666666667], [1.7288268E12, 16.516666666666666], [1.72883004E12, 18.65], [1.72882782E12, 19.35], [1.72882578E12, 16.583333333333332], [1.728828E12, 20.35], [1.7288241E12, 9.9], [1.72882902E12, 7.9], [1.72882698E12, 16.35], [1.72883022E12, 20.45], [1.7288292E12, 20.066666666666666], [1.72882494E12, 9.483333333333333], [1.72882818E12, 19.5], [1.7288304E12, 20.75], [1.72882596E12, 17.666666666666668], [1.72882392E12, 9.416666666666666], [1.72882746E12, 18.133333333333333], [1.72882404E12, 9.55], [1.72882524E12, 17.383333333333333], [1.72882968E12, 19.333333333333332], [1.72882866E12, 19.016666666666666], [1.72882644E12, 17.433333333333334], [1.72882386E12, 9.95], [1.72882542E12, 17.016666666666666], [1.72882764E12, 19.833333333333332], [1.72882986E12, 20.633333333333333], [1.7288256E12, 17.083333333333332], [1.72882488E12, 9.866666666666667], [1.72882662E12, 16.35], [1.72882884E12, 18.95], [1.72882338E12, 4.983333333333333], [1.72883034E12, 20.066666666666666], [1.7288259E12, 16.916666666666668], [1.72882812E12, 19.816666666666666], [1.72882608E12, 16.383333333333333], [1.72882932E12, 19.733333333333334], [1.7288271E12, 11.683333333333334], [1.7288244E12, 10.0], [1.72882422E12, 9.75], [1.72883052E12, 19.55], [1.72882506E12, 10.516666666666667], [1.72882728E12, 18.833333333333332], [1.7288283E12, 19.216666666666665], [1.72882626E12, 17.266666666666666], [1.72882848E12, 20.116666666666667], [1.7288295E12, 20.033333333333335], [1.72882554E12, 17.066666666666666], [1.72882776E12, 19.35], [1.72882434E12, 10.466666666666667], [1.72882878E12, 19.0], [1.72882674E12, 16.566666666666666], [1.72882896E12, 15.15], [1.72882998E12, 20.383333333333333], [1.72882794E12, 18.7], [1.72882572E12, 16.15], [1.72883016E12, 19.583333333333332], [1.72882416E12, 9.55], [1.72882398E12, 8.783333333333333], [1.72882914E12, 19.883333333333333], [1.72882692E12, 16.583333333333332], [1.7288247E12, 10.25], [1.72882842E12, 19.016666666666666], [1.7288262E12, 16.616666666666667], [1.72883064E12, 8.666666666666666], [1.72882368E12, 10.05], [1.7288235E12, 6.95], [1.72882518E12, 15.533333333333333], [1.7288274E12, 18.55], [1.72882962E12, 19.783333333333335], [1.72882536E12, 17.016666666666666], [1.72882452E12, 9.85], [1.72882638E12, 17.05], [1.7288286E12, 18.75], [1.72882656E12, 17.0], [1.7288298E12, 20.316666666666666], [1.72882332E12, 5.283333333333333], [1.72882758E12, 18.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72883064E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

