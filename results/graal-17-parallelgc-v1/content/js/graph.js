/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 3636.0, "series": [{"data": [[0.0, 29.0], [0.1, 36.0], [0.2, 39.0], [0.3, 40.0], [0.4, 42.0], [0.5, 43.0], [0.6, 44.0], [0.7, 45.0], [0.8, 46.0], [0.9, 47.0], [1.0, 48.0], [1.1, 49.0], [1.2, 49.0], [1.3, 50.0], [1.4, 51.0], [1.5, 51.0], [1.6, 52.0], [1.7, 52.0], [1.8, 53.0], [1.9, 53.0], [2.0, 54.0], [2.1, 55.0], [2.2, 55.0], [2.3, 56.0], [2.4, 56.0], [2.5, 57.0], [2.6, 57.0], [2.7, 57.0], [2.8, 58.0], [2.9, 58.0], [3.0, 59.0], [3.1, 59.0], [3.2, 60.0], [3.3, 60.0], [3.4, 61.0], [3.5, 61.0], [3.6, 61.0], [3.7, 62.0], [3.8, 62.0], [3.9, 63.0], [4.0, 63.0], [4.1, 63.0], [4.2, 64.0], [4.3, 64.0], [4.4, 65.0], [4.5, 65.0], [4.6, 65.0], [4.7, 66.0], [4.8, 66.0], [4.9, 67.0], [5.0, 67.0], [5.1, 67.0], [5.2, 68.0], [5.3, 68.0], [5.4, 68.0], [5.5, 69.0], [5.6, 69.0], [5.7, 70.0], [5.8, 70.0], [5.9, 70.0], [6.0, 71.0], [6.1, 71.0], [6.2, 71.0], [6.3, 72.0], [6.4, 72.0], [6.5, 72.0], [6.6, 73.0], [6.7, 73.0], [6.8, 73.0], [6.9, 74.0], [7.0, 74.0], [7.1, 74.0], [7.2, 75.0], [7.3, 75.0], [7.4, 75.0], [7.5, 76.0], [7.6, 76.0], [7.7, 76.0], [7.8, 77.0], [7.9, 77.0], [8.0, 77.0], [8.1, 78.0], [8.2, 78.0], [8.3, 78.0], [8.4, 79.0], [8.5, 79.0], [8.6, 79.0], [8.7, 80.0], [8.8, 80.0], [8.9, 80.0], [9.0, 80.0], [9.1, 81.0], [9.2, 81.0], [9.3, 81.0], [9.4, 82.0], [9.5, 82.0], [9.6, 82.0], [9.7, 83.0], [9.8, 83.0], [9.9, 83.0], [10.0, 84.0], [10.1, 84.0], [10.2, 84.0], [10.3, 84.0], [10.4, 85.0], [10.5, 85.0], [10.6, 85.0], [10.7, 86.0], [10.8, 86.0], [10.9, 87.0], [11.0, 87.0], [11.1, 87.0], [11.2, 88.0], [11.3, 88.0], [11.4, 88.0], [11.5, 89.0], [11.6, 89.0], [11.7, 89.0], [11.8, 90.0], [11.9, 90.0], [12.0, 90.0], [12.1, 90.0], [12.2, 91.0], [12.3, 91.0], [12.4, 91.0], [12.5, 92.0], [12.6, 92.0], [12.7, 92.0], [12.8, 93.0], [12.9, 93.0], [13.0, 93.0], [13.1, 94.0], [13.2, 94.0], [13.3, 94.0], [13.4, 95.0], [13.5, 95.0], [13.6, 95.0], [13.7, 95.0], [13.8, 96.0], [13.9, 96.0], [14.0, 96.0], [14.1, 97.0], [14.2, 97.0], [14.3, 97.0], [14.4, 98.0], [14.5, 98.0], [14.6, 98.0], [14.7, 99.0], [14.8, 99.0], [14.9, 99.0], [15.0, 100.0], [15.1, 100.0], [15.2, 100.0], [15.3, 101.0], [15.4, 101.0], [15.5, 101.0], [15.6, 102.0], [15.7, 102.0], [15.8, 102.0], [15.9, 103.0], [16.0, 103.0], [16.1, 103.0], [16.2, 104.0], [16.3, 104.0], [16.4, 104.0], [16.5, 105.0], [16.6, 105.0], [16.7, 105.0], [16.8, 106.0], [16.9, 106.0], [17.0, 106.0], [17.1, 107.0], [17.2, 107.0], [17.3, 107.0], [17.4, 108.0], [17.5, 108.0], [17.6, 108.0], [17.7, 109.0], [17.8, 109.0], [17.9, 109.0], [18.0, 110.0], [18.1, 110.0], [18.2, 110.0], [18.3, 111.0], [18.4, 111.0], [18.5, 112.0], [18.6, 112.0], [18.7, 112.0], [18.8, 113.0], [18.9, 113.0], [19.0, 113.0], [19.1, 114.0], [19.2, 114.0], [19.3, 115.0], [19.4, 115.0], [19.5, 115.0], [19.6, 116.0], [19.7, 116.0], [19.8, 116.0], [19.9, 117.0], [20.0, 117.0], [20.1, 117.0], [20.2, 118.0], [20.3, 118.0], [20.4, 119.0], [20.5, 119.0], [20.6, 119.0], [20.7, 120.0], [20.8, 120.0], [20.9, 120.0], [21.0, 121.0], [21.1, 121.0], [21.2, 122.0], [21.3, 122.0], [21.4, 122.0], [21.5, 123.0], [21.6, 123.0], [21.7, 123.0], [21.8, 124.0], [21.9, 124.0], [22.0, 125.0], [22.1, 125.0], [22.2, 125.0], [22.3, 126.0], [22.4, 126.0], [22.5, 127.0], [22.6, 127.0], [22.7, 127.0], [22.8, 128.0], [22.9, 128.0], [23.0, 129.0], [23.1, 129.0], [23.2, 130.0], [23.3, 130.0], [23.4, 130.0], [23.5, 131.0], [23.6, 131.0], [23.7, 132.0], [23.8, 132.0], [23.9, 132.0], [24.0, 133.0], [24.1, 133.0], [24.2, 134.0], [24.3, 134.0], [24.4, 135.0], [24.5, 135.0], [24.6, 136.0], [24.7, 136.0], [24.8, 137.0], [24.9, 137.0], [25.0, 137.0], [25.1, 138.0], [25.2, 138.0], [25.3, 139.0], [25.4, 139.0], [25.5, 140.0], [25.6, 140.0], [25.7, 140.0], [25.8, 141.0], [25.9, 141.0], [26.0, 142.0], [26.1, 142.0], [26.2, 143.0], [26.3, 143.0], [26.4, 144.0], [26.5, 144.0], [26.6, 145.0], [26.7, 145.0], [26.8, 146.0], [26.9, 146.0], [27.0, 147.0], [27.1, 147.0], [27.2, 148.0], [27.3, 148.0], [27.4, 148.0], [27.5, 149.0], [27.6, 149.0], [27.7, 150.0], [27.8, 150.0], [27.9, 151.0], [28.0, 151.0], [28.1, 152.0], [28.2, 152.0], [28.3, 153.0], [28.4, 153.0], [28.5, 154.0], [28.6, 154.0], [28.7, 155.0], [28.8, 156.0], [28.9, 156.0], [29.0, 157.0], [29.1, 157.0], [29.2, 158.0], [29.3, 158.0], [29.4, 159.0], [29.5, 159.0], [29.6, 160.0], [29.7, 161.0], [29.8, 161.0], [29.9, 162.0], [30.0, 162.0], [30.1, 163.0], [30.2, 163.0], [30.3, 164.0], [30.4, 165.0], [30.5, 165.0], [30.6, 166.0], [30.7, 166.0], [30.8, 167.0], [30.9, 168.0], [31.0, 168.0], [31.1, 169.0], [31.2, 169.0], [31.3, 170.0], [31.4, 170.0], [31.5, 171.0], [31.6, 172.0], [31.7, 172.0], [31.8, 173.0], [31.9, 174.0], [32.0, 174.0], [32.1, 175.0], [32.2, 176.0], [32.3, 176.0], [32.4, 177.0], [32.5, 178.0], [32.6, 178.0], [32.7, 179.0], [32.8, 180.0], [32.9, 180.0], [33.0, 181.0], [33.1, 182.0], [33.2, 183.0], [33.3, 183.0], [33.4, 184.0], [33.5, 185.0], [33.6, 186.0], [33.7, 186.0], [33.8, 187.0], [33.9, 188.0], [34.0, 188.0], [34.1, 189.0], [34.2, 190.0], [34.3, 191.0], [34.4, 191.0], [34.5, 192.0], [34.6, 193.0], [34.7, 194.0], [34.8, 195.0], [34.9, 195.0], [35.0, 196.0], [35.1, 197.0], [35.2, 198.0], [35.3, 199.0], [35.4, 200.0], [35.5, 201.0], [35.6, 201.0], [35.7, 202.0], [35.8, 203.0], [35.9, 204.0], [36.0, 205.0], [36.1, 206.0], [36.2, 207.0], [36.3, 208.0], [36.4, 209.0], [36.5, 210.0], [36.6, 211.0], [36.7, 212.0], [36.8, 213.0], [36.9, 215.0], [37.0, 216.0], [37.1, 217.0], [37.2, 218.0], [37.3, 219.0], [37.4, 220.0], [37.5, 221.0], [37.6, 222.0], [37.7, 224.0], [37.8, 225.0], [37.9, 226.0], [38.0, 227.0], [38.1, 229.0], [38.2, 230.0], [38.3, 231.0], [38.4, 232.0], [38.5, 234.0], [38.6, 235.0], [38.7, 236.0], [38.8, 238.0], [38.9, 239.0], [39.0, 241.0], [39.1, 242.0], [39.2, 244.0], [39.3, 245.0], [39.4, 246.0], [39.5, 248.0], [39.6, 249.0], [39.7, 250.0], [39.8, 252.0], [39.9, 253.0], [40.0, 255.0], [40.1, 257.0], [40.2, 258.0], [40.3, 260.0], [40.4, 262.0], [40.5, 263.0], [40.6, 265.0], [40.7, 267.0], [40.8, 268.0], [40.9, 270.0], [41.0, 272.0], [41.1, 273.0], [41.2, 275.0], [41.3, 277.0], [41.4, 279.0], [41.5, 280.0], [41.6, 283.0], [41.7, 284.0], [41.8, 286.0], [41.9, 288.0], [42.0, 290.0], [42.1, 293.0], [42.2, 295.0], [42.3, 297.0], [42.4, 299.0], [42.5, 301.0], [42.6, 303.0], [42.7, 305.0], [42.8, 308.0], [42.9, 310.0], [43.0, 312.0], [43.1, 314.0], [43.2, 316.0], [43.3, 319.0], [43.4, 321.0], [43.5, 323.0], [43.6, 325.0], [43.7, 327.0], [43.8, 329.0], [43.9, 331.0], [44.0, 334.0], [44.1, 336.0], [44.2, 338.0], [44.3, 340.0], [44.4, 343.0], [44.5, 345.0], [44.6, 348.0], [44.7, 350.0], [44.8, 353.0], [44.9, 355.0], [45.0, 358.0], [45.1, 361.0], [45.2, 363.0], [45.3, 365.0], [45.4, 368.0], [45.5, 371.0], [45.6, 374.0], [45.7, 376.0], [45.8, 378.0], [45.9, 381.0], [46.0, 383.0], [46.1, 386.0], [46.2, 389.0], [46.3, 391.0], [46.4, 394.0], [46.5, 396.0], [46.6, 398.0], [46.7, 401.0], [46.8, 403.0], [46.9, 406.0], [47.0, 408.0], [47.1, 410.0], [47.2, 413.0], [47.3, 415.0], [47.4, 418.0], [47.5, 420.0], [47.6, 422.0], [47.7, 425.0], [47.8, 427.0], [47.9, 429.0], [48.0, 431.0], [48.1, 433.0], [48.2, 436.0], [48.3, 438.0], [48.4, 440.0], [48.5, 442.0], [48.6, 444.0], [48.7, 447.0], [48.8, 449.0], [48.9, 451.0], [49.0, 453.0], [49.1, 455.0], [49.2, 458.0], [49.3, 460.0], [49.4, 462.0], [49.5, 464.0], [49.6, 466.0], [49.7, 468.0], [49.8, 470.0], [49.9, 472.0], [50.0, 474.0], [50.1, 476.0], [50.2, 478.0], [50.3, 480.0], [50.4, 482.0], [50.5, 484.0], [50.6, 486.0], [50.7, 489.0], [50.8, 491.0], [50.9, 493.0], [51.0, 495.0], [51.1, 497.0], [51.2, 499.0], [51.3, 501.0], [51.4, 503.0], [51.5, 505.0], [51.6, 507.0], [51.7, 509.0], [51.8, 511.0], [51.9, 513.0], [52.0, 515.0], [52.1, 518.0], [52.2, 520.0], [52.3, 521.0], [52.4, 523.0], [52.5, 525.0], [52.6, 527.0], [52.7, 529.0], [52.8, 531.0], [52.9, 533.0], [53.0, 536.0], [53.1, 537.0], [53.2, 539.0], [53.3, 542.0], [53.4, 543.0], [53.5, 545.0], [53.6, 547.0], [53.7, 549.0], [53.8, 551.0], [53.9, 553.0], [54.0, 554.0], [54.1, 556.0], [54.2, 558.0], [54.3, 560.0], [54.4, 562.0], [54.5, 563.0], [54.6, 565.0], [54.7, 567.0], [54.8, 569.0], [54.9, 571.0], [55.0, 573.0], [55.1, 575.0], [55.2, 576.0], [55.3, 578.0], [55.4, 580.0], [55.5, 582.0], [55.6, 584.0], [55.7, 586.0], [55.8, 588.0], [55.9, 590.0], [56.0, 592.0], [56.1, 593.0], [56.2, 595.0], [56.3, 597.0], [56.4, 599.0], [56.5, 600.0], [56.6, 602.0], [56.7, 604.0], [56.8, 606.0], [56.9, 608.0], [57.0, 609.0], [57.1, 611.0], [57.2, 613.0], [57.3, 615.0], [57.4, 616.0], [57.5, 618.0], [57.6, 619.0], [57.7, 621.0], [57.8, 623.0], [57.9, 625.0], [58.0, 627.0], [58.1, 628.0], [58.2, 630.0], [58.3, 632.0], [58.4, 633.0], [58.5, 635.0], [58.6, 637.0], [58.7, 639.0], [58.8, 640.0], [58.9, 642.0], [59.0, 644.0], [59.1, 645.0], [59.2, 647.0], [59.3, 649.0], [59.4, 650.0], [59.5, 652.0], [59.6, 654.0], [59.7, 656.0], [59.8, 658.0], [59.9, 660.0], [60.0, 661.0], [60.1, 663.0], [60.2, 665.0], [60.3, 667.0], [60.4, 669.0], [60.5, 670.0], [60.6, 672.0], [60.7, 674.0], [60.8, 675.0], [60.9, 677.0], [61.0, 678.0], [61.1, 680.0], [61.2, 682.0], [61.3, 684.0], [61.4, 685.0], [61.5, 687.0], [61.6, 689.0], [61.7, 691.0], [61.8, 693.0], [61.9, 694.0], [62.0, 696.0], [62.1, 698.0], [62.2, 699.0], [62.3, 701.0], [62.4, 703.0], [62.5, 704.0], [62.6, 706.0], [62.7, 708.0], [62.8, 710.0], [62.9, 711.0], [63.0, 713.0], [63.1, 715.0], [63.2, 717.0], [63.3, 719.0], [63.4, 720.0], [63.5, 722.0], [63.6, 724.0], [63.7, 726.0], [63.8, 727.0], [63.9, 729.0], [64.0, 731.0], [64.1, 733.0], [64.2, 735.0], [64.3, 737.0], [64.4, 739.0], [64.5, 740.0], [64.6, 742.0], [64.7, 744.0], [64.8, 746.0], [64.9, 748.0], [65.0, 749.0], [65.1, 751.0], [65.2, 753.0], [65.3, 755.0], [65.4, 756.0], [65.5, 759.0], [65.6, 761.0], [65.7, 762.0], [65.8, 764.0], [65.9, 766.0], [66.0, 768.0], [66.1, 769.0], [66.2, 771.0], [66.3, 773.0], [66.4, 774.0], [66.5, 776.0], [66.6, 778.0], [66.7, 780.0], [66.8, 781.0], [66.9, 783.0], [67.0, 785.0], [67.1, 786.0], [67.2, 788.0], [67.3, 790.0], [67.4, 792.0], [67.5, 794.0], [67.6, 795.0], [67.7, 797.0], [67.8, 798.0], [67.9, 800.0], [68.0, 802.0], [68.1, 804.0], [68.2, 806.0], [68.3, 808.0], [68.4, 810.0], [68.5, 812.0], [68.6, 814.0], [68.7, 815.0], [68.8, 817.0], [68.9, 819.0], [69.0, 821.0], [69.1, 823.0], [69.2, 825.0], [69.3, 826.0], [69.4, 828.0], [69.5, 830.0], [69.6, 831.0], [69.7, 833.0], [69.8, 835.0], [69.9, 837.0], [70.0, 839.0], [70.1, 840.0], [70.2, 842.0], [70.3, 844.0], [70.4, 846.0], [70.5, 848.0], [70.6, 850.0], [70.7, 852.0], [70.8, 854.0], [70.9, 856.0], [71.0, 858.0], [71.1, 859.0], [71.2, 862.0], [71.3, 863.0], [71.4, 865.0], [71.5, 867.0], [71.6, 869.0], [71.7, 870.0], [71.8, 872.0], [71.9, 874.0], [72.0, 876.0], [72.1, 877.0], [72.2, 879.0], [72.3, 881.0], [72.4, 883.0], [72.5, 885.0], [72.6, 887.0], [72.7, 889.0], [72.8, 891.0], [72.9, 892.0], [73.0, 894.0], [73.1, 897.0], [73.2, 898.0], [73.3, 900.0], [73.4, 903.0], [73.5, 905.0], [73.6, 907.0], [73.7, 909.0], [73.8, 911.0], [73.9, 913.0], [74.0, 914.0], [74.1, 917.0], [74.2, 919.0], [74.3, 920.0], [74.4, 922.0], [74.5, 924.0], [74.6, 926.0], [74.7, 928.0], [74.8, 930.0], [74.9, 932.0], [75.0, 934.0], [75.1, 936.0], [75.2, 938.0], [75.3, 940.0], [75.4, 942.0], [75.5, 945.0], [75.6, 946.0], [75.7, 949.0], [75.8, 950.0], [75.9, 952.0], [76.0, 954.0], [76.1, 957.0], [76.2, 959.0], [76.3, 961.0], [76.4, 963.0], [76.5, 965.0], [76.6, 968.0], [76.7, 970.0], [76.8, 972.0], [76.9, 974.0], [77.0, 976.0], [77.1, 978.0], [77.2, 980.0], [77.3, 982.0], [77.4, 984.0], [77.5, 986.0], [77.6, 988.0], [77.7, 991.0], [77.8, 993.0], [77.9, 996.0], [78.0, 998.0], [78.1, 1000.0], [78.2, 1002.0], [78.3, 1004.0], [78.4, 1006.0], [78.5, 1009.0], [78.6, 1011.0], [78.7, 1013.0], [78.8, 1015.0], [78.9, 1018.0], [79.0, 1020.0], [79.1, 1022.0], [79.2, 1024.0], [79.3, 1027.0], [79.4, 1029.0], [79.5, 1032.0], [79.6, 1034.0], [79.7, 1037.0], [79.8, 1039.0], [79.9, 1041.0], [80.0, 1043.0], [80.1, 1046.0], [80.2, 1048.0], [80.3, 1050.0], [80.4, 1053.0], [80.5, 1055.0], [80.6, 1057.0], [80.7, 1060.0], [80.8, 1063.0], [80.9, 1066.0], [81.0, 1068.0], [81.1, 1071.0], [81.2, 1073.0], [81.3, 1076.0], [81.4, 1078.0], [81.5, 1081.0], [81.6, 1083.0], [81.7, 1086.0], [81.8, 1088.0], [81.9, 1091.0], [82.0, 1093.0], [82.1, 1096.0], [82.2, 1099.0], [82.3, 1101.0], [82.4, 1104.0], [82.5, 1107.0], [82.6, 1109.0], [82.7, 1111.0], [82.8, 1114.0], [82.9, 1116.0], [83.0, 1119.0], [83.1, 1122.0], [83.2, 1124.0], [83.3, 1127.0], [83.4, 1130.0], [83.5, 1133.0], [83.6, 1136.0], [83.7, 1138.0], [83.8, 1141.0], [83.9, 1143.0], [84.0, 1146.0], [84.1, 1148.0], [84.2, 1151.0], [84.3, 1154.0], [84.4, 1157.0], [84.5, 1160.0], [84.6, 1163.0], [84.7, 1166.0], [84.8, 1169.0], [84.9, 1172.0], [85.0, 1175.0], [85.1, 1178.0], [85.2, 1181.0], [85.3, 1184.0], [85.4, 1186.0], [85.5, 1189.0], [85.6, 1192.0], [85.7, 1195.0], [85.8, 1198.0], [85.9, 1202.0], [86.0, 1204.0], [86.1, 1208.0], [86.2, 1212.0], [86.3, 1215.0], [86.4, 1218.0], [86.5, 1221.0], [86.6, 1224.0], [86.7, 1228.0], [86.8, 1231.0], [86.9, 1234.0], [87.0, 1237.0], [87.1, 1241.0], [87.2, 1244.0], [87.3, 1247.0], [87.4, 1251.0], [87.5, 1254.0], [87.6, 1258.0], [87.7, 1261.0], [87.8, 1264.0], [87.9, 1268.0], [88.0, 1271.0], [88.1, 1274.0], [88.2, 1277.0], [88.3, 1281.0], [88.4, 1285.0], [88.5, 1288.0], [88.6, 1292.0], [88.7, 1296.0], [88.8, 1299.0], [88.9, 1303.0], [89.0, 1307.0], [89.1, 1310.0], [89.2, 1314.0], [89.3, 1318.0], [89.4, 1322.0], [89.5, 1327.0], [89.6, 1331.0], [89.7, 1335.0], [89.8, 1338.0], [89.9, 1343.0], [90.0, 1347.0], [90.1, 1351.0], [90.2, 1355.0], [90.3, 1358.0], [90.4, 1363.0], [90.5, 1367.0], [90.6, 1371.0], [90.7, 1375.0], [90.8, 1379.0], [90.9, 1383.0], [91.0, 1388.0], [91.1, 1393.0], [91.2, 1397.0], [91.3, 1402.0], [91.4, 1406.0], [91.5, 1411.0], [91.6, 1415.0], [91.7, 1420.0], [91.8, 1425.0], [91.9, 1429.0], [92.0, 1434.0], [92.1, 1439.0], [92.2, 1444.0], [92.3, 1449.0], [92.4, 1454.0], [92.5, 1460.0], [92.6, 1465.0], [92.7, 1471.0], [92.8, 1477.0], [92.9, 1483.0], [93.0, 1489.0], [93.1, 1494.0], [93.2, 1500.0], [93.3, 1507.0], [93.4, 1512.0], [93.5, 1519.0], [93.6, 1525.0], [93.7, 1531.0], [93.8, 1538.0], [93.9, 1545.0], [94.0, 1552.0], [94.1, 1558.0], [94.2, 1564.0], [94.3, 1571.0], [94.4, 1579.0], [94.5, 1585.0], [94.6, 1593.0], [94.7, 1600.0], [94.8, 1608.0], [94.9, 1615.0], [95.0, 1623.0], [95.1, 1631.0], [95.2, 1638.0], [95.3, 1644.0], [95.4, 1653.0], [95.5, 1660.0], [95.6, 1668.0], [95.7, 1677.0], [95.8, 1684.0], [95.9, 1693.0], [96.0, 1701.0], [96.1, 1710.0], [96.2, 1719.0], [96.3, 1728.0], [96.4, 1737.0], [96.5, 1749.0], [96.6, 1759.0], [96.7, 1771.0], [96.8, 1781.0], [96.9, 1792.0], [97.0, 1802.0], [97.1, 1814.0], [97.2, 1826.0], [97.3, 1836.0], [97.4, 1850.0], [97.5, 1864.0], [97.6, 1878.0], [97.7, 1893.0], [97.8, 1908.0], [97.9, 1924.0], [98.0, 1941.0], [98.1, 1957.0], [98.2, 1974.0], [98.3, 1991.0], [98.4, 2011.0], [98.5, 2032.0], [98.6, 2053.0], [98.7, 2078.0], [98.8, 2102.0], [98.9, 2129.0], [99.0, 2159.0], [99.1, 2195.0], [99.2, 2228.0], [99.3, 2267.0], [99.4, 2318.0], [99.5, 2366.0], [99.6, 2435.0], [99.7, 2506.0], [99.8, 2609.0], [99.9, 2767.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 23945.0, "series": [{"data": [[0.0, 17531.0], [600.0, 6761.0], [700.0, 6609.0], [800.0, 6324.0], [900.0, 5643.0], [1000.0, 4869.0], [1100.0, 4251.0], [1200.0, 3474.0], [1300.0, 2859.0], [1400.0, 2269.0], [1500.0, 1763.0], [100.0, 23945.0], [1600.0, 1516.0], [1700.0, 1161.0], [1800.0, 907.0], [1900.0, 695.0], [2000.0, 521.0], [2100.0, 385.0], [2200.0, 283.0], [2300.0, 224.0], [2400.0, 165.0], [2500.0, 120.0], [2600.0, 83.0], [2700.0, 63.0], [2800.0, 26.0], [2900.0, 26.0], [3000.0, 14.0], [3100.0, 13.0], [200.0, 8255.0], [3300.0, 9.0], [3200.0, 5.0], [3400.0, 3.0], [3500.0, 1.0], [3600.0, 1.0], [300.0, 4943.0], [400.0, 5367.0], [500.0, 6116.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7964.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 60101.0, "series": [{"data": [[0.0, 60101.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 49135.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7964.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72863498E12, "maxY": 16.0, "series": [{"data": [[1.7286399E12, 12.0], [1.7286402E12, 12.0], [1.72863888E12, 12.0], [1.728639E12, 12.0], [1.7286393E12, 12.0], [1.72864068E12, 4.737991266375547], [1.7286396E12, 12.0], [1.72864038E12, 12.0], [1.72863876E12, 11.020833333333332], [1.72863906E12, 12.0], [1.72863936E12, 12.0], [1.72864062E12, 11.57643884892086], [1.72863918E12, 12.0], [1.72863948E12, 12.0], [1.7286405E12, 12.0], [1.72863978E12, 12.0], [1.72864008E12, 12.0], [1.72863894E12, 12.0], [1.72863924E12, 12.0], [1.72863954E12, 12.0], [1.72863984E12, 12.0], [1.72863966E12, 12.0], [1.72863996E12, 12.0], [1.72864026E12, 12.0], [1.72863942E12, 12.0], [1.72864056E12, 12.0], [1.72863972E12, 12.0], [1.72864002E12, 12.0], [1.72864032E12, 12.0], [1.72864014E12, 12.0], [1.72864044E12, 12.0], [1.72863882E12, 12.0], [1.72863912E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72863522E12, 1.0], [1.72863504E12, 2.0], [1.7286351E12, 2.0], [1.72863498E12, 2.0], [1.72863516E12, 1.9527272727272729]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72863636E12, 4.0], [1.72863606E12, 4.0], [1.72863666E12, 4.0], [1.72863546E12, 4.0], [1.72863576E12, 4.0], [1.72863678E12, 3.9285714285714297], [1.72863522E12, 3.9945848375451254], [1.72863684E12, 2.5545454545454542], [1.72863552E12, 4.0], [1.72863654E12, 4.0], [1.72863594E12, 4.0], [1.72863624E12, 4.0], [1.72863534E12, 4.0], [1.72863564E12, 4.0], [1.7286357E12, 4.0], [1.728636E12, 4.0], [1.7286354E12, 4.0], [1.72863582E12, 4.0], [1.72863672E12, 4.0], [1.72863612E12, 4.0], [1.72863642E12, 4.0], [1.72863618E12, 4.0], [1.72863558E12, 4.0], [1.72863648E12, 4.0], [1.72863588E12, 4.0], [1.7286366E12, 4.0], [1.72863528E12, 4.0], [1.7286363E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.728642E12, 16.0], [1.7286417E12, 16.0], [1.7286414E12, 16.0], [1.7286411E12, 16.0], [1.72864128E12, 16.0], [1.72864098E12, 16.0], [1.72864068E12, 15.38888888888889], [1.7286423E12, 11.977127172918578], [1.72864152E12, 16.0], [1.72864122E12, 16.0], [1.72864092E12, 16.0], [1.7286408E12, 16.0], [1.72864212E12, 16.0], [1.72864182E12, 16.0], [1.72864104E12, 16.0], [1.72864074E12, 16.0], [1.72864236E12, 1.2857142857142856], [1.72864206E12, 16.0], [1.72864224E12, 16.0], [1.72864194E12, 16.0], [1.72864164E12, 16.0], [1.72864134E12, 16.0], [1.72864218E12, 16.0], [1.72864188E12, 16.0], [1.72864158E12, 16.0], [1.72864176E12, 16.0], [1.72864146E12, 16.0], [1.72864116E12, 16.0], [1.72864086E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.72863828E12, 8.0], [1.72863798E12, 8.0], [1.72863696E12, 8.0], [1.72863858E12, 8.0], [1.72863708E12, 8.0], [1.7286387E12, 8.0], [1.72863768E12, 8.0], [1.72863738E12, 8.0], [1.72863684E12, 7.963503649635037], [1.72863846E12, 8.0], [1.72863876E12, 5.487427466150865], [1.72863744E12, 8.0], [1.72863714E12, 8.0], [1.72863756E12, 8.0], [1.72863726E12, 8.0], [1.72863816E12, 8.0], [1.72863786E12, 8.0], [1.72863732E12, 8.0], [1.72863702E12, 8.0], [1.72863792E12, 8.0], [1.72863762E12, 8.0], [1.72863804E12, 8.0], [1.72863774E12, 8.0], [1.72863834E12, 8.0], [1.72863864E12, 8.0], [1.7286378E12, 8.0], [1.7286375E12, 8.0], [1.7286381E12, 8.0], [1.7286384E12, 8.0], [1.72863822E12, 8.0], [1.72863852E12, 8.0], [1.7286372E12, 8.0], [1.7286369E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72864236E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 400.3260869565216, "minX": 1.0, "maxY": 809.7294227128297, "series": [{"data": [[2.0, 400.3260869565216], [8.0, 476.6594524367834], [9.0, 500.543046357616], [10.0, 504.83333333333337], [11.0, 534.4285714285716], [3.0, 404.46794871794884], [12.0, 628.8079259717591], [13.0, 723.5], [14.0, 401.66666666666663], [15.0, 695.9236641221374], [1.0, 429.9569892473118], [4.0, 408.19752306331225], [16.0, 809.7294227128297], [5.0, 420.3895582329319], [6.0, 429.7394636015326], [7.0, 457.7800687285225]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.71569112627985, 601.2314590443704]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72863498E12, "maxY": 6.2024062416666664E7, "series": [{"data": [[1.72863798E12, 4.929256186666667E7], [1.7286402E12, 5.703373561666667E7], [1.72863696E12, 4.888805978333333E7], [1.7286414E12, 6.09177003E7], [1.72863576E12, 3.0415380766666666E7], [1.72863678E12, 2.7939277466666665E7], [1.728639E12, 5.853721113333333E7], [1.72864038E12, 5.7926533233333334E7], [1.72864122E12, 6.0042644516666666E7], [1.72863714E12, 5.030929405E7], [1.72863936E12, 5.648520475E7], [1.72863594E12, 2.9856351016666666E7], [1.72863918E12, 5.9292579916666664E7], [1.72863816E12, 5.038250596666667E7], [1.72864104E12, 6.03658739E7], [1.7286354E12, 3.00573895E7], [1.72863762E12, 5.00988155E7], [1.72863984E12, 5.72365184E7], [1.72864206E12, 5.965861981666667E7], [1.72863966E12, 5.765680511666667E7], [1.72864224E12, 5.966500411666667E7], [1.72863642E12, 3.0846840966666665E7], [1.72863864E12, 5.112547535E7], [1.7286378E12, 5.05870059E7], [1.72863558E12, 2.9968922216666665E7], [1.72864002E12, 5.920600565E7], [1.72864188E12, 6.011526838333333E7], [1.7286366E12, 2.8768571616666667E7], [1.72863882E12, 5.844069096666667E7], [1.72864086E12, 6.124427295E7], [1.7286399E12, 6.02542087E7], [1.72863666E12, 3.0116667583333332E7], [1.72863888E12, 5.783063356666667E7], [1.7286411E12, 6.1218483016666666E7], [1.72863546E12, 3.0761415183333334E7], [1.7286387E12, 5.2194810766666666E7], [1.72864128E12, 6.122874055E7], [1.72863768E12, 5.102980195E7], [1.7286423E12, 5.153963778333333E7], [1.72863684E12, 2.5480899966666665E7], [1.72863906E12, 5.9025275083333336E7], [1.72864092E12, 5.911830555E7], [1.72864212E12, 6.2024062416666664E7], [1.72863564E12, 3.0820425233333334E7], [1.72863786E12, 5.116325065E7], [1.72864008E12, 5.802648075E7], [1.72863732E12, 4.9091043166666664E7], [1.72864074E12, 5.9163770833333336E7], [1.72863954E12, 5.9158615916666664E7], [1.7286351E12, 1.5357991316666666E7], [1.72864194E12, 5.81564148E7], [1.72863612E12, 2.9578464616666667E7], [1.72863834E12, 5.222237975E7], [1.72864056E12, 5.7949392583333336E7], [1.7286375E12, 5.157570911666667E7], [1.72863972E12, 5.661212295E7], [1.72863648E12, 3.0623257016666666E7], [1.72864158E12, 6.0394839733333334E7], [1.72864176E12, 6.156239861666667E7], [1.72863528E12, 2.9826628133333333E7], [1.7286363E12, 2.9425905016666666E7], [1.72863852E12, 5.0634136583333336E7], [1.728642E12, 6.1595067333333336E7], [1.72863636E12, 3.0287681883333333E7], [1.72863858E12, 5.1454748266666666E7], [1.72864098E12, 6.030206131666667E7], [1.72863738E12, 4.98119492E7], [1.7286396E12, 5.725692645E7], [1.72863516E12, 1.4209717933333334E7], [1.72863552E12, 3.0913769E7], [1.72863654E12, 3.055828305E7], [1.72863876E12, 2.8839119116666667E7], [1.72864062E12, 5.7898816416666664E7], [1.72863756E12, 5.19084234E7], [1.7286408E12, 5.9549220983333334E7], [1.72863534E12, 3.011437625E7], [1.72863978E12, 5.8042291666666664E7], [1.72864182E12, 6.032162545E7], [1.728636E12, 3.0495010583333332E7], [1.72863702E12, 5.3094008516666666E7], [1.72863924E12, 5.8520177833333336E7], [1.72863804E12, 5.060845505E7], [1.72863582E12, 2.9904479366666667E7], [1.72864026E12, 5.764541418333333E7], [1.72864164E12, 6.1775934266666666E7], [1.72863618E12, 3.0865245116666667E7], [1.72863942E12, 5.9242155166666664E7], [1.7286384E12, 5.2164241733333334E7], [1.72863498E12, 1.504981395E7], [1.72863822E12, 4.989030571666667E7], [1.72864044E12, 5.733717515E7], [1.72864146E12, 6.100081393333333E7], [1.7286372E12, 5.218210893333333E7], [1.72863828E12, 5.04022945E7], [1.7286417E12, 6.020715553333333E7], [1.72863504E12, 1.5072657766666668E7], [1.72863606E12, 2.8323278383333333E7], [1.72863708E12, 5.125817288333333E7], [1.7286393E12, 5.722620011666667E7], [1.72864068E12, 2.7751854416666668E7], [1.72863522E12, 2.6066787333333332E7], [1.72864152E12, 5.8886676416666664E7], [1.72863846E12, 5.131136896666667E7], [1.72863744E12, 5.12433777E7], [1.72863624E12, 2.9731925866666667E7], [1.72863948E12, 5.783839286666667E7], [1.72863726E12, 5.0111286916666664E7], [1.7286405E12, 5.859398825E7], [1.7286357E12, 3.0375990866666667E7], [1.72863894E12, 5.8325867416666664E7], [1.72863792E12, 5.084576396666667E7], [1.72864236E12, 2198002.3833333333], [1.72863774E12, 5.17068607E7], [1.72863996E12, 5.735800293333333E7], [1.72863672E12, 2.9455955883333333E7], [1.72864134E12, 5.992109935E7], [1.72864218E12, 5.964198825E7], [1.72863588E12, 3.0997492383333333E7], [1.7286381E12, 5.3072299416666664E7], [1.72864032E12, 5.962739836666667E7], [1.72864014E12, 5.635248071666667E7], [1.72864116E12, 6.108996156666667E7], [1.7286369E12, 5.152608261666667E7], [1.72863912E12, 5.94144523E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72863798E12, 0.0], [1.7286402E12, 0.0], [1.72863696E12, 0.0], [1.7286414E12, 0.0], [1.72863576E12, 0.0], [1.72863678E12, 0.0], [1.728639E12, 0.0], [1.72864038E12, 0.0], [1.72864122E12, 0.0], [1.72863714E12, 0.0], [1.72863936E12, 0.0], [1.72863594E12, 0.0], [1.72863918E12, 0.0], [1.72863816E12, 0.0], [1.72864104E12, 0.0], [1.7286354E12, 0.0], [1.72863762E12, 0.0], [1.72863984E12, 0.0], [1.72864206E12, 0.0], [1.72863966E12, 0.0], [1.72864224E12, 0.0], [1.72863642E12, 0.0], [1.72863864E12, 0.0], [1.7286378E12, 0.0], [1.72863558E12, 0.0], [1.72864002E12, 0.0], [1.72864188E12, 0.0], [1.7286366E12, 0.0], [1.72863882E12, 0.0], [1.72864086E12, 0.0], [1.7286399E12, 0.0], [1.72863666E12, 0.0], [1.72863888E12, 0.0], [1.7286411E12, 0.0], [1.72863546E12, 0.0], [1.7286387E12, 0.0], [1.72864128E12, 0.0], [1.72863768E12, 0.0], [1.7286423E12, 0.0], [1.72863684E12, 0.0], [1.72863906E12, 0.0], [1.72864092E12, 0.0], [1.72864212E12, 0.0], [1.72863564E12, 0.0], [1.72863786E12, 0.0], [1.72864008E12, 0.0], [1.72863732E12, 0.0], [1.72864074E12, 0.0], [1.72863954E12, 0.0], [1.7286351E12, 0.0], [1.72864194E12, 0.0], [1.72863612E12, 0.0], [1.72863834E12, 0.0], [1.72864056E12, 0.0], [1.7286375E12, 0.0], [1.72863972E12, 0.0], [1.72863648E12, 0.0], [1.72864158E12, 0.0], [1.72864176E12, 0.0], [1.72863528E12, 0.0], [1.7286363E12, 0.0], [1.72863852E12, 0.0], [1.728642E12, 0.0], [1.72863636E12, 0.0], [1.72863858E12, 0.0], [1.72864098E12, 0.0], [1.72863738E12, 0.0], [1.7286396E12, 0.0], [1.72863516E12, 0.0], [1.72863552E12, 0.0], [1.72863654E12, 0.0], [1.72863876E12, 0.0], [1.72864062E12, 0.0], [1.72863756E12, 0.0], [1.7286408E12, 0.0], [1.72863534E12, 0.0], [1.72863978E12, 0.0], [1.72864182E12, 0.0], [1.728636E12, 0.0], [1.72863702E12, 0.0], [1.72863924E12, 0.0], [1.72863804E12, 0.0], [1.72863582E12, 0.0], [1.72864026E12, 0.0], [1.72864164E12, 0.0], [1.72863618E12, 0.0], [1.72863942E12, 0.0], [1.7286384E12, 0.0], [1.72863498E12, 0.0], [1.72863822E12, 0.0], [1.72864044E12, 0.0], [1.72864146E12, 0.0], [1.7286372E12, 0.0], [1.72863828E12, 0.0], [1.7286417E12, 0.0], [1.72863504E12, 0.0], [1.72863606E12, 0.0], [1.72863708E12, 0.0], [1.7286393E12, 0.0], [1.72864068E12, 0.0], [1.72863522E12, 0.0], [1.72864152E12, 0.0], [1.72863846E12, 0.0], [1.72863744E12, 0.0], [1.72863624E12, 0.0], [1.72863948E12, 0.0], [1.72863726E12, 0.0], [1.7286405E12, 0.0], [1.7286357E12, 0.0], [1.72863894E12, 0.0], [1.72863792E12, 0.0], [1.72864236E12, 0.0], [1.72863774E12, 0.0], [1.72863996E12, 0.0], [1.72863672E12, 0.0], [1.72864134E12, 0.0], [1.72864218E12, 0.0], [1.72863588E12, 0.0], [1.7286381E12, 0.0], [1.72864032E12, 0.0], [1.72864014E12, 0.0], [1.72864116E12, 0.0], [1.7286369E12, 0.0], [1.72863912E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72864236E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 380.1107266435986, "minX": 1.72863498E12, "maxY": 863.59478885894, "series": [{"data": [[1.72863798E12, 462.0837343599618], [1.7286402E12, 635.4187279151937], [1.72863696E12, 467.1538461538459], [1.7286414E12, 815.8679085520744], [1.72863576E12, 399.9313232830818], [1.72863678E12, 387.52823920265814], [1.728639E12, 668.672206832872], [1.72864038E12, 619.2202072538862], [1.72864122E12, 809.4331641285947], [1.72863714E12, 472.1438423645316], [1.72863936E12, 626.3731473408899], [1.72863594E12, 401.5050000000003], [1.72863918E12, 622.0224913494798], [1.72863816E12, 459.7043062200957], [1.72864104E12, 837.993843447669], [1.7286354E12, 441.9999999999999], [1.72863762E12, 456.99143672692685], [1.72863984E12, 608.6966101694916], [1.72864206E12, 789.3868312757209], [1.72863966E12, 619.4582256675288], [1.72864224E12, 823.2324185248717], [1.72863642E12, 390.18536585365797], [1.72863864E12, 485.502016129032], [1.7286378E12, 486.4827935222672], [1.72863558E12, 419.34325744308256], [1.72864002E12, 625.4861111111106], [1.72864188E12, 817.2390745501278], [1.7286366E12, 402.81986531986513], [1.72863882E12, 597.3225270157942], [1.72864086E12, 809.426408746846], [1.7286399E12, 611.3559898045874], [1.72863666E12, 422.96825396825386], [1.72863888E12, 612.664965986395], [1.7286411E12, 826.321061643835], [1.72863546E12, 402.594276094276], [1.7286387E12, 488.8659160696005], [1.72864128E12, 817.8028887000852], [1.72863768E12, 464.97173489278777], [1.7286423E12, 614.8911253430929], [1.72863684E12, 444.8178137651821], [1.72863906E12, 628.9275741710296], [1.72864092E12, 766.7335473515245], [1.72864212E12, 804.0066889632106], [1.72863564E12, 438.9177330895792], [1.72863786E12, 494.6130030959757], [1.72864008E12, 626.8884045335658], [1.72863732E12, 455.8319088319088], [1.72864074E12, 769.3907766990292], [1.72863954E12, 643.1219946571682], [1.7286351E12, 391.5194805194804], [1.72864194E12, 791.7034596375617], [1.72863612E12, 408.89795918367344], [1.72863834E12, 485.95736040609177], [1.72864056E12, 652.7581521739128], [1.7286375E12, 479.44655344655393], [1.72863972E12, 619.7497850386939], [1.72863648E12, 430.40107913669084], [1.72864158E12, 812.2635593220333], [1.72864176E12, 863.59478885894], [1.72863528E12, 414.3391003460204], [1.7286363E12, 396.19734660033134], [1.72863852E12, 478.37799999999936], [1.728642E12, 813.0873621713314], [1.72863636E12, 415.3672413793106], [1.72863858E12, 479.3223223223224], [1.72864098E12, 792.6290189612523], [1.72863738E12, 474.2284866468845], [1.7286396E12, 654.1537761601452], [1.72863516E12, 414.603636363636], [1.72863552E12, 401.607679465776], [1.72863654E12, 433.0773381294967], [1.72863876E12, 445.9345132743365], [1.72864062E12, 627.928057553957], [1.72863756E12, 482.731658291457], [1.7286408E12, 809.4777870913659], [1.72863534E12, 402.6610738255032], [1.72863978E12, 646.3770197486539], [1.72864182E12, 813.0420875420876], [1.728636E12, 386.67851373182606], [1.72863702E12, 466.5519922254618], [1.72863924E12, 654.1938683498649], [1.72863804E12, 467.72054527750765], [1.72863582E12, 408.816638370119], [1.72864026E12, 643.5334522747553], [1.72864164E12, 837.8769633507852], [1.72863618E12, 419.9807355516633], [1.72863942E12, 631.3674540682406], [1.7286384E12, 486.7876643073814], [1.72863498E12, 412.58098591549293], [1.72863822E12, 470.81317600786656], [1.72864044E12, 589.937040065414], [1.72864146E12, 765.3110047846893], [1.7286372E12, 466.9941747572815], [1.72863828E12, 467.2322643343048], [1.7286417E12, 819.6321642429418], [1.72863504E12, 385.6763754045309], [1.72863606E12, 393.79310344827576], [1.72863708E12, 481.833165829146], [1.7286393E12, 608.1298811544991], [1.72864068E12, 477.9543795620438], [1.72863522E12, 380.1107266435986], [1.72864152E12, 801.8123436196838], [1.72863846E12, 476.4632936507934], [1.72863744E12, 494.8452012383899], [1.72863624E12, 398.67993366500843], [1.72863948E12, 617.1167381974254], [1.72863726E12, 481.3380140421261], [1.7286405E12, 652.7345454545454], [1.7286357E12, 431.7855855855857], [1.72863894E12, 621.3056994818658], [1.72863792E12, 476.19246031746036], [1.72864236E12, 476.74285714285713], [1.72863774E12, 490.37474541751527], [1.72863996E12, 628.431064572426], [1.72863672E12, 380.2816455696203], [1.72864134E12, 831.9128160418495], [1.72864218E12, 846.9363957597176], [1.72863588E12, 426.35943060498226], [1.7286381E12, 490.3006134969334], [1.72864032E12, 631.1262050832609], [1.72864014E12, 596.9585406301832], [1.72864116E12, 806.8376569037658], [1.7286369E12, 490.9631901840489], [1.72863912E12, 667.4379084967313]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72864236E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 249.4636075949365, "minX": 1.72863498E12, "maxY": 575.7430368373775, "series": [{"data": [[1.72863798E12, 308.52646775745916], [1.7286402E12, 426.7014134275623], [1.72863696E12, 312.2142161635834], [1.7286414E12, 544.7595258255715], [1.72863576E12, 261.10552763819055], [1.72863678E12, 255.5182724252492], [1.728639E12, 445.9732225300093], [1.72864038E12, 413.77892918825546], [1.72864122E12, 541.1725888324875], [1.72863714E12, 315.0650246305424], [1.72863936E12, 420.98169136878863], [1.72863594E12, 261.8049999999999], [1.72863918E12, 411.9766435986155], [1.72863816E12, 304.23253588516764], [1.72864104E12, 557.1169744942837], [1.7286354E12, 290.03314917127057], [1.72863762E12, 304.50618458610825], [1.72863984E12, 407.22372881355955], [1.72864206E12, 532.3555555555547], [1.72863966E12, 412.4332472006888], [1.72864224E12, 553.682675814751], [1.72863642E12, 252.90406504065035], [1.72863864E12, 322.6471774193553], [1.7286378E12, 323.20344129554667], [1.72863558E12, 274.416812609457], [1.72864002E12, 414.59548611111086], [1.72864188E12, 544.2047986289626], [1.7286366E12, 267.0101010101008], [1.72863882E12, 395.4197838736496], [1.72864086E12, 539.9007569386041], [1.7286399E12, 404.10280373831785], [1.72863666E12, 276.1763668430339], [1.72863888E12, 410.0212585034016], [1.7286411E12, 549.9666095890411], [1.72863546E12, 260.7946127946126], [1.7286387E12, 322.74718526100327], [1.72864128E12, 547.5870858113842], [1.72863768E12, 307.26705653021406], [1.7286423E12, 410.81244281793204], [1.72863684E12, 292.0809716599192], [1.72863906E12, 417.19109947644006], [1.72864092E12, 515.6388443017664], [1.72864212E12, 533.1647157190639], [1.72863564E12, 285.44241316270524], [1.72863786E12, 327.8348813209492], [1.72864008E12, 417.3016564952054], [1.72863732E12, 304.9525166191835], [1.72864074E12, 519.5420711974106], [1.72863954E12, 426.24131789848644], [1.7286351E12, 258.0389610389612], [1.72864194E12, 536.2734761120265], [1.72863612E12, 268.8231292517002], [1.72863834E12, 320.5807106598982], [1.72864056E12, 437.06702898550685], [1.7286375E12, 317.38561438561385], [1.72863972E12, 413.75580395528823], [1.72863648E12, 280.6258992805756], [1.72864158E12, 545.1025423728813], [1.72864176E12, 575.7430368373775], [1.72863528E12, 272.660899653979], [1.7286363E12, 261.61525704809264], [1.72863852E12, 316.61399999999986], [1.728642E12, 542.9465648854957], [1.72863636E12, 271.4844827586206], [1.72863858E12, 316.34134134134155], [1.72864098E12, 534.9068425391604], [1.72863738E12, 316.80316518298696], [1.7286396E12, 439.3130118289354], [1.72863516E12, 275.14909090909094], [1.72863552E12, 260.91819699499166], [1.72863654E12, 282.26798561151105], [1.72863876E12, 293.3256637168141], [1.72864062E12, 417.32643884892104], [1.72863756E12, 319.6412060301514], [1.7286408E12, 542.7242246437548], [1.72863534E12, 263.3305369127516], [1.72863978E12, 433.00538599641], [1.72864182E12, 545.3611111111117], [1.728636E12, 250.29402261712457], [1.72863702E12, 306.18172983479127], [1.72863924E12, 436.83047790802556], [1.72863804E12, 310.60564751704027], [1.72863582E12, 267.6383701188454], [1.72864026E12, 431.1614629794824], [1.72864164E12, 558.9066317626537], [1.72863618E12, 272.9124343257442], [1.72863942E12, 420.02099737532836], [1.7286384E12, 321.1890798786652], [1.72863498E12, 271.0528169014084], [1.72863822E12, 314.7197640117994], [1.72864044E12, 394.2076860179885], [1.72864146E12, 509.73923444976106], [1.7286372E12, 305.7747572815534], [1.72863828E12, 310.10981535471325], [1.7286417E12, 548.633019674936], [1.72863504E12, 252.1391585760516], [1.72863606E12, 261.29392446633824], [1.72863708E12, 320.30150753768834], [1.7286393E12, 405.1952461799655], [1.72864068E12, 315.352189781022], [1.72863522E12, 250.99999999999991], [1.72864152E12, 540.0175145954955], [1.72863846E12, 316.28273809523864], [1.72863744E12, 329.7739938080498], [1.72863624E12, 262.4477611940303], [1.72863948E12, 412.4918454935628], [1.72863726E12, 320.39518555667007], [1.7286405E12, 433.10727272727274], [1.7286357E12, 282.12612612612605], [1.72863894E12, 414.4006908462863], [1.72863792E12, 318.25297619047603], [1.72864236E12, 311.65714285714284], [1.72863774E12, 325.26578411405296], [1.72863996E12, 421.8368237347297], [1.72863672E12, 249.4636075949365], [1.72864134E12, 556.4280732345236], [1.72864218E12, 566.4072438162541], [1.72863588E12, 276.46085409252663], [1.7286381E12, 322.2668711656443], [1.72864032E12, 418.8869412795791], [1.72864014E12, 400.99336650082927], [1.72864116E12, 539.5497907949789], [1.7286369E12, 327.01022494887513], [1.72863912E12, 444.1092436974792]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72864236E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72863498E12, "maxY": 4.9E-324, "series": [{"data": [[1.72863798E12, 0.0], [1.7286402E12, 0.0], [1.72863696E12, 0.0], [1.7286414E12, 0.0], [1.72863576E12, 0.0], [1.72863678E12, 0.0], [1.728639E12, 0.0], [1.72864038E12, 0.0], [1.72864122E12, 0.0], [1.72863714E12, 0.0], [1.72863936E12, 0.0], [1.72863594E12, 0.0], [1.72863918E12, 0.0], [1.72863816E12, 0.0], [1.72864104E12, 0.0], [1.7286354E12, 0.0], [1.72863762E12, 0.0], [1.72863984E12, 0.0], [1.72864206E12, 0.0], [1.72863966E12, 0.0], [1.72864224E12, 0.0], [1.72863642E12, 0.0], [1.72863864E12, 0.0], [1.7286378E12, 0.0], [1.72863558E12, 0.0], [1.72864002E12, 0.0], [1.72864188E12, 0.0], [1.7286366E12, 0.0], [1.72863882E12, 0.0], [1.72864086E12, 0.0], [1.7286399E12, 0.0], [1.72863666E12, 0.0], [1.72863888E12, 0.0], [1.7286411E12, 0.0], [1.72863546E12, 0.0], [1.7286387E12, 0.0], [1.72864128E12, 0.0], [1.72863768E12, 0.0], [1.7286423E12, 0.0], [1.72863684E12, 0.0], [1.72863906E12, 0.0], [1.72864092E12, 0.0], [1.72864212E12, 0.0], [1.72863564E12, 0.0], [1.72863786E12, 0.0], [1.72864008E12, 0.0], [1.72863732E12, 0.0], [1.72864074E12, 0.0], [1.72863954E12, 0.0], [1.7286351E12, 0.0], [1.72864194E12, 0.0], [1.72863612E12, 0.0], [1.72863834E12, 0.0], [1.72864056E12, 0.0], [1.7286375E12, 0.0], [1.72863972E12, 0.0], [1.72863648E12, 0.0], [1.72864158E12, 0.0], [1.72864176E12, 0.0], [1.72863528E12, 0.0], [1.7286363E12, 0.0], [1.72863852E12, 0.0], [1.728642E12, 0.0], [1.72863636E12, 0.0], [1.72863858E12, 0.0], [1.72864098E12, 0.0], [1.72863738E12, 0.0], [1.7286396E12, 0.0], [1.72863516E12, 0.0], [1.72863552E12, 0.0], [1.72863654E12, 0.0], [1.72863876E12, 0.0], [1.72864062E12, 0.0], [1.72863756E12, 0.0], [1.7286408E12, 0.0], [1.72863534E12, 0.0], [1.72863978E12, 0.0], [1.72864182E12, 0.0], [1.728636E12, 0.0], [1.72863702E12, 0.0], [1.72863924E12, 0.0], [1.72863804E12, 0.0], [1.72863582E12, 0.0], [1.72864026E12, 0.0], [1.72864164E12, 0.0], [1.72863618E12, 0.0], [1.72863942E12, 0.0], [1.7286384E12, 0.0], [1.72863498E12, 0.0], [1.72863822E12, 0.0], [1.72864044E12, 0.0], [1.72864146E12, 0.0], [1.7286372E12, 0.0], [1.72863828E12, 0.0], [1.7286417E12, 0.0], [1.72863504E12, 0.0], [1.72863606E12, 0.0], [1.72863708E12, 0.0], [1.7286393E12, 0.0], [1.72864068E12, 0.0], [1.72863522E12, 0.0], [1.72864152E12, 0.0], [1.72863846E12, 0.0], [1.72863744E12, 0.0], [1.72863624E12, 0.0], [1.72863948E12, 0.0], [1.72863726E12, 0.0], [1.7286405E12, 0.0], [1.7286357E12, 0.0], [1.72863894E12, 0.0], [1.72863792E12, 0.0], [1.72864236E12, 0.0], [1.72863774E12, 0.0], [1.72863996E12, 0.0], [1.72863672E12, 0.0], [1.72864134E12, 0.0], [1.72864218E12, 0.0], [1.72863588E12, 0.0], [1.7286381E12, 0.0], [1.72864032E12, 0.0], [1.72864014E12, 0.0], [1.72864116E12, 0.0], [1.7286369E12, 0.0], [1.72863912E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72864236E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.72863498E12, "maxY": 3636.0, "series": [{"data": [[1.72863798E12, 2033.0], [1.7286402E12, 2482.0], [1.72863696E12, 1707.0], [1.7286414E12, 3316.0], [1.72863576E12, 1371.0], [1.72863678E12, 1613.0], [1.728639E12, 2373.0], [1.72864038E12, 2414.0], [1.72864122E12, 3322.0], [1.72863714E12, 1802.0], [1.72863936E12, 2381.0], [1.72863594E12, 1726.0], [1.72863918E12, 2620.0], [1.72863816E12, 1751.0], [1.72864104E12, 2875.0], [1.7286354E12, 1433.0], [1.72863762E12, 1811.0], [1.72863984E12, 2491.0], [1.72864206E12, 2962.0], [1.72863966E12, 2319.0], [1.72864224E12, 3227.0], [1.72863642E12, 1393.0], [1.72863864E12, 1936.0], [1.7286378E12, 1805.0], [1.72863558E12, 1478.0], [1.72864002E12, 2624.0], [1.72864188E12, 3181.0], [1.7286366E12, 1763.0], [1.72863882E12, 2419.0], [1.72864086E12, 3111.0], [1.7286399E12, 2521.0], [1.72863666E12, 1426.0], [1.72863888E12, 2443.0], [1.7286411E12, 3322.0], [1.72863546E12, 1545.0], [1.7286387E12, 2262.0], [1.72864128E12, 3581.0], [1.72863768E12, 1735.0], [1.7286423E12, 2524.0], [1.72863684E12, 1599.0], [1.72863906E12, 2797.0], [1.72864092E12, 2996.0], [1.72864212E12, 3636.0], [1.72863564E12, 1651.0], [1.72863786E12, 1748.0], [1.72864008E12, 2471.0], [1.72863732E12, 1968.0], [1.72864074E12, 3170.0], [1.72863954E12, 2623.0], [1.7286351E12, 1294.0], [1.72864194E12, 3257.0], [1.72863612E12, 1501.0], [1.72863834E12, 1919.0], [1.72864056E12, 2759.0], [1.7286375E12, 1872.0], [1.72863972E12, 2534.0], [1.72863648E12, 1656.0], [1.72864158E12, 2966.0], [1.72864176E12, 2809.0], [1.72863528E12, 1548.0], [1.7286363E12, 1471.0], [1.72863852E12, 2031.0], [1.728642E12, 3186.0], [1.72863636E12, 1387.0], [1.72863858E12, 2065.0], [1.72864098E12, 3371.0], [1.72863738E12, 1981.0], [1.7286396E12, 2868.0], [1.72863516E12, 1430.0], [1.72863552E12, 1684.0], [1.72863654E12, 1427.0], [1.72863876E12, 1849.0], [1.72864062E12, 2413.0], [1.72863756E12, 1945.0], [1.7286408E12, 3012.0], [1.72863534E12, 1390.0], [1.72863978E12, 2738.0], [1.72864182E12, 3382.0], [1.728636E12, 1615.0], [1.72863702E12, 1777.0], [1.72863924E12, 2705.0], [1.72863804E12, 1833.0], [1.72863582E12, 1749.0], [1.72864026E12, 2365.0], [1.72864164E12, 3415.0], [1.72863618E12, 1745.0], [1.72863942E12, 2412.0], [1.7286384E12, 1955.0], [1.72863498E12, 1585.0], [1.72863822E12, 1789.0], [1.72864044E12, 2246.0], [1.72864146E12, 3449.0], [1.7286372E12, 1854.0], [1.72863828E12, 1766.0], [1.7286417E12, 3256.0], [1.72863504E12, 1580.0], [1.72863606E12, 1599.0], [1.72863708E12, 1847.0], [1.7286393E12, 2541.0], [1.72864068E12, 2310.0], [1.72863522E12, 1462.0], [1.72864152E12, 2870.0], [1.72863846E12, 1772.0], [1.72863744E12, 1854.0], [1.72863624E12, 1473.0], [1.72863948E12, 2393.0], [1.72863726E12, 1915.0], [1.7286405E12, 2470.0], [1.7286357E12, 1417.0], [1.72863894E12, 2288.0], [1.72863792E12, 1877.0], [1.72864236E12, 1015.0], [1.72863774E12, 1941.0], [1.72863996E12, 2527.0], [1.72863672E12, 1531.0], [1.72864134E12, 3408.0], [1.72864218E12, 3310.0], [1.72863588E12, 1664.0], [1.7286381E12, 1741.0], [1.72864032E12, 2435.0], [1.72864014E12, 2518.0], [1.72864116E12, 2836.0], [1.7286369E12, 1949.0], [1.72863912E12, 2717.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72863798E12, 1025.0], [1.7286402E12, 1358.0], [1.72863696E12, 1022.2], [1.7286414E12, 1776.0], [1.72863576E12, 887.4000000000001], [1.72863678E12, 833.7], [1.728639E12, 1397.8000000000002], [1.72864038E12, 1358.700000000001], [1.72864122E12, 1695.0], [1.72863714E12, 995.1999999999998], [1.72863936E12, 1388.0000000000002], [1.72863594E12, 856.6999999999999], [1.72863918E12, 1366.7999999999997], [1.72863816E12, 1001.4], [1.72864104E12, 1755.8000000000002], [1.7286354E12, 916.6000000000003], [1.72863762E12, 988.6000000000001], [1.72863984E12, 1336.7000000000003], [1.72864206E12, 1699.4], [1.72863966E12, 1363.8], [1.72864224E12, 1707.8999999999999], [1.72863642E12, 834.5999999999999], [1.72863864E12, 1014.7], [1.7286378E12, 1024.0], [1.72863558E12, 921.8000000000001], [1.72864002E12, 1386.4], [1.72864188E12, 1718.8000000000002], [1.7286366E12, 852.0], [1.72863882E12, 1332.0000000000007], [1.72864086E12, 1743.0], [1.7286399E12, 1350.0], [1.72863666E12, 886.5999999999999], [1.72863888E12, 1363.3], [1.7286411E12, 1776.2000000000003], [1.72863546E12, 868.0], [1.7286387E12, 1052.2], [1.72864128E12, 1709.0], [1.72863768E12, 997.3000000000001], [1.7286423E12, 1375.0], [1.72863684E12, 1004.5], [1.72863906E12, 1380.8999999999999], [1.72864092E12, 1687.7999999999997], [1.72864212E12, 1738.6], [1.72863564E12, 943.2], [1.72863786E12, 1034.0], [1.72864008E12, 1375.0], [1.72863732E12, 995.6], [1.72864074E12, 1679.6], [1.72863954E12, 1386.2], [1.7286351E12, 864.0], [1.72864194E12, 1720.0], [1.72863612E12, 917.5000000000001], [1.72863834E12, 1030.0], [1.72864056E12, 1394.5], [1.7286375E12, 1017.0], [1.72863972E12, 1354.6000000000015], [1.72863648E12, 914.3], [1.72864158E12, 1714.6000000000004], [1.72864176E12, 1838.4], [1.72863528E12, 887.4000000000001], [1.7286363E12, 873.0], [1.72863852E12, 1017.9], [1.728642E12, 1796.0], [1.72863636E12, 906.6999999999999], [1.72863858E12, 1057.0], [1.72864098E12, 1710.6000000000001], [1.72863738E12, 1010.6000000000001], [1.7286396E12, 1408.0], [1.72863516E12, 880.6000000000001], [1.72863552E12, 880.0], [1.72863654E12, 929.9000000000003], [1.72863876E12, 985.4000000000001], [1.72864062E12, 1332.7], [1.72863756E12, 1050.7999999999997], [1.7286408E12, 1731.0], [1.72863534E12, 879.3000000000001], [1.72863978E12, 1394.5], [1.72864182E12, 1737.800000000001], [1.728636E12, 888.0], [1.72863702E12, 1020.0], [1.72863924E12, 1387.0], [1.72863804E12, 1013.6000000000001], [1.72863582E12, 895.0], [1.72864026E12, 1359.8000000000004], [1.72864164E12, 1749.6], [1.72863618E12, 892.6000000000001], [1.72863942E12, 1397.2000000000003], [1.7286384E12, 1055.0], [1.72863498E12, 887.0], [1.72863822E12, 1042.0000000000002], [1.72864044E12, 1315.8000000000004], [1.72864146E12, 1720.5], [1.7286372E12, 1068.6], [1.72863828E12, 1020.0], [1.7286417E12, 1781.0], [1.72863504E12, 869.0], [1.72863606E12, 868.0], [1.72863708E12, 1038.0], [1.7286393E12, 1353.4000000000005], [1.72864068E12, 1034.3000000000002], [1.72863522E12, 823.1], [1.72864152E12, 1729.0], [1.72863846E12, 1034.4], [1.72863744E12, 1041.0], [1.72863624E12, 883.6], [1.72863948E12, 1367.2000000000003], [1.72863726E12, 1028.0], [1.7286405E12, 1394.8], [1.7286357E12, 900.4000000000001], [1.72863894E12, 1339.4000000000005], [1.72863792E12, 1025.0], [1.72864236E12, 957.1999999999999], [1.72863774E12, 1017.4000000000005], [1.72863996E12, 1380.3], [1.72863672E12, 844.7], [1.72864134E12, 1738.2000000000003], [1.72864218E12, 1811.3000000000004], [1.72863588E12, 895.0], [1.7286381E12, 1067.0], [1.72864032E12, 1392.7999999999995], [1.72864014E12, 1305.8999999999999], [1.72864116E12, 1741.0000000000005], [1.7286369E12, 1039.3000000000002], [1.72863912E12, 1402.8000000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72863798E12, 1434.3999999999996], [1.7286402E12, 1999.0], [1.72863696E12, 1411.6000000000001], [1.7286414E12, 2514.6000000000013], [1.72863576E12, 1158.6199999999994], [1.72863678E12, 1289.0700000000008], [1.728639E12, 2119.6400000000003], [1.72864038E12, 1998.4000000000033], [1.72864122E12, 2635.4100000000053], [1.72863714E12, 1478.68], [1.72863936E12, 1954.4399999999996], [1.72863594E12, 1240.92], [1.72863918E12, 1947.43], [1.72863816E12, 1543.8999999999987], [1.72864104E12, 2516.159999999998], [1.7286354E12, 1325.9599999999991], [1.72863762E12, 1462.3600000000001], [1.72863984E12, 1942.19], [1.72864206E12, 2538.9599999999946], [1.72863966E12, 1932.1199999999972], [1.72864224E12, 2443.5999999999985], [1.72863642E12, 1223.400000000001], [1.72863864E12, 1493.1399999999999], [1.7286378E12, 1461.9800000000002], [1.72863558E12, 1301.56], [1.72864002E12, 2053.630000000001], [1.72864188E12, 2646.5599999999995], [1.7286366E12, 1267.9499999999991], [1.72863882E12, 2005.2400000000007], [1.72864086E12, 2577.2999999999997], [1.7286399E12, 2002.5000000000007], [1.72863666E12, 1338.0800000000008], [1.72863888E12, 1940.15], [1.7286411E12, 2771.0299999999993], [1.72863546E12, 1282.05], [1.7286387E12, 1383.1200000000013], [1.72864128E12, 2552.88], [1.72863768E12, 1452.46], [1.7286423E12, 2198.2999999999997], [1.72863684E12, 1357.8500000000004], [1.72863906E12, 1991.3599999999997], [1.72864092E12, 2459.24], [1.72864212E12, 2495.12], [1.72863564E12, 1324.9199999999996], [1.72863786E12, 1505.0999999999997], [1.72864008E12, 2006.0], [1.72863732E12, 1496.7600000000002], [1.72864074E12, 2447.299999999999], [1.72863954E12, 2005.4799999999998], [1.7286351E12, 1188.73], [1.72864194E12, 2504.5499999999925], [1.72863612E12, 1294.1000000000001], [1.72863834E12, 1525.42], [1.72864056E12, 2028.5000000000005], [1.7286375E12, 1563.7000000000003], [1.72863972E12, 1986.239999999999], [1.72863648E12, 1382.1499999999996], [1.72864158E12, 2469.76], [1.72864176E12, 2428.2399999999966], [1.72863528E12, 1271.1500000000005], [1.7286363E12, 1317.720000000002], [1.72863852E12, 1575.92], [1.728642E12, 2488.6000000000004], [1.72863636E12, 1290.5199999999995], [1.72863858E12, 1477.0], [1.72864098E12, 2432.459999999999], [1.72863738E12, 1436.04], [1.7286396E12, 2002.0], [1.72863516E12, 1312.7600000000002], [1.72863552E12, 1323.0], [1.72863654E12, 1261.2999999999995], [1.72863876E12, 1646.2400000000011], [1.72864062E12, 1981.1799999999985], [1.72863756E12, 1441.8799999999992], [1.7286408E12, 2486.8399999999992], [1.72863534E12, 1233.1499999999999], [1.72863978E12, 2156.4499999999985], [1.72864182E12, 2565.789999999991], [1.728636E12, 1419.3999999999987], [1.72863702E12, 1531.0], [1.72863924E12, 2162.6000000000067], [1.72863804E12, 1489.0800000000004], [1.72863582E12, 1361.0000000000014], [1.72864026E12, 1965.739999999999], [1.72864164E12, 2571.24], [1.72863618E12, 1336.5599999999986], [1.72863942E12, 1931.3599999999997], [1.7286384E12, 1555.7000000000007], [1.72863498E12, 1423.2499999999977], [1.72863822E12, 1530.1999999999994], [1.72864044E12, 1848.0], [1.72864146E12, 2521.8], [1.7286372E12, 1540.9399999999985], [1.72863828E12, 1527.0000000000027], [1.7286417E12, 2560.799999999998], [1.72863504E12, 1221.999999999999], [1.72863606E12, 1232.6999999999998], [1.72863708E12, 1490.2399999999989], [1.7286393E12, 2035.9600000000028], [1.72864068E12, 1996.979999999999], [1.72863522E12, 1160.1400000000012], [1.72864152E12, 2454.0], [1.72863846E12, 1458.0999999999997], [1.72863744E12, 1456.0999999999997], [1.72863624E12, 1224.1200000000017], [1.72863948E12, 2074.2599999999966], [1.72863726E12, 1557.02], [1.7286405E12, 2144.92], [1.7286357E12, 1275.7199999999934], [1.72863894E12, 1921.2300000000002], [1.72863792E12, 1477.9299999999994], [1.72864236E12, 1015.0], [1.72863774E12, 1684.2699999999986], [1.72863996E12, 2027.3599999999997], [1.72863672E12, 1228.35], [1.72864134E12, 2540.719999999999], [1.72864218E12, 2602.3500000000004], [1.72863588E12, 1429.7500000000005], [1.7286381E12, 1520.2600000000002], [1.72864032E12, 2087.4799999999996], [1.72864014E12, 1955.810000000001], [1.72864116E12, 2519.8399999999992], [1.7286369E12, 1675.63], [1.72863912E12, 1993.5599999999993]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72863798E12, 1196.0], [1.7286402E12, 1580.0499999999997], [1.72863696E12, 1169.6], [1.7286414E12, 1990.7999999999997], [1.72863576E12, 985.5000000000001], [1.72863678E12, 965.7], [1.728639E12, 1639.7999999999997], [1.72864038E12, 1608.0], [1.72864122E12, 2003.6499999999992], [1.72863714E12, 1175.3999999999999], [1.72863936E12, 1607.6], [1.72863594E12, 1015.9499999999986], [1.72863918E12, 1568.8999999999992], [1.72863816E12, 1169.0], [1.72864104E12, 2032.999999999999], [1.7286354E12, 1069.1999999999996], [1.72863762E12, 1166.8], [1.72863984E12, 1530.95], [1.72864206E12, 1952.8000000000002], [1.72863966E12, 1587.8999999999985], [1.72864224E12, 2002.5999999999995], [1.72863642E12, 1002.5999999999998], [1.72863864E12, 1174.0], [1.7286378E12, 1215.7499999999998], [1.72863558E12, 1035.3999999999999], [1.72864002E12, 1623.0], [1.72864188E12, 2008.1999999999994], [1.7286366E12, 1008.0], [1.72863882E12, 1594.3999999999999], [1.72864086E12, 2019.5], [1.7286399E12, 1551.3999999999987], [1.72863666E12, 1043.0000000000002], [1.72863888E12, 1562.1499999999999], [1.7286411E12, 2089.4999999999995], [1.72863546E12, 1006.25], [1.7286387E12, 1174.3999999999996], [1.72864128E12, 1988.1999999999998], [1.72863768E12, 1172.0], [1.7286423E12, 1655.6], [1.72863684E12, 1137.5], [1.72863906E12, 1604.2999999999997], [1.72864092E12, 1998.8999999999992], [1.72864212E12, 1974.199999999999], [1.72863564E12, 1053.2000000000005], [1.72863786E12, 1207.5], [1.72864008E12, 1574.3999999999996], [1.72863732E12, 1146.1999999999998], [1.72864074E12, 1938.7999999999984], [1.72863954E12, 1596.0], [1.7286351E12, 1031.3000000000002], [1.72864194E12, 1939.75], [1.72863612E12, 1030.1], [1.72863834E12, 1196.3999999999999], [1.72864056E12, 1678.5], [1.7286375E12, 1195.1], [1.72863972E12, 1584.7999999999997], [1.72863648E12, 1057.6], [1.72864158E12, 2026.6500000000003], [1.72864176E12, 2049.0], [1.72863528E12, 1016.1999999999998], [1.7286363E12, 994.9999999999998], [1.72863852E12, 1158.85], [1.728642E12, 2048.0], [1.72863636E12, 1066.9499999999998], [1.72863858E12, 1198.0], [1.72864098E12, 1983.4999999999998], [1.72863738E12, 1162.1999999999998], [1.7286396E12, 1616.0], [1.72863516E12, 1031.4], [1.72863552E12, 1017.0], [1.72863654E12, 1057.75], [1.72863876E12, 1069.6999999999998], [1.72864062E12, 1577.3999999999996], [1.72863756E12, 1246.0], [1.7286408E12, 2071.8999999999996], [1.72863534E12, 986.15], [1.72863978E12, 1651.5], [1.72864182E12, 1947.9499999999996], [1.728636E12, 1015.0], [1.72863702E12, 1190.0], [1.72863924E12, 1609.5], [1.72863804E12, 1199.9999999999995], [1.72863582E12, 1006.5], [1.72864026E12, 1575.7999999999997], [1.72864164E12, 2007.2499999999993], [1.72863618E12, 1040.3999999999996], [1.72863942E12, 1560.9999999999998], [1.7286384E12, 1240.0], [1.72863498E12, 1015.75], [1.72863822E12, 1243.5999999999995], [1.72864044E12, 1547.5999999999992], [1.72864146E12, 2003.25], [1.7286372E12, 1209.6999999999996], [1.72863828E12, 1157.5], [1.7286417E12, 2036.0], [1.72863504E12, 1034.0], [1.72863606E12, 989.5], [1.72863708E12, 1184.7999999999997], [1.7286393E12, 1602.1499999999999], [1.72864068E12, 1276.5999999999995], [1.72863522E12, 958.1499999999999], [1.72864152E12, 1989.0], [1.72863846E12, 1204.55], [1.72863744E12, 1213.0], [1.72863624E12, 996.7999999999997], [1.72863948E12, 1620.1000000000001], [1.72863726E12, 1179.1999999999998], [1.7286405E12, 1639.8500000000001], [1.7286357E12, 1058.3999999999996], [1.72863894E12, 1594.1], [1.72863792E12, 1204.1], [1.72864236E12, 1014.2], [1.72863774E12, 1191.6999999999998], [1.72863996E12, 1599.0], [1.72863672E12, 1014.4000000000001], [1.72864134E12, 2033.9999999999986], [1.72864218E12, 2098.0499999999997], [1.72863588E12, 1016.85], [1.7286381E12, 1242.0], [1.72864032E12, 1642.0999999999988], [1.72864014E12, 1542.8499999999988], [1.72864116E12, 2015.4000000000003], [1.7286369E12, 1203.1499999999999], [1.72863912E12, 1642.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72863798E12, 32.0], [1.7286402E12, 39.0], [1.72863696E12, 36.0], [1.7286414E12, 62.0], [1.72863576E12, 36.0], [1.72863678E12, 36.0], [1.728639E12, 43.0], [1.72864038E12, 39.0], [1.72864122E12, 64.0], [1.72863714E12, 37.0], [1.72863936E12, 37.0], [1.72863594E12, 32.0], [1.72863918E12, 42.0], [1.72863816E12, 36.0], [1.72864104E12, 59.0], [1.7286354E12, 35.0], [1.72863762E12, 36.0], [1.72863984E12, 38.0], [1.72864206E12, 61.0], [1.72863966E12, 34.0], [1.72864224E12, 56.0], [1.72863642E12, 34.0], [1.72863864E12, 33.0], [1.7286378E12, 35.0], [1.72863558E12, 36.0], [1.72864002E12, 45.0], [1.72864188E12, 69.0], [1.7286366E12, 34.0], [1.72863882E12, 37.0], [1.72864086E12, 59.0], [1.7286399E12, 40.0], [1.72863666E12, 30.0], [1.72863888E12, 34.0], [1.7286411E12, 50.0], [1.72863546E12, 31.0], [1.7286387E12, 36.0], [1.72864128E12, 57.0], [1.72863768E12, 36.0], [1.7286423E12, 40.0], [1.72863684E12, 38.0], [1.72863906E12, 42.0], [1.72864092E12, 73.0], [1.72864212E12, 56.0], [1.72863564E12, 33.0], [1.72863786E12, 36.0], [1.72864008E12, 39.0], [1.72863732E12, 36.0], [1.72864074E12, 61.0], [1.72863954E12, 36.0], [1.7286351E12, 38.0], [1.72864194E12, 67.0], [1.72863612E12, 35.0], [1.72863834E12, 37.0], [1.72864056E12, 37.0], [1.7286375E12, 32.0], [1.72863972E12, 40.0], [1.72863648E12, 33.0], [1.72864158E12, 58.0], [1.72864176E12, 57.0], [1.72863528E12, 40.0], [1.7286363E12, 33.0], [1.72863852E12, 37.0], [1.728642E12, 56.0], [1.72863636E12, 33.0], [1.72863858E12, 35.0], [1.72864098E12, 53.0], [1.72863738E12, 39.0], [1.7286396E12, 42.0], [1.72863516E12, 41.0], [1.72863552E12, 33.0], [1.72863654E12, 31.0], [1.72863876E12, 36.0], [1.72864062E12, 35.0], [1.72863756E12, 35.0], [1.7286408E12, 71.0], [1.72863534E12, 34.0], [1.72863978E12, 37.0], [1.72864182E12, 68.0], [1.728636E12, 35.0], [1.72863702E12, 31.0], [1.72863924E12, 32.0], [1.72863804E12, 34.0], [1.72863582E12, 34.0], [1.72864026E12, 47.0], [1.72864164E12, 59.0], [1.72863618E12, 32.0], [1.72863942E12, 38.0], [1.7286384E12, 29.0], [1.72863498E12, 43.0], [1.72863822E12, 31.0], [1.72864044E12, 38.0], [1.72864146E12, 61.0], [1.7286372E12, 33.0], [1.72863828E12, 33.0], [1.7286417E12, 69.0], [1.72863504E12, 36.0], [1.72863606E12, 35.0], [1.72863708E12, 39.0], [1.7286393E12, 40.0], [1.72864068E12, 35.0], [1.72863522E12, 33.0], [1.72864152E12, 64.0], [1.72863846E12, 35.0], [1.72863744E12, 29.0], [1.72863624E12, 34.0], [1.72863948E12, 34.0], [1.72863726E12, 38.0], [1.7286405E12, 35.0], [1.7286357E12, 37.0], [1.72863894E12, 40.0], [1.72863792E12, 32.0], [1.72864236E12, 54.0], [1.72863774E12, 34.0], [1.72863996E12, 47.0], [1.72863672E12, 32.0], [1.72864134E12, 58.0], [1.72864218E12, 64.0], [1.72863588E12, 35.0], [1.7286381E12, 33.0], [1.72864032E12, 40.0], [1.72864014E12, 36.0], [1.72864116E12, 60.0], [1.7286369E12, 35.0], [1.72863912E12, 39.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72863798E12, 362.0], [1.7286402E12, 569.0], [1.72863696E12, 398.0], [1.7286414E12, 703.0], [1.72863576E12, 346.0], [1.72863678E12, 322.5], [1.728639E12, 628.0], [1.72864038E12, 523.0], [1.72864122E12, 694.5], [1.72863714E12, 437.0], [1.72863936E12, 522.0], [1.72863594E12, 375.0], [1.72863918E12, 551.0], [1.72863816E12, 385.0], [1.72864104E12, 770.0], [1.7286354E12, 427.0], [1.72863762E12, 359.0], [1.72863984E12, 510.0], [1.72864206E12, 688.0], [1.72863966E12, 502.0], [1.72864224E12, 746.0], [1.72863642E12, 318.0], [1.72863864E12, 458.0], [1.7286378E12, 449.5], [1.72863558E12, 384.0], [1.72864002E12, 543.5], [1.72864188E12, 739.0], [1.7286366E12, 371.5], [1.72863882E12, 445.0], [1.72864086E12, 716.0], [1.7286399E12, 475.0], [1.72863666E12, 384.0], [1.72863888E12, 506.5], [1.7286411E12, 704.5], [1.72863546E12, 350.5], [1.7286387E12, 451.0], [1.72864128E12, 757.0], [1.72863768E12, 396.5], [1.7286423E12, 472.0], [1.72863684E12, 375.5], [1.72863906E12, 535.5], [1.72864092E12, 594.5], [1.72864212E12, 671.0], [1.72863564E12, 419.0], [1.72863786E12, 481.0], [1.72864008E12, 538.0], [1.72863732E12, 383.0], [1.72864074E12, 628.0], [1.72863954E12, 590.0], [1.7286351E12, 343.0], [1.72864194E12, 672.0], [1.72863612E12, 372.0], [1.72863834E12, 434.0], [1.72864056E12, 592.0], [1.7286375E12, 417.0], [1.72863972E12, 521.0], [1.72863648E12, 402.0], [1.72864158E12, 735.0], [1.72864176E12, 832.0], [1.72863528E12, 378.0], [1.7286363E12, 336.0], [1.72863852E12, 402.5], [1.728642E12, 716.0], [1.72863636E12, 375.5], [1.72863858E12, 421.0], [1.72864098E12, 723.0], [1.72863738E12, 433.0], [1.7286396E12, 605.0], [1.72863516E12, 405.0], [1.72863552E12, 339.0], [1.72863654E12, 404.0], [1.72863876E12, 381.0], [1.72864062E12, 569.5], [1.72863756E12, 419.0], [1.7286408E12, 671.0], [1.72863534E12, 375.5], [1.72863978E12, 605.5], [1.72864182E12, 736.5], [1.728636E12, 321.0], [1.72863702E12, 377.0], [1.72863924E12, 579.0], [1.72863804E12, 388.0], [1.72863582E12, 348.0], [1.72864026E12, 598.0], [1.72864164E12, 765.0], [1.72863618E12, 381.0], [1.72863942E12, 548.0], [1.7286384E12, 427.0], [1.72863498E12, 324.0], [1.72863822E12, 397.0], [1.72864044E12, 461.0], [1.72864146E12, 531.5], [1.7286372E12, 371.5], [1.72863828E12, 416.0], [1.7286417E12, 735.0], [1.72863504E12, 261.0], [1.72863606E12, 321.0], [1.72863708E12, 419.0], [1.7286393E12, 509.0], [1.72864068E12, 401.0], [1.72863522E12, 320.5], [1.72864152E12, 730.0], [1.72863846E12, 415.5], [1.72863744E12, 459.0], [1.72863624E12, 337.0], [1.72863948E12, 525.0], [1.72863726E12, 425.0], [1.7286405E12, 574.0], [1.7286357E12, 421.0], [1.72863894E12, 558.5], [1.72863792E12, 408.0], [1.72864236E12, 541.0], [1.72863774E12, 441.0], [1.72863996E12, 554.5], [1.72863672E12, 284.5], [1.72864134E12, 765.0], [1.72864218E12, 776.5], [1.72863588E12, 393.0], [1.7286381E12, 438.5], [1.72864032E12, 547.0], [1.72864014E12, 478.0], [1.72864116E12, 693.0], [1.7286369E12, 465.0], [1.72863912E12, 617.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72864236E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 187.0, "minX": 1.0, "maxY": 879.5, "series": [{"data": [[2.0, 647.0], [33.0, 248.0], [32.0, 222.5], [34.0, 187.0], [35.0, 193.0], [36.0, 263.5], [3.0, 543.0], [4.0, 534.5], [5.0, 572.5], [6.0, 510.0], [7.0, 516.0], [8.0, 470.0], [9.0, 447.0], [10.0, 440.0], [11.0, 439.0], [12.0, 480.0], [13.0, 517.0], [14.0, 546.0], [15.0, 567.0], [1.0, 879.5], [16.0, 548.0], [17.0, 551.0], [18.0, 521.0], [19.0, 477.0], [20.0, 471.0], [21.0, 480.0], [22.0, 429.5], [23.0, 354.0], [24.0, 340.0], [25.0, 323.0], [26.0, 284.0], [27.0, 305.5], [28.0, 249.0], [29.0, 269.0], [30.0, 253.5], [31.0, 262.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 36.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 109.0, "minX": 1.0, "maxY": 559.0, "series": [{"data": [[2.0, 401.5], [33.0, 166.0], [32.0, 135.0], [34.0, 122.0], [35.0, 109.0], [36.0, 175.5], [3.0, 362.0], [4.0, 356.5], [5.0, 384.5], [6.0, 347.0], [7.0, 351.0], [8.0, 329.0], [9.0, 314.5], [10.0, 308.5], [11.0, 309.0], [12.0, 338.0], [13.0, 366.0], [14.0, 383.0], [15.0, 398.0], [1.0, 559.0], [16.0, 389.0], [17.0, 393.0], [18.0, 369.0], [19.0, 347.0], [20.0, 344.0], [21.0, 344.0], [22.0, 307.0], [23.0, 249.0], [24.0, 234.0], [25.0, 213.5], [26.0, 181.0], [27.0, 195.0], [28.0, 154.5], [29.0, 165.5], [30.0, 158.5], [31.0, 158.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 36.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.55, "minX": 1.72863498E12, "maxY": 20.9, "series": [{"data": [[1.72863798E12, 17.316666666666666], [1.7286402E12, 18.866666666666667], [1.72863696E12, 17.116666666666667], [1.7286414E12, 19.683333333333334], [1.72863576E12, 9.95], [1.72863678E12, 10.016666666666667], [1.728639E12, 18.05], [1.72864038E12, 19.3], [1.72864122E12, 19.7], [1.72863714E12, 16.916666666666668], [1.72863936E12, 19.116666666666667], [1.72863594E12, 10.0], [1.72863918E12, 19.266666666666666], [1.72863816E12, 17.416666666666668], [1.72864104E12, 18.95], [1.7286354E12, 9.05], [1.72863762E12, 17.516666666666666], [1.72863984E12, 19.666666666666668], [1.72864206E12, 20.25], [1.72863966E12, 19.35], [1.72864224E12, 19.433333333333334], [1.72863642E12, 10.25], [1.72863864E12, 16.533333333333335], [1.7286378E12, 16.466666666666665], [1.72863558E12, 9.516666666666667], [1.72864002E12, 19.2], [1.72864188E12, 19.45], [1.7286366E12, 9.9], [1.72863882E12, 20.05], [1.72864086E12, 19.816666666666666], [1.7286399E12, 19.616666666666667], [1.72863666E12, 9.45], [1.72863888E12, 19.6], [1.7286411E12, 19.466666666666665], [1.72863546E12, 9.9], [1.7286387E12, 16.283333333333335], [1.72864128E12, 19.616666666666667], [1.72863768E12, 17.1], [1.7286423E12, 17.983333333333334], [1.72863684E12, 8.316666666666666], [1.72863906E12, 19.1], [1.72864092E12, 20.766666666666666], [1.72864212E12, 19.933333333333334], [1.72863564E12, 9.116666666666667], [1.72863786E12, 16.15], [1.72864008E12, 19.116666666666667], [1.72863732E12, 17.55], [1.72864074E12, 20.6], [1.72863954E12, 18.716666666666665], [1.7286351E12, 5.133333333333334], [1.72864194E12, 20.233333333333334], [1.72863612E12, 9.8], [1.72863834E12, 16.416666666666668], [1.72864056E12, 18.4], [1.7286375E12, 16.683333333333334], [1.72863972E12, 19.383333333333333], [1.72863648E12, 9.266666666666667], [1.72864158E12, 19.666666666666668], [1.72864176E12, 18.55], [1.72863528E12, 9.633333333333333], [1.7286363E12, 10.05], [1.72863852E12, 16.666666666666668], [1.728642E12, 19.65], [1.72863636E12, 9.666666666666666], [1.72863858E12, 16.65], [1.72864098E12, 20.216666666666665], [1.72863738E12, 16.85], [1.7286396E12, 18.316666666666666], [1.72863516E12, 4.566666666666666], [1.72863552E12, 9.983333333333333], [1.72863654E12, 9.266666666666667], [1.72863876E12, 9.483333333333333], [1.72864062E12, 18.466666666666665], [1.72863756E12, 16.583333333333332], [1.7286408E12, 19.883333333333333], [1.72863534E12, 9.933333333333334], [1.72863978E12, 18.566666666666666], [1.72864182E12, 19.8], [1.728636E12, 10.316666666666666], [1.72863702E12, 17.15], [1.72863924E12, 18.483333333333334], [1.72863804E12, 17.116666666666667], [1.72863582E12, 9.816666666666666], [1.72864026E12, 18.683333333333334], [1.72864164E12, 19.1], [1.72863618E12, 9.516666666666667], [1.72863942E12, 19.05], [1.7286384E12, 16.483333333333334], [1.72863498E12, 4.766666666666667], [1.72863822E12, 16.95], [1.72864044E12, 20.383333333333333], [1.72864146E12, 20.9], [1.7286372E12, 17.166666666666668], [1.72863828E12, 17.15], [1.7286417E12, 19.483333333333334], [1.72863504E12, 5.15], [1.72863606E12, 10.15], [1.72863708E12, 16.583333333333332], [1.7286393E12, 19.633333333333333], [1.72864068E12, 9.266666666666667], [1.72863522E12, 9.683333333333334], [1.72864152E12, 19.983333333333334], [1.72863846E12, 16.8], [1.72863744E12, 16.15], [1.72863624E12, 10.05], [1.72863948E12, 19.416666666666668], [1.72863726E12, 16.616666666666667], [1.7286405E12, 18.333333333333332], [1.7286357E12, 9.25], [1.72863894E12, 19.3], [1.72863792E12, 16.8], [1.72864236E12, 0.55], [1.72863774E12, 16.366666666666667], [1.72863996E12, 19.1], [1.72863672E12, 10.533333333333333], [1.72864134E12, 19.116666666666667], [1.72864218E12, 18.866666666666667], [1.72863588E12, 9.366666666666667], [1.7286381E12, 16.3], [1.72864032E12, 19.016666666666666], [1.72864014E12, 20.1], [1.72864116E12, 19.916666666666668], [1.7286369E12, 16.3], [1.72863912E12, 17.85]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72864236E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.72863498E12, "maxY": 20.9, "series": [{"data": [[1.72863798E12, 17.316666666666666], [1.7286402E12, 18.866666666666667], [1.72863696E12, 17.116666666666667], [1.7286414E12, 19.683333333333334], [1.72863576E12, 9.95], [1.72863678E12, 10.033333333333333], [1.728639E12, 18.05], [1.72864038E12, 19.3], [1.72864122E12, 19.7], [1.72863714E12, 16.916666666666668], [1.72863936E12, 19.116666666666667], [1.72863594E12, 10.0], [1.72863918E12, 19.266666666666666], [1.72863816E12, 17.416666666666668], [1.72864104E12, 18.95], [1.7286354E12, 9.05], [1.72863762E12, 17.516666666666666], [1.72863984E12, 19.666666666666668], [1.72864206E12, 20.25], [1.72863966E12, 19.35], [1.72864224E12, 19.433333333333334], [1.72863642E12, 10.25], [1.72863864E12, 16.533333333333335], [1.7286378E12, 16.466666666666665], [1.72863558E12, 9.516666666666667], [1.72864002E12, 19.2], [1.72864188E12, 19.45], [1.7286366E12, 9.9], [1.72863882E12, 20.05], [1.72864086E12, 19.816666666666666], [1.7286399E12, 19.616666666666667], [1.72863666E12, 9.45], [1.72863888E12, 19.6], [1.7286411E12, 19.466666666666665], [1.72863546E12, 9.9], [1.7286387E12, 16.283333333333335], [1.72864128E12, 19.616666666666667], [1.72863768E12, 17.1], [1.7286423E12, 18.216666666666665], [1.72863684E12, 8.233333333333333], [1.72863906E12, 19.1], [1.72864092E12, 20.766666666666666], [1.72864212E12, 19.933333333333334], [1.72863564E12, 9.116666666666667], [1.72863786E12, 16.15], [1.72864008E12, 19.116666666666667], [1.72863732E12, 17.55], [1.72864074E12, 20.6], [1.72863954E12, 18.716666666666665], [1.7286351E12, 5.133333333333334], [1.72864194E12, 20.233333333333334], [1.72863612E12, 9.8], [1.72863834E12, 16.416666666666668], [1.72864056E12, 18.4], [1.7286375E12, 16.683333333333334], [1.72863972E12, 19.383333333333333], [1.72863648E12, 9.266666666666667], [1.72864158E12, 19.666666666666668], [1.72864176E12, 18.55], [1.72863528E12, 9.633333333333333], [1.7286363E12, 10.05], [1.72863852E12, 16.666666666666668], [1.728642E12, 19.65], [1.72863636E12, 9.666666666666666], [1.72863858E12, 16.65], [1.72864098E12, 20.216666666666665], [1.72863738E12, 16.85], [1.7286396E12, 18.316666666666666], [1.72863516E12, 4.583333333333333], [1.72863552E12, 9.983333333333333], [1.72863654E12, 9.266666666666667], [1.72863876E12, 9.416666666666666], [1.72864062E12, 18.533333333333335], [1.72863756E12, 16.583333333333332], [1.7286408E12, 19.883333333333333], [1.72863534E12, 9.933333333333334], [1.72863978E12, 18.566666666666666], [1.72864182E12, 19.8], [1.728636E12, 10.316666666666666], [1.72863702E12, 17.15], [1.72863924E12, 18.483333333333334], [1.72863804E12, 17.116666666666667], [1.72863582E12, 9.816666666666666], [1.72864026E12, 18.683333333333334], [1.72864164E12, 19.1], [1.72863618E12, 9.516666666666667], [1.72863942E12, 19.05], [1.7286384E12, 16.483333333333334], [1.72863498E12, 4.733333333333333], [1.72863822E12, 16.95], [1.72864044E12, 20.383333333333333], [1.72864146E12, 20.9], [1.7286372E12, 17.166666666666668], [1.72863828E12, 17.15], [1.7286417E12, 19.483333333333334], [1.72863504E12, 5.15], [1.72863606E12, 10.15], [1.72863708E12, 16.583333333333332], [1.7286393E12, 19.633333333333333], [1.72864068E12, 9.133333333333333], [1.72863522E12, 9.633333333333333], [1.72864152E12, 19.983333333333334], [1.72863846E12, 16.8], [1.72863744E12, 16.15], [1.72863624E12, 10.05], [1.72863948E12, 19.416666666666668], [1.72863726E12, 16.616666666666667], [1.7286405E12, 18.333333333333332], [1.7286357E12, 9.25], [1.72863894E12, 19.3], [1.72863792E12, 16.8], [1.72864236E12, 0.5833333333333334], [1.72863774E12, 16.366666666666667], [1.72863996E12, 19.1], [1.72863672E12, 10.533333333333333], [1.72864134E12, 19.116666666666667], [1.72864218E12, 18.866666666666667], [1.72863588E12, 9.366666666666667], [1.7286381E12, 16.3], [1.72864032E12, 19.016666666666666], [1.72864014E12, 20.1], [1.72864116E12, 19.916666666666668], [1.7286369E12, 16.3], [1.72863912E12, 17.85]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72864236E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.72863498E12, "maxY": 20.9, "series": [{"data": [[1.72863798E12, 17.316666666666666], [1.7286402E12, 18.866666666666667], [1.72863696E12, 17.116666666666667], [1.7286414E12, 19.683333333333334], [1.72863576E12, 9.95], [1.72863678E12, 10.033333333333333], [1.728639E12, 18.05], [1.72864038E12, 19.3], [1.72864122E12, 19.7], [1.72863714E12, 16.916666666666668], [1.72863936E12, 19.116666666666667], [1.72863594E12, 10.0], [1.72863918E12, 19.266666666666666], [1.72863816E12, 17.416666666666668], [1.72864104E12, 18.95], [1.7286354E12, 9.05], [1.72863762E12, 17.516666666666666], [1.72863984E12, 19.666666666666668], [1.72864206E12, 20.25], [1.72863966E12, 19.35], [1.72864224E12, 19.433333333333334], [1.72863642E12, 10.25], [1.72863864E12, 16.533333333333335], [1.7286378E12, 16.466666666666665], [1.72863558E12, 9.516666666666667], [1.72864002E12, 19.2], [1.72864188E12, 19.45], [1.7286366E12, 9.9], [1.72863882E12, 20.05], [1.72864086E12, 19.816666666666666], [1.7286399E12, 19.616666666666667], [1.72863666E12, 9.45], [1.72863888E12, 19.6], [1.7286411E12, 19.466666666666665], [1.72863546E12, 9.9], [1.7286387E12, 16.283333333333335], [1.72864128E12, 19.616666666666667], [1.72863768E12, 17.1], [1.7286423E12, 18.216666666666665], [1.72863684E12, 8.233333333333333], [1.72863906E12, 19.1], [1.72864092E12, 20.766666666666666], [1.72864212E12, 19.933333333333334], [1.72863564E12, 9.116666666666667], [1.72863786E12, 16.15], [1.72864008E12, 19.116666666666667], [1.72863732E12, 17.55], [1.72864074E12, 20.6], [1.72863954E12, 18.716666666666665], [1.7286351E12, 5.133333333333334], [1.72864194E12, 20.233333333333334], [1.72863612E12, 9.8], [1.72863834E12, 16.416666666666668], [1.72864056E12, 18.4], [1.7286375E12, 16.683333333333334], [1.72863972E12, 19.383333333333333], [1.72863648E12, 9.266666666666667], [1.72864158E12, 19.666666666666668], [1.72864176E12, 18.55], [1.72863528E12, 9.633333333333333], [1.7286363E12, 10.05], [1.72863852E12, 16.666666666666668], [1.728642E12, 19.65], [1.72863636E12, 9.666666666666666], [1.72863858E12, 16.65], [1.72864098E12, 20.216666666666665], [1.72863738E12, 16.85], [1.7286396E12, 18.316666666666666], [1.72863516E12, 4.583333333333333], [1.72863552E12, 9.983333333333333], [1.72863654E12, 9.266666666666667], [1.72863876E12, 9.416666666666666], [1.72864062E12, 18.533333333333335], [1.72863756E12, 16.583333333333332], [1.7286408E12, 19.883333333333333], [1.72863534E12, 9.933333333333334], [1.72863978E12, 18.566666666666666], [1.72864182E12, 19.8], [1.728636E12, 10.316666666666666], [1.72863702E12, 17.15], [1.72863924E12, 18.483333333333334], [1.72863804E12, 17.116666666666667], [1.72863582E12, 9.816666666666666], [1.72864026E12, 18.683333333333334], [1.72864164E12, 19.1], [1.72863618E12, 9.516666666666667], [1.72863942E12, 19.05], [1.7286384E12, 16.483333333333334], [1.72863498E12, 4.733333333333333], [1.72863822E12, 16.95], [1.72864044E12, 20.383333333333333], [1.72864146E12, 20.9], [1.7286372E12, 17.166666666666668], [1.72863828E12, 17.15], [1.7286417E12, 19.483333333333334], [1.72863504E12, 5.15], [1.72863606E12, 10.15], [1.72863708E12, 16.583333333333332], [1.7286393E12, 19.633333333333333], [1.72864068E12, 9.133333333333333], [1.72863522E12, 9.633333333333333], [1.72864152E12, 19.983333333333334], [1.72863846E12, 16.8], [1.72863744E12, 16.15], [1.72863624E12, 10.05], [1.72863948E12, 19.416666666666668], [1.72863726E12, 16.616666666666667], [1.7286405E12, 18.333333333333332], [1.7286357E12, 9.25], [1.72863894E12, 19.3], [1.72863792E12, 16.8], [1.72864236E12, 0.5833333333333334], [1.72863774E12, 16.366666666666667], [1.72863996E12, 19.1], [1.72863672E12, 10.533333333333333], [1.72864134E12, 19.116666666666667], [1.72864218E12, 18.866666666666667], [1.72863588E12, 9.366666666666667], [1.7286381E12, 16.3], [1.72864032E12, 19.016666666666666], [1.72864014E12, 20.1], [1.72864116E12, 19.916666666666668], [1.7286369E12, 16.3], [1.72863912E12, 17.85]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72864236E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.72863498E12, "maxY": 20.9, "series": [{"data": [[1.72863798E12, 17.316666666666666], [1.7286402E12, 18.866666666666667], [1.72863696E12, 17.116666666666667], [1.7286414E12, 19.683333333333334], [1.72863576E12, 9.95], [1.72863678E12, 10.033333333333333], [1.728639E12, 18.05], [1.72864038E12, 19.3], [1.72864122E12, 19.7], [1.72863714E12, 16.916666666666668], [1.72863936E12, 19.116666666666667], [1.72863594E12, 10.0], [1.72863918E12, 19.266666666666666], [1.72863816E12, 17.416666666666668], [1.72864104E12, 18.95], [1.7286354E12, 9.05], [1.72863762E12, 17.516666666666666], [1.72863984E12, 19.666666666666668], [1.72864206E12, 20.25], [1.72863966E12, 19.35], [1.72864224E12, 19.433333333333334], [1.72863642E12, 10.25], [1.72863864E12, 16.533333333333335], [1.7286378E12, 16.466666666666665], [1.72863558E12, 9.516666666666667], [1.72864002E12, 19.2], [1.72864188E12, 19.45], [1.7286366E12, 9.9], [1.72863882E12, 20.05], [1.72864086E12, 19.816666666666666], [1.7286399E12, 19.616666666666667], [1.72863666E12, 9.45], [1.72863888E12, 19.6], [1.7286411E12, 19.466666666666665], [1.72863546E12, 9.9], [1.7286387E12, 16.283333333333335], [1.72864128E12, 19.616666666666667], [1.72863768E12, 17.1], [1.7286423E12, 18.216666666666665], [1.72863684E12, 8.233333333333333], [1.72863906E12, 19.1], [1.72864092E12, 20.766666666666666], [1.72864212E12, 19.933333333333334], [1.72863564E12, 9.116666666666667], [1.72863786E12, 16.15], [1.72864008E12, 19.116666666666667], [1.72863732E12, 17.55], [1.72864074E12, 20.6], [1.72863954E12, 18.716666666666665], [1.7286351E12, 5.133333333333334], [1.72864194E12, 20.233333333333334], [1.72863612E12, 9.8], [1.72863834E12, 16.416666666666668], [1.72864056E12, 18.4], [1.7286375E12, 16.683333333333334], [1.72863972E12, 19.383333333333333], [1.72863648E12, 9.266666666666667], [1.72864158E12, 19.666666666666668], [1.72864176E12, 18.55], [1.72863528E12, 9.633333333333333], [1.7286363E12, 10.05], [1.72863852E12, 16.666666666666668], [1.728642E12, 19.65], [1.72863636E12, 9.666666666666666], [1.72863858E12, 16.65], [1.72864098E12, 20.216666666666665], [1.72863738E12, 16.85], [1.7286396E12, 18.316666666666666], [1.72863516E12, 4.583333333333333], [1.72863552E12, 9.983333333333333], [1.72863654E12, 9.266666666666667], [1.72863876E12, 9.416666666666666], [1.72864062E12, 18.533333333333335], [1.72863756E12, 16.583333333333332], [1.7286408E12, 19.883333333333333], [1.72863534E12, 9.933333333333334], [1.72863978E12, 18.566666666666666], [1.72864182E12, 19.8], [1.728636E12, 10.316666666666666], [1.72863702E12, 17.15], [1.72863924E12, 18.483333333333334], [1.72863804E12, 17.116666666666667], [1.72863582E12, 9.816666666666666], [1.72864026E12, 18.683333333333334], [1.72864164E12, 19.1], [1.72863618E12, 9.516666666666667], [1.72863942E12, 19.05], [1.7286384E12, 16.483333333333334], [1.72863498E12, 4.733333333333333], [1.72863822E12, 16.95], [1.72864044E12, 20.383333333333333], [1.72864146E12, 20.9], [1.7286372E12, 17.166666666666668], [1.72863828E12, 17.15], [1.7286417E12, 19.483333333333334], [1.72863504E12, 5.15], [1.72863606E12, 10.15], [1.72863708E12, 16.583333333333332], [1.7286393E12, 19.633333333333333], [1.72864068E12, 9.133333333333333], [1.72863522E12, 9.633333333333333], [1.72864152E12, 19.983333333333334], [1.72863846E12, 16.8], [1.72863744E12, 16.15], [1.72863624E12, 10.05], [1.72863948E12, 19.416666666666668], [1.72863726E12, 16.616666666666667], [1.7286405E12, 18.333333333333332], [1.7286357E12, 9.25], [1.72863894E12, 19.3], [1.72863792E12, 16.8], [1.72864236E12, 0.5833333333333334], [1.72863774E12, 16.366666666666667], [1.72863996E12, 19.1], [1.72863672E12, 10.533333333333333], [1.72864134E12, 19.116666666666667], [1.72864218E12, 18.866666666666667], [1.72863588E12, 9.366666666666667], [1.7286381E12, 16.3], [1.72864032E12, 19.016666666666666], [1.72864014E12, 20.1], [1.72864116E12, 19.916666666666668], [1.7286369E12, 16.3], [1.72863912E12, 17.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72864236E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

