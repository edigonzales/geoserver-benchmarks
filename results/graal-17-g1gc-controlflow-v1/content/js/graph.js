/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 30.0, "minX": 0.0, "maxY": 4297.0, "series": [{"data": [[0.0, 30.0], [0.1, 39.0], [0.2, 42.0], [0.3, 44.0], [0.4, 46.0], [0.5, 48.0], [0.6, 49.0], [0.7, 50.0], [0.8, 52.0], [0.9, 53.0], [1.0, 54.0], [1.1, 55.0], [1.2, 56.0], [1.3, 56.0], [1.4, 57.0], [1.5, 58.0], [1.6, 59.0], [1.7, 60.0], [1.8, 60.0], [1.9, 61.0], [2.0, 62.0], [2.1, 63.0], [2.2, 63.0], [2.3, 64.0], [2.4, 64.0], [2.5, 65.0], [2.6, 66.0], [2.7, 66.0], [2.8, 67.0], [2.9, 68.0], [3.0, 68.0], [3.1, 69.0], [3.2, 70.0], [3.3, 70.0], [3.4, 71.0], [3.5, 71.0], [3.6, 72.0], [3.7, 73.0], [3.8, 73.0], [3.9, 74.0], [4.0, 74.0], [4.1, 75.0], [4.2, 76.0], [4.3, 76.0], [4.4, 77.0], [4.5, 77.0], [4.6, 78.0], [4.7, 78.0], [4.8, 79.0], [4.9, 79.0], [5.0, 80.0], [5.1, 80.0], [5.2, 81.0], [5.3, 81.0], [5.4, 82.0], [5.5, 82.0], [5.6, 83.0], [5.7, 83.0], [5.8, 84.0], [5.9, 84.0], [6.0, 85.0], [6.1, 85.0], [6.2, 86.0], [6.3, 86.0], [6.4, 87.0], [6.5, 87.0], [6.6, 88.0], [6.7, 88.0], [6.8, 89.0], [6.9, 89.0], [7.0, 90.0], [7.1, 90.0], [7.2, 91.0], [7.3, 91.0], [7.4, 92.0], [7.5, 92.0], [7.6, 93.0], [7.7, 93.0], [7.8, 94.0], [7.9, 94.0], [8.0, 95.0], [8.1, 95.0], [8.2, 96.0], [8.3, 96.0], [8.4, 97.0], [8.5, 97.0], [8.6, 98.0], [8.7, 98.0], [8.8, 99.0], [8.9, 99.0], [9.0, 100.0], [9.1, 100.0], [9.2, 101.0], [9.3, 101.0], [9.4, 102.0], [9.5, 102.0], [9.6, 103.0], [9.7, 103.0], [9.8, 104.0], [9.9, 105.0], [10.0, 105.0], [10.1, 106.0], [10.2, 106.0], [10.3, 107.0], [10.4, 107.0], [10.5, 108.0], [10.6, 108.0], [10.7, 109.0], [10.8, 110.0], [10.9, 110.0], [11.0, 111.0], [11.1, 111.0], [11.2, 112.0], [11.3, 112.0], [11.4, 113.0], [11.5, 113.0], [11.6, 114.0], [11.7, 115.0], [11.8, 115.0], [11.9, 116.0], [12.0, 117.0], [12.1, 117.0], [12.2, 118.0], [12.3, 118.0], [12.4, 119.0], [12.5, 120.0], [12.6, 120.0], [12.7, 121.0], [12.8, 122.0], [12.9, 122.0], [13.0, 123.0], [13.1, 124.0], [13.2, 124.0], [13.3, 125.0], [13.4, 126.0], [13.5, 126.0], [13.6, 127.0], [13.7, 128.0], [13.8, 128.0], [13.9, 129.0], [14.0, 130.0], [14.1, 130.0], [14.2, 131.0], [14.3, 132.0], [14.4, 132.0], [14.5, 133.0], [14.6, 134.0], [14.7, 134.0], [14.8, 135.0], [14.9, 136.0], [15.0, 137.0], [15.1, 137.0], [15.2, 138.0], [15.3, 139.0], [15.4, 140.0], [15.5, 140.0], [15.6, 141.0], [15.7, 142.0], [15.8, 143.0], [15.9, 144.0], [16.0, 144.0], [16.1, 145.0], [16.2, 146.0], [16.3, 147.0], [16.4, 147.0], [16.5, 148.0], [16.6, 149.0], [16.7, 150.0], [16.8, 151.0], [16.9, 152.0], [17.0, 153.0], [17.1, 154.0], [17.2, 155.0], [17.3, 155.0], [17.4, 156.0], [17.5, 157.0], [17.6, 158.0], [17.7, 159.0], [17.8, 160.0], [17.9, 161.0], [18.0, 162.0], [18.1, 163.0], [18.2, 164.0], [18.3, 165.0], [18.4, 166.0], [18.5, 167.0], [18.6, 169.0], [18.7, 170.0], [18.8, 171.0], [18.9, 172.0], [19.0, 173.0], [19.1, 174.0], [19.2, 175.0], [19.3, 176.0], [19.4, 178.0], [19.5, 179.0], [19.6, 180.0], [19.7, 181.0], [19.8, 182.0], [19.9, 184.0], [20.0, 185.0], [20.1, 186.0], [20.2, 187.0], [20.3, 188.0], [20.4, 189.0], [20.5, 190.0], [20.6, 192.0], [20.7, 193.0], [20.8, 194.0], [20.9, 196.0], [21.0, 197.0], [21.1, 198.0], [21.2, 199.0], [21.3, 201.0], [21.4, 202.0], [21.5, 203.0], [21.6, 204.0], [21.7, 206.0], [21.8, 207.0], [21.9, 208.0], [22.0, 209.0], [22.1, 211.0], [22.2, 212.0], [22.3, 213.0], [22.4, 215.0], [22.5, 216.0], [22.6, 218.0], [22.7, 219.0], [22.8, 220.0], [22.9, 222.0], [23.0, 223.0], [23.1, 224.0], [23.2, 226.0], [23.3, 227.0], [23.4, 229.0], [23.5, 230.0], [23.6, 231.0], [23.7, 233.0], [23.8, 235.0], [23.9, 236.0], [24.0, 237.0], [24.1, 239.0], [24.2, 240.0], [24.3, 242.0], [24.4, 244.0], [24.5, 245.0], [24.6, 246.0], [24.7, 248.0], [24.8, 249.0], [24.9, 251.0], [25.0, 252.0], [25.1, 254.0], [25.2, 256.0], [25.3, 257.0], [25.4, 259.0], [25.5, 260.0], [25.6, 262.0], [25.7, 263.0], [25.8, 265.0], [25.9, 267.0], [26.0, 268.0], [26.1, 270.0], [26.2, 272.0], [26.3, 274.0], [26.4, 275.0], [26.5, 277.0], [26.6, 278.0], [26.7, 280.0], [26.8, 282.0], [26.9, 284.0], [27.0, 285.0], [27.1, 287.0], [27.2, 289.0], [27.3, 291.0], [27.4, 292.0], [27.5, 294.0], [27.6, 296.0], [27.7, 298.0], [27.8, 300.0], [27.9, 302.0], [28.0, 304.0], [28.1, 305.0], [28.2, 307.0], [28.3, 309.0], [28.4, 311.0], [28.5, 313.0], [28.6, 315.0], [28.7, 316.0], [28.8, 318.0], [28.9, 320.0], [29.0, 322.0], [29.1, 324.0], [29.2, 326.0], [29.3, 327.0], [29.4, 329.0], [29.5, 331.0], [29.6, 334.0], [29.7, 336.0], [29.8, 337.0], [29.9, 339.0], [30.0, 341.0], [30.1, 343.0], [30.2, 346.0], [30.3, 348.0], [30.4, 350.0], [30.5, 352.0], [30.6, 354.0], [30.7, 356.0], [30.8, 358.0], [30.9, 360.0], [31.0, 362.0], [31.1, 364.0], [31.2, 366.0], [31.3, 369.0], [31.4, 370.0], [31.5, 373.0], [31.6, 375.0], [31.7, 377.0], [31.8, 380.0], [31.9, 382.0], [32.0, 384.0], [32.1, 387.0], [32.2, 389.0], [32.3, 391.0], [32.4, 393.0], [32.5, 395.0], [32.6, 397.0], [32.7, 399.0], [32.8, 402.0], [32.9, 404.0], [33.0, 407.0], [33.1, 409.0], [33.2, 412.0], [33.3, 415.0], [33.4, 418.0], [33.5, 420.0], [33.6, 423.0], [33.7, 425.0], [33.8, 428.0], [33.9, 430.0], [34.0, 433.0], [34.1, 435.0], [34.2, 437.0], [34.3, 440.0], [34.4, 442.0], [34.5, 445.0], [34.6, 447.0], [34.7, 450.0], [34.8, 452.0], [34.9, 455.0], [35.0, 457.0], [35.1, 460.0], [35.2, 462.0], [35.3, 465.0], [35.4, 468.0], [35.5, 471.0], [35.6, 473.0], [35.7, 476.0], [35.8, 478.0], [35.9, 481.0], [36.0, 483.0], [36.1, 486.0], [36.2, 489.0], [36.3, 492.0], [36.4, 494.0], [36.5, 497.0], [36.6, 499.0], [36.7, 501.0], [36.8, 504.0], [36.9, 507.0], [37.0, 509.0], [37.1, 512.0], [37.2, 514.0], [37.3, 517.0], [37.4, 520.0], [37.5, 522.0], [37.6, 525.0], [37.7, 527.0], [37.8, 529.0], [37.9, 531.0], [38.0, 534.0], [38.1, 537.0], [38.2, 539.0], [38.3, 542.0], [38.4, 544.0], [38.5, 547.0], [38.6, 549.0], [38.7, 552.0], [38.8, 555.0], [38.9, 557.0], [39.0, 560.0], [39.1, 562.0], [39.2, 565.0], [39.3, 568.0], [39.4, 570.0], [39.5, 572.0], [39.6, 575.0], [39.7, 577.0], [39.8, 579.0], [39.9, 582.0], [40.0, 584.0], [40.1, 587.0], [40.2, 589.0], [40.3, 592.0], [40.4, 594.0], [40.5, 597.0], [40.6, 599.0], [40.7, 602.0], [40.8, 604.0], [40.9, 606.0], [41.0, 609.0], [41.1, 611.0], [41.2, 613.0], [41.3, 615.0], [41.4, 618.0], [41.5, 620.0], [41.6, 622.0], [41.7, 624.0], [41.8, 627.0], [41.9, 629.0], [42.0, 631.0], [42.1, 633.0], [42.2, 636.0], [42.3, 638.0], [42.4, 640.0], [42.5, 642.0], [42.6, 644.0], [42.7, 647.0], [42.8, 649.0], [42.9, 651.0], [43.0, 653.0], [43.1, 655.0], [43.2, 658.0], [43.3, 660.0], [43.4, 662.0], [43.5, 664.0], [43.6, 667.0], [43.7, 669.0], [43.8, 671.0], [43.9, 673.0], [44.0, 676.0], [44.1, 678.0], [44.2, 680.0], [44.3, 682.0], [44.4, 684.0], [44.5, 686.0], [44.6, 688.0], [44.7, 691.0], [44.8, 693.0], [44.9, 695.0], [45.0, 697.0], [45.1, 700.0], [45.2, 702.0], [45.3, 704.0], [45.4, 706.0], [45.5, 708.0], [45.6, 711.0], [45.7, 713.0], [45.8, 715.0], [45.9, 717.0], [46.0, 719.0], [46.1, 721.0], [46.2, 723.0], [46.3, 725.0], [46.4, 727.0], [46.5, 729.0], [46.6, 731.0], [46.7, 733.0], [46.8, 735.0], [46.9, 737.0], [47.0, 739.0], [47.1, 741.0], [47.2, 744.0], [47.3, 746.0], [47.4, 748.0], [47.5, 750.0], [47.6, 752.0], [47.7, 754.0], [47.8, 756.0], [47.9, 758.0], [48.0, 760.0], [48.1, 762.0], [48.2, 764.0], [48.3, 766.0], [48.4, 769.0], [48.5, 771.0], [48.6, 773.0], [48.7, 775.0], [48.8, 777.0], [48.9, 779.0], [49.0, 781.0], [49.1, 783.0], [49.2, 785.0], [49.3, 787.0], [49.4, 790.0], [49.5, 792.0], [49.6, 793.0], [49.7, 795.0], [49.8, 797.0], [49.9, 799.0], [50.0, 801.0], [50.1, 803.0], [50.2, 806.0], [50.3, 808.0], [50.4, 809.0], [50.5, 811.0], [50.6, 814.0], [50.7, 815.0], [50.8, 818.0], [50.9, 820.0], [51.0, 822.0], [51.1, 824.0], [51.2, 825.0], [51.3, 827.0], [51.4, 829.0], [51.5, 831.0], [51.6, 833.0], [51.7, 835.0], [51.8, 837.0], [51.9, 839.0], [52.0, 841.0], [52.1, 843.0], [52.2, 845.0], [52.3, 847.0], [52.4, 848.0], [52.5, 850.0], [52.6, 852.0], [52.7, 854.0], [52.8, 856.0], [52.9, 858.0], [53.0, 860.0], [53.1, 862.0], [53.2, 864.0], [53.3, 866.0], [53.4, 868.0], [53.5, 870.0], [53.6, 872.0], [53.7, 875.0], [53.8, 876.0], [53.9, 878.0], [54.0, 880.0], [54.1, 882.0], [54.2, 884.0], [54.3, 886.0], [54.4, 887.0], [54.5, 889.0], [54.6, 891.0], [54.7, 893.0], [54.8, 895.0], [54.9, 897.0], [55.0, 899.0], [55.1, 900.0], [55.2, 902.0], [55.3, 904.0], [55.4, 906.0], [55.5, 908.0], [55.6, 910.0], [55.7, 912.0], [55.8, 914.0], [55.9, 915.0], [56.0, 917.0], [56.1, 919.0], [56.2, 921.0], [56.3, 922.0], [56.4, 924.0], [56.5, 926.0], [56.6, 928.0], [56.7, 930.0], [56.8, 932.0], [56.9, 934.0], [57.0, 935.0], [57.1, 937.0], [57.2, 939.0], [57.3, 941.0], [57.4, 943.0], [57.5, 945.0], [57.6, 947.0], [57.7, 949.0], [57.8, 951.0], [57.9, 953.0], [58.0, 954.0], [58.1, 956.0], [58.2, 958.0], [58.3, 960.0], [58.4, 962.0], [58.5, 963.0], [58.6, 965.0], [58.7, 967.0], [58.8, 969.0], [58.9, 971.0], [59.0, 972.0], [59.1, 974.0], [59.2, 976.0], [59.3, 978.0], [59.4, 980.0], [59.5, 982.0], [59.6, 984.0], [59.7, 985.0], [59.8, 987.0], [59.9, 989.0], [60.0, 991.0], [60.1, 993.0], [60.2, 995.0], [60.3, 997.0], [60.4, 999.0], [60.5, 1000.0], [60.6, 1002.0], [60.7, 1004.0], [60.8, 1006.0], [60.9, 1007.0], [61.0, 1009.0], [61.1, 1011.0], [61.2, 1013.0], [61.3, 1015.0], [61.4, 1017.0], [61.5, 1018.0], [61.6, 1020.0], [61.7, 1022.0], [61.8, 1024.0], [61.9, 1026.0], [62.0, 1028.0], [62.1, 1029.0], [62.2, 1031.0], [62.3, 1033.0], [62.4, 1035.0], [62.5, 1036.0], [62.6, 1038.0], [62.7, 1040.0], [62.8, 1042.0], [62.9, 1044.0], [63.0, 1046.0], [63.1, 1048.0], [63.2, 1049.0], [63.3, 1051.0], [63.4, 1053.0], [63.5, 1055.0], [63.6, 1057.0], [63.7, 1058.0], [63.8, 1060.0], [63.9, 1062.0], [64.0, 1064.0], [64.1, 1066.0], [64.2, 1068.0], [64.3, 1070.0], [64.4, 1072.0], [64.5, 1073.0], [64.6, 1075.0], [64.7, 1077.0], [64.8, 1079.0], [64.9, 1081.0], [65.0, 1082.0], [65.1, 1084.0], [65.2, 1086.0], [65.3, 1088.0], [65.4, 1090.0], [65.5, 1092.0], [65.6, 1094.0], [65.7, 1096.0], [65.8, 1098.0], [65.9, 1100.0], [66.0, 1101.0], [66.1, 1103.0], [66.2, 1105.0], [66.3, 1107.0], [66.4, 1110.0], [66.5, 1112.0], [66.6, 1113.0], [66.7, 1115.0], [66.8, 1117.0], [66.9, 1119.0], [67.0, 1121.0], [67.1, 1122.0], [67.2, 1124.0], [67.3, 1126.0], [67.4, 1128.0], [67.5, 1130.0], [67.6, 1132.0], [67.7, 1134.0], [67.8, 1136.0], [67.9, 1138.0], [68.0, 1140.0], [68.1, 1142.0], [68.2, 1143.0], [68.3, 1145.0], [68.4, 1147.0], [68.5, 1149.0], [68.6, 1151.0], [68.7, 1153.0], [68.8, 1155.0], [68.9, 1157.0], [69.0, 1158.0], [69.1, 1161.0], [69.2, 1162.0], [69.3, 1164.0], [69.4, 1166.0], [69.5, 1168.0], [69.6, 1170.0], [69.7, 1172.0], [69.8, 1174.0], [69.9, 1176.0], [70.0, 1178.0], [70.1, 1180.0], [70.2, 1182.0], [70.3, 1184.0], [70.4, 1186.0], [70.5, 1188.0], [70.6, 1190.0], [70.7, 1192.0], [70.8, 1194.0], [70.9, 1196.0], [71.0, 1198.0], [71.1, 1200.0], [71.2, 1202.0], [71.3, 1204.0], [71.4, 1206.0], [71.5, 1208.0], [71.6, 1211.0], [71.7, 1213.0], [71.8, 1215.0], [71.9, 1217.0], [72.0, 1219.0], [72.1, 1221.0], [72.2, 1224.0], [72.3, 1226.0], [72.4, 1228.0], [72.5, 1230.0], [72.6, 1232.0], [72.7, 1234.0], [72.8, 1236.0], [72.9, 1238.0], [73.0, 1240.0], [73.1, 1242.0], [73.2, 1245.0], [73.3, 1247.0], [73.4, 1249.0], [73.5, 1251.0], [73.6, 1253.0], [73.7, 1255.0], [73.8, 1258.0], [73.9, 1260.0], [74.0, 1262.0], [74.1, 1264.0], [74.2, 1267.0], [74.3, 1270.0], [74.4, 1272.0], [74.5, 1274.0], [74.6, 1276.0], [74.7, 1279.0], [74.8, 1282.0], [74.9, 1284.0], [75.0, 1287.0], [75.1, 1289.0], [75.2, 1291.0], [75.3, 1293.0], [75.4, 1296.0], [75.5, 1298.0], [75.6, 1301.0], [75.7, 1303.0], [75.8, 1305.0], [75.9, 1308.0], [76.0, 1310.0], [76.1, 1313.0], [76.2, 1315.0], [76.3, 1318.0], [76.4, 1320.0], [76.5, 1322.0], [76.6, 1325.0], [76.7, 1328.0], [76.8, 1330.0], [76.9, 1333.0], [77.0, 1335.0], [77.1, 1339.0], [77.2, 1341.0], [77.3, 1344.0], [77.4, 1347.0], [77.5, 1349.0], [77.6, 1352.0], [77.7, 1355.0], [77.8, 1358.0], [77.9, 1361.0], [78.0, 1363.0], [78.1, 1366.0], [78.2, 1369.0], [78.3, 1371.0], [78.4, 1373.0], [78.5, 1376.0], [78.6, 1379.0], [78.7, 1382.0], [78.8, 1385.0], [78.9, 1388.0], [79.0, 1391.0], [79.1, 1394.0], [79.2, 1397.0], [79.3, 1399.0], [79.4, 1402.0], [79.5, 1405.0], [79.6, 1408.0], [79.7, 1411.0], [79.8, 1414.0], [79.9, 1417.0], [80.0, 1420.0], [80.1, 1424.0], [80.2, 1426.0], [80.3, 1429.0], [80.4, 1432.0], [80.5, 1435.0], [80.6, 1438.0], [80.7, 1441.0], [80.8, 1444.0], [80.9, 1448.0], [81.0, 1451.0], [81.1, 1454.0], [81.2, 1457.0], [81.3, 1460.0], [81.4, 1464.0], [81.5, 1467.0], [81.6, 1470.0], [81.7, 1474.0], [81.8, 1477.0], [81.9, 1480.0], [82.0, 1483.0], [82.1, 1487.0], [82.2, 1491.0], [82.3, 1495.0], [82.4, 1499.0], [82.5, 1502.0], [82.6, 1506.0], [82.7, 1510.0], [82.8, 1514.0], [82.9, 1518.0], [83.0, 1521.0], [83.1, 1525.0], [83.2, 1529.0], [83.3, 1533.0], [83.4, 1537.0], [83.5, 1541.0], [83.6, 1545.0], [83.7, 1549.0], [83.8, 1553.0], [83.9, 1557.0], [84.0, 1562.0], [84.1, 1567.0], [84.2, 1571.0], [84.3, 1575.0], [84.4, 1579.0], [84.5, 1583.0], [84.6, 1588.0], [84.7, 1592.0], [84.8, 1596.0], [84.9, 1601.0], [85.0, 1605.0], [85.1, 1610.0], [85.2, 1614.0], [85.3, 1618.0], [85.4, 1622.0], [85.5, 1627.0], [85.6, 1631.0], [85.7, 1636.0], [85.8, 1640.0], [85.9, 1645.0], [86.0, 1650.0], [86.1, 1654.0], [86.2, 1660.0], [86.3, 1664.0], [86.4, 1668.0], [86.5, 1673.0], [86.6, 1678.0], [86.7, 1683.0], [86.8, 1687.0], [86.9, 1693.0], [87.0, 1697.0], [87.1, 1702.0], [87.2, 1707.0], [87.3, 1712.0], [87.4, 1717.0], [87.5, 1722.0], [87.6, 1727.0], [87.7, 1731.0], [87.8, 1737.0], [87.9, 1741.0], [88.0, 1746.0], [88.1, 1751.0], [88.2, 1757.0], [88.3, 1763.0], [88.4, 1768.0], [88.5, 1773.0], [88.6, 1779.0], [88.7, 1784.0], [88.8, 1789.0], [88.9, 1795.0], [89.0, 1800.0], [89.1, 1806.0], [89.2, 1811.0], [89.3, 1816.0], [89.4, 1821.0], [89.5, 1826.0], [89.6, 1831.0], [89.7, 1836.0], [89.8, 1842.0], [89.9, 1847.0], [90.0, 1853.0], [90.1, 1859.0], [90.2, 1864.0], [90.3, 1870.0], [90.4, 1876.0], [90.5, 1882.0], [90.6, 1889.0], [90.7, 1895.0], [90.8, 1901.0], [90.9, 1907.0], [91.0, 1913.0], [91.1, 1918.0], [91.2, 1926.0], [91.3, 1932.0], [91.4, 1939.0], [91.5, 1945.0], [91.6, 1952.0], [91.7, 1958.0], [91.8, 1966.0], [91.9, 1973.0], [92.0, 1979.0], [92.1, 1986.0], [92.2, 1993.0], [92.3, 1998.0], [92.4, 2006.0], [92.5, 2012.0], [92.6, 2019.0], [92.7, 2025.0], [92.8, 2032.0], [92.9, 2039.0], [93.0, 2046.0], [93.1, 2053.0], [93.2, 2060.0], [93.3, 2067.0], [93.4, 2074.0], [93.5, 2080.0], [93.6, 2088.0], [93.7, 2097.0], [93.8, 2105.0], [93.9, 2111.0], [94.0, 2118.0], [94.1, 2124.0], [94.2, 2130.0], [94.3, 2138.0], [94.4, 2146.0], [94.5, 2154.0], [94.6, 2160.0], [94.7, 2168.0], [94.8, 2177.0], [94.9, 2185.0], [95.0, 2192.0], [95.1, 2201.0], [95.2, 2210.0], [95.3, 2217.0], [95.4, 2226.0], [95.5, 2234.0], [95.6, 2245.0], [95.7, 2256.0], [95.8, 2265.0], [95.9, 2275.0], [96.0, 2285.0], [96.1, 2296.0], [96.2, 2306.0], [96.3, 2316.0], [96.4, 2326.0], [96.5, 2339.0], [96.6, 2350.0], [96.7, 2362.0], [96.8, 2373.0], [96.9, 2383.0], [97.0, 2395.0], [97.1, 2409.0], [97.2, 2421.0], [97.3, 2435.0], [97.4, 2448.0], [97.5, 2461.0], [97.6, 2474.0], [97.7, 2489.0], [97.8, 2504.0], [97.9, 2520.0], [98.0, 2538.0], [98.1, 2555.0], [98.2, 2571.0], [98.3, 2591.0], [98.4, 2611.0], [98.5, 2633.0], [98.6, 2653.0], [98.7, 2679.0], [98.8, 2708.0], [98.9, 2736.0], [99.0, 2764.0], [99.1, 2794.0], [99.2, 2827.0], [99.3, 2862.0], [99.4, 2907.0], [99.5, 2952.0], [99.6, 3014.0], [99.7, 3092.0], [99.8, 3203.0], [99.9, 3351.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 16173.0, "series": [{"data": [[0.0, 11812.0], [600.0, 5928.0], [700.0, 6359.0], [800.0, 6779.0], [900.0, 7128.0], [1000.0, 7183.0], [1100.0, 6832.0], [1200.0, 5916.0], [1300.0, 4966.0], [1400.0, 4107.0], [1500.0, 3224.0], [100.0, 16173.0], [1600.0, 2885.0], [1700.0, 2550.0], [1800.0, 2367.0], [1900.0, 2028.0], [2000.0, 1884.0], [2100.0, 1773.0], [2300.0, 1201.0], [2200.0, 1378.0], [2400.0, 967.0], [2500.0, 750.0], [2600.0, 580.0], [2800.0, 339.0], [2700.0, 455.0], [2900.0, 266.0], [3000.0, 171.0], [3100.0, 115.0], [200.0, 8691.0], [3200.0, 94.0], [3300.0, 63.0], [3400.0, 47.0], [3500.0, 24.0], [3700.0, 8.0], [3600.0, 19.0], [3800.0, 7.0], [3900.0, 2.0], [4000.0, 1.0], [4200.0, 1.0], [4100.0, 1.0], [300.0, 6504.0], [400.0, 5171.0], [500.0, 5251.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 23169.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 60424.0, "series": [{"data": [[0.0, 48407.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 60424.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 23169.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72918002E12, "maxY": 32.0, "series": [{"data": [[1.72918284E12, 12.0], [1.72918254E12, 12.0], [1.72918344E12, 12.0], [1.72918314E12, 12.0], [1.72918212E12, 12.0], [1.72918374E12, 12.0], [1.72918272E12, 12.0], [1.72918242E12, 12.0], [1.72918236E12, 12.0], [1.72918206E12, 12.0], [1.72918296E12, 12.0], [1.72918266E12, 12.0], [1.72918356E12, 12.0], [1.72918326E12, 12.0], [1.72918224E12, 12.0], [1.72918386E12, 8.101990049751226], [1.7291835E12, 12.0], [1.7291838E12, 11.592809364548486], [1.72918248E12, 12.0], [1.72918218E12, 12.0], [1.72918308E12, 12.0], [1.72918278E12, 12.0], [1.72918338E12, 12.0], [1.72918368E12, 12.0], [1.72918332E12, 12.0], [1.72918302E12, 12.0], [1.729182E12, 11.923857868020306], [1.72918362E12, 12.0], [1.72918392E12, 1.0], [1.7291826E12, 12.0], [1.7291823E12, 12.0], [1.7291832E12, 12.0], [1.7291829E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72918446E12, 16.0], [1.72918476E12, 16.0], [1.72918506E12, 16.0], [1.72918536E12, 16.0], [1.72918404E12, 16.0], [1.72918434E12, 16.0], [1.72918464E12, 16.0], [1.72918398E12, 16.0], [1.72918428E12, 16.0], [1.72918458E12, 16.0], [1.72918488E12, 16.0], [1.72918518E12, 16.0], [1.72918548E12, 15.547721410146176], [1.72918416E12, 16.0], [1.72918542E12, 16.0], [1.7291841E12, 16.0], [1.7291844E12, 16.0], [1.7291847E12, 16.0], [1.729185E12, 16.0], [1.7291853E12, 16.0], [1.72918494E12, 16.0], [1.72918524E12, 16.0], [1.72918554E12, 9.703703703703718], [1.72918392E12, 15.919786096256672], [1.72918422E12, 16.0], [1.72918452E12, 16.0], [1.72918482E12, 16.0], [1.72918512E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.72918122E12, 8.0], [1.72918062E12, 8.0], [1.72918152E12, 8.0], [1.72918092E12, 8.0], [1.7291805E12, 8.0], [1.7291808E12, 8.0], [1.72918182E12, 8.0], [1.7291802E12, 8.0], [1.72918074E12, 8.0], [1.72918104E12, 8.0], [1.72918014E12, 8.0], [1.72918044E12, 8.0], [1.72918002E12, 7.985611510791369], [1.72918164E12, 8.0], [1.72918032E12, 8.0], [1.72918134E12, 8.0], [1.72918194E12, 5.823240589198035], [1.72918026E12, 8.0], [1.72918188E12, 8.0], [1.72918056E12, 8.0], [1.72918158E12, 8.0], [1.72918146E12, 8.0], [1.72918086E12, 8.0], [1.72918176E12, 8.0], [1.72918116E12, 8.0], [1.72918008E12, 8.0], [1.7291811E12, 8.0], [1.729182E12, 1.0], [1.7291814E12, 8.0], [1.7291817E12, 8.0], [1.72918098E12, 8.0], [1.72918128E12, 8.0], [1.72918038E12, 8.0], [1.72918068E12, 8.0]], "isOverall": false, "label": "8", "isController": false}, {"data": [[1.72918656E12, 32.0], [1.72918626E12, 32.0], [1.72918596E12, 32.0], [1.72918566E12, 32.0], [1.72918698E12, 32.0], [1.72918668E12, 32.0], [1.72918638E12, 32.0], [1.72918608E12, 32.0], [1.72918578E12, 32.0], [1.7291871E12, 32.0], [1.7291868E12, 32.0], [1.7291865E12, 32.0], [1.7291862E12, 32.0], [1.7291859E12, 32.0], [1.72918692E12, 32.0], [1.72918662E12, 32.0], [1.72918632E12, 32.0], [1.72918602E12, 32.0], [1.72918572E12, 32.0], [1.7291856E12, 32.0], [1.72918704E12, 32.0], [1.72918674E12, 32.0], [1.72918554E12, 31.690476190476197], [1.72918644E12, 32.0], [1.72918614E12, 32.0], [1.72918584E12, 32.0], [1.72918716E12, 26.334619093539033], [1.72918686E12, 32.0]], "isOverall": false, "label": "32", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918716E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 384.2448979591837, "minX": 1.0, "maxY": 1815.75, "series": [{"data": [[2.0, 384.2448979591837], [32.0, 1641.0629083920496], [3.0, 399.9145299145299], [4.0, 431.062893081761], [5.0, 468.90756302521015], [6.0, 456.8398576512455], [7.0, 506.2134831460674], [8.0, 476.84219205886035], [9.0, 540.4736842105264], [10.0, 562.5492424242424], [11.0, 579.8800578034683], [12.0, 627.6299761774922], [13.0, 690.6205357142858], [14.0, 640.633333333333], [15.0, 767.0514705882351], [1.0, 407.27722772277224], [16.0, 820.1248639651774], [17.0, 835.25], [18.0, 904.5454545454546], [19.0, 1057.43137254902], [20.0, 991.125], [21.0, 742.5], [22.0, 1186.0416666666667], [23.0, 1501.0], [24.0, 1290.6363636363637], [25.0, 1109.75], [26.0, 1371.0571428571423], [27.0, 1815.75], [28.0, 1626.7012987012984], [29.0, 1335.8333333333333], [30.0, 1540.942857142857], [31.0, 1595.6261398176284]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[16.7335530303031, 879.2655000000084]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72918002E12, "maxY": 6.08510772E7, "series": [{"data": [[1.72918122E12, 5.200324331666667E7], [1.72918446E12, 5.9930128833333336E7], [1.72918344E12, 5.58529515E7], [1.72918566E12, 5.9751219266666666E7], [1.72918668E12, 5.877725563333333E7], [1.7291802E12, 5.06617766E7], [1.72918242E12, 5.7909685E7], [1.72918464E12, 5.80030853E7], [1.72918104E12, 4.906732328333333E7], [1.72918206E12, 5.83350588E7], [1.72918428E12, 5.837250245E7], [1.72918002E12, 7601572.083333333], [1.72918326E12, 5.909103745E7], [1.72918548E12, 5.9973407916666664E7], [1.7291865E12, 5.7538090666666664E7], [1.72918224E12, 5.76575691E7], [1.72918188E12, 5.020727081666667E7], [1.7291841E12, 5.8151474266666666E7], [1.72918308E12, 5.7892283266666666E7], [1.72918632E12, 5.812009125E7], [1.72918086E12, 5.224782456666667E7], [1.7291853E12, 5.91669629E7], [1.72918494E12, 5.940014688333333E7], [1.7291817E12, 5.0662025266666666E7], [1.72918392E12, 5.37403456E7], [1.72918614E12, 5.971828046666667E7], [1.72918716E12, 5.418253088333333E7], [1.72918068E12, 5.2169966233333334E7], [1.7291829E12, 5.7232359E7], [1.72918512E12, 6.0215680166666664E7], [1.72918656E12, 6.08139675E7], [1.72918092E12, 5.062544415E7], [1.72918314E12, 6.0104338916666664E7], [1.72918536E12, 6.003696615E7], [1.72918212E12, 5.8646082766666666E7], [1.72918434E12, 5.93525204E7], [1.72918638E12, 5.782008361666667E7], [1.72918074E12, 5.085663311666667E7], [1.72918398E12, 6.08510772E7], [1.72918296E12, 5.9727373233333334E7], [1.72918518E12, 6.051149256666667E7], [1.7291862E12, 6.050907753333333E7], [1.72918194E12, 3.3668196483333334E7], [1.72918416E12, 6.0028885733333334E7], [1.72918056E12, 5.23386749E7], [1.72918158E12, 5.004889185E7], [1.7291838E12, 5.591266635E7], [1.72918278E12, 5.890691146666667E7], [1.729185E12, 5.803245138333333E7], [1.72918602E12, 5.8259095016666666E7], [1.72918176E12, 5.2111997266666666E7], [1.72918704E12, 5.9773997333333336E7], [1.72918362E12, 6.0236674916666664E7], [1.7291814E12, 5.142723E7], [1.7291826E12, 5.998249286666667E7], [1.72918584E12, 6.017702913333333E7], [1.72918482E12, 5.7439053666666664E7], [1.72918038E12, 5.1680902733333334E7], [1.72918686E12, 5.846620331666667E7], [1.72918284E12, 5.889541443333333E7], [1.72918626E12, 5.949106528333333E7], [1.72918062E12, 4.852343438333333E7], [1.72918506E12, 5.8771820166666664E7], [1.7291808E12, 5.0782108766666666E7], [1.72918182E12, 5.079877831666667E7], [1.72918404E12, 6.0109003083333336E7], [1.72918608E12, 5.881304811666667E7], [1.72918266E12, 5.7291752016666666E7], [1.72918488E12, 5.936426005E7], [1.7291871E12, 5.898324853333333E7], [1.72918044E12, 5.187110586666667E7], [1.72918164E12, 5.141691471666667E7], [1.72918386E12, 4.3485383E7], [1.7291859E12, 5.9598340083333336E7], [1.72918026E12, 5.151177418333333E7], [1.7291835E12, 5.885341731666667E7], [1.72918692E12, 5.970112313333333E7], [1.72918248E12, 5.678901253333333E7], [1.72918146E12, 5.273476755E7], [1.7291847E12, 5.9090648766666666E7], [1.72918572E12, 5.992030603333333E7], [1.72918368E12, 5.82365179E7], [1.72918332E12, 5.918252135E7], [1.72918008E12, 4.868725778333333E7], [1.72918674E12, 6.005887228333333E7], [1.7291811E12, 5.13135557E7], [1.72918554E12, 5.22670249E7], [1.72918128E12, 5.217906086666667E7], [1.7291823E12, 5.9332872516666666E7], [1.72918452E12, 5.877849861666667E7], [1.72918476E12, 5.95461841E7], [1.72918254E12, 6.026085031666667E7], [1.72918152E12, 4.902677268333333E7], [1.72918596E12, 6.032235215E7], [1.7291805E12, 5.17674959E7], [1.72918374E12, 5.7854570666666664E7], [1.72918698E12, 5.95246488E7], [1.72918272E12, 5.907514911666667E7], [1.72918236E12, 5.82042455E7], [1.72918578E12, 6.00235827E7], [1.72918014E12, 4.99362547E7], [1.72918458E12, 5.98539302E7], [1.72918356E12, 5.795090686666667E7], [1.7291868E12, 5.666596878333333E7], [1.72918032E12, 5.223010096666667E7], [1.72918134E12, 5.008845711666667E7], [1.72918542E12, 5.883928138333333E7], [1.72918218E12, 5.682551731666667E7], [1.7291844E12, 5.962220355E7], [1.72918662E12, 5.968954685E7], [1.72918116E12, 4.9517515166666664E7], [1.72918338E12, 5.9438543916666664E7], [1.7291856E12, 5.811543805E7], [1.72918302E12, 5.79156437E7], [1.72918524E12, 6.00225716E7], [1.729182E12, 4.235521485E7], [1.72918644E12, 5.988006953333333E7], [1.72918098E12, 5.1468907833333336E7], [1.72918422E12, 5.7138013166666664E7], [1.7291832E12, 5.86837896E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72918122E12, 0.0], [1.72918446E12, 0.0], [1.72918344E12, 0.0], [1.72918566E12, 0.0], [1.72918668E12, 0.0], [1.7291802E12, 0.0], [1.72918242E12, 0.0], [1.72918464E12, 0.0], [1.72918104E12, 0.0], [1.72918206E12, 0.0], [1.72918428E12, 0.0], [1.72918002E12, 0.0], [1.72918326E12, 0.0], [1.72918548E12, 0.0], [1.7291865E12, 0.0], [1.72918224E12, 0.0], [1.72918188E12, 0.0], [1.7291841E12, 0.0], [1.72918308E12, 0.0], [1.72918632E12, 0.0], [1.72918086E12, 0.0], [1.7291853E12, 0.0], [1.72918494E12, 0.0], [1.7291817E12, 0.0], [1.72918392E12, 0.0], [1.72918614E12, 0.0], [1.72918716E12, 0.0], [1.72918068E12, 0.0], [1.7291829E12, 0.0], [1.72918512E12, 0.0], [1.72918656E12, 0.0], [1.72918092E12, 0.0], [1.72918314E12, 0.0], [1.72918536E12, 0.0], [1.72918212E12, 0.0], [1.72918434E12, 0.0], [1.72918638E12, 0.0], [1.72918074E12, 0.0], [1.72918398E12, 0.0], [1.72918296E12, 0.0], [1.72918518E12, 0.0], [1.7291862E12, 0.0], [1.72918194E12, 0.0], [1.72918416E12, 0.0], [1.72918056E12, 0.0], [1.72918158E12, 0.0], [1.7291838E12, 0.0], [1.72918278E12, 0.0], [1.729185E12, 0.0], [1.72918602E12, 0.0], [1.72918176E12, 0.0], [1.72918704E12, 0.0], [1.72918362E12, 0.0], [1.7291814E12, 0.0], [1.7291826E12, 0.0], [1.72918584E12, 0.0], [1.72918482E12, 0.0], [1.72918038E12, 0.0], [1.72918686E12, 0.0], [1.72918284E12, 0.0], [1.72918626E12, 0.0], [1.72918062E12, 0.0], [1.72918506E12, 0.0], [1.7291808E12, 0.0], [1.72918182E12, 0.0], [1.72918404E12, 0.0], [1.72918608E12, 0.0], [1.72918266E12, 0.0], [1.72918488E12, 0.0], [1.7291871E12, 0.0], [1.72918044E12, 0.0], [1.72918164E12, 0.0], [1.72918386E12, 0.0], [1.7291859E12, 0.0], [1.72918026E12, 0.0], [1.7291835E12, 0.0], [1.72918692E12, 0.0], [1.72918248E12, 0.0], [1.72918146E12, 0.0], [1.7291847E12, 0.0], [1.72918572E12, 0.0], [1.72918368E12, 0.0], [1.72918332E12, 0.0], [1.72918008E12, 0.0], [1.72918674E12, 0.0], [1.7291811E12, 0.0], [1.72918554E12, 0.0], [1.72918128E12, 0.0], [1.7291823E12, 0.0], [1.72918452E12, 0.0], [1.72918476E12, 0.0], [1.72918254E12, 0.0], [1.72918152E12, 0.0], [1.72918596E12, 0.0], [1.7291805E12, 0.0], [1.72918374E12, 0.0], [1.72918698E12, 0.0], [1.72918272E12, 0.0], [1.72918236E12, 0.0], [1.72918578E12, 0.0], [1.72918014E12, 0.0], [1.72918458E12, 0.0], [1.72918356E12, 0.0], [1.7291868E12, 0.0], [1.72918032E12, 0.0], [1.72918134E12, 0.0], [1.72918542E12, 0.0], [1.72918218E12, 0.0], [1.7291844E12, 0.0], [1.72918662E12, 0.0], [1.72918116E12, 0.0], [1.72918338E12, 0.0], [1.7291856E12, 0.0], [1.72918302E12, 0.0], [1.72918524E12, 0.0], [1.729182E12, 0.0], [1.72918644E12, 0.0], [1.72918098E12, 0.0], [1.72918422E12, 0.0], [1.7291832E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918716E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 448.1620294599019, "minX": 1.72918002E12, "maxY": 1772.9298245614023, "series": [{"data": [[1.72918122E12, 465.3949661181032], [1.72918446E12, 835.3115752828538], [1.72918344E12, 610.4262711864393], [1.72918566E12, 1646.5298126064754], [1.72918668E12, 1637.2434042553195], [1.7291802E12, 479.650650650651], [1.72918242E12, 615.7733905579399], [1.72918464E12, 841.9735915492978], [1.72918104E12, 452.0594900849856], [1.72918206E12, 640.6055209260921], [1.72918428E12, 794.6768848384428], [1.72918002E12, 557.0431654676257], [1.72918326E12, 638.2012466607299], [1.72918548E12, 801.9346517626828], [1.7291865E12, 1595.0415282392028], [1.72918224E12, 635.7796460176992], [1.72918188E12, 452.04249291784765], [1.7291841E12, 827.6153846153844], [1.72918308E12, 650.8774954627946], [1.72918632E12, 1675.4549431321082], [1.72918086E12, 494.66084275436776], [1.7291853E12, 823.9356775300172], [1.72918494E12, 813.6173469387755], [1.7291817E12, 485.12981744421893], [1.72918392E12, 784.0574204946986], [1.72918614E12, 1606.1362126245835], [1.72918716E12, 1387.5554484088711], [1.72918068E12, 481.05399999999963], [1.7291829E12, 609.0892098555655], [1.72918512E12, 854.9119217081845], [1.72918656E12, 1613.500838926174], [1.72918092E12, 486.6154628687687], [1.72918314E12, 623.602763385146], [1.72918536E12, 833.161904761905], [1.72918212E12, 638.153641207814], [1.72918434E12, 855.8460161145936], [1.72918638E12, 1584.6669401148467], [1.72918074E12, 470.80078508341535], [1.72918398E12, 810.2504215851616], [1.72918296E12, 615.3220338983053], [1.72918518E12, 834.6829268292678], [1.7291862E12, 1599.4928989139541], [1.72918194E12, 448.1620294599019], [1.72918416E12, 788.3379934210525], [1.72918056E12, 472.47507331378284], [1.72918158E12, 453.93962264150963], [1.7291838E12, 581.1020066889632], [1.72918278E12, 639.8051146384487], [1.729185E12, 782.0089430894307], [1.72918602E12, 1561.7595450852973], [1.72918176E12, 469.31445312500006], [1.72918704E12, 1656.447799827437], [1.72918362E12, 619.7781599312123], [1.7291814E12, 474.4297029702973], [1.7291826E12, 636.5114235500865], [1.72918584E12, 1772.6481994459853], [1.72918482E12, 792.1857379767831], [1.72918038E12, 512.1800643086812], [1.72918686E12, 1586.3344289235802], [1.72918284E12, 642.9540954095415], [1.72918626E12, 1772.9298245614023], [1.72918062E12, 461.77756286266884], [1.72918506E12, 816.5849701110163], [1.7291808E12, 461.94884169884153], [1.72918182E12, 476.53815659068346], [1.72918404E12, 814.9261460101876], [1.72918608E12, 1679.6935908691855], [1.72918266E12, 630.9517120280944], [1.72918488E12, 830.1960447119515], [1.7291871E12, 1559.4513776337126], [1.72918044E12, 478.8605577689238], [1.72918164E12, 497.00310559006203], [1.72918386E12, 526.4639303482584], [1.7291859E12, 1627.5261824324323], [1.72918026E12, 493.7870370370367], [1.7291835E12, 633.4271844660194], [1.72918692E12, 1720.0644007155638], [1.72918248E12, 607.5940928270045], [1.72918146E12, 471.3133595284871], [1.7291847E12, 844.2184210526312], [1.72918572E12, 1717.8367528991982], [1.72918368E12, 650.8336347197095], [1.72918332E12, 640.5523049645395], [1.72918008E12, 490.7126789366056], [1.72918674E12, 1586.4640198511152], [1.7291811E12, 499.35587929240387], [1.72918554E12, 1072.8594040968355], [1.72918128E12, 475.31293188548847], [1.7291823E12, 625.084555651424], [1.72918452E12, 776.348668280872], [1.72918476E12, 829.7256255392588], [1.72918254E12, 645.9811320754711], [1.72918152E12, 463.35072463768097], [1.72918596E12, 1704.8708815672305], [1.7291805E12, 487.6234693877551], [1.72918374E12, 649.0153291253383], [1.72918698E12, 1644.260981912145], [1.72918272E12, 624.0312771503043], [1.72918236E12, 603.6621735467561], [1.72918578E12, 1659.6955767562833], [1.72918014E12, 466.9231517509724], [1.72918458E12, 827.3793103448292], [1.72918356E12, 616.6003430531741], [1.7291868E12, 1638.485055508113], [1.72918032E12, 489.8065173116091], [1.72918134E12, 474.79207920792095], [1.72918542E12, 844.993810786914], [1.72918218E12, 602.6529756915336], [1.7291844E12, 827.652885443583], [1.72918662E12, 1650.3140138408312], [1.72918116E12, 462.2772946859903], [1.72918338E12, 621.9050905953403], [1.7291856E12, 1601.8320738874888], [1.72918302E12, 609.0076271186446], [1.72918524E12, 815.3457627118647], [1.729182E12, 620.5870348139255], [1.72918644E12, 1685.6410934744265], [1.72918098E12, 489.4364191251265], [1.72918422E12, 821.6005110732531], [1.7291832E12, 664.4852398523992]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918716E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 291.4664484451722, "minX": 1.72918002E12, "maxY": 1537.791320406279, "series": [{"data": [[1.72918122E12, 307.50629235237153], [1.72918446E12, 612.9634464751962], [1.72918344E12, 412.32711864406804], [1.72918566E12, 1430.2146507666096], [1.72918668E12, 1420.5855319148943], [1.7291802E12, 319.1961961961965], [1.72918242E12, 415.87725321888377], [1.72918464E12, 623.4744718309852], [1.72918104E12, 302.6647780925399], [1.72918206E12, 430.5939447907394], [1.72918428E12, 586.8127589063791], [1.72918002E12, 377.0431654676259], [1.72918326E12, 427.038290293856], [1.72918548E12, 580.5047291487534], [1.7291865E12, 1389.9667774086379], [1.72918224E12, 424.62654867256623], [1.72918188E12, 301.41737488196435], [1.7291841E12, 609.4736387208302], [1.72918308E12, 437.0735027223233], [1.72918632E12, 1456.7121609798767], [1.72918086E12, 327.212744090442], [1.7291853E12, 605.526586620926], [1.72918494E12, 596.8843537414979], [1.7291817E12, 324.4665314401628], [1.72918392E12, 580.8825088339233], [1.72918614E12, 1395.7500000000007], [1.72918716E12, 1170.436837029895], [1.72918068E12, 319.8370000000004], [1.7291829E12, 406.38487680543784], [1.72918512E12, 626.8327402135228], [1.72918656E12, 1397.507550335568], [1.72918092E12, 325.3112919633778], [1.72918314E12, 414.7305699481862], [1.72918536E12, 612.0865800865795], [1.72918212E12, 427.3339253996447], [1.72918434E12, 629.7815577439578], [1.72918638E12, 1376.9852337981943], [1.72918074E12, 315.1167811579982], [1.72918398E12, 593.9451939291746], [1.72918296E12, 410.08389830508463], [1.72918518E12, 610.7482578397211], [1.7291862E12, 1385.0918964076857], [1.72918194E12, 291.4664484451722], [1.72918416E12, 576.9851973684212], [1.72918056E12, 312.1886608015642], [1.72918158E12, 303.431132075472], [1.7291838E12, 390.0484949832769], [1.72918278E12, 427.49470899470856], [1.729185E12, 576.69268292683], [1.72918602E12, 1356.0942323314387], [1.72918176E12, 312.32128906249983], [1.72918704E12, 1437.968075927522], [1.72918362E12, 410.6629406706793], [1.7291814E12, 314.45346534653487], [1.7291826E12, 425.254833040422], [1.72918584E12, 1535.506001846722], [1.72918482E12, 586.5165837479276], [1.72918038E12, 340.6891747052519], [1.72918686E12, 1378.4856203779786], [1.72918284E12, 427.968496849685], [1.72918626E12, 1537.791320406279], [1.72918062E12, 311.5493230174079], [1.72918506E12, 602.3825789923144], [1.7291808E12, 306.301158301158], [1.72918182E12, 318.4103072348854], [1.72918404E12, 597.5483870967745], [1.72918608E12, 1459.0412642669], [1.72918266E12, 424.98419666373985], [1.72918488E12, 609.8710232158218], [1.7291871E12, 1354.0542949756864], [1.72918044E12, 317.71912350597574], [1.72918164E12, 331.16977225672815], [1.72918386E12, 350.27114427860727], [1.7291859E12, 1412.64358108108], [1.72918026E12, 328.71090534979425], [1.7291835E12, 424.2524271844663], [1.72918692E12, 1492.8103756708415], [1.72918248E12, 406.5046413502111], [1.72918146E12, 309.95284872298623], [1.7291847E12, 622.1149122807018], [1.72918572E12, 1490.469223907224], [1.72918368E12, 436.31555153707114], [1.72918332E12, 427.8670212765952], [1.72918008E12, 326.8885480572599], [1.72918674E12, 1373.4375516956188], [1.7291811E12, 332.3111342351714], [1.72918554E12, 878.6322160148977], [1.72918128E12, 314.64856860809397], [1.7291823E12, 418.8300258843839], [1.72918452E12, 571.7409200968515], [1.72918476E12, 610.8205349439162], [1.72918254E12, 429.07187780772665], [1.72918152E12, 310.9632850241545], [1.72918596E12, 1476.9305431878893], [1.7291805E12, 323.42346938775506], [1.72918374E12, 435.2452660054107], [1.72918698E12, 1426.5486649440122], [1.72918272E12, 415.8045178105989], [1.72918236E12, 403.79780960404344], [1.72918578E12, 1439.4917606244583], [1.72918014E12, 309.85700389105057], [1.72918458E12, 606.7189655172409], [1.72918356E12, 414.47169811320794], [1.7291868E12, 1424.6703672075128], [1.72918032E12, 325.33604887983716], [1.72918134E12, 316.76138613861406], [1.72918542E12, 622.6542882404948], [1.72918218E12, 406.3788767812241], [1.7291844E12, 606.9224806201552], [1.72918662E12, 1430.993944636679], [1.72918116E12, 310.43285024154574], [1.72918338E12, 412.5729076790334], [1.7291856E12, 1391.6960537363584], [1.72918302E12, 407.7254237288135], [1.72918524E12, 601.3067796610159], [1.729182E12, 416.4225690276112], [1.72918644E12, 1461.3924162257506], [1.72918098E12, 324.5086469989823], [1.72918422E12, 605.729982964224], [1.7291832E12, 444.0055350553504]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918716E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72918002E12, "maxY": 4.9E-324, "series": [{"data": [[1.72918122E12, 0.0], [1.72918446E12, 0.0], [1.72918344E12, 0.0], [1.72918566E12, 0.0], [1.72918668E12, 0.0], [1.7291802E12, 0.0], [1.72918242E12, 0.0], [1.72918464E12, 0.0], [1.72918104E12, 0.0], [1.72918206E12, 0.0], [1.72918428E12, 0.0], [1.72918002E12, 0.0], [1.72918326E12, 0.0], [1.72918548E12, 0.0], [1.7291865E12, 0.0], [1.72918224E12, 0.0], [1.72918188E12, 0.0], [1.7291841E12, 0.0], [1.72918308E12, 0.0], [1.72918632E12, 0.0], [1.72918086E12, 0.0], [1.7291853E12, 0.0], [1.72918494E12, 0.0], [1.7291817E12, 0.0], [1.72918392E12, 0.0], [1.72918614E12, 0.0], [1.72918716E12, 0.0], [1.72918068E12, 0.0], [1.7291829E12, 0.0], [1.72918512E12, 0.0], [1.72918656E12, 0.0], [1.72918092E12, 0.0], [1.72918314E12, 0.0], [1.72918536E12, 0.0], [1.72918212E12, 0.0], [1.72918434E12, 0.0], [1.72918638E12, 0.0], [1.72918074E12, 0.0], [1.72918398E12, 0.0], [1.72918296E12, 0.0], [1.72918518E12, 0.0], [1.7291862E12, 0.0], [1.72918194E12, 0.0], [1.72918416E12, 0.0], [1.72918056E12, 0.0], [1.72918158E12, 0.0], [1.7291838E12, 0.0], [1.72918278E12, 0.0], [1.729185E12, 0.0], [1.72918602E12, 0.0], [1.72918176E12, 0.0], [1.72918704E12, 0.0], [1.72918362E12, 0.0], [1.7291814E12, 0.0], [1.7291826E12, 0.0], [1.72918584E12, 0.0], [1.72918482E12, 0.0], [1.72918038E12, 0.0], [1.72918686E12, 0.0], [1.72918284E12, 0.0], [1.72918626E12, 0.0], [1.72918062E12, 0.0], [1.72918506E12, 0.0], [1.7291808E12, 0.0], [1.72918182E12, 0.0], [1.72918404E12, 0.0], [1.72918608E12, 0.0], [1.72918266E12, 0.0], [1.72918488E12, 0.0], [1.7291871E12, 0.0], [1.72918044E12, 0.0], [1.72918164E12, 0.0], [1.72918386E12, 0.0], [1.7291859E12, 0.0], [1.72918026E12, 0.0], [1.7291835E12, 0.0], [1.72918692E12, 0.0], [1.72918248E12, 0.0], [1.72918146E12, 0.0], [1.7291847E12, 0.0], [1.72918572E12, 0.0], [1.72918368E12, 0.0], [1.72918332E12, 0.0], [1.72918008E12, 0.0], [1.72918674E12, 0.0], [1.7291811E12, 0.0], [1.72918554E12, 0.0], [1.72918128E12, 0.0], [1.7291823E12, 0.0], [1.72918452E12, 0.0], [1.72918476E12, 0.0], [1.72918254E12, 0.0], [1.72918152E12, 0.0], [1.72918596E12, 0.0], [1.7291805E12, 0.0], [1.72918374E12, 0.0], [1.72918698E12, 0.0], [1.72918272E12, 0.0], [1.72918236E12, 0.0], [1.72918578E12, 0.0], [1.72918014E12, 0.0], [1.72918458E12, 0.0], [1.72918356E12, 0.0], [1.7291868E12, 0.0], [1.72918032E12, 0.0], [1.72918134E12, 0.0], [1.72918542E12, 0.0], [1.72918218E12, 0.0], [1.7291844E12, 0.0], [1.72918662E12, 0.0], [1.72918116E12, 0.0], [1.72918338E12, 0.0], [1.7291856E12, 0.0], [1.72918302E12, 0.0], [1.72918524E12, 0.0], [1.729182E12, 0.0], [1.72918644E12, 0.0], [1.72918098E12, 0.0], [1.72918422E12, 0.0], [1.7291832E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918716E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.72918002E12, "maxY": 4297.0, "series": [{"data": [[1.72918122E12, 1796.0], [1.72918446E12, 3220.0], [1.72918344E12, 2284.0], [1.72918566E12, 3688.0], [1.72918668E12, 3771.0], [1.7291802E12, 1600.0], [1.72918242E12, 2597.0], [1.72918464E12, 2752.0], [1.72918104E12, 2163.0], [1.72918206E12, 2356.0], [1.72918428E12, 3006.0], [1.72918002E12, 2159.0], [1.72918326E12, 2264.0], [1.72918548E12, 2899.0], [1.7291865E12, 4108.0], [1.72918224E12, 2612.0], [1.72918188E12, 1824.0], [1.7291841E12, 2824.0], [1.72918308E12, 2291.0], [1.72918632E12, 3805.0], [1.72918086E12, 2016.0], [1.7291853E12, 2720.0], [1.72918494E12, 2834.0], [1.7291817E12, 1829.0], [1.72918392E12, 2761.0], [1.72918614E12, 3366.0], [1.72918716E12, 3315.0], [1.72918068E12, 2031.0], [1.7291829E12, 2464.0], [1.72918512E12, 2545.0], [1.72918656E12, 3584.0], [1.72918092E12, 2006.0], [1.72918314E12, 2699.0], [1.72918536E12, 3085.0], [1.72918212E12, 2466.0], [1.72918434E12, 2857.0], [1.72918638E12, 3770.0], [1.72918074E12, 1731.0], [1.72918398E12, 2584.0], [1.72918296E12, 2465.0], [1.72918518E12, 3036.0], [1.7291862E12, 3544.0], [1.72918194E12, 1739.0], [1.72918416E12, 2840.0], [1.72918056E12, 2024.0], [1.72918158E12, 1917.0], [1.7291838E12, 2535.0], [1.72918278E12, 2569.0], [1.729185E12, 2729.0], [1.72918602E12, 3768.0], [1.72918176E12, 1943.0], [1.72918704E12, 3903.0], [1.72918362E12, 2645.0], [1.7291814E12, 1963.0], [1.7291826E12, 2609.0], [1.72918584E12, 4297.0], [1.72918482E12, 2794.0], [1.72918038E12, 2080.0], [1.72918686E12, 3524.0], [1.72918284E12, 2454.0], [1.72918626E12, 3900.0], [1.72918062E12, 1780.0], [1.72918506E12, 2773.0], [1.7291808E12, 1826.0], [1.72918182E12, 1792.0], [1.72918404E12, 2613.0], [1.72918608E12, 3639.0], [1.72918266E12, 2841.0], [1.72918488E12, 2974.0], [1.7291871E12, 3536.0], [1.72918044E12, 1581.0], [1.72918164E12, 1779.0], [1.72918386E12, 1935.0], [1.7291859E12, 3678.0], [1.72918026E12, 1912.0], [1.7291835E12, 2523.0], [1.72918692E12, 4051.0], [1.72918248E12, 2498.0], [1.72918146E12, 1828.0], [1.7291847E12, 2764.0], [1.72918572E12, 3868.0], [1.72918368E12, 2583.0], [1.72918332E12, 2890.0], [1.72918008E12, 1992.0], [1.72918674E12, 3518.0], [1.7291811E12, 1807.0], [1.72918554E12, 3351.0], [1.72918128E12, 1765.0], [1.7291823E12, 2432.0], [1.72918452E12, 2655.0], [1.72918476E12, 2870.0], [1.72918254E12, 2540.0], [1.72918152E12, 1955.0], [1.72918596E12, 3692.0], [1.7291805E12, 2093.0], [1.72918374E12, 2885.0], [1.72918698E12, 3654.0], [1.72918272E12, 2780.0], [1.72918236E12, 2368.0], [1.72918578E12, 3858.0], [1.72918014E12, 1818.0], [1.72918458E12, 2919.0], [1.72918356E12, 2335.0], [1.7291868E12, 3809.0], [1.72918032E12, 2095.0], [1.72918134E12, 1797.0], [1.72918542E12, 2903.0], [1.72918218E12, 2530.0], [1.7291844E12, 2739.0], [1.72918662E12, 3498.0], [1.72918116E12, 2041.0], [1.72918338E12, 2624.0], [1.7291856E12, 3790.0], [1.72918302E12, 2390.0], [1.72918524E12, 2499.0], [1.729182E12, 2489.0], [1.72918644E12, 3744.0], [1.72918098E12, 1736.0], [1.72918422E12, 3014.0], [1.7291832E12, 2528.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72918122E12, 36.0], [1.72918446E12, 94.0], [1.72918344E12, 44.0], [1.72918566E12, 557.0], [1.72918668E12, 547.0], [1.7291802E12, 38.0], [1.72918242E12, 35.0], [1.72918464E12, 91.0], [1.72918104E12, 37.0], [1.72918206E12, 37.0], [1.72918428E12, 102.0], [1.72918002E12, 45.0], [1.72918326E12, 36.0], [1.72918548E12, 79.0], [1.7291865E12, 512.0], [1.72918224E12, 43.0], [1.72918188E12, 33.0], [1.7291841E12, 80.0], [1.72918308E12, 41.0], [1.72918632E12, 599.0], [1.72918086E12, 36.0], [1.7291853E12, 99.0], [1.72918494E12, 81.0], [1.7291817E12, 38.0], [1.72918392E12, 36.0], [1.72918614E12, 106.0], [1.72918716E12, 34.0], [1.72918068E12, 33.0], [1.7291829E12, 36.0], [1.72918512E12, 94.0], [1.72918656E12, 566.0], [1.72918092E12, 34.0], [1.72918314E12, 40.0], [1.72918536E12, 107.0], [1.72918212E12, 34.0], [1.72918434E12, 90.0], [1.72918638E12, 115.0], [1.72918074E12, 36.0], [1.72918398E12, 93.0], [1.72918296E12, 33.0], [1.72918518E12, 84.0], [1.7291862E12, 543.0], [1.72918194E12, 31.0], [1.72918416E12, 93.0], [1.72918056E12, 35.0], [1.72918158E12, 35.0], [1.7291838E12, 38.0], [1.72918278E12, 37.0], [1.729185E12, 88.0], [1.72918602E12, 89.0], [1.72918176E12, 34.0], [1.72918704E12, 592.0], [1.72918362E12, 40.0], [1.7291814E12, 33.0], [1.7291826E12, 39.0], [1.72918584E12, 630.0], [1.72918482E12, 82.0], [1.72918038E12, 36.0], [1.72918686E12, 563.0], [1.72918284E12, 33.0], [1.72918626E12, 505.0], [1.72918062E12, 36.0], [1.72918506E12, 87.0], [1.7291808E12, 34.0], [1.72918182E12, 36.0], [1.72918404E12, 74.0], [1.72918608E12, 570.0], [1.72918266E12, 37.0], [1.72918488E12, 81.0], [1.7291871E12, 530.0], [1.72918044E12, 37.0], [1.72918164E12, 30.0], [1.72918386E12, 33.0], [1.7291859E12, 402.0], [1.72918026E12, 32.0], [1.7291835E12, 38.0], [1.72918692E12, 624.0], [1.72918248E12, 40.0], [1.72918146E12, 39.0], [1.7291847E12, 93.0], [1.72918572E12, 548.0], [1.72918368E12, 34.0], [1.72918332E12, 40.0], [1.72918008E12, 36.0], [1.72918674E12, 114.0], [1.7291811E12, 33.0], [1.72918554E12, 37.0], [1.72918128E12, 31.0], [1.7291823E12, 39.0], [1.72918452E12, 82.0], [1.72918476E12, 68.0], [1.72918254E12, 39.0], [1.72918152E12, 36.0], [1.72918596E12, 593.0], [1.7291805E12, 31.0], [1.72918374E12, 37.0], [1.72918698E12, 95.0], [1.72918272E12, 40.0], [1.72918236E12, 42.0], [1.72918578E12, 156.0], [1.72918014E12, 39.0], [1.72918458E12, 84.0], [1.72918356E12, 38.0], [1.7291868E12, 554.0], [1.72918032E12, 37.0], [1.72918134E12, 34.0], [1.72918542E12, 70.0], [1.72918218E12, 34.0], [1.7291844E12, 71.0], [1.72918662E12, 614.0], [1.72918116E12, 34.0], [1.72918338E12, 40.0], [1.7291856E12, 572.0], [1.72918302E12, 43.0], [1.72918524E12, 95.0], [1.729182E12, 35.0], [1.72918644E12, 544.0], [1.72918098E12, 33.0], [1.72918422E12, 82.0], [1.7291832E12, 35.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72918122E12, 1028.2], [1.72918446E12, 1589.0], [1.72918344E12, 1354.4000000000005], [1.72918566E12, 2500.0], [1.72918668E12, 2425.0000000000005], [1.7291802E12, 1043.0], [1.72918242E12, 1370.4], [1.72918464E12, 1580.3000000000002], [1.72918104E12, 983.0], [1.72918206E12, 1380.0], [1.72918428E12, 1567.0000000000002], [1.72918002E12, 1220.0], [1.72918326E12, 1339.0], [1.72918548E12, 1599.000000000002], [1.7291865E12, 2388.0], [1.72918224E12, 1363.6], [1.72918188E12, 991.0], [1.7291841E12, 1597.0000000000005], [1.72918308E12, 1410.7], [1.72918632E12, 2494.8], [1.72918086E12, 1048.6], [1.7291853E12, 1577.0], [1.72918494E12, 1566.6999999999996], [1.7291817E12, 999.6000000000001], [1.72918392E12, 1537.8000000000002], [1.72918614E12, 2391.0], [1.72918716E12, 2285.6000000000004], [1.72918068E12, 1025.9], [1.7291829E12, 1371.2000000000003], [1.72918512E12, 1631.0], [1.72918656E12, 2450.8], [1.72918092E12, 1046.2], [1.72918314E12, 1339.0], [1.72918536E12, 1595.4], [1.72918212E12, 1356.5000000000005], [1.72918434E12, 1603.4000000000003], [1.72918638E12, 2394.0], [1.72918074E12, 1025.0], [1.72918398E12, 1558.6], [1.72918296E12, 1376.8000000000002], [1.72918518E12, 1638.0], [1.7291862E12, 2417.4000000000005], [1.72918194E12, 944.8000000000001], [1.72918416E12, 1576.6], [1.72918056E12, 1021.2000000000002], [1.72918158E12, 998.9], [1.7291838E12, 1275.6], [1.72918278E12, 1353.0], [1.729185E12, 1578.5000000000014], [1.72918602E12, 2381.0], [1.72918176E12, 1054.0], [1.72918704E12, 2501.0], [1.72918362E12, 1347.2000000000003], [1.7291814E12, 1033.6999999999998], [1.7291826E12, 1396.3000000000004], [1.72918584E12, 2614.2], [1.72918482E12, 1567.3], [1.72918038E12, 1102.6000000000001], [1.72918686E12, 2386.4], [1.72918284E12, 1399.0], [1.72918626E12, 2608.2], [1.72918062E12, 1013.0], [1.72918506E12, 1593.0], [1.7291808E12, 1016.9000000000002], [1.72918182E12, 1026.0], [1.72918404E12, 1590.0], [1.72918608E12, 2455.0], [1.72918266E12, 1361.0], [1.72918488E12, 1594.6000000000001], [1.7291871E12, 2367.5], [1.72918044E12, 1034.5], [1.72918164E12, 1036.9], [1.72918386E12, 1166.5], [1.7291859E12, 2462.0], [1.72918026E12, 1019.4000000000001], [1.7291835E12, 1397.6], [1.72918692E12, 2566.0], [1.72918248E12, 1310.6000000000004], [1.72918146E12, 1032.2], [1.7291847E12, 1619.0], [1.72918572E12, 2554.8000000000006], [1.72918368E12, 1432.9], [1.72918332E12, 1368.9], [1.72918008E12, 1073.1], [1.72918674E12, 2385.0], [1.7291811E12, 1078.6000000000001], [1.72918554E12, 2112.0], [1.72918128E12, 1041.0], [1.7291823E12, 1379.0], [1.72918452E12, 1533.0], [1.72918476E12, 1640.0], [1.72918254E12, 1399.2], [1.72918152E12, 970.8], [1.72918596E12, 2527.6], [1.7291805E12, 1028.0], [1.72918374E12, 1358.0], [1.72918698E12, 2404.2], [1.72918272E12, 1365.1999999999998], [1.72918236E12, 1331.0], [1.72918578E12, 2492.2000000000007], [1.72918014E12, 1012.1], [1.72918458E12, 1592.3000000000006], [1.72918356E12, 1338.3], [1.7291868E12, 2448.8], [1.72918032E12, 1044.4], [1.72918134E12, 1011.8], [1.72918542E12, 1598.0], [1.72918218E12, 1322.200000000001], [1.7291844E12, 1563.1999999999998], [1.72918662E12, 2459.0], [1.72918116E12, 998.1999999999999], [1.72918338E12, 1364.0], [1.7291856E12, 2394.6], [1.72918302E12, 1349.0], [1.72918524E12, 1578.8000000000002], [1.729182E12, 1345.0], [1.72918644E12, 2551.5], [1.72918098E12, 1023.2], [1.72918422E12, 1568.5], [1.7291832E12, 1450.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72918122E12, 1491.62], [1.72918446E12, 2334.0], [1.72918344E12, 1984.3300000000004], [1.72918566E12, 3177.25], [1.72918668E12, 3168.04], [1.7291802E12, 1420.0], [1.72918242E12, 1989.6799999999998], [1.72918464E12, 2361.8599999999974], [1.72918104E12, 1496.2000000000007], [1.72918206E12, 1939.1599999999999], [1.72918428E12, 2208.92], [1.72918002E12, 2128.1999999999994], [1.72918326E12, 1889.12], [1.72918548E12, 2189.9999999999973], [1.7291865E12, 3056.050000000002], [1.72918224E12, 2033.1800000000012], [1.72918188E12, 1402.8000000000002], [1.7291841E12, 2334.260000000004], [1.72918308E12, 2039.6700000000003], [1.72918632E12, 3128.24], [1.72918086E12, 1498.6199999999997], [1.7291853E12, 2297.769999999995], [1.72918494E12, 2297.5200000000004], [1.7291817E12, 1505.4299999999998], [1.72918392E12, 2236.3500000000004], [1.72918614E12, 3043.0], [1.72918716E12, 3020.62], [1.72918068E12, 1566.88], [1.7291829E12, 2057.32], [1.72918512E12, 2296.5], [1.72918656E12, 3212.49], [1.72918092E12, 1516.1599999999999], [1.72918314E12, 2015.8200000000002], [1.72918536E12, 2317.240000000001], [1.72918212E12, 2056.6300000000006], [1.72918434E12, 2335.379999999999], [1.72918638E12, 3135.1999999999953], [1.72918074E12, 1406.9999999999993], [1.72918398E12, 2267.6899999999987], [1.72918296E12, 1929.9500000000003], [1.72918518E12, 2410.369999999999], [1.7291862E12, 3060.859999999999], [1.72918194E12, 1454.48], [1.72918416E12, 2286.83], [1.72918056E12, 1572.6], [1.72918158E12, 1432.1400000000026], [1.7291838E12, 1917.8399999999992], [1.72918278E12, 1990.300000000002], [1.729185E12, 2253.5600000000013], [1.72918602E12, 3178.2400000000107], [1.72918176E12, 1544.25], [1.72918704E12, 3291.4000000000005], [1.72918362E12, 2001.9199999999978], [1.7291814E12, 1599.4799999999996], [1.7291826E12, 2090.2099999999937], [1.72918584E12, 3168.440000000003], [1.72918482E12, 2245.090000000001], [1.72918038E12, 1558.219999999998], [1.72918686E12, 3040.759999999999], [1.72918284E12, 1952.7999999999959], [1.72918626E12, 3369.240000000001], [1.72918062E12, 1431.2500000000023], [1.72918506E12, 2335.1199999999985], [1.7291808E12, 1498.749999999997], [1.72918182E12, 1490.6999999999998], [1.72918404E12, 2227.63], [1.72918608E12, 3156.7999999999984], [1.72918266E12, 2043.7999999999984], [1.72918488E12, 2291.839999999993], [1.7291871E12, 3009.3], [1.72918044E12, 1423.6500000000003], [1.72918164E12, 1474.65], [1.72918386E12, 1645.9], [1.7291859E12, 3060.15], [1.72918026E12, 1503.2399999999998], [1.7291835E12, 2002.500000000002], [1.72918692E12, 3236.0299999999966], [1.72918248E12, 1916.1600000000094], [1.72918146E12, 1422.4299999999998], [1.7291847E12, 2279.079999999999], [1.72918572E12, 3204.1399999999985], [1.72918368E12, 2063.8100000000013], [1.72918332E12, 2092.2500000000027], [1.72918008E12, 1500.920000000002], [1.72918674E12, 3203.800000000001], [1.7291811E12, 1574.76], [1.72918554E12, 2912.0], [1.72918128E12, 1470.7400000000002], [1.7291823E12, 1946.2000000000007], [1.72918452E12, 2174.2], [1.72918476E12, 2223.0], [1.72918254E12, 2071.7599999999934], [1.72918152E12, 1511.9200000000003], [1.72918596E12, 3295.7999999999993], [1.7291805E12, 1594.3299999999995], [1.72918374E12, 2020.4000000000033], [1.72918698E12, 3196.139999999994], [1.72918272E12, 2078.2400000000002], [1.72918236E12, 2058.5999999999995], [1.72918578E12, 3196.76], [1.72918014E12, 1411.6800000000003], [1.72918458E12, 2286.5500000000047], [1.72918356E12, 2042.9699999999993], [1.7291868E12, 3127.4399999999996], [1.72918032E12, 1497.8199999999981], [1.72918134E12, 1470.4499999999998], [1.72918542E12, 2304.760000000002], [1.72918218E12, 1914.7199999999993], [1.7291844E12, 2355.459999999998], [1.72918662E12, 3111.520000000004], [1.72918116E12, 1531.4800000000007], [1.72918338E12, 2082.400000000006], [1.7291856E12, 3059.16], [1.72918302E12, 1849.3300000000004], [1.72918524E12, 2169.670000000005], [1.729182E12, 2227.1799999999994], [1.72918644E12, 3266.5000000000045], [1.72918098E12, 1464.7199999999993], [1.72918422E12, 2293.0], [1.7291832E12, 2040.800000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72918122E12, 398.0], [1.72918446E12, 738.0], [1.72918344E12, 522.5], [1.72918566E12, 1560.5], [1.72918668E12, 1550.0], [1.7291802E12, 434.0], [1.72918242E12, 511.0], [1.72918464E12, 767.5], [1.72918104E12, 375.0], [1.72918206E12, 593.0], [1.72918428E12, 675.0], [1.72918002E12, 395.0], [1.72918326E12, 596.0], [1.72918548E12, 691.0], [1.7291865E12, 1499.5], [1.72918224E12, 535.5], [1.72918188E12, 372.0], [1.7291841E12, 763.0], [1.72918308E12, 591.5], [1.72918632E12, 1573.0], [1.72918086E12, 446.0], [1.7291853E12, 724.0], [1.72918494E12, 720.0], [1.7291817E12, 455.0], [1.72918392E12, 678.0], [1.72918614E12, 1514.0], [1.72918716E12, 1280.0], [1.72918068E12, 444.5], [1.7291829E12, 492.0], [1.72918512E12, 784.5], [1.72918656E12, 1535.5], [1.72918092E12, 439.0], [1.72918314E12, 532.0], [1.72918536E12, 744.0], [1.72918212E12, 591.0], [1.72918434E12, 795.0], [1.72918638E12, 1491.0], [1.72918074E12, 402.0], [1.72918398E12, 692.5], [1.72918296E12, 492.5], [1.72918518E12, 731.5], [1.7291862E12, 1476.0], [1.72918194E12, 404.0], [1.72918416E12, 670.5], [1.72918056E12, 432.0], [1.72918158E12, 364.5], [1.7291838E12, 448.5], [1.72918278E12, 585.0], [1.729185E12, 628.0], [1.72918602E12, 1438.0], [1.72918176E12, 374.5], [1.72918704E12, 1565.0], [1.72918362E12, 516.0], [1.7291814E12, 409.0], [1.7291826E12, 543.5], [1.72918584E12, 1683.0], [1.72918482E12, 647.5], [1.72918038E12, 491.0], [1.72918686E12, 1462.0], [1.72918284E12, 578.0], [1.72918626E12, 1708.0], [1.72918062E12, 388.5], [1.72918506E12, 750.0], [1.7291808E12, 377.0], [1.72918182E12, 423.0], [1.72918404E12, 698.5], [1.72918608E12, 1586.0], [1.72918266E12, 541.0], [1.72918488E12, 721.0], [1.7291871E12, 1424.0], [1.72918044E12, 442.5], [1.72918164E12, 470.0], [1.72918386E12, 482.0], [1.7291859E12, 1540.0], [1.72918026E12, 459.5], [1.7291835E12, 538.0], [1.72918692E12, 1643.5], [1.72918248E12, 527.0], [1.72918146E12, 422.5], [1.7291847E12, 780.0], [1.72918572E12, 1660.0], [1.72918368E12, 585.0], [1.72918332E12, 575.5], [1.72918008E12, 414.5], [1.72918674E12, 1443.0], [1.7291811E12, 453.0], [1.72918554E12, 1046.5], [1.72918128E12, 391.0], [1.7291823E12, 533.0], [1.72918452E12, 627.0], [1.72918476E12, 721.0], [1.72918254E12, 577.0], [1.72918152E12, 396.0], [1.72918596E12, 1627.0], [1.7291805E12, 430.0], [1.72918374E12, 601.0], [1.72918698E12, 1555.0], [1.72918272E12, 524.0], [1.72918236E12, 484.0], [1.72918578E12, 1530.0], [1.72918014E12, 409.0], [1.72918458E12, 721.5], [1.72918356E12, 538.5], [1.7291868E12, 1538.0], [1.72918032E12, 451.5], [1.72918134E12, 429.0], [1.72918542E12, 775.0], [1.72918218E12, 471.0], [1.7291844E12, 753.0], [1.72918662E12, 1557.0], [1.72918116E12, 386.0], [1.72918338E12, 535.0], [1.7291856E12, 1498.0], [1.72918302E12, 530.0], [1.72918524E12, 698.0], [1.729182E12, 537.0], [1.72918644E12, 1610.0], [1.72918098E12, 451.0], [1.72918422E12, 732.5], [1.7291832E12, 582.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72918122E12, 1201.6], [1.72918446E12, 1871.0], [1.72918344E12, 1581.850000000001], [1.72918566E12, 2772.5], [1.72918668E12, 2713.6000000000004], [1.7291802E12, 1196.0], [1.72918242E12, 1587.7], [1.72918464E12, 1828.1499999999999], [1.72918104E12, 1156.0], [1.72918206E12, 1598.6], [1.72918428E12, 1785.0], [1.72918002E12, 1611.0], [1.72918326E12, 1576.3999999999999], [1.72918548E12, 1795.1999999999998], [1.7291865E12, 2617.0], [1.72918224E12, 1631.0500000000004], [1.72918188E12, 1150.0], [1.7291841E12, 1842.2999999999997], [1.72918308E12, 1593.0999999999995], [1.72918632E12, 2715.8], [1.72918086E12, 1208.3], [1.7291853E12, 1774.4999999999986], [1.72918494E12, 1816.1499999999999], [1.7291817E12, 1145.65], [1.72918392E12, 1749.0], [1.72918614E12, 2646.0], [1.72918716E12, 2496.1], [1.72918068E12, 1191.6999999999996], [1.7291829E12, 1573.6999999999985], [1.72918512E12, 1859.5], [1.72918656E12, 2676.0499999999997], [1.72918092E12, 1238.3999999999999], [1.72918314E12, 1607.1499999999999], [1.72918536E12, 1832.4], [1.72918212E12, 1603.5999999999995], [1.72918434E12, 1868.4999999999995], [1.72918638E12, 2692.0], [1.72918074E12, 1172.0], [1.72918398E12, 1867.4499999999982], [1.72918296E12, 1609.4000000000005], [1.72918518E12, 1896.3499999999992], [1.7291862E12, 2650.2], [1.72918194E12, 1136.3999999999999], [1.72918416E12, 1765.7499999999993], [1.72918056E12, 1176.8], [1.72918158E12, 1143.6999999999996], [1.7291838E12, 1493.8999999999992], [1.72918278E12, 1579.0], [1.729185E12, 1822.7000000000003], [1.72918602E12, 2577.9999999999986], [1.72918176E12, 1237.25], [1.72918704E12, 2743.0], [1.72918362E12, 1556.1999999999998], [1.7291814E12, 1216.35], [1.7291826E12, 1629.1499999999999], [1.72918584E12, 2799.6], [1.72918482E12, 1773.2999999999997], [1.72918038E12, 1233.3999999999996], [1.72918686E12, 2588.2999999999997], [1.72918284E12, 1606.7999999999997], [1.72918626E12, 2895.0], [1.72918062E12, 1148.25], [1.72918506E12, 1787.0], [1.7291808E12, 1174.4499999999998], [1.72918182E12, 1189.5], [1.72918404E12, 1805.05], [1.72918608E12, 2656.0], [1.72918266E12, 1558.0], [1.72918488E12, 1822.9999999999995], [1.7291871E12, 2575.5], [1.72918044E12, 1187.75], [1.72918164E12, 1240.85], [1.72918386E12, 1378.75], [1.7291859E12, 2652.25], [1.72918026E12, 1180.849999999999], [1.7291835E12, 1619.999999999999], [1.72918692E12, 2812.5999999999995], [1.72918248E12, 1515.0000000000005], [1.72918146E12, 1178.2999999999997], [1.7291847E12, 1860.6500000000003], [1.72918572E12, 2799.8999999999987], [1.72918368E12, 1630.9499999999996], [1.72918332E12, 1566.8499999999997], [1.72918008E12, 1224.05], [1.72918674E12, 2631.5], [1.7291811E12, 1221.8], [1.72918554E12, 2344.75], [1.72918128E12, 1193.0], [1.7291823E12, 1630.0], [1.72918452E12, 1751.0], [1.72918476E12, 1862.0], [1.72918254E12, 1635.8999999999994], [1.72918152E12, 1137.3999999999999], [1.72918596E12, 2785.6], [1.7291805E12, 1169.6999999999996], [1.72918374E12, 1592.0], [1.72918698E12, 2649.8999999999996], [1.72918272E12, 1607.1999999999996], [1.72918236E12, 1530.1999999999998], [1.72918578E12, 2723.5], [1.72918014E12, 1187.6499999999999], [1.72918458E12, 1841.9], [1.72918356E12, 1604.549999999999], [1.7291868E12, 2626.7999999999997], [1.72918032E12, 1205.85], [1.72918134E12, 1213.9499999999994], [1.72918542E12, 1836.3999999999999], [1.72918218E12, 1499.3], [1.7291844E12, 1838.7999999999997], [1.72918662E12, 2654.0499999999993], [1.72918116E12, 1154.199999999999], [1.72918338E12, 1570.0], [1.7291856E12, 2642.5999999999995], [1.72918302E12, 1559.8500000000001], [1.72918524E12, 1825.95], [1.729182E12, 1593.0999999999997], [1.72918644E12, 2810.0], [1.72918098E12, 1204.8], [1.72918422E12, 1811.5], [1.7291832E12, 1653.75]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918716E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 188.0, "minX": 1.0, "maxY": 848.0, "series": [{"data": [[32.0, 613.0], [2.0, 420.5], [33.0, 428.0], [35.0, 776.0], [34.0, 810.5], [37.0, 241.0], [36.0, 188.0], [3.0, 358.0], [4.0, 478.5], [5.0, 359.5], [6.0, 415.0], [7.0, 633.0], [8.0, 680.5], [9.0, 688.0], [10.0, 834.5], [11.0, 809.0], [12.0, 782.5], [13.0, 817.0], [14.0, 779.0], [15.0, 840.0], [16.0, 764.5], [1.0, 773.0], [17.0, 797.0], [18.0, 791.0], [19.0, 820.0], [20.0, 841.0], [21.0, 814.0], [22.0, 848.0], [23.0, 803.0], [24.0, 790.5], [25.0, 806.0], [26.0, 846.5], [27.0, 827.0], [28.0, 595.0], [29.0, 767.0], [30.0, 759.0], [31.0, 639.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 37.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 130.5, "minX": 1.0, "maxY": 718.5, "series": [{"data": [[32.0, 495.0], [2.0, 322.0], [33.0, 354.0], [35.0, 709.0], [34.0, 718.5], [37.0, 148.0], [36.0, 130.5], [3.0, 278.0], [4.0, 343.5], [5.0, 263.5], [6.0, 290.0], [7.0, 418.5], [8.0, 457.0], [9.0, 449.0], [10.0, 577.0], [11.0, 553.0], [12.0, 541.0], [13.0, 563.0], [14.0, 534.0], [15.0, 584.0], [16.0, 537.0], [1.0, 460.0], [17.0, 558.0], [18.0, 562.0], [19.0, 584.0], [20.0, 603.0], [21.0, 580.0], [22.0, 607.0], [23.0, 590.0], [24.0, 587.0], [25.0, 612.0], [26.0, 652.5], [27.0, 656.0], [28.0, 445.5], [29.0, 636.0], [30.0, 611.5], [31.0, 491.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 37.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.45, "minX": 1.72918002E12, "maxY": 20.65, "series": [{"data": [[1.72918122E12, 17.216666666666665], [1.72918446E12, 19.15], [1.72918344E12, 19.666666666666668], [1.72918566E12, 19.566666666666666], [1.72918668E12, 19.583333333333332], [1.7291802E12, 16.65], [1.72918242E12, 19.416666666666668], [1.72918464E12, 18.933333333333334], [1.72918104E12, 17.65], [1.72918206E12, 18.716666666666665], [1.72918428E12, 20.116666666666667], [1.72918002E12, 2.45], [1.72918326E12, 18.716666666666665], [1.72918548E12, 19.333333333333332], [1.7291865E12, 20.066666666666666], [1.72918224E12, 18.833333333333332], [1.72918188E12, 17.65], [1.7291841E12, 19.283333333333335], [1.72918308E12, 18.366666666666667], [1.72918632E12, 19.05], [1.72918086E12, 16.216666666666665], [1.7291853E12, 19.433333333333334], [1.72918494E12, 19.6], [1.7291817E12, 16.433333333333334], [1.72918392E12, 19.116666666666667], [1.72918614E12, 20.066666666666666], [1.72918716E12, 16.75], [1.72918068E12, 16.666666666666668], [1.7291829E12, 19.616666666666667], [1.72918512E12, 18.733333333333334], [1.72918656E12, 19.866666666666667], [1.72918092E12, 16.383333333333333], [1.72918314E12, 19.3], [1.72918536E12, 19.25], [1.72918212E12, 18.766666666666666], [1.72918434E12, 18.616666666666667], [1.72918638E12, 20.3], [1.72918074E12, 16.983333333333334], [1.72918398E12, 19.766666666666666], [1.72918296E12, 19.666666666666668], [1.72918518E12, 19.133333333333333], [1.7291862E12, 19.95], [1.72918194E12, 10.066666666666666], [1.72918416E12, 20.266666666666666], [1.72918056E12, 17.05], [1.72918158E12, 17.666666666666668], [1.7291838E12, 19.916666666666668], [1.72918278E12, 18.9], [1.729185E12, 20.5], [1.72918602E12, 20.516666666666666], [1.72918176E12, 17.066666666666666], [1.72918704E12, 19.316666666666666], [1.72918362E12, 19.383333333333333], [1.7291814E12, 16.833333333333332], [1.7291826E12, 18.966666666666665], [1.72918584E12, 18.05], [1.72918482E12, 20.1], [1.72918038E12, 15.55], [1.72918686E12, 20.283333333333335], [1.72918284E12, 18.516666666666666], [1.72918626E12, 18.05], [1.72918062E12, 17.233333333333334], [1.72918506E12, 19.516666666666666], [1.7291808E12, 17.266666666666666], [1.72918182E12, 16.816666666666666], [1.72918404E12, 19.633333333333333], [1.72918608E12, 18.983333333333334], [1.72918266E12, 18.983333333333334], [1.72918488E12, 19.383333333333333], [1.7291871E12, 20.566666666666666], [1.72918044E12, 16.733333333333334], [1.72918164E12, 16.1], [1.72918386E12, 13.233333333333333], [1.7291859E12, 19.733333333333334], [1.72918026E12, 16.2], [1.7291835E12, 18.883333333333333], [1.72918692E12, 18.633333333333333], [1.72918248E12, 19.75], [1.72918146E12, 16.966666666666665], [1.7291847E12, 19.0], [1.72918572E12, 18.683333333333334], [1.72918368E12, 18.433333333333334], [1.72918332E12, 18.8], [1.72918008E12, 16.3], [1.72918674E12, 20.15], [1.7291811E12, 16.016666666666666], [1.72918554E12, 18.216666666666665], [1.72918128E12, 16.883333333333333], [1.7291823E12, 19.316666666666666], [1.72918452E12, 20.65], [1.72918476E12, 19.316666666666666], [1.72918254E12, 18.55], [1.72918152E12, 17.25], [1.72918596E12, 18.716666666666665], [1.7291805E12, 16.333333333333332], [1.72918374E12, 18.483333333333334], [1.72918698E12, 19.35], [1.72918272E12, 19.183333333333334], [1.72918236E12, 19.783333333333335], [1.72918578E12, 19.216666666666665], [1.72918014E12, 17.133333333333333], [1.72918458E12, 19.333333333333332], [1.72918356E12, 19.433333333333334], [1.7291868E12, 19.516666666666666], [1.72918032E12, 16.366666666666667], [1.72918134E12, 16.833333333333332], [1.72918542E12, 18.85], [1.72918218E12, 19.883333333333333], [1.7291844E12, 19.35], [1.72918662E12, 19.266666666666666], [1.72918116E12, 17.25], [1.72918338E12, 19.316666666666666], [1.7291856E12, 19.85], [1.72918302E12, 19.666666666666668], [1.72918524E12, 19.666666666666668], [1.729182E12, 14.066666666666666], [1.72918644E12, 18.916666666666668], [1.72918098E12, 16.383333333333333], [1.72918422E12, 19.566666666666666], [1.7291832E12, 18.066666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918716E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.316666666666667, "minX": 1.72918002E12, "maxY": 20.65, "series": [{"data": [[1.72918122E12, 17.216666666666665], [1.72918446E12, 19.15], [1.72918344E12, 19.666666666666668], [1.72918566E12, 19.566666666666666], [1.72918668E12, 19.583333333333332], [1.7291802E12, 16.65], [1.72918242E12, 19.416666666666668], [1.72918464E12, 18.933333333333334], [1.72918104E12, 17.65], [1.72918206E12, 18.716666666666665], [1.72918428E12, 20.116666666666667], [1.72918002E12, 2.316666666666667], [1.72918326E12, 18.716666666666665], [1.72918548E12, 19.383333333333333], [1.7291865E12, 20.066666666666666], [1.72918224E12, 18.833333333333332], [1.72918188E12, 17.65], [1.7291841E12, 19.283333333333335], [1.72918308E12, 18.366666666666667], [1.72918632E12, 19.05], [1.72918086E12, 16.216666666666665], [1.7291853E12, 19.433333333333334], [1.72918494E12, 19.6], [1.7291817E12, 16.433333333333334], [1.72918392E12, 18.866666666666667], [1.72918614E12, 20.066666666666666], [1.72918716E12, 17.283333333333335], [1.72918068E12, 16.666666666666668], [1.7291829E12, 19.616666666666667], [1.72918512E12, 18.733333333333334], [1.72918656E12, 19.866666666666667], [1.72918092E12, 16.383333333333333], [1.72918314E12, 19.3], [1.72918536E12, 19.25], [1.72918212E12, 18.766666666666666], [1.72918434E12, 18.616666666666667], [1.72918638E12, 20.316666666666666], [1.72918074E12, 16.983333333333334], [1.72918398E12, 19.766666666666666], [1.72918296E12, 19.666666666666668], [1.72918518E12, 19.133333333333333], [1.7291862E12, 19.95], [1.72918194E12, 10.183333333333334], [1.72918416E12, 20.266666666666666], [1.72918056E12, 17.05], [1.72918158E12, 17.666666666666668], [1.7291838E12, 19.933333333333334], [1.72918278E12, 18.9], [1.729185E12, 20.5], [1.72918602E12, 20.516666666666666], [1.72918176E12, 17.066666666666666], [1.72918704E12, 19.316666666666666], [1.72918362E12, 19.383333333333333], [1.7291814E12, 16.833333333333332], [1.7291826E12, 18.966666666666665], [1.72918584E12, 18.05], [1.72918482E12, 20.1], [1.72918038E12, 15.55], [1.72918686E12, 20.283333333333335], [1.72918284E12, 18.516666666666666], [1.72918626E12, 18.05], [1.72918062E12, 17.233333333333334], [1.72918506E12, 19.516666666666666], [1.7291808E12, 17.266666666666666], [1.72918182E12, 16.816666666666666], [1.72918404E12, 19.633333333333333], [1.72918608E12, 18.983333333333334], [1.72918266E12, 18.983333333333334], [1.72918488E12, 19.383333333333333], [1.7291871E12, 20.566666666666666], [1.72918044E12, 16.733333333333334], [1.72918164E12, 16.1], [1.72918386E12, 13.4], [1.7291859E12, 19.733333333333334], [1.72918026E12, 16.2], [1.7291835E12, 18.883333333333333], [1.72918692E12, 18.633333333333333], [1.72918248E12, 19.75], [1.72918146E12, 16.966666666666665], [1.7291847E12, 19.0], [1.72918572E12, 18.683333333333334], [1.72918368E12, 18.433333333333334], [1.72918332E12, 18.8], [1.72918008E12, 16.3], [1.72918674E12, 20.15], [1.7291811E12, 16.016666666666666], [1.72918554E12, 17.9], [1.72918128E12, 16.883333333333333], [1.7291823E12, 19.316666666666666], [1.72918452E12, 20.65], [1.72918476E12, 19.316666666666666], [1.72918254E12, 18.55], [1.72918152E12, 17.25], [1.72918596E12, 18.716666666666665], [1.7291805E12, 16.333333333333332], [1.72918374E12, 18.483333333333334], [1.72918698E12, 19.35], [1.72918272E12, 19.183333333333334], [1.72918236E12, 19.783333333333335], [1.72918578E12, 19.216666666666665], [1.72918014E12, 17.133333333333333], [1.72918458E12, 19.333333333333332], [1.72918356E12, 19.433333333333334], [1.7291868E12, 19.516666666666666], [1.72918032E12, 16.366666666666667], [1.72918134E12, 16.833333333333332], [1.72918542E12, 18.85], [1.72918218E12, 19.883333333333333], [1.7291844E12, 19.35], [1.72918662E12, 19.266666666666666], [1.72918116E12, 17.25], [1.72918338E12, 19.316666666666666], [1.7291856E12, 19.85], [1.72918302E12, 19.666666666666668], [1.72918524E12, 19.666666666666668], [1.729182E12, 13.883333333333333], [1.72918644E12, 18.9], [1.72918098E12, 16.383333333333333], [1.72918422E12, 19.566666666666666], [1.7291832E12, 18.066666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918716E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.316666666666667, "minX": 1.72918002E12, "maxY": 20.65, "series": [{"data": [[1.72918122E12, 17.216666666666665], [1.72918446E12, 19.15], [1.72918344E12, 19.666666666666668], [1.72918566E12, 19.566666666666666], [1.72918668E12, 19.583333333333332], [1.7291802E12, 16.65], [1.72918242E12, 19.416666666666668], [1.72918464E12, 18.933333333333334], [1.72918104E12, 17.65], [1.72918206E12, 18.716666666666665], [1.72918428E12, 20.116666666666667], [1.72918002E12, 2.316666666666667], [1.72918326E12, 18.716666666666665], [1.72918548E12, 19.383333333333333], [1.7291865E12, 20.066666666666666], [1.72918224E12, 18.833333333333332], [1.72918188E12, 17.65], [1.7291841E12, 19.283333333333335], [1.72918308E12, 18.366666666666667], [1.72918632E12, 19.05], [1.72918086E12, 16.216666666666665], [1.7291853E12, 19.433333333333334], [1.72918494E12, 19.6], [1.7291817E12, 16.433333333333334], [1.72918392E12, 18.866666666666667], [1.72918614E12, 20.066666666666666], [1.72918716E12, 17.283333333333335], [1.72918068E12, 16.666666666666668], [1.7291829E12, 19.616666666666667], [1.72918512E12, 18.733333333333334], [1.72918656E12, 19.866666666666667], [1.72918092E12, 16.383333333333333], [1.72918314E12, 19.3], [1.72918536E12, 19.25], [1.72918212E12, 18.766666666666666], [1.72918434E12, 18.616666666666667], [1.72918638E12, 20.316666666666666], [1.72918074E12, 16.983333333333334], [1.72918398E12, 19.766666666666666], [1.72918296E12, 19.666666666666668], [1.72918518E12, 19.133333333333333], [1.7291862E12, 19.95], [1.72918194E12, 10.183333333333334], [1.72918416E12, 20.266666666666666], [1.72918056E12, 17.05], [1.72918158E12, 17.666666666666668], [1.7291838E12, 19.933333333333334], [1.72918278E12, 18.9], [1.729185E12, 20.5], [1.72918602E12, 20.516666666666666], [1.72918176E12, 17.066666666666666], [1.72918704E12, 19.316666666666666], [1.72918362E12, 19.383333333333333], [1.7291814E12, 16.833333333333332], [1.7291826E12, 18.966666666666665], [1.72918584E12, 18.05], [1.72918482E12, 20.1], [1.72918038E12, 15.55], [1.72918686E12, 20.283333333333335], [1.72918284E12, 18.516666666666666], [1.72918626E12, 18.05], [1.72918062E12, 17.233333333333334], [1.72918506E12, 19.516666666666666], [1.7291808E12, 17.266666666666666], [1.72918182E12, 16.816666666666666], [1.72918404E12, 19.633333333333333], [1.72918608E12, 18.983333333333334], [1.72918266E12, 18.983333333333334], [1.72918488E12, 19.383333333333333], [1.7291871E12, 20.566666666666666], [1.72918044E12, 16.733333333333334], [1.72918164E12, 16.1], [1.72918386E12, 13.4], [1.7291859E12, 19.733333333333334], [1.72918026E12, 16.2], [1.7291835E12, 18.883333333333333], [1.72918692E12, 18.633333333333333], [1.72918248E12, 19.75], [1.72918146E12, 16.966666666666665], [1.7291847E12, 19.0], [1.72918572E12, 18.683333333333334], [1.72918368E12, 18.433333333333334], [1.72918332E12, 18.8], [1.72918008E12, 16.3], [1.72918674E12, 20.15], [1.7291811E12, 16.016666666666666], [1.72918554E12, 17.9], [1.72918128E12, 16.883333333333333], [1.7291823E12, 19.316666666666666], [1.72918452E12, 20.65], [1.72918476E12, 19.316666666666666], [1.72918254E12, 18.55], [1.72918152E12, 17.25], [1.72918596E12, 18.716666666666665], [1.7291805E12, 16.333333333333332], [1.72918374E12, 18.483333333333334], [1.72918698E12, 19.35], [1.72918272E12, 19.183333333333334], [1.72918236E12, 19.783333333333335], [1.72918578E12, 19.216666666666665], [1.72918014E12, 17.133333333333333], [1.72918458E12, 19.333333333333332], [1.72918356E12, 19.433333333333334], [1.7291868E12, 19.516666666666666], [1.72918032E12, 16.366666666666667], [1.72918134E12, 16.833333333333332], [1.72918542E12, 18.85], [1.72918218E12, 19.883333333333333], [1.7291844E12, 19.35], [1.72918662E12, 19.266666666666666], [1.72918116E12, 17.25], [1.72918338E12, 19.316666666666666], [1.7291856E12, 19.85], [1.72918302E12, 19.666666666666668], [1.72918524E12, 19.666666666666668], [1.729182E12, 13.883333333333333], [1.72918644E12, 18.9], [1.72918098E12, 16.383333333333333], [1.72918422E12, 19.566666666666666], [1.7291832E12, 18.066666666666666]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918716E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.316666666666667, "minX": 1.72918002E12, "maxY": 20.65, "series": [{"data": [[1.72918122E12, 17.216666666666665], [1.72918446E12, 19.15], [1.72918344E12, 19.666666666666668], [1.72918566E12, 19.566666666666666], [1.72918668E12, 19.583333333333332], [1.7291802E12, 16.65], [1.72918242E12, 19.416666666666668], [1.72918464E12, 18.933333333333334], [1.72918104E12, 17.65], [1.72918206E12, 18.716666666666665], [1.72918428E12, 20.116666666666667], [1.72918002E12, 2.316666666666667], [1.72918326E12, 18.716666666666665], [1.72918548E12, 19.383333333333333], [1.7291865E12, 20.066666666666666], [1.72918224E12, 18.833333333333332], [1.72918188E12, 17.65], [1.7291841E12, 19.283333333333335], [1.72918308E12, 18.366666666666667], [1.72918632E12, 19.05], [1.72918086E12, 16.216666666666665], [1.7291853E12, 19.433333333333334], [1.72918494E12, 19.6], [1.7291817E12, 16.433333333333334], [1.72918392E12, 18.866666666666667], [1.72918614E12, 20.066666666666666], [1.72918716E12, 17.283333333333335], [1.72918068E12, 16.666666666666668], [1.7291829E12, 19.616666666666667], [1.72918512E12, 18.733333333333334], [1.72918656E12, 19.866666666666667], [1.72918092E12, 16.383333333333333], [1.72918314E12, 19.3], [1.72918536E12, 19.25], [1.72918212E12, 18.766666666666666], [1.72918434E12, 18.616666666666667], [1.72918638E12, 20.316666666666666], [1.72918074E12, 16.983333333333334], [1.72918398E12, 19.766666666666666], [1.72918296E12, 19.666666666666668], [1.72918518E12, 19.133333333333333], [1.7291862E12, 19.95], [1.72918194E12, 10.183333333333334], [1.72918416E12, 20.266666666666666], [1.72918056E12, 17.05], [1.72918158E12, 17.666666666666668], [1.7291838E12, 19.933333333333334], [1.72918278E12, 18.9], [1.729185E12, 20.5], [1.72918602E12, 20.516666666666666], [1.72918176E12, 17.066666666666666], [1.72918704E12, 19.316666666666666], [1.72918362E12, 19.383333333333333], [1.7291814E12, 16.833333333333332], [1.7291826E12, 18.966666666666665], [1.72918584E12, 18.05], [1.72918482E12, 20.1], [1.72918038E12, 15.55], [1.72918686E12, 20.283333333333335], [1.72918284E12, 18.516666666666666], [1.72918626E12, 18.05], [1.72918062E12, 17.233333333333334], [1.72918506E12, 19.516666666666666], [1.7291808E12, 17.266666666666666], [1.72918182E12, 16.816666666666666], [1.72918404E12, 19.633333333333333], [1.72918608E12, 18.983333333333334], [1.72918266E12, 18.983333333333334], [1.72918488E12, 19.383333333333333], [1.7291871E12, 20.566666666666666], [1.72918044E12, 16.733333333333334], [1.72918164E12, 16.1], [1.72918386E12, 13.4], [1.7291859E12, 19.733333333333334], [1.72918026E12, 16.2], [1.7291835E12, 18.883333333333333], [1.72918692E12, 18.633333333333333], [1.72918248E12, 19.75], [1.72918146E12, 16.966666666666665], [1.7291847E12, 19.0], [1.72918572E12, 18.683333333333334], [1.72918368E12, 18.433333333333334], [1.72918332E12, 18.8], [1.72918008E12, 16.3], [1.72918674E12, 20.15], [1.7291811E12, 16.016666666666666], [1.72918554E12, 17.9], [1.72918128E12, 16.883333333333333], [1.7291823E12, 19.316666666666666], [1.72918452E12, 20.65], [1.72918476E12, 19.316666666666666], [1.72918254E12, 18.55], [1.72918152E12, 17.25], [1.72918596E12, 18.716666666666665], [1.7291805E12, 16.333333333333332], [1.72918374E12, 18.483333333333334], [1.72918698E12, 19.35], [1.72918272E12, 19.183333333333334], [1.72918236E12, 19.783333333333335], [1.72918578E12, 19.216666666666665], [1.72918014E12, 17.133333333333333], [1.72918458E12, 19.333333333333332], [1.72918356E12, 19.433333333333334], [1.7291868E12, 19.516666666666666], [1.72918032E12, 16.366666666666667], [1.72918134E12, 16.833333333333332], [1.72918542E12, 18.85], [1.72918218E12, 19.883333333333333], [1.7291844E12, 19.35], [1.72918662E12, 19.266666666666666], [1.72918116E12, 17.25], [1.72918338E12, 19.316666666666666], [1.7291856E12, 19.85], [1.72918302E12, 19.666666666666668], [1.72918524E12, 19.666666666666668], [1.729182E12, 13.883333333333333], [1.72918644E12, 18.9], [1.72918098E12, 16.383333333333333], [1.72918422E12, 19.566666666666666], [1.7291832E12, 18.066666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918716E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

