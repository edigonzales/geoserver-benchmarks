/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 3692.0, "series": [{"data": [[0.0, 29.0], [0.1, 37.0], [0.2, 39.0], [0.3, 41.0], [0.4, 43.0], [0.5, 44.0], [0.6, 45.0], [0.7, 46.0], [0.8, 47.0], [0.9, 48.0], [1.0, 49.0], [1.1, 50.0], [1.2, 50.0], [1.3, 51.0], [1.4, 52.0], [1.5, 52.0], [1.6, 53.0], [1.7, 54.0], [1.8, 54.0], [1.9, 55.0], [2.0, 55.0], [2.1, 56.0], [2.2, 57.0], [2.3, 57.0], [2.4, 58.0], [2.5, 58.0], [2.6, 58.0], [2.7, 59.0], [2.8, 59.0], [2.9, 60.0], [3.0, 60.0], [3.1, 61.0], [3.2, 61.0], [3.3, 62.0], [3.4, 62.0], [3.5, 62.0], [3.6, 63.0], [3.7, 63.0], [3.8, 64.0], [3.9, 64.0], [4.0, 65.0], [4.1, 65.0], [4.2, 65.0], [4.3, 66.0], [4.4, 66.0], [4.5, 66.0], [4.6, 67.0], [4.7, 67.0], [4.8, 68.0], [4.9, 68.0], [5.0, 68.0], [5.1, 69.0], [5.2, 69.0], [5.3, 70.0], [5.4, 70.0], [5.5, 70.0], [5.6, 71.0], [5.7, 71.0], [5.8, 72.0], [5.9, 72.0], [6.0, 72.0], [6.1, 73.0], [6.2, 73.0], [6.3, 73.0], [6.4, 74.0], [6.5, 74.0], [6.6, 74.0], [6.7, 75.0], [6.8, 75.0], [6.9, 75.0], [7.0, 76.0], [7.1, 76.0], [7.2, 76.0], [7.3, 77.0], [7.4, 77.0], [7.5, 77.0], [7.6, 78.0], [7.7, 78.0], [7.8, 78.0], [7.9, 79.0], [8.0, 79.0], [8.1, 79.0], [8.2, 80.0], [8.3, 80.0], [8.4, 80.0], [8.5, 81.0], [8.6, 81.0], [8.7, 81.0], [8.8, 82.0], [8.9, 82.0], [9.0, 82.0], [9.1, 83.0], [9.2, 83.0], [9.3, 83.0], [9.4, 83.0], [9.5, 84.0], [9.6, 84.0], [9.7, 84.0], [9.8, 85.0], [9.9, 85.0], [10.0, 85.0], [10.1, 86.0], [10.2, 86.0], [10.3, 86.0], [10.4, 87.0], [10.5, 87.0], [10.6, 87.0], [10.7, 87.0], [10.8, 88.0], [10.9, 88.0], [11.0, 88.0], [11.1, 89.0], [11.2, 89.0], [11.3, 89.0], [11.4, 90.0], [11.5, 90.0], [11.6, 90.0], [11.7, 91.0], [11.8, 91.0], [11.9, 91.0], [12.0, 91.0], [12.1, 92.0], [12.2, 92.0], [12.3, 92.0], [12.4, 93.0], [12.5, 93.0], [12.6, 93.0], [12.7, 94.0], [12.8, 94.0], [12.9, 94.0], [13.0, 95.0], [13.1, 95.0], [13.2, 95.0], [13.3, 96.0], [13.4, 96.0], [13.5, 96.0], [13.6, 96.0], [13.7, 97.0], [13.8, 97.0], [13.9, 97.0], [14.0, 98.0], [14.1, 98.0], [14.2, 98.0], [14.3, 99.0], [14.4, 99.0], [14.5, 99.0], [14.6, 100.0], [14.7, 100.0], [14.8, 100.0], [14.9, 101.0], [15.0, 101.0], [15.1, 101.0], [15.2, 102.0], [15.3, 102.0], [15.4, 102.0], [15.5, 103.0], [15.6, 103.0], [15.7, 103.0], [15.8, 104.0], [15.9, 104.0], [16.0, 104.0], [16.1, 105.0], [16.2, 105.0], [16.3, 105.0], [16.4, 106.0], [16.5, 106.0], [16.6, 106.0], [16.7, 107.0], [16.8, 107.0], [16.9, 107.0], [17.0, 108.0], [17.1, 108.0], [17.2, 108.0], [17.3, 108.0], [17.4, 109.0], [17.5, 109.0], [17.6, 110.0], [17.7, 110.0], [17.8, 110.0], [17.9, 111.0], [18.0, 111.0], [18.1, 111.0], [18.2, 111.0], [18.3, 112.0], [18.4, 112.0], [18.5, 113.0], [18.6, 113.0], [18.7, 113.0], [18.8, 114.0], [18.9, 114.0], [19.0, 114.0], [19.1, 115.0], [19.2, 115.0], [19.3, 115.0], [19.4, 116.0], [19.5, 116.0], [19.6, 117.0], [19.7, 117.0], [19.8, 117.0], [19.9, 118.0], [20.0, 118.0], [20.1, 118.0], [20.2, 119.0], [20.3, 119.0], [20.4, 119.0], [20.5, 120.0], [20.6, 120.0], [20.7, 121.0], [20.8, 121.0], [20.9, 121.0], [21.0, 122.0], [21.1, 122.0], [21.2, 122.0], [21.3, 123.0], [21.4, 123.0], [21.5, 123.0], [21.6, 124.0], [21.7, 124.0], [21.8, 125.0], [21.9, 125.0], [22.0, 125.0], [22.1, 126.0], [22.2, 126.0], [22.3, 127.0], [22.4, 127.0], [22.5, 127.0], [22.6, 128.0], [22.7, 128.0], [22.8, 129.0], [22.9, 129.0], [23.0, 129.0], [23.1, 130.0], [23.2, 130.0], [23.3, 131.0], [23.4, 131.0], [23.5, 131.0], [23.6, 132.0], [23.7, 132.0], [23.8, 133.0], [23.9, 133.0], [24.0, 133.0], [24.1, 134.0], [24.2, 134.0], [24.3, 135.0], [24.4, 135.0], [24.5, 136.0], [24.6, 136.0], [24.7, 137.0], [24.8, 137.0], [24.9, 137.0], [25.0, 138.0], [25.1, 138.0], [25.2, 139.0], [25.3, 139.0], [25.4, 139.0], [25.5, 140.0], [25.6, 140.0], [25.7, 141.0], [25.8, 141.0], [25.9, 142.0], [26.0, 142.0], [26.1, 143.0], [26.2, 143.0], [26.3, 144.0], [26.4, 144.0], [26.5, 144.0], [26.6, 145.0], [26.7, 145.0], [26.8, 146.0], [26.9, 146.0], [27.0, 147.0], [27.1, 147.0], [27.2, 148.0], [27.3, 148.0], [27.4, 149.0], [27.5, 149.0], [27.6, 150.0], [27.7, 150.0], [27.8, 151.0], [27.9, 151.0], [28.0, 152.0], [28.1, 152.0], [28.2, 153.0], [28.3, 153.0], [28.4, 154.0], [28.5, 154.0], [28.6, 155.0], [28.7, 155.0], [28.8, 156.0], [28.9, 157.0], [29.0, 157.0], [29.1, 157.0], [29.2, 158.0], [29.3, 159.0], [29.4, 159.0], [29.5, 160.0], [29.6, 160.0], [29.7, 161.0], [29.8, 161.0], [29.9, 162.0], [30.0, 162.0], [30.1, 163.0], [30.2, 163.0], [30.3, 164.0], [30.4, 164.0], [30.5, 165.0], [30.6, 166.0], [30.7, 166.0], [30.8, 167.0], [30.9, 167.0], [31.0, 168.0], [31.1, 169.0], [31.2, 169.0], [31.3, 170.0], [31.4, 170.0], [31.5, 171.0], [31.6, 171.0], [31.7, 172.0], [31.8, 173.0], [31.9, 173.0], [32.0, 174.0], [32.1, 174.0], [32.2, 175.0], [32.3, 176.0], [32.4, 176.0], [32.5, 177.0], [32.6, 178.0], [32.7, 178.0], [32.8, 179.0], [32.9, 180.0], [33.0, 180.0], [33.1, 181.0], [33.2, 182.0], [33.3, 183.0], [33.4, 183.0], [33.5, 184.0], [33.6, 185.0], [33.7, 185.0], [33.8, 186.0], [33.9, 187.0], [34.0, 188.0], [34.1, 188.0], [34.2, 189.0], [34.3, 190.0], [34.4, 191.0], [34.5, 191.0], [34.6, 192.0], [34.7, 193.0], [34.8, 194.0], [34.9, 195.0], [35.0, 196.0], [35.1, 197.0], [35.2, 198.0], [35.3, 198.0], [35.4, 199.0], [35.5, 200.0], [35.6, 201.0], [35.7, 202.0], [35.8, 203.0], [35.9, 204.0], [36.0, 205.0], [36.1, 206.0], [36.2, 207.0], [36.3, 208.0], [36.4, 209.0], [36.5, 210.0], [36.6, 211.0], [36.7, 212.0], [36.8, 213.0], [36.9, 214.0], [37.0, 215.0], [37.1, 216.0], [37.2, 217.0], [37.3, 218.0], [37.4, 219.0], [37.5, 220.0], [37.6, 221.0], [37.7, 222.0], [37.8, 224.0], [37.9, 225.0], [38.0, 226.0], [38.1, 227.0], [38.2, 228.0], [38.3, 230.0], [38.4, 231.0], [38.5, 232.0], [38.6, 234.0], [38.7, 235.0], [38.8, 236.0], [38.9, 238.0], [39.0, 239.0], [39.1, 240.0], [39.2, 242.0], [39.3, 243.0], [39.4, 245.0], [39.5, 246.0], [39.6, 248.0], [39.7, 249.0], [39.8, 251.0], [39.9, 252.0], [40.0, 254.0], [40.1, 256.0], [40.2, 257.0], [40.3, 259.0], [40.4, 261.0], [40.5, 262.0], [40.6, 264.0], [40.7, 266.0], [40.8, 268.0], [40.9, 270.0], [41.0, 271.0], [41.1, 273.0], [41.2, 275.0], [41.3, 277.0], [41.4, 279.0], [41.5, 281.0], [41.6, 282.0], [41.7, 284.0], [41.8, 287.0], [41.9, 289.0], [42.0, 291.0], [42.1, 293.0], [42.2, 295.0], [42.3, 297.0], [42.4, 299.0], [42.5, 301.0], [42.6, 304.0], [42.7, 306.0], [42.8, 308.0], [42.9, 310.0], [43.0, 312.0], [43.1, 315.0], [43.2, 317.0], [43.3, 320.0], [43.4, 323.0], [43.5, 325.0], [43.6, 328.0], [43.7, 330.0], [43.8, 332.0], [43.9, 335.0], [44.0, 338.0], [44.1, 340.0], [44.2, 343.0], [44.3, 345.0], [44.4, 348.0], [44.5, 350.0], [44.6, 352.0], [44.7, 355.0], [44.8, 357.0], [44.9, 360.0], [45.0, 363.0], [45.1, 366.0], [45.2, 368.0], [45.3, 371.0], [45.4, 374.0], [45.5, 376.0], [45.6, 379.0], [45.7, 381.0], [45.8, 384.0], [45.9, 387.0], [46.0, 389.0], [46.1, 392.0], [46.2, 394.0], [46.3, 396.0], [46.4, 399.0], [46.5, 401.0], [46.6, 403.0], [46.7, 406.0], [46.8, 408.0], [46.9, 411.0], [47.0, 413.0], [47.1, 416.0], [47.2, 418.0], [47.3, 421.0], [47.4, 424.0], [47.5, 426.0], [47.6, 429.0], [47.7, 431.0], [47.8, 434.0], [47.9, 436.0], [48.0, 438.0], [48.1, 440.0], [48.2, 442.0], [48.3, 445.0], [48.4, 447.0], [48.5, 449.0], [48.6, 452.0], [48.7, 454.0], [48.8, 457.0], [48.9, 459.0], [49.0, 462.0], [49.1, 465.0], [49.2, 467.0], [49.3, 469.0], [49.4, 472.0], [49.5, 474.0], [49.6, 476.0], [49.7, 479.0], [49.8, 481.0], [49.9, 483.0], [50.0, 485.0], [50.1, 488.0], [50.2, 490.0], [50.3, 492.0], [50.4, 495.0], [50.5, 497.0], [50.6, 499.0], [50.7, 501.0], [50.8, 503.0], [50.9, 505.0], [51.0, 507.0], [51.1, 509.0], [51.2, 511.0], [51.3, 514.0], [51.4, 516.0], [51.5, 518.0], [51.6, 520.0], [51.7, 522.0], [51.8, 524.0], [51.9, 526.0], [52.0, 529.0], [52.1, 530.0], [52.2, 532.0], [52.3, 534.0], [52.4, 537.0], [52.5, 539.0], [52.6, 541.0], [52.7, 543.0], [52.8, 545.0], [52.9, 547.0], [53.0, 549.0], [53.1, 551.0], [53.2, 553.0], [53.3, 555.0], [53.4, 557.0], [53.5, 559.0], [53.6, 561.0], [53.7, 563.0], [53.8, 565.0], [53.9, 568.0], [54.0, 570.0], [54.1, 572.0], [54.2, 573.0], [54.3, 575.0], [54.4, 577.0], [54.5, 579.0], [54.6, 581.0], [54.7, 583.0], [54.8, 585.0], [54.9, 587.0], [55.0, 589.0], [55.1, 591.0], [55.2, 593.0], [55.3, 595.0], [55.4, 597.0], [55.5, 600.0], [55.6, 602.0], [55.7, 604.0], [55.8, 606.0], [55.9, 608.0], [56.0, 609.0], [56.1, 611.0], [56.2, 613.0], [56.3, 615.0], [56.4, 617.0], [56.5, 618.0], [56.6, 621.0], [56.7, 622.0], [56.8, 624.0], [56.9, 626.0], [57.0, 628.0], [57.1, 629.0], [57.2, 632.0], [57.3, 634.0], [57.4, 636.0], [57.5, 637.0], [57.6, 639.0], [57.7, 641.0], [57.8, 643.0], [57.9, 645.0], [58.0, 647.0], [58.1, 649.0], [58.2, 651.0], [58.3, 653.0], [58.4, 655.0], [58.5, 656.0], [58.6, 658.0], [58.7, 660.0], [58.8, 661.0], [58.9, 663.0], [59.0, 665.0], [59.1, 667.0], [59.2, 669.0], [59.3, 671.0], [59.4, 673.0], [59.5, 675.0], [59.6, 676.0], [59.7, 678.0], [59.8, 680.0], [59.9, 681.0], [60.0, 683.0], [60.1, 685.0], [60.2, 687.0], [60.3, 689.0], [60.4, 690.0], [60.5, 692.0], [60.6, 694.0], [60.7, 695.0], [60.8, 698.0], [60.9, 700.0], [61.0, 702.0], [61.1, 703.0], [61.2, 705.0], [61.3, 707.0], [61.4, 709.0], [61.5, 711.0], [61.6, 713.0], [61.7, 715.0], [61.8, 717.0], [61.9, 719.0], [62.0, 721.0], [62.1, 723.0], [62.2, 724.0], [62.3, 727.0], [62.4, 728.0], [62.5, 730.0], [62.6, 732.0], [62.7, 734.0], [62.8, 736.0], [62.9, 737.0], [63.0, 739.0], [63.1, 741.0], [63.2, 743.0], [63.3, 744.0], [63.4, 746.0], [63.5, 748.0], [63.6, 750.0], [63.7, 752.0], [63.8, 753.0], [63.9, 755.0], [64.0, 757.0], [64.1, 759.0], [64.2, 760.0], [64.3, 762.0], [64.4, 764.0], [64.5, 766.0], [64.6, 768.0], [64.7, 769.0], [64.8, 771.0], [64.9, 773.0], [65.0, 775.0], [65.1, 777.0], [65.2, 779.0], [65.3, 781.0], [65.4, 783.0], [65.5, 784.0], [65.6, 786.0], [65.7, 788.0], [65.8, 791.0], [65.9, 792.0], [66.0, 794.0], [66.1, 796.0], [66.2, 798.0], [66.3, 799.0], [66.4, 801.0], [66.5, 803.0], [66.6, 805.0], [66.7, 806.0], [66.8, 808.0], [66.9, 810.0], [67.0, 812.0], [67.1, 814.0], [67.2, 816.0], [67.3, 818.0], [67.4, 820.0], [67.5, 822.0], [67.6, 824.0], [67.7, 826.0], [67.8, 828.0], [67.9, 829.0], [68.0, 831.0], [68.1, 833.0], [68.2, 835.0], [68.3, 837.0], [68.4, 838.0], [68.5, 841.0], [68.6, 843.0], [68.7, 845.0], [68.8, 847.0], [68.9, 849.0], [69.0, 851.0], [69.1, 852.0], [69.2, 854.0], [69.3, 856.0], [69.4, 858.0], [69.5, 860.0], [69.6, 862.0], [69.7, 863.0], [69.8, 865.0], [69.9, 867.0], [70.0, 869.0], [70.1, 871.0], [70.2, 873.0], [70.3, 875.0], [70.4, 876.0], [70.5, 878.0], [70.6, 880.0], [70.7, 882.0], [70.8, 884.0], [70.9, 886.0], [71.0, 888.0], [71.1, 890.0], [71.2, 892.0], [71.3, 894.0], [71.4, 896.0], [71.5, 898.0], [71.6, 900.0], [71.7, 902.0], [71.8, 905.0], [71.9, 906.0], [72.0, 908.0], [72.1, 910.0], [72.2, 912.0], [72.3, 914.0], [72.4, 916.0], [72.5, 918.0], [72.6, 920.0], [72.7, 922.0], [72.8, 924.0], [72.9, 925.0], [73.0, 928.0], [73.1, 930.0], [73.2, 931.0], [73.3, 933.0], [73.4, 935.0], [73.5, 937.0], [73.6, 939.0], [73.7, 942.0], [73.8, 944.0], [73.9, 946.0], [74.0, 948.0], [74.1, 950.0], [74.2, 952.0], [74.3, 954.0], [74.4, 956.0], [74.5, 958.0], [74.6, 960.0], [74.7, 962.0], [74.8, 964.0], [74.9, 967.0], [75.0, 968.0], [75.1, 970.0], [75.2, 973.0], [75.3, 975.0], [75.4, 977.0], [75.5, 979.0], [75.6, 981.0], [75.7, 983.0], [75.8, 984.0], [75.9, 986.0], [76.0, 989.0], [76.1, 991.0], [76.2, 993.0], [76.3, 995.0], [76.4, 998.0], [76.5, 1000.0], [76.6, 1002.0], [76.7, 1004.0], [76.8, 1006.0], [76.9, 1008.0], [77.0, 1011.0], [77.1, 1013.0], [77.2, 1015.0], [77.3, 1017.0], [77.4, 1020.0], [77.5, 1022.0], [77.6, 1024.0], [77.7, 1027.0], [77.8, 1029.0], [77.9, 1032.0], [78.0, 1034.0], [78.1, 1036.0], [78.2, 1038.0], [78.3, 1040.0], [78.4, 1042.0], [78.5, 1044.0], [78.6, 1047.0], [78.7, 1049.0], [78.8, 1051.0], [78.9, 1054.0], [79.0, 1056.0], [79.1, 1059.0], [79.2, 1061.0], [79.3, 1064.0], [79.4, 1066.0], [79.5, 1068.0], [79.6, 1071.0], [79.7, 1073.0], [79.8, 1075.0], [79.9, 1078.0], [80.0, 1080.0], [80.1, 1083.0], [80.2, 1086.0], [80.3, 1088.0], [80.4, 1091.0], [80.5, 1094.0], [80.6, 1096.0], [80.7, 1099.0], [80.8, 1102.0], [80.9, 1104.0], [81.0, 1107.0], [81.1, 1109.0], [81.2, 1112.0], [81.3, 1115.0], [81.4, 1118.0], [81.5, 1120.0], [81.6, 1123.0], [81.7, 1125.0], [81.8, 1128.0], [81.9, 1130.0], [82.0, 1133.0], [82.1, 1136.0], [82.2, 1138.0], [82.3, 1141.0], [82.4, 1144.0], [82.5, 1147.0], [82.6, 1149.0], [82.7, 1152.0], [82.8, 1155.0], [82.9, 1158.0], [83.0, 1161.0], [83.1, 1164.0], [83.2, 1166.0], [83.3, 1169.0], [83.4, 1171.0], [83.5, 1174.0], [83.6, 1177.0], [83.7, 1179.0], [83.8, 1182.0], [83.9, 1185.0], [84.0, 1188.0], [84.1, 1191.0], [84.2, 1194.0], [84.3, 1197.0], [84.4, 1199.0], [84.5, 1202.0], [84.6, 1205.0], [84.7, 1208.0], [84.8, 1211.0], [84.9, 1214.0], [85.0, 1217.0], [85.1, 1220.0], [85.2, 1223.0], [85.3, 1227.0], [85.4, 1229.0], [85.5, 1232.0], [85.6, 1236.0], [85.7, 1238.0], [85.8, 1241.0], [85.9, 1245.0], [86.0, 1248.0], [86.1, 1252.0], [86.2, 1254.0], [86.3, 1258.0], [86.4, 1261.0], [86.5, 1264.0], [86.6, 1267.0], [86.7, 1271.0], [86.8, 1274.0], [86.9, 1277.0], [87.0, 1281.0], [87.1, 1284.0], [87.2, 1287.0], [87.3, 1291.0], [87.4, 1295.0], [87.5, 1298.0], [87.6, 1302.0], [87.7, 1305.0], [87.8, 1308.0], [87.9, 1312.0], [88.0, 1315.0], [88.1, 1319.0], [88.2, 1322.0], [88.3, 1326.0], [88.4, 1330.0], [88.5, 1333.0], [88.6, 1337.0], [88.7, 1340.0], [88.8, 1345.0], [88.9, 1349.0], [89.0, 1352.0], [89.1, 1357.0], [89.2, 1361.0], [89.3, 1366.0], [89.4, 1370.0], [89.5, 1374.0], [89.6, 1378.0], [89.7, 1382.0], [89.8, 1386.0], [89.9, 1390.0], [90.0, 1395.0], [90.1, 1399.0], [90.2, 1404.0], [90.3, 1408.0], [90.4, 1412.0], [90.5, 1416.0], [90.6, 1420.0], [90.7, 1425.0], [90.8, 1429.0], [90.9, 1435.0], [91.0, 1440.0], [91.1, 1444.0], [91.2, 1449.0], [91.3, 1454.0], [91.4, 1459.0], [91.5, 1463.0], [91.6, 1468.0], [91.7, 1473.0], [91.8, 1478.0], [91.9, 1483.0], [92.0, 1488.0], [92.1, 1493.0], [92.2, 1498.0], [92.3, 1504.0], [92.4, 1510.0], [92.5, 1516.0], [92.6, 1523.0], [92.7, 1528.0], [92.8, 1533.0], [92.9, 1539.0], [93.0, 1544.0], [93.1, 1550.0], [93.2, 1555.0], [93.3, 1561.0], [93.4, 1567.0], [93.5, 1573.0], [93.6, 1579.0], [93.7, 1585.0], [93.8, 1592.0], [93.9, 1598.0], [94.0, 1605.0], [94.1, 1611.0], [94.2, 1617.0], [94.3, 1624.0], [94.4, 1630.0], [94.5, 1638.0], [94.6, 1646.0], [94.7, 1652.0], [94.8, 1659.0], [94.9, 1666.0], [95.0, 1672.0], [95.1, 1678.0], [95.2, 1685.0], [95.3, 1693.0], [95.4, 1702.0], [95.5, 1709.0], [95.6, 1717.0], [95.7, 1727.0], [95.8, 1735.0], [95.9, 1744.0], [96.0, 1751.0], [96.1, 1762.0], [96.2, 1772.0], [96.3, 1781.0], [96.4, 1791.0], [96.5, 1801.0], [96.6, 1813.0], [96.7, 1823.0], [96.8, 1834.0], [96.9, 1846.0], [97.0, 1858.0], [97.1, 1870.0], [97.2, 1882.0], [97.3, 1896.0], [97.4, 1910.0], [97.5, 1921.0], [97.6, 1935.0], [97.7, 1949.0], [97.8, 1963.0], [97.9, 1979.0], [98.0, 1996.0], [98.1, 2015.0], [98.2, 2033.0], [98.3, 2053.0], [98.4, 2070.0], [98.5, 2088.0], [98.6, 2110.0], [98.7, 2138.0], [98.8, 2163.0], [98.9, 2191.0], [99.0, 2220.0], [99.1, 2248.0], [99.2, 2280.0], [99.3, 2318.0], [99.4, 2362.0], [99.5, 2412.0], [99.6, 2474.0], [99.7, 2553.0], [99.8, 2665.0], [99.9, 2821.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 24461.0, "series": [{"data": [[0.0, 17044.0], [600.0, 6316.0], [700.0, 6360.0], [800.0, 6152.0], [900.0, 5767.0], [1000.0, 4977.0], [1100.0, 4311.0], [1200.0, 3670.0], [1300.0, 3008.0], [1400.0, 2472.0], [1500.0, 1994.0], [100.0, 24461.0], [1600.0, 1709.0], [1700.0, 1298.0], [1800.0, 987.0], [1900.0, 811.0], [2000.0, 627.0], [2100.0, 436.0], [2300.0, 266.0], [2200.0, 382.0], [2400.0, 185.0], [2500.0, 137.0], [2600.0, 80.0], [2700.0, 80.0], [2800.0, 56.0], [2900.0, 21.0], [3000.0, 24.0], [3100.0, 10.0], [200.0, 8209.0], [3200.0, 5.0], [3300.0, 8.0], [3400.0, 5.0], [3600.0, 2.0], [300.0, 4715.0], [400.0, 4911.0], [500.0, 5704.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9097.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 59401.0, "series": [{"data": [[0.0, 59401.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 48702.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9097.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.7284752E12, "maxY": 16.0, "series": [{"data": [[1.72848078E12, 12.0], [1.72847916E12, 12.0], [1.72847946E12, 12.0], [1.72847976E12, 12.0], [1.72848006E12, 12.0], [1.72848036E12, 12.0], [1.72848066E12, 12.0], [1.72848108E12, 1.0], [1.72848096E12, 11.511450381679376], [1.72847904E12, 11.378048780487804], [1.7284803E12, 12.0], [1.7284806E12, 12.0], [1.7284809E12, 12.0], [1.72847928E12, 12.0], [1.72847958E12, 12.0], [1.72847988E12, 12.0], [1.72848018E12, 12.0], [1.72848048E12, 12.0], [1.72847982E12, 12.0], [1.72848012E12, 12.0], [1.72848042E12, 12.0], [1.72848072E12, 12.0], [1.72848102E12, 6.790378006872855], [1.7284791E12, 12.0], [1.7284794E12, 12.0], [1.7284797E12, 12.0], [1.72848E12, 12.0], [1.72847934E12, 12.0], [1.72847964E12, 12.0], [1.72847994E12, 12.0], [1.72848024E12, 12.0], [1.72848054E12, 12.0], [1.72848084E12, 12.0], [1.72847922E12, 12.0], [1.72847952E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72847532E12, 2.0], [1.72847538E12, 1.9783393501805053], [1.7284752E12, 2.0], [1.72847526E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72847562E12, 4.0], [1.72847592E12, 4.0], [1.72847694E12, 4.0], [1.72847682E12, 4.0], [1.72847622E12, 4.0], [1.72847652E12, 4.0], [1.72847544E12, 4.0], [1.72847646E12, 4.0], [1.72847676E12, 4.0], [1.72847706E12, 2.35377358490566], [1.72847634E12, 4.0], [1.72847664E12, 4.0], [1.72847574E12, 4.0], [1.72847604E12, 4.0], [1.72847658E12, 4.0], [1.72847598E12, 4.0], [1.72847688E12, 4.0], [1.72847628E12, 4.0], [1.72847586E12, 4.0], [1.72847616E12, 4.0], [1.72847556E12, 4.0], [1.7284761E12, 4.0], [1.7284764E12, 4.0], [1.7284755E12, 4.0], [1.7284758E12, 4.0], [1.72847538E12, 3.954545454545454], [1.728477E12, 4.0], [1.72847568E12, 4.0], [1.7284767E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72848258E12, 16.0], [1.72848228E12, 16.0], [1.72848198E12, 16.0], [1.72848168E12, 16.0], [1.72848138E12, 16.0], [1.72848108E12, 15.953168044077135], [1.7284827E12, 13.114495798319334], [1.7284824E12, 16.0], [1.7284821E12, 16.0], [1.7284818E12, 16.0], [1.7284815E12, 16.0], [1.7284812E12, 16.0], [1.72848252E12, 16.0], [1.72848222E12, 16.0], [1.72848192E12, 16.0], [1.72848162E12, 16.0], [1.72848132E12, 16.0], [1.72848264E12, 16.0], [1.72848234E12, 16.0], [1.72848204E12, 16.0], [1.72848174E12, 16.0], [1.72848144E12, 16.0], [1.72848114E12, 16.0], [1.72848276E12, 1.0], [1.72848246E12, 16.0], [1.72848216E12, 16.0], [1.72848186E12, 16.0], [1.72848156E12, 16.0], [1.72848126E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.72847724E12, 8.0], [1.72847886E12, 8.0], [1.72847784E12, 8.0], [1.72847754E12, 8.0], [1.72847844E12, 8.0], [1.72847814E12, 8.0], [1.72847712E12, 8.0], [1.72847874E12, 8.0], [1.72847904E12, 5.125000000000002], [1.72847868E12, 8.0], [1.72847838E12, 8.0], [1.72847736E12, 8.0], [1.72847898E12, 8.0], [1.72847706E12, 7.960132890365449], [1.72847796E12, 8.0], [1.72847766E12, 8.0], [1.72847856E12, 8.0], [1.72847826E12, 8.0], [1.7284782E12, 8.0], [1.7284779E12, 8.0], [1.7284788E12, 8.0], [1.7284785E12, 8.0], [1.72847748E12, 8.0], [1.72847718E12, 8.0], [1.72847808E12, 8.0], [1.72847778E12, 8.0], [1.72847772E12, 8.0], [1.72847742E12, 8.0], [1.72847832E12, 8.0], [1.72847802E12, 8.0], [1.72847892E12, 8.0], [1.72847862E12, 8.0], [1.7284776E12, 8.0], [1.7284773E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72848276E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 389.96312364425194, "minX": 1.0, "maxY": 871.4634146341461, "series": [{"data": [[2.0, 389.96312364425194], [8.0, 491.16179979904774], [9.0, 555.927777777778], [10.0, 588.0899280575545], [11.0, 658.9108280254776], [3.0, 408.7234042553192], [12.0, 651.4058404558388], [13.0, 683.5925925925926], [14.0, 616.2931034482757], [15.0, 871.4634146341461], [1.0, 433.86092715231825], [4.0, 411.62076564664324], [16.0, 830.9076486891126], [5.0, 452.5066666666668], [6.0, 431.9105691056909], [7.0, 494.1290322580647]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.73483788395909, 619.1150341296895]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.7284752E12, "maxY": 6.068367025E7, "series": [{"data": [[1.72847592E12, 2.982457405E7], [1.72848258E12, 5.7399837083333336E7], [1.72847694E12, 2.8679514516666666E7], [1.72847916E12, 5.487611213333333E7], [1.72847814E12, 4.989600988333333E7], [1.72848036E12, 5.78982688E7], [1.72848138E12, 5.807204763333333E7], [1.72847712E12, 4.985152018333333E7], [1.7284824E12, 5.9869592766666666E7], [1.72847898E12, 5.0478642733333334E7], [1.72847676E12, 3.0402521966666665E7], [1.72847796E12, 4.965979863333333E7], [1.7284812E12, 5.898362136666667E7], [1.72848018E12, 5.7519290166666664E7], [1.72847574E12, 2.998156515E7], [1.72848222E12, 5.888132768333333E7], [1.72848192E12, 5.7718391833333336E7], [1.72847628E12, 2.9157561583333332E7], [1.7284785E12, 4.933806363333333E7], [1.72848072E12, 5.561101956666667E7], [1.72847748E12, 4.930584296666667E7], [1.72847526E12, 1.5563947466666667E7], [1.7284797E12, 5.776120905E7], [1.72848174E12, 5.989454718333333E7], [1.7284761E12, 3.0971666383333333E7], [1.72847934E12, 5.675299621666667E7], [1.72847832E12, 5.167198671666667E7], [1.72848276E12, 300288.81666666665], [1.72848054E12, 5.577423365E7], [1.72848156E12, 5.7770638166666664E7], [1.7284773E12, 5.0136065666666664E7], [1.72847952E12, 5.67748587E7], [1.72847562E12, 3.0742743066666666E7], [1.72847886E12, 4.967426485E7], [1.72848228E12, 5.880807655E7], [1.72847784E12, 4.960705003333333E7], [1.72847682E12, 2.8100262666666668E7], [1.72848006E12, 5.700101796666667E7], [1.72848108E12, 5.2422068916666664E7], [1.72847904E12, 2.7246834316666666E7], [1.72847868E12, 5.07361131E7], [1.72847544E12, 2.9154704666666668E7], [1.7284821E12, 6.0599225233333334E7], [1.72847646E12, 2.9057925033333335E7], [1.7284809E12, 5.498334203333333E7], [1.72847664E12, 2.9955774E7], [1.72847766E12, 5.011312085E7], [1.72847988E12, 5.723941446666667E7], [1.7284782E12, 4.8299034766666666E7], [1.72848162E12, 5.924224968333333E7], [1.72847598E12, 3.1048175766666666E7], [1.72848042E12, 5.3936563083333336E7], [1.72848264E12, 5.864669888333333E7], [1.72847616E12, 3.02520096E7], [1.72847718E12, 4.7533699233333334E7], [1.7284794E12, 5.77994459E7], [1.72848144E12, 6.029401471666667E7], [1.72847802E12, 4.91482467E7], [1.72848024E12, 5.7054545166666664E7], [1.72848246E12, 5.856686905E7], [1.7284758E12, 3.0364154666666668E7], [1.728477E12, 2.7824926833333332E7], [1.72847922E12, 5.596504211666667E7], [1.72848126E12, 5.84640396E7], [1.72848078E12, 5.505971496666667E7], [1.72847532E12, 1.5830539083333334E7], [1.72847754E12, 4.7857453583333336E7], [1.72847976E12, 5.57398661E7], [1.72848198E12, 5.847494261666667E7], [1.72847652E12, 2.8799791433333334E7], [1.72847874E12, 4.94585714E7], [1.72848096E12, 5.59206775E7], [1.72847838E12, 4.88937202E7], [1.7284806E12, 5.61192016E7], [1.72847736E12, 4.85595414E7], [1.7284818E12, 5.8281598516666666E7], [1.72847634E12, 2.94786122E7], [1.72847958E12, 5.613153638333333E7], [1.72847856E12, 4.855167313333333E7], [1.72848012E12, 5.4599978766666666E7], [1.7284779E12, 4.879983821666667E7], [1.72847688E12, 2.9573851866666667E7], [1.72848132E12, 5.806130428333333E7], [1.72847586E12, 3.11877926E7], [1.7284791E12, 5.651259163333333E7], [1.72848234E12, 5.670931988333333E7], [1.72847808E12, 5.012453106666667E7], [1.72847772E12, 4.866968478333333E7], [1.72848114E12, 5.8085395516666666E7], [1.7284755E12, 3.0565981133333333E7], [1.72847994E12, 5.4915231333333336E7], [1.72847892E12, 4.9585930333333336E7], [1.72848216E12, 5.946963565E7], [1.72847568E12, 3.103037695E7], [1.7284767E12, 2.9454937766666666E7], [1.72847724E12, 5.093871296666667E7], [1.72847946E12, 5.631170025E7], [1.72847844E12, 4.832450275E7], [1.72848168E12, 5.882014425E7], [1.7284752E12, 1.581054525E7], [1.72847622E12, 2.92241054E7], [1.72848066E12, 5.7459444233333334E7], [1.7284827E12, 4.5090003666666664E7], [1.7284803E12, 5.4669909916666664E7], [1.72847706E12, 2.5961567783333335E7], [1.72847928E12, 5.599028238333333E7], [1.7284815E12, 6.068367025E7], [1.72848252E12, 5.959053203333333E7], [1.72847604E12, 2.9880383716666665E7], [1.72847826E12, 4.7848140266666666E7], [1.72848048E12, 5.5215463583333336E7], [1.72847658E12, 2.95736152E7], [1.72847982E12, 5.640633781666667E7], [1.7284788E12, 4.941296661666667E7], [1.72848102E12, 2.92548796E7], [1.72848204E12, 5.979883895E7], [1.72847556E12, 2.9124784883333333E7], [1.72847778E12, 5.055422445E7], [1.72848E12, 5.450732686666667E7], [1.7284764E12, 3.0916162766666666E7], [1.72847742E12, 5.085649496666667E7], [1.72847964E12, 5.3376237833333336E7], [1.72847538E12, 1.579525835E7], [1.72847862E12, 5.177125335E7], [1.72848084E12, 5.7322668266666666E7], [1.72848186E12, 5.88929343E7], [1.7284776E12, 4.791371806666667E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72847592E12, 0.0], [1.72848258E12, 0.0], [1.72847694E12, 0.0], [1.72847916E12, 0.0], [1.72847814E12, 0.0], [1.72848036E12, 0.0], [1.72848138E12, 0.0], [1.72847712E12, 0.0], [1.7284824E12, 0.0], [1.72847898E12, 0.0], [1.72847676E12, 0.0], [1.72847796E12, 0.0], [1.7284812E12, 0.0], [1.72848018E12, 0.0], [1.72847574E12, 0.0], [1.72848222E12, 0.0], [1.72848192E12, 0.0], [1.72847628E12, 0.0], [1.7284785E12, 0.0], [1.72848072E12, 0.0], [1.72847748E12, 0.0], [1.72847526E12, 0.0], [1.7284797E12, 0.0], [1.72848174E12, 0.0], [1.7284761E12, 0.0], [1.72847934E12, 0.0], [1.72847832E12, 0.0], [1.72848276E12, 0.0], [1.72848054E12, 0.0], [1.72848156E12, 0.0], [1.7284773E12, 0.0], [1.72847952E12, 0.0], [1.72847562E12, 0.0], [1.72847886E12, 0.0], [1.72848228E12, 0.0], [1.72847784E12, 0.0], [1.72847682E12, 0.0], [1.72848006E12, 0.0], [1.72848108E12, 0.0], [1.72847904E12, 0.0], [1.72847868E12, 0.0], [1.72847544E12, 0.0], [1.7284821E12, 0.0], [1.72847646E12, 0.0], [1.7284809E12, 0.0], [1.72847664E12, 0.0], [1.72847766E12, 0.0], [1.72847988E12, 0.0], [1.7284782E12, 0.0], [1.72848162E12, 0.0], [1.72847598E12, 0.0], [1.72848042E12, 0.0], [1.72848264E12, 0.0], [1.72847616E12, 0.0], [1.72847718E12, 0.0], [1.7284794E12, 0.0], [1.72848144E12, 0.0], [1.72847802E12, 0.0], [1.72848024E12, 0.0], [1.72848246E12, 0.0], [1.7284758E12, 0.0], [1.728477E12, 0.0], [1.72847922E12, 0.0], [1.72848126E12, 0.0], [1.72848078E12, 0.0], [1.72847532E12, 0.0], [1.72847754E12, 0.0], [1.72847976E12, 0.0], [1.72848198E12, 0.0], [1.72847652E12, 0.0], [1.72847874E12, 0.0], [1.72848096E12, 0.0], [1.72847838E12, 0.0], [1.7284806E12, 0.0], [1.72847736E12, 0.0], [1.7284818E12, 0.0], [1.72847634E12, 0.0], [1.72847958E12, 0.0], [1.72847856E12, 0.0], [1.72848012E12, 0.0], [1.7284779E12, 0.0], [1.72847688E12, 0.0], [1.72848132E12, 0.0], [1.72847586E12, 0.0], [1.7284791E12, 0.0], [1.72848234E12, 0.0], [1.72847808E12, 0.0], [1.72847772E12, 0.0], [1.72848114E12, 0.0], [1.7284755E12, 0.0], [1.72847994E12, 0.0], [1.72847892E12, 0.0], [1.72848216E12, 0.0], [1.72847568E12, 0.0], [1.7284767E12, 0.0], [1.72847724E12, 0.0], [1.72847946E12, 0.0], [1.72847844E12, 0.0], [1.72848168E12, 0.0], [1.7284752E12, 0.0], [1.72847622E12, 0.0], [1.72848066E12, 0.0], [1.7284827E12, 0.0], [1.7284803E12, 0.0], [1.72847706E12, 0.0], [1.72847928E12, 0.0], [1.7284815E12, 0.0], [1.72848252E12, 0.0], [1.72847604E12, 0.0], [1.72847826E12, 0.0], [1.72848048E12, 0.0], [1.72847658E12, 0.0], [1.72847982E12, 0.0], [1.7284788E12, 0.0], [1.72848102E12, 0.0], [1.72848204E12, 0.0], [1.72847556E12, 0.0], [1.72847778E12, 0.0], [1.72848E12, 0.0], [1.7284764E12, 0.0], [1.72847742E12, 0.0], [1.72847964E12, 0.0], [1.72847538E12, 0.0], [1.72847862E12, 0.0], [1.72848084E12, 0.0], [1.72848186E12, 0.0], [1.7284776E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72848276E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 374.23032069970844, "minX": 1.7284752E12, "maxY": 895.9869888475837, "series": [{"data": [[1.72847592E12, 422.9595070422539], [1.72848258E12, 851.2039007092204], [1.72847694E12, 389.70243902439023], [1.72847916E12, 635.2319999999994], [1.72847814E12, 488.9613428280779], [1.72848036E12, 638.8308370044056], [1.72848138E12, 810.8887015177066], [1.72847712E12, 508.70788912579997], [1.7284824E12, 829.0757314974179], [1.72847898E12, 500.6983298538627], [1.72847676E12, 436.655172413793], [1.72847796E12, 501.503649635036], [1.7284812E12, 836.136842105262], [1.72848018E12, 644.510313901344], [1.72847574E12, 395.537313432836], [1.72848222E12, 854.3014311270128], [1.72848192E12, 844.8725663716818], [1.72847628E12, 402.5535117056857], [1.7284785E12, 493.44066047471654], [1.72848072E12, 651.1140271493208], [1.72847748E12, 492.04708290685784], [1.72847526E12, 382.28846153846155], [1.7284797E12, 656.8381555153709], [1.72848174E12, 863.8417266187042], [1.7284761E12, 420.2126537785587], [1.72847934E12, 648.189873417722], [1.72847832E12, 497.1200828157352], [1.72848276E12, 427.2857142857143], [1.72848054E12, 669.0700280112042], [1.72848156E12, 831.7276669557677], [1.7284773E12, 488.6974619289338], [1.72847952E12, 670.3392029657094], [1.72847562E12, 439.510018214936], [1.72847886E12, 494.24176954732525], [1.72848228E12, 813.3471283783779], [1.72847784E12, 490.1081632653063], [1.72847682E12, 418.4122807017542], [1.72848006E12, 684.0857959961858], [1.72848108E12, 791.2418181818177], [1.72847904E12, 468.9018867924532], [1.72847868E12, 507.83703703703645], [1.72847544E12, 398.34219269103005], [1.7284821E12, 895.9869888475837], [1.72847646E12, 403.42449664429535], [1.7284809E12, 673.333958724203], [1.72847664E12, 401.05342237061734], [1.72847766E12, 511.4442082890546], [1.72847988E12, 696.7294685990339], [1.7284782E12, 471.9486673247777], [1.72848162E12, 819.5256410256409], [1.72847598E12, 402.70084033613426], [1.72848042E12, 654.1212397447586], [1.72848264E12, 846.2458001768338], [1.72847616E12, 401.58764607679456], [1.72847718E12, 479.9441117764473], [1.7284794E12, 703.3375486381324], [1.72848144E12, 853.7758928571426], [1.72847802E12, 501.13340336134513], [1.72848024E12, 639.0488454706933], [1.72848246E12, 826.4518072289159], [1.7284758E12, 420.9772727272728], [1.728477E12, 401.8758389261742], [1.72847922E12, 651.3083859332736], [1.72848126E12, 808.6893366918555], [1.72848078E12, 615.7529812606482], [1.72847532E12, 391.4577922077924], [1.72847754E12, 475.63762376237634], [1.72847976E12, 643.0635062611797], [1.72848198E12, 840.1228070175442], [1.72847652E12, 414.3091537132988], [1.72847874E12, 492.4059304703479], [1.72848096E12, 658.0124045801516], [1.72847838E12, 477.263944223107], [1.7284806E12, 653.4573502722324], [1.72847736E12, 490.6040816326533], [1.7284818E12, 804.4420168067223], [1.72847634E12, 407.15959252971135], [1.72847958E12, 648.6846846846842], [1.72847856E12, 481.0310310310313], [1.72848012E12, 630.1537117903928], [1.7284779E12, 468.2370731707321], [1.72847688E12, 428.2241992882563], [1.72848132E12, 800.1923076923085], [1.72847586E12, 448.3308411214955], [1.7284791E12, 619.2952789699572], [1.72848234E12, 819.6923736075403], [1.72847808E12, 515.4362272240096], [1.72847772E12, 501.08691099476414], [1.72848114E12, 836.8039895923679], [1.7284755E12, 404.83361629881125], [1.72847994E12, 667.9303621169912], [1.72847892E12, 504.2463157894737], [1.72848216E12, 834.6423611111111], [1.72847568E12, 405.97466216216225], [1.7284767E12, 442.7583025830261], [1.72847724E12, 483.08980827447016], [1.72847946E12, 667.5876865671646], [1.72847844E12, 472.79607843137285], [1.72848168E12, 842.4154250657313], [1.7284752E12, 395.71287128712885], [1.72847622E12, 380.6740858505566], [1.72848066E12, 642.622103386809], [1.7284827E12, 687.0598739495804], [1.7284803E12, 648.6269196025293], [1.72847706E12, 454.1539961013645], [1.72847928E12, 678.0583804143125], [1.7284815E12, 850.8555066079298], [1.72848252E12, 840.5452946350032], [1.72847604E12, 406.7559322033893], [1.72847826E12, 494.39237899073146], [1.72848048E12, 624.0259965337963], [1.72847658E12, 413.8431034482757], [1.72847982E12, 634.3661347517718], [1.7284788E12, 496.031055900621], [1.72848102E12, 477.4295532646047], [1.72848204E12, 826.3823024054981], [1.72847556E12, 403.7340067340066], [1.72847778E12, 486.10526315789537], [1.72848E12, 609.1010951979777], [1.7284764E12, 427.35062611806813], [1.72847742E12, 487.92441266598587], [1.72847964E12, 634.2442477876097], [1.72847538E12, 374.23032069970844], [1.72847862E12, 501.7316561844867], [1.72848084E12, 669.9990671641792], [1.72848186E12, 792.7232289950583], [1.7284776E12, 475.4295634920636]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72848276E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 246.82798833819226, "minX": 1.7284752E12, "maxY": 610.8057620817842, "series": [{"data": [[1.72847592E12, 277.1690140845069], [1.72848258E12, 586.0159574468101], [1.72847694E12, 259.09593495934973], [1.72847916E12, 432.22844444444473], [1.72847814E12, 329.1424211597157], [1.72848036E12, 429.2986784140966], [1.72848138E12, 553.4561551433394], [1.72847712E12, 344.6226012793174], [1.7284824E12, 565.9354561101555], [1.72847898E12, 336.90709812108514], [1.72847676E12, 286.7368421052632], [1.72847796E12, 337.6454640250259], [1.7284812E12, 569.9999999999991], [1.72848018E12, 436.4789237668163], [1.72847574E12, 259.3466003316748], [1.72848222E12, 583.1806797853319], [1.72848192E12, 579.7132743362835], [1.72847628E12, 265.8645484949835], [1.7284785E12, 333.4014447884418], [1.72848072E12, 443.13665158371015], [1.72847748E12, 332.3520982599791], [1.72847526E12, 247.52884615384616], [1.7284797E12, 445.6645569620253], [1.72848174E12, 585.9028776978415], [1.7284761E12, 272.9420035149384], [1.72847934E12, 438.47197106690754], [1.72847832E12, 331.75258799171803], [1.72848276E12, 291.2857142857143], [1.72848054E12, 457.6283846872088], [1.72848156E12, 571.8863833477891], [1.7284773E12, 328.2923857868021], [1.72847952E12, 454.8758109360517], [1.72847562E12, 289.6156648451732], [1.72847886E12, 332.93004115226347], [1.72848228E12, 555.2027027027019], [1.72847784E12, 330.0173469387754], [1.72847682E12, 281.70877192982437], [1.72848006E12, 465.4356530028597], [1.72848108E12, 543.8936363636368], [1.72847904E12, 312.41320754716935], [1.72847868E12, 341.2179894179892], [1.72847544E12, 262.916943521595], [1.7284821E12, 610.8057620817842], [1.72847646E12, 268.8674496644296], [1.7284809E12, 462.93245778611674], [1.72847664E12, 265.43238731218713], [1.72847766E12, 345.99681190223185], [1.72847988E12, 471.30241545893733], [1.7284782E12, 320.68904244817384], [1.72848162E12, 558.9504273504278], [1.72847598E12, 260.75126050420164], [1.72848042E12, 446.8650865998185], [1.72848264E12, 577.5552608311234], [1.72847616E12, 261.64440734557655], [1.72847718E12, 326.03792415169727], [1.7284794E12, 475.2091439688712], [1.72848144E12, 579.0241071428561], [1.72847802E12, 339.78571428571405], [1.72848024E12, 432.5390763765546], [1.72848246E12, 565.8562822719456], [1.7284758E12, 274.94930069930024], [1.728477E12, 268.7802013422818], [1.72847922E12, 443.0261496844001], [1.72848126E12, 553.701091519732], [1.72848078E12, 420.4710391822832], [1.72847532E12, 255.48701298701283], [1.72847754E12, 322.9990099009895], [1.72847976E12, 439.0491949910552], [1.72848198E12, 575.4868421052627], [1.72847652E12, 276.56303972366123], [1.72847874E12, 332.98875255623705], [1.72848096E12, 446.37690839694636], [1.72847838E12, 321.3894422310759], [1.7284806E12, 443.79582577132544], [1.72847736E12, 333.4112244897961], [1.7284818E12, 549.8571428571431], [1.72847634E12, 269.21901528013586], [1.72847958E12, 438.12612612612565], [1.72847856E12, 325.5285285285284], [1.72848012E12, 432.47336244541435], [1.7284779E12, 316.65463414634155], [1.72847688E12, 283.7669039145907], [1.72848132E12, 550.1195652173908], [1.72847586E12, 290.3271028037391], [1.7284791E12, 417.79399141630915], [1.72848234E12, 563.8534704370182], [1.72847808E12, 345.35691318327935], [1.72847772E12, 338.87539267015717], [1.72848114E12, 573.143972246315], [1.7284755E12, 264.39049235993275], [1.72847994E12, 457.5292479108635], [1.72847892E12, 340.1052631578946], [1.72848216E12, 570.0746527777784], [1.72847568E12, 264.2837837837835], [1.7284767E12, 293.50922509225063], [1.72847724E12, 323.07265388496455], [1.72847946E12, 453.416044776119], [1.72847844E12, 320.94705882352923], [1.72848168E12, 577.8790534618755], [1.7284752E12, 257.97029702970264], [1.72847622E12, 250.65182829888715], [1.72848066E12, 433.7344028520495], [1.7284827E12, 471.6880252100837], [1.7284803E12, 443.38030713640455], [1.72847706E12, 304.6861598440544], [1.72847928E12, 463.7476459510358], [1.7284815E12, 579.007929515419], [1.72848252E12, 571.8408091468776], [1.72847604E12, 267.01525423728816], [1.72847826E12, 335.53656024716787], [1.72848048E12, 426.42027729636044], [1.72847658E12, 275.0], [1.72847982E12, 430.51595744680884], [1.7284788E12, 334.0455486542443], [1.72848102E12, 321.56013745704445], [1.72848204E12, 560.7835051546394], [1.72847556E12, 267.06565656565647], [1.72847778E12, 326.3542510121454], [1.72848E12, 416.36225779275446], [1.7284764E12, 279.95706618962436], [1.72847742E12, 325.05822267620033], [1.72847964E12, 434.9035398230089], [1.72847538E12, 246.82798833819226], [1.72847862E12, 335.486373165618], [1.72848084E12, 450.21548507462694], [1.72848186E12, 542.2677100494234], [1.7284776E12, 321.8005952380952]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72848276E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7284752E12, "maxY": 4.9E-324, "series": [{"data": [[1.72847592E12, 0.0], [1.72848258E12, 0.0], [1.72847694E12, 0.0], [1.72847916E12, 0.0], [1.72847814E12, 0.0], [1.72848036E12, 0.0], [1.72848138E12, 0.0], [1.72847712E12, 0.0], [1.7284824E12, 0.0], [1.72847898E12, 0.0], [1.72847676E12, 0.0], [1.72847796E12, 0.0], [1.7284812E12, 0.0], [1.72848018E12, 0.0], [1.72847574E12, 0.0], [1.72848222E12, 0.0], [1.72848192E12, 0.0], [1.72847628E12, 0.0], [1.7284785E12, 0.0], [1.72848072E12, 0.0], [1.72847748E12, 0.0], [1.72847526E12, 0.0], [1.7284797E12, 0.0], [1.72848174E12, 0.0], [1.7284761E12, 0.0], [1.72847934E12, 0.0], [1.72847832E12, 0.0], [1.72848276E12, 0.0], [1.72848054E12, 0.0], [1.72848156E12, 0.0], [1.7284773E12, 0.0], [1.72847952E12, 0.0], [1.72847562E12, 0.0], [1.72847886E12, 0.0], [1.72848228E12, 0.0], [1.72847784E12, 0.0], [1.72847682E12, 0.0], [1.72848006E12, 0.0], [1.72848108E12, 0.0], [1.72847904E12, 0.0], [1.72847868E12, 0.0], [1.72847544E12, 0.0], [1.7284821E12, 0.0], [1.72847646E12, 0.0], [1.7284809E12, 0.0], [1.72847664E12, 0.0], [1.72847766E12, 0.0], [1.72847988E12, 0.0], [1.7284782E12, 0.0], [1.72848162E12, 0.0], [1.72847598E12, 0.0], [1.72848042E12, 0.0], [1.72848264E12, 0.0], [1.72847616E12, 0.0], [1.72847718E12, 0.0], [1.7284794E12, 0.0], [1.72848144E12, 0.0], [1.72847802E12, 0.0], [1.72848024E12, 0.0], [1.72848246E12, 0.0], [1.7284758E12, 0.0], [1.728477E12, 0.0], [1.72847922E12, 0.0], [1.72848126E12, 0.0], [1.72848078E12, 0.0], [1.72847532E12, 0.0], [1.72847754E12, 0.0], [1.72847976E12, 0.0], [1.72848198E12, 0.0], [1.72847652E12, 0.0], [1.72847874E12, 0.0], [1.72848096E12, 0.0], [1.72847838E12, 0.0], [1.7284806E12, 0.0], [1.72847736E12, 0.0], [1.7284818E12, 0.0], [1.72847634E12, 0.0], [1.72847958E12, 0.0], [1.72847856E12, 0.0], [1.72848012E12, 0.0], [1.7284779E12, 0.0], [1.72847688E12, 0.0], [1.72848132E12, 0.0], [1.72847586E12, 0.0], [1.7284791E12, 0.0], [1.72848234E12, 0.0], [1.72847808E12, 0.0], [1.72847772E12, 0.0], [1.72848114E12, 0.0], [1.7284755E12, 0.0], [1.72847994E12, 0.0], [1.72847892E12, 0.0], [1.72848216E12, 0.0], [1.72847568E12, 0.0], [1.7284767E12, 0.0], [1.72847724E12, 0.0], [1.72847946E12, 0.0], [1.72847844E12, 0.0], [1.72848168E12, 0.0], [1.7284752E12, 0.0], [1.72847622E12, 0.0], [1.72848066E12, 0.0], [1.7284827E12, 0.0], [1.7284803E12, 0.0], [1.72847706E12, 0.0], [1.72847928E12, 0.0], [1.7284815E12, 0.0], [1.72848252E12, 0.0], [1.72847604E12, 0.0], [1.72847826E12, 0.0], [1.72848048E12, 0.0], [1.72847658E12, 0.0], [1.72847982E12, 0.0], [1.7284788E12, 0.0], [1.72848102E12, 0.0], [1.72848204E12, 0.0], [1.72847556E12, 0.0], [1.72847778E12, 0.0], [1.72848E12, 0.0], [1.7284764E12, 0.0], [1.72847742E12, 0.0], [1.72847964E12, 0.0], [1.72847538E12, 0.0], [1.72847862E12, 0.0], [1.72848084E12, 0.0], [1.72848186E12, 0.0], [1.7284776E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72848276E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.7284752E12, "maxY": 3692.0, "series": [{"data": [[1.72847592E12, 1495.0], [1.72848258E12, 3445.0], [1.72847694E12, 1434.0], [1.72847916E12, 2736.0], [1.72847814E12, 1838.0], [1.72848036E12, 2555.0], [1.72848138E12, 3024.0], [1.72847712E12, 1957.0], [1.7284824E12, 3328.0], [1.72847898E12, 2131.0], [1.72847676E12, 1498.0], [1.72847796E12, 1899.0], [1.7284812E12, 3017.0], [1.72848018E12, 2393.0], [1.72847574E12, 1755.0], [1.72848222E12, 3396.0], [1.72848192E12, 2908.0], [1.72847628E12, 1419.0], [1.7284785E12, 2014.0], [1.72848072E12, 2558.0], [1.72847748E12, 1984.0], [1.72847526E12, 1582.0], [1.7284797E12, 2976.0], [1.72848174E12, 3410.0], [1.7284761E12, 1539.0], [1.72847934E12, 2821.0], [1.72847832E12, 1980.0], [1.72848276E12, 933.0], [1.72848054E12, 2415.0], [1.72848156E12, 3400.0], [1.7284773E12, 1979.0], [1.72847952E12, 2730.0], [1.72847562E12, 1437.0], [1.72847886E12, 2074.0], [1.72848228E12, 3356.0], [1.72847784E12, 1861.0], [1.72847682E12, 1788.0], [1.72848006E12, 2446.0], [1.72848108E12, 3094.0], [1.72847904E12, 1961.0], [1.72847868E12, 1958.0], [1.72847544E12, 1449.0], [1.7284821E12, 3110.0], [1.72847646E12, 1552.0], [1.7284809E12, 2534.0], [1.72847664E12, 1365.0], [1.72847766E12, 1862.0], [1.72847988E12, 2822.0], [1.7284782E12, 1847.0], [1.72848162E12, 3473.0], [1.72847598E12, 1766.0], [1.72848042E12, 2814.0], [1.72848264E12, 2954.0], [1.72847616E12, 1649.0], [1.72847718E12, 1873.0], [1.7284794E12, 2550.0], [1.72848144E12, 3310.0], [1.72847802E12, 1851.0], [1.72848024E12, 2579.0], [1.72848246E12, 2949.0], [1.7284758E12, 1508.0], [1.728477E12, 1748.0], [1.72847922E12, 2303.0], [1.72848126E12, 3075.0], [1.72848078E12, 2478.0], [1.72847532E12, 1320.0], [1.72847754E12, 1925.0], [1.72847976E12, 2514.0], [1.72848198E12, 3150.0], [1.72847652E12, 1456.0], [1.72847874E12, 1951.0], [1.72848096E12, 2285.0], [1.72847838E12, 1744.0], [1.7284806E12, 2511.0], [1.72847736E12, 1788.0], [1.7284818E12, 3298.0], [1.72847634E12, 1697.0], [1.72847958E12, 2657.0], [1.72847856E12, 1703.0], [1.72848012E12, 2768.0], [1.7284779E12, 1849.0], [1.72847688E12, 1443.0], [1.72848132E12, 3167.0], [1.72847586E12, 1673.0], [1.7284791E12, 2525.0], [1.72848234E12, 3143.0], [1.72847808E12, 1813.0], [1.72847772E12, 1848.0], [1.72848114E12, 3161.0], [1.7284755E12, 1531.0], [1.72847994E12, 2851.0], [1.72847892E12, 1877.0], [1.72848216E12, 2817.0], [1.72847568E12, 1492.0], [1.7284767E12, 1708.0], [1.72847724E12, 1903.0], [1.72847946E12, 2291.0], [1.72847844E12, 1788.0], [1.72848168E12, 3056.0], [1.7284752E12, 1592.0], [1.72847622E12, 1572.0], [1.72848066E12, 2534.0], [1.7284827E12, 3348.0], [1.7284803E12, 2595.0], [1.72847706E12, 1594.0], [1.72847928E12, 2341.0], [1.7284815E12, 3052.0], [1.72848252E12, 3692.0], [1.72847604E12, 1699.0], [1.72847826E12, 1700.0], [1.72848048E12, 2619.0], [1.72847658E12, 1459.0], [1.72847982E12, 2292.0], [1.7284788E12, 2130.0], [1.72848102E12, 1999.0], [1.72848204E12, 3326.0], [1.72847556E12, 1439.0], [1.72847778E12, 1968.0], [1.72848E12, 2570.0], [1.7284764E12, 1440.0], [1.72847742E12, 1960.0], [1.72847964E12, 2209.0], [1.72847538E12, 1441.0], [1.72847862E12, 2010.0], [1.72848084E12, 2564.0], [1.72848186E12, 3412.0], [1.7284776E12, 1894.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72847592E12, 913.8000000000004], [1.72848258E12, 1854.8000000000002], [1.72847694E12, 872.0], [1.72847916E12, 1407.0], [1.72847814E12, 1045.0000000000002], [1.72848036E12, 1450.3999999999999], [1.72848138E12, 1756.8999999999999], [1.72847712E12, 1073.1], [1.7284824E12, 1778.7], [1.72847898E12, 1064.1], [1.72847676E12, 943.0], [1.72847796E12, 1050.0], [1.7284812E12, 1804.6000000000004], [1.72848018E12, 1426.7999999999997], [1.72847574E12, 870.6], [1.72848222E12, 1802.3000000000002], [1.72848192E12, 1830.6], [1.72847628E12, 878.2], [1.7284785E12, 1066.0], [1.72848072E12, 1412.8], [1.72847748E12, 1060.0], [1.72847526E12, 881.7], [1.7284797E12, 1453.7000000000007], [1.72848174E12, 1849.7], [1.7284761E12, 859.0], [1.72847934E12, 1432.0], [1.72847832E12, 1092.0], [1.72848276E12, 933.0], [1.72848054E12, 1403.4], [1.72848156E12, 1771.2000000000003], [1.7284773E12, 1070.4], [1.72847952E12, 1428.0], [1.72847562E12, 884.0], [1.72847886E12, 1065.4], [1.72848228E12, 1766.5], [1.72847784E12, 1075.6], [1.72847682E12, 880.9], [1.72848006E12, 1507.0], [1.72848108E12, 1717.0], [1.72847904E12, 1014.7], [1.72847868E12, 1090.4], [1.72847544E12, 875.0], [1.7284821E12, 1871.6000000000001], [1.72847646E12, 906.3000000000001], [1.7284809E12, 1446.3000000000002], [1.72847664E12, 873.0], [1.72847766E12, 1032.8000000000002], [1.72847988E12, 1519.0], [1.7284782E12, 1033.8000000000002], [1.72848162E12, 1796.5000000000005], [1.72847598E12, 903.1999999999999], [1.72848042E12, 1429.0000000000002], [1.72848264E12, 1793.2000000000003], [1.72847616E12, 872.0], [1.72847718E12, 1052.7], [1.7284794E12, 1502.1], [1.72848144E12, 1831.2999999999997], [1.72847802E12, 1054.7], [1.72848024E12, 1414.6000000000001], [1.72848246E12, 1818.0000000000005], [1.7284758E12, 927.8000000000002], [1.728477E12, 854.2000000000003], [1.72847922E12, 1449.0], [1.72848126E12, 1730.0], [1.72848078E12, 1358.0], [1.72847532E12, 858.8000000000002], [1.72847754E12, 1018.3999999999999], [1.72847976E12, 1395.9], [1.72848198E12, 1768.9], [1.72847652E12, 903.0], [1.72847874E12, 1054.1], [1.72848096E12, 1413.0], [1.72847838E12, 1017.0], [1.7284806E12, 1395.0], [1.72847736E12, 1027.0], [1.7284818E12, 1821.0], [1.72847634E12, 915.0], [1.72847958E12, 1391.2999999999997], [1.72847856E12, 1034.0], [1.72848012E12, 1362.8000000000002], [1.7284779E12, 1031.4], [1.72847688E12, 887.0999999999999], [1.72848132E12, 1766.6], [1.72847586E12, 932.4000000000001], [1.7284791E12, 1394.0], [1.72848234E12, 1798.4], [1.72847808E12, 1083.6], [1.72847772E12, 1053.3999999999999], [1.72848114E12, 1817.0], [1.7284755E12, 878.0], [1.72847994E12, 1404.0000000000002], [1.72847892E12, 1031.7999999999997], [1.72848216E12, 1784.2000000000003], [1.72847568E12, 874.5000000000002], [1.7284767E12, 953.0999999999999], [1.72847724E12, 1066.8000000000004], [1.72847946E12, 1433.4], [1.72847844E12, 1041.9], [1.72848168E12, 1734.8], [1.7284752E12, 855.8000000000001], [1.72847622E12, 865.0], [1.72848066E12, 1461.4], [1.7284827E12, 1550.8000000000002], [1.7284803E12, 1390.2000000000003], [1.72847706E12, 1011.6], [1.72847928E12, 1409.4], [1.7284815E12, 1840.0], [1.72848252E12, 1815.0000000000002], [1.72847604E12, 883.0], [1.72847826E12, 1048.0], [1.72848048E12, 1359.5], [1.72847658E12, 919.0], [1.72847982E12, 1400.3000000000002], [1.7284788E12, 1046.2000000000003], [1.72848102E12, 1045.4], [1.72848204E12, 1816.5], [1.72847556E12, 886.0], [1.72847778E12, 1053.3000000000002], [1.72848E12, 1366.0], [1.7284764E12, 925.0], [1.72847742E12, 1092.0], [1.72847964E12, 1402.0], [1.72847538E12, 826.8000000000001], [1.72847862E12, 1072.0], [1.72848084E12, 1425.4], [1.72848186E12, 1746.0], [1.7284776E12, 1039.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72847592E12, 1270.5899999999951], [1.72848258E12, 2586.26], [1.72847694E12, 1239.9600000000005], [1.72847916E12, 1966.88], [1.72847814E12, 1529.0], [1.72848036E12, 2157.160000000007], [1.72848138E12, 2534.2499999999854], [1.72847712E12, 1674.66], [1.7284824E12, 2500.949999999996], [1.72847898E12, 1522.0299999999975], [1.72847676E12, 1267.0400000000004], [1.72847796E12, 1571.1999999999996], [1.7284812E12, 2499.0], [1.72848018E12, 2074.4399999999946], [1.72847574E12, 1297.8400000000001], [1.72848222E12, 2781.9099999999994], [1.72848192E12, 2414.8300000000004], [1.72847628E12, 1218.05], [1.7284785E12, 1618.199999999997], [1.72848072E12, 2028.0], [1.72847748E12, 1541.7600000000002], [1.72847526E12, 1273.8400000000001], [1.7284797E12, 2017.8600000000001], [1.72848174E12, 2530.9199999999983], [1.7284761E12, 1291.7999999999988], [1.72847934E12, 2091.8700000000035], [1.72847832E12, 1624.250000000001], [1.72848276E12, 933.0], [1.72848054E12, 2052.3199999999997], [1.72848156E12, 2598.9800000000005], [1.7284773E12, 1556.6799999999998], [1.72847952E12, 2133.6000000000004], [1.72847562E12, 1307.0], [1.72847886E12, 1576.0], [1.72848228E12, 2635.300000000002], [1.72847784E12, 1547.7599999999998], [1.72847682E12, 1258.529999999998], [1.72848006E12, 2058.0], [1.72848108E12, 2453.9300000000003], [1.72847904E12, 1705.729999999999], [1.72847868E12, 1626.6399999999994], [1.72847544E12, 1213.7400000000011], [1.7284821E12, 2555.23], [1.72847646E12, 1243.1799999999998], [1.7284809E12, 2139.8499999999967], [1.72847664E12, 1207.0], [1.72847766E12, 1510.5400000000004], [1.72847988E12, 2097.3600000000024], [1.7284782E12, 1500.8800000000008], [1.72848162E12, 2642.7699999999995], [1.72847598E12, 1208.04], [1.72848042E12, 2195.04], [1.72848264E12, 2510.7200000000034], [1.72847616E12, 1424.0], [1.72847718E12, 1488.94], [1.7284794E12, 2082.7800000000007], [1.72848144E12, 2694.079999999998], [1.72847802E12, 1630.7000000000003], [1.72848024E12, 2082.2800000000007], [1.72848246E12, 2719.359999999997], [1.7284758E12, 1356.2399999999998], [1.728477E12, 1307.4099999999987], [1.72847922E12, 1963.0], [1.72848126E12, 2691.879999999999], [1.72848078E12, 1875.0], [1.72847532E12, 1281.0100000000002], [1.72847754E12, 1584.7099999999996], [1.72847976E12, 2099.969999999998], [1.72848198E12, 2625.129999999999], [1.72847652E12, 1366.6000000000006], [1.72847874E12, 1509.920000000002], [1.72848096E12, 2031.1699999999994], [1.72847838E12, 1516.7000000000003], [1.7284806E12, 2029.7300000000002], [1.72847736E12, 1544.9399999999985], [1.7284818E12, 2609.45], [1.72847634E12, 1311.2000000000003], [1.72847958E12, 2187.5700000000015], [1.72847856E12, 1478.0], [1.72848012E12, 2099.9399999999996], [1.7284779E12, 1461.5800000000002], [1.72847688E12, 1344.1600000000003], [1.72848132E12, 2520.12], [1.72847586E12, 1249.04], [1.7284791E12, 2081.0199999999995], [1.72848234E12, 2499.879999999999], [1.72847808E12, 1537.32], [1.72847772E12, 1605.8799999999999], [1.72848114E12, 2631.2000000000044], [1.7284755E12, 1226.8000000000002], [1.72847994E12, 2084.76], [1.72847892E12, 1511.92], [1.72848216E12, 2532.88], [1.72847568E12, 1252.0800000000022], [1.7284767E12, 1440.1300000000006], [1.72847724E12, 1554.920000000001], [1.72847946E12, 1984.35], [1.72847844E12, 1543.0599999999995], [1.72848168E12, 2460.119999999999], [1.7284752E12, 1413.84], [1.72847622E12, 1230.9000000000003], [1.72848066E12, 2020.9299999999998], [1.7284827E12, 2405.1600000000008], [1.7284803E12, 2017.800000000001], [1.72847706E12, 1433.3800000000006], [1.72847928E12, 2095.1599999999926], [1.7284815E12, 2592.0000000000027], [1.72848252E12, 2596.119999999997], [1.72847604E12, 1414.060000000001], [1.72847826E12, 1503.4799999999996], [1.72848048E12, 2077.700000000004], [1.72847658E12, 1311.419999999999], [1.72847982E12, 2017.1000000000004], [1.7284788E12, 1556.260000000001], [1.72848102E12, 1634.6299999999983], [1.72848204E12, 2634.0999999999995], [1.72847556E12, 1261.3999999999987], [1.72847778E12, 1561.3200000000002], [1.72848E12, 2070.12], [1.7284764E12, 1333.3999999999987], [1.72847742E12, 1614.2000000000005], [1.72847964E12, 1957.4500000000003], [1.72847538E12, 1195.6000000000001], [1.72847862E12, 1506.7000000000003], [1.72848084E12, 2140.3999999999996], [1.72848186E12, 2515.7], [1.7284776E12, 1437.6399999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72847592E12, 1030.3999999999996], [1.72848258E12, 2128.4999999999995], [1.72847694E12, 1047.0], [1.72847916E12, 1648.9000000000008], [1.72847814E12, 1229.8], [1.72848036E12, 1670.0000000000002], [1.72848138E12, 2022.199999999999], [1.72847712E12, 1240.5499999999995], [1.7284824E12, 2040.85], [1.72847898E12, 1214.3499999999997], [1.72847676E12, 1071.7999999999997], [1.72847796E12, 1203.0], [1.7284812E12, 2096.3500000000004], [1.72848018E12, 1657.0], [1.72847574E12, 1029.8], [1.72848222E12, 2082.0], [1.72848192E12, 2059.9], [1.72847628E12, 980.1499999999999], [1.7284785E12, 1234.5], [1.72848072E12, 1668.4], [1.72847748E12, 1196.2999999999997], [1.72847526E12, 1031.4999999999995], [1.7284797E12, 1711.099999999998], [1.72848174E12, 2050.3999999999996], [1.7284761E12, 1013.0], [1.72847934E12, 1638.0], [1.72847832E12, 1293.9499999999998], [1.72848276E12, 933.0], [1.72848054E12, 1624.8], [1.72848156E12, 2008.8999999999994], [1.7284773E12, 1205.6999999999998], [1.72847952E12, 1677.0], [1.72847562E12, 1054.0], [1.72847886E12, 1237.0999999999995], [1.72848228E12, 2046.0], [1.72847784E12, 1254.85], [1.72847682E12, 1028.1499999999996], [1.72848006E12, 1695.5], [1.72848108E12, 1964.7000000000003], [1.72847904E12, 1225.1999999999998], [1.72847868E12, 1239.0], [1.72847544E12, 988.7], [1.7284821E12, 2097.0], [1.72847646E12, 1000.0499999999998], [1.7284809E12, 1690.65], [1.72847664E12, 993.0], [1.72847766E12, 1253.9], [1.72847988E12, 1692.1999999999996], [1.7284782E12, 1160.8999999999999], [1.72848162E12, 2076.0], [1.72847598E12, 1005.1999999999999], [1.72848042E12, 1646.0], [1.72848264E12, 2086.3999999999996], [1.72847616E12, 1010.0], [1.72847718E12, 1212.0499999999988], [1.7284794E12, 1706.0499999999995], [1.72848144E12, 2140.6000000000004], [1.72847802E12, 1225.35], [1.72848024E12, 1635.2999999999997], [1.72848246E12, 2091.3999999999996], [1.7284758E12, 1043.8500000000004], [1.728477E12, 1007.3499999999998], [1.72847922E12, 1640.5], [1.72848126E12, 2078.7999999999997], [1.72848078E12, 1587.5], [1.72847532E12, 996.6000000000001], [1.72847754E12, 1198.849999999999], [1.72847976E12, 1647.2999999999997], [1.72848198E12, 2092.250000000001], [1.72847652E12, 1040.0], [1.72847874E12, 1205.1499999999999], [1.72848096E12, 1623.1999999999998], [1.72847838E12, 1175.75], [1.7284806E12, 1595.85], [1.72847736E12, 1196.85], [1.7284818E12, 2077.9], [1.72847634E12, 1029.0], [1.72847958E12, 1652.8000000000002], [1.72847856E12, 1188.0], [1.72848012E12, 1567.4], [1.7284779E12, 1202.4999999999995], [1.72847688E12, 1086.65], [1.72848132E12, 2037.249999999998], [1.72847586E12, 1063.0], [1.7284791E12, 1659.0000000000005], [1.72848234E12, 2064.6], [1.72847808E12, 1279.4999999999998], [1.72847772E12, 1204.7999999999993], [1.72848114E12, 2111.0999999999995], [1.7284755E12, 1017.0], [1.72847994E12, 1654.7999999999993], [1.72847892E12, 1237.299999999999], [1.72848216E12, 2049.0], [1.72847568E12, 977.8500000000003], [1.7284767E12, 1058.4], [1.72847724E12, 1247.0], [1.72847946E12, 1641.4499999999994], [1.72847844E12, 1221.6499999999996], [1.72848168E12, 2025.6999999999996], [1.7284752E12, 989.2], [1.72847622E12, 990.5], [1.72848066E12, 1662.6999999999998], [1.7284827E12, 1787.0], [1.7284803E12, 1635.199999999999], [1.72847706E12, 1183.1999999999998], [1.72847928E12, 1645.85], [1.7284815E12, 2141.0000000000005], [1.72848252E12, 2092.4999999999986], [1.72847604E12, 979.4499999999999], [1.72847826E12, 1229.3999999999996], [1.72848048E12, 1560.0], [1.72847658E12, 1062.349999999999], [1.72847982E12, 1648.0], [1.7284788E12, 1212.85], [1.72848102E12, 1255.0], [1.72848204E12, 2074.75], [1.72847556E12, 985.75], [1.72847778E12, 1266.7499999999998], [1.72848E12, 1618.1999999999998], [1.7284764E12, 1084.0], [1.72847742E12, 1261.0], [1.72847964E12, 1594.9], [1.72847538E12, 974.2000000000002], [1.72847862E12, 1270.0], [1.72848084E12, 1675.1499999999992], [1.72848186E12, 2034.25], [1.7284776E12, 1178.1]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72847592E12, 36.0], [1.72848258E12, 57.0], [1.72847694E12, 31.0], [1.72847916E12, 44.0], [1.72847814E12, 36.0], [1.72848036E12, 34.0], [1.72848138E12, 56.0], [1.72847712E12, 35.0], [1.7284824E12, 58.0], [1.72847898E12, 34.0], [1.72847676E12, 33.0], [1.72847796E12, 32.0], [1.7284812E12, 64.0], [1.72848018E12, 39.0], [1.72847574E12, 33.0], [1.72848222E12, 62.0], [1.72848192E12, 48.0], [1.72847628E12, 37.0], [1.7284785E12, 34.0], [1.72848072E12, 39.0], [1.72847748E12, 36.0], [1.72847526E12, 34.0], [1.7284797E12, 39.0], [1.72848174E12, 60.0], [1.7284761E12, 35.0], [1.72847934E12, 33.0], [1.72847832E12, 34.0], [1.72848276E12, 85.0], [1.72848054E12, 39.0], [1.72848156E12, 61.0], [1.7284773E12, 34.0], [1.72847952E12, 43.0], [1.72847562E12, 34.0], [1.72847886E12, 35.0], [1.72848228E12, 57.0], [1.72847784E12, 40.0], [1.72847682E12, 35.0], [1.72848006E12, 47.0], [1.72848108E12, 54.0], [1.72847904E12, 39.0], [1.72847868E12, 29.0], [1.72847544E12, 33.0], [1.7284821E12, 64.0], [1.72847646E12, 36.0], [1.7284809E12, 42.0], [1.72847664E12, 34.0], [1.72847766E12, 34.0], [1.72847988E12, 40.0], [1.7284782E12, 34.0], [1.72848162E12, 52.0], [1.72847598E12, 37.0], [1.72848042E12, 40.0], [1.72848264E12, 60.0], [1.72847616E12, 33.0], [1.72847718E12, 37.0], [1.7284794E12, 45.0], [1.72848144E12, 61.0], [1.72847802E12, 32.0], [1.72848024E12, 39.0], [1.72848246E12, 58.0], [1.7284758E12, 35.0], [1.728477E12, 36.0], [1.72847922E12, 41.0], [1.72848126E12, 55.0], [1.72848078E12, 45.0], [1.72847532E12, 35.0], [1.72847754E12, 36.0], [1.72847976E12, 41.0], [1.72848198E12, 58.0], [1.72847652E12, 36.0], [1.72847874E12, 37.0], [1.72848096E12, 33.0], [1.72847838E12, 39.0], [1.7284806E12, 30.0], [1.72847736E12, 36.0], [1.7284818E12, 60.0], [1.72847634E12, 36.0], [1.72847958E12, 40.0], [1.72847856E12, 34.0], [1.72848012E12, 40.0], [1.7284779E12, 40.0], [1.72847688E12, 30.0], [1.72848132E12, 59.0], [1.72847586E12, 32.0], [1.7284791E12, 40.0], [1.72848234E12, 57.0], [1.72847808E12, 42.0], [1.72847772E12, 33.0], [1.72848114E12, 61.0], [1.7284755E12, 37.0], [1.72847994E12, 32.0], [1.72847892E12, 32.0], [1.72848216E12, 61.0], [1.72847568E12, 32.0], [1.7284767E12, 33.0], [1.72847724E12, 38.0], [1.72847946E12, 41.0], [1.72847844E12, 33.0], [1.72848168E12, 49.0], [1.7284752E12, 41.0], [1.72847622E12, 32.0], [1.72848066E12, 41.0], [1.7284827E12, 42.0], [1.7284803E12, 41.0], [1.72847706E12, 36.0], [1.72847928E12, 36.0], [1.7284815E12, 62.0], [1.72848252E12, 56.0], [1.72847604E12, 33.0], [1.72847826E12, 33.0], [1.72848048E12, 37.0], [1.72847658E12, 35.0], [1.72847982E12, 35.0], [1.7284788E12, 40.0], [1.72848102E12, 35.0], [1.72848204E12, 55.0], [1.72847556E12, 35.0], [1.72847778E12, 36.0], [1.72848E12, 46.0], [1.7284764E12, 32.0], [1.72847742E12, 38.0], [1.72847964E12, 41.0], [1.72847538E12, 33.0], [1.72847862E12, 37.0], [1.72848084E12, 38.0], [1.72848186E12, 59.0], [1.7284776E12, 37.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72847592E12, 407.5], [1.72848258E12, 777.0], [1.72847694E12, 295.0], [1.72847916E12, 523.0], [1.72847814E12, 434.0], [1.72848036E12, 496.0], [1.72848138E12, 713.0], [1.72847712E12, 481.5], [1.7284824E12, 737.5], [1.72847898E12, 457.5], [1.72847676E12, 408.0], [1.72847796E12, 443.0], [1.7284812E12, 733.0], [1.72848018E12, 547.0], [1.72847574E12, 335.0], [1.72848222E12, 773.0], [1.72848192E12, 785.5], [1.72847628E12, 344.0], [1.7284785E12, 451.0], [1.72848072E12, 562.0], [1.72847748E12, 454.0], [1.72847526E12, 251.5], [1.7284797E12, 571.5], [1.72848174E12, 811.5], [1.7284761E12, 393.0], [1.72847934E12, 560.0], [1.72847832E12, 414.5], [1.72848276E12, 357.0], [1.72848054E12, 627.0], [1.72848156E12, 715.0], [1.7284773E12, 415.0], [1.72847952E12, 580.0], [1.72847562E12, 409.0], [1.72847886E12, 429.5], [1.72848228E12, 682.0], [1.72847784E12, 424.5], [1.72847682E12, 392.5], [1.72848006E12, 642.0], [1.72848108E12, 620.0], [1.72847904E12, 386.5], [1.72847868E12, 468.0], [1.72847544E12, 369.5], [1.7284821E12, 855.0], [1.72847646E12, 347.0], [1.7284809E12, 611.0], [1.72847664E12, 333.0], [1.72847766E12, 471.0], [1.72847988E12, 637.0], [1.7284782E12, 380.0], [1.72848162E12, 690.0], [1.72847598E12, 353.0], [1.72848042E12, 549.0], [1.72848264E12, 755.0], [1.72847616E12, 360.0], [1.72847718E12, 402.0], [1.7284794E12, 637.5], [1.72848144E12, 786.0], [1.72847802E12, 454.0], [1.72848024E12, 524.5], [1.72848246E12, 716.0], [1.7284758E12, 364.5], [1.728477E12, 334.5], [1.72847922E12, 567.0], [1.72848126E12, 684.0], [1.72848078E12, 494.0], [1.72847532E12, 352.5], [1.72847754E12, 389.5], [1.72847976E12, 553.5], [1.72848198E12, 777.5], [1.72847652E12, 363.0], [1.72847874E12, 421.0], [1.72848096E12, 617.5], [1.72847838E12, 422.5], [1.7284806E12, 583.0], [1.72847736E12, 476.5], [1.7284818E12, 620.0], [1.72847634E12, 377.0], [1.72847958E12, 550.5], [1.72847856E12, 438.0], [1.72848012E12, 533.0], [1.7284779E12, 369.0], [1.72847688E12, 382.5], [1.72848132E12, 665.5], [1.72847586E12, 436.0], [1.7284791E12, 446.0], [1.72848234E12, 726.0], [1.72847808E12, 480.0], [1.72847772E12, 475.0], [1.72848114E12, 712.0], [1.7284755E12, 366.0], [1.72847994E12, 625.0], [1.72847892E12, 484.5], [1.72848216E12, 784.5], [1.72847568E12, 357.0], [1.7284767E12, 409.5], [1.72847724E12, 377.0], [1.72847946E12, 633.0], [1.72847844E12, 367.5], [1.72848168E12, 799.0], [1.7284752E12, 319.0], [1.72847622E12, 308.0], [1.72848066E12, 536.0], [1.7284827E12, 527.5], [1.7284803E12, 588.0], [1.72847706E12, 381.0], [1.72847928E12, 649.5], [1.7284815E12, 780.0], [1.72848252E12, 721.0], [1.72847604E12, 330.5], [1.72847826E12, 425.0], [1.72848048E12, 533.0], [1.72847658E12, 362.5], [1.72847982E12, 512.5], [1.7284788E12, 437.0], [1.72848102E12, 419.5], [1.72848204E12, 729.0], [1.72847556E12, 374.0], [1.72847778E12, 392.5], [1.72848E12, 446.0], [1.7284764E12, 371.0], [1.72847742E12, 409.0], [1.72847964E12, 549.5], [1.72847538E12, 313.0], [1.72847862E12, 455.5], [1.72848084E12, 593.0], [1.72848186E12, 638.5], [1.7284776E12, 407.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72848276E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 204.0, "minX": 1.0, "maxY": 731.5, "series": [{"data": [[2.0, 676.0], [33.0, 214.0], [32.0, 265.5], [34.0, 256.0], [35.0, 234.5], [39.0, 204.0], [3.0, 542.0], [4.0, 464.5], [5.0, 535.0], [6.0, 543.5], [7.0, 499.0], [8.0, 485.5], [9.0, 466.0], [10.0, 467.0], [11.0, 464.0], [12.0, 521.0], [13.0, 546.0], [14.0, 543.0], [15.0, 576.0], [1.0, 731.5], [16.0, 562.0], [17.0, 556.0], [18.0, 530.5], [19.0, 488.0], [20.0, 481.0], [21.0, 430.0], [22.0, 380.5], [23.0, 343.0], [24.0, 315.0], [25.0, 304.0], [26.0, 312.0], [27.0, 266.0], [28.0, 240.0], [29.0, 240.0], [30.0, 249.5], [31.0, 226.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 39.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 121.0, "minX": 1.0, "maxY": 475.0, "series": [{"data": [[2.0, 435.5], [33.0, 123.0], [32.0, 162.5], [34.0, 144.0], [35.0, 152.5], [39.0, 121.0], [3.0, 358.0], [4.0, 342.0], [5.0, 371.5], [6.0, 368.0], [7.0, 344.0], [8.0, 339.0], [9.0, 331.0], [10.0, 328.0], [11.0, 330.0], [12.0, 369.0], [13.0, 394.0], [14.0, 390.0], [15.0, 414.5], [1.0, 475.0], [16.0, 410.5], [17.0, 400.0], [18.0, 391.5], [19.0, 356.0], [20.0, 358.0], [21.0, 317.0], [22.0, 273.0], [23.0, 239.0], [24.0, 202.5], [25.0, 191.0], [26.0, 198.5], [27.0, 170.0], [28.0, 145.0], [29.0, 151.0], [30.0, 156.0], [31.0, 137.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 39.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72847514E12, "maxY": 20.233333333333334, "series": [{"data": [[1.72847592E12, 9.466666666666667], [1.72848258E12, 18.8], [1.72847694E12, 10.25], [1.72847916E12, 18.75], [1.72847814E12, 16.383333333333333], [1.72848036E12, 18.916666666666668], [1.72848138E12, 19.783333333333335], [1.72847712E12, 15.633333333333333], [1.7284824E12, 19.366666666666667], [1.72847898E12, 15.966666666666667], [1.72847676E12, 9.183333333333334], [1.72847796E12, 16.0], [1.7284812E12, 19.0], [1.72848018E12, 18.583333333333332], [1.72847574E12, 10.05], [1.72848222E12, 18.633333333333333], [1.72848192E12, 18.833333333333332], [1.72847628E12, 9.966666666666667], [1.7284785E12, 16.15], [1.72848072E12, 18.416666666666668], [1.72847748E12, 16.283333333333335], [1.72847526E12, 5.2], [1.7284797E12, 18.433333333333334], [1.72848174E12, 18.533333333333335], [1.7284761E12, 9.483333333333333], [1.72847934E12, 18.433333333333334], [1.72847832E12, 16.1], [1.72848276E12, 0.1], [1.72848054E12, 17.85], [1.72848156E12, 19.216666666666665], [1.7284773E12, 16.416666666666668], [1.72847952E12, 17.983333333333334], [1.72847562E12, 9.15], [1.72847886E12, 16.2], [1.72848228E12, 19.733333333333334], [1.72847784E12, 16.333333333333332], [1.72847682E12, 9.5], [1.72848006E12, 17.483333333333334], [1.72848108E12, 18.583333333333332], [1.72847904E12, 8.9], [1.72847868E12, 15.75], [1.72847544E12, 10.033333333333333], [1.7284821E12, 17.933333333333334], [1.72847646E12, 9.933333333333334], [1.7284809E12, 17.766666666666666], [1.72847664E12, 9.983333333333333], [1.72847766E12, 15.683333333333334], [1.72847988E12, 17.25], [1.7284782E12, 16.883333333333333], [1.72848162E12, 19.5], [1.72847598E12, 9.916666666666666], [1.72848042E12, 18.283333333333335], [1.72848264E12, 18.85], [1.72847616E12, 9.983333333333333], [1.72847718E12, 16.7], [1.7284794E12, 17.133333333333333], [1.72848144E12, 18.666666666666668], [1.72847802E12, 15.866666666666667], [1.72848024E12, 18.766666666666666], [1.72848246E12, 19.366666666666667], [1.7284758E12, 9.533333333333333], [1.728477E12, 9.933333333333334], [1.72847922E12, 18.483333333333334], [1.72848126E12, 19.85], [1.72848078E12, 19.566666666666666], [1.72847532E12, 5.133333333333334], [1.72847754E12, 16.833333333333332], [1.72847976E12, 18.633333333333333], [1.72848198E12, 19.0], [1.72847652E12, 9.65], [1.72847874E12, 16.3], [1.72848096E12, 17.433333333333334], [1.72847514E12, 0.016666666666666666], [1.72847838E12, 16.733333333333334], [1.7284806E12, 18.366666666666667], [1.72847736E12, 16.333333333333332], [1.7284818E12, 19.833333333333332], [1.72847634E12, 9.816666666666666], [1.72847958E12, 18.5], [1.72847856E12, 16.65], [1.72848012E12, 19.083333333333332], [1.7284779E12, 17.066666666666666], [1.72847688E12, 9.366666666666667], [1.72848132E12, 19.916666666666668], [1.72847586E12, 8.916666666666666], [1.7284791E12, 19.416666666666668], [1.72848234E12, 19.45], [1.72847808E12, 15.55], [1.72847772E12, 15.916666666666666], [1.72848114E12, 19.216666666666665], [1.7284755E12, 9.816666666666666], [1.72847994E12, 17.95], [1.72847892E12, 15.833333333333334], [1.72848216E12, 19.2], [1.72847568E12, 9.866666666666667], [1.7284767E12, 9.033333333333333], [1.72847724E12, 16.516666666666666], [1.72847946E12, 17.866666666666667], [1.72847844E12, 17.0], [1.72848168E12, 19.016666666666666], [1.7284752E12, 5.066666666666666], [1.72847622E12, 10.483333333333333], [1.72848066E12, 18.7], [1.7284827E12, 15.616666666666667], [1.7284803E12, 18.45], [1.72847706E12, 8.616666666666667], [1.72847928E12, 17.7], [1.7284815E12, 18.916666666666668], [1.72848252E12, 18.95], [1.72847604E12, 9.833333333333334], [1.72847826E12, 16.183333333333334], [1.72848048E12, 19.233333333333334], [1.72847658E12, 9.666666666666666], [1.72847982E12, 18.8], [1.7284788E12, 16.1], [1.72848102E12, 9.55], [1.72848204E12, 19.4], [1.72847556E12, 9.9], [1.72847778E12, 16.466666666666665], [1.72848E12, 19.783333333333335], [1.7284764E12, 9.316666666666666], [1.72847742E12, 16.316666666666666], [1.72847964E12, 18.833333333333332], [1.72847538E12, 5.75], [1.72847862E12, 15.9], [1.72848084E12, 17.866666666666667], [1.72848186E12, 20.233333333333334], [1.7284776E12, 16.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72848276E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.7284752E12, "maxY": 20.233333333333334, "series": [{"data": [[1.72847592E12, 9.466666666666667], [1.72848258E12, 18.8], [1.72847694E12, 10.25], [1.72847916E12, 18.75], [1.72847814E12, 16.383333333333333], [1.72848036E12, 18.916666666666668], [1.72848138E12, 19.766666666666666], [1.72847712E12, 15.633333333333333], [1.7284824E12, 19.366666666666667], [1.72847898E12, 15.966666666666667], [1.72847676E12, 9.183333333333334], [1.72847796E12, 15.983333333333333], [1.7284812E12, 19.0], [1.72848018E12, 18.583333333333332], [1.72847574E12, 10.05], [1.72848222E12, 18.633333333333333], [1.72848192E12, 18.833333333333332], [1.72847628E12, 9.966666666666667], [1.7284785E12, 16.15], [1.72848072E12, 18.416666666666668], [1.72847748E12, 16.283333333333335], [1.72847526E12, 5.2], [1.7284797E12, 18.433333333333334], [1.72848174E12, 18.533333333333335], [1.7284761E12, 9.483333333333333], [1.72847934E12, 18.433333333333334], [1.72847832E12, 16.1], [1.72848276E12, 0.11666666666666667], [1.72848054E12, 17.85], [1.72848156E12, 19.216666666666665], [1.7284773E12, 16.416666666666668], [1.72847952E12, 17.983333333333334], [1.72847562E12, 9.15], [1.72847886E12, 16.2], [1.72848228E12, 19.733333333333334], [1.72847784E12, 16.333333333333332], [1.72847682E12, 9.5], [1.72848006E12, 17.483333333333334], [1.72848108E12, 18.333333333333332], [1.72847904E12, 8.833333333333334], [1.72847868E12, 15.75], [1.72847544E12, 10.033333333333333], [1.7284821E12, 17.933333333333334], [1.72847646E12, 9.933333333333334], [1.7284809E12, 17.766666666666666], [1.72847664E12, 9.983333333333333], [1.72847766E12, 15.683333333333334], [1.72847988E12, 17.25], [1.7284782E12, 16.883333333333333], [1.72848162E12, 19.5], [1.72847598E12, 9.916666666666666], [1.72848042E12, 18.283333333333335], [1.72848264E12, 18.85], [1.72847616E12, 9.983333333333333], [1.72847718E12, 16.7], [1.7284794E12, 17.133333333333333], [1.72848144E12, 18.666666666666668], [1.72847802E12, 15.866666666666667], [1.72848024E12, 18.766666666666666], [1.72848246E12, 19.366666666666667], [1.7284758E12, 9.533333333333333], [1.728477E12, 9.933333333333334], [1.72847922E12, 18.483333333333334], [1.72848126E12, 19.85], [1.72848078E12, 19.566666666666666], [1.72847532E12, 5.133333333333334], [1.72847754E12, 16.833333333333332], [1.72847976E12, 18.633333333333333], [1.72848198E12, 19.0], [1.72847652E12, 9.65], [1.72847874E12, 16.3], [1.72848096E12, 17.466666666666665], [1.72847838E12, 16.733333333333334], [1.7284806E12, 18.366666666666667], [1.72847736E12, 16.333333333333332], [1.7284818E12, 19.833333333333332], [1.72847634E12, 9.816666666666666], [1.72847958E12, 18.5], [1.72847856E12, 16.65], [1.72848012E12, 19.083333333333332], [1.7284779E12, 17.083333333333332], [1.72847688E12, 9.366666666666667], [1.72848132E12, 19.933333333333334], [1.72847586E12, 8.916666666666666], [1.7284791E12, 19.416666666666668], [1.72848234E12, 19.45], [1.72847808E12, 15.55], [1.72847772E12, 15.916666666666666], [1.72848114E12, 19.216666666666665], [1.7284755E12, 9.816666666666666], [1.72847994E12, 17.95], [1.72847892E12, 15.833333333333334], [1.72848216E12, 19.2], [1.72847568E12, 9.866666666666667], [1.7284767E12, 9.033333333333333], [1.72847724E12, 16.516666666666666], [1.72847946E12, 17.866666666666667], [1.72847844E12, 17.0], [1.72848168E12, 19.016666666666666], [1.7284752E12, 5.05], [1.72847622E12, 10.483333333333333], [1.72848066E12, 18.7], [1.7284827E12, 15.866666666666667], [1.7284803E12, 18.45], [1.72847706E12, 8.55], [1.72847928E12, 17.7], [1.7284815E12, 18.916666666666668], [1.72848252E12, 18.95], [1.72847604E12, 9.833333333333334], [1.72847826E12, 16.183333333333334], [1.72848048E12, 19.233333333333334], [1.72847658E12, 9.666666666666666], [1.72847982E12, 18.8], [1.7284788E12, 16.1], [1.72848102E12, 9.7], [1.72848204E12, 19.4], [1.72847556E12, 9.9], [1.72847778E12, 16.466666666666665], [1.72848E12, 19.783333333333335], [1.7284764E12, 9.316666666666666], [1.72847742E12, 16.316666666666666], [1.72847964E12, 18.833333333333332], [1.72847538E12, 5.716666666666667], [1.72847862E12, 15.9], [1.72848084E12, 17.866666666666667], [1.72848186E12, 20.233333333333334], [1.7284776E12, 16.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72848276E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.7284752E12, "maxY": 20.233333333333334, "series": [{"data": [[1.72847592E12, 9.466666666666667], [1.72848258E12, 18.8], [1.72847694E12, 10.25], [1.72847916E12, 18.75], [1.72847814E12, 16.383333333333333], [1.72848036E12, 18.916666666666668], [1.72848138E12, 19.766666666666666], [1.72847712E12, 15.633333333333333], [1.7284824E12, 19.366666666666667], [1.72847898E12, 15.966666666666667], [1.72847676E12, 9.183333333333334], [1.72847796E12, 15.983333333333333], [1.7284812E12, 19.0], [1.72848018E12, 18.583333333333332], [1.72847574E12, 10.05], [1.72848222E12, 18.633333333333333], [1.72848192E12, 18.833333333333332], [1.72847628E12, 9.966666666666667], [1.7284785E12, 16.15], [1.72848072E12, 18.416666666666668], [1.72847748E12, 16.283333333333335], [1.72847526E12, 5.2], [1.7284797E12, 18.433333333333334], [1.72848174E12, 18.533333333333335], [1.7284761E12, 9.483333333333333], [1.72847934E12, 18.433333333333334], [1.72847832E12, 16.1], [1.72848276E12, 0.11666666666666667], [1.72848054E12, 17.85], [1.72848156E12, 19.216666666666665], [1.7284773E12, 16.416666666666668], [1.72847952E12, 17.983333333333334], [1.72847562E12, 9.15], [1.72847886E12, 16.2], [1.72848228E12, 19.733333333333334], [1.72847784E12, 16.333333333333332], [1.72847682E12, 9.5], [1.72848006E12, 17.483333333333334], [1.72848108E12, 18.333333333333332], [1.72847904E12, 8.833333333333334], [1.72847868E12, 15.75], [1.72847544E12, 10.033333333333333], [1.7284821E12, 17.933333333333334], [1.72847646E12, 9.933333333333334], [1.7284809E12, 17.766666666666666], [1.72847664E12, 9.983333333333333], [1.72847766E12, 15.683333333333334], [1.72847988E12, 17.25], [1.7284782E12, 16.883333333333333], [1.72848162E12, 19.5], [1.72847598E12, 9.916666666666666], [1.72848042E12, 18.283333333333335], [1.72848264E12, 18.85], [1.72847616E12, 9.983333333333333], [1.72847718E12, 16.7], [1.7284794E12, 17.133333333333333], [1.72848144E12, 18.666666666666668], [1.72847802E12, 15.866666666666667], [1.72848024E12, 18.766666666666666], [1.72848246E12, 19.366666666666667], [1.7284758E12, 9.533333333333333], [1.728477E12, 9.933333333333334], [1.72847922E12, 18.483333333333334], [1.72848126E12, 19.85], [1.72848078E12, 19.566666666666666], [1.72847532E12, 5.133333333333334], [1.72847754E12, 16.833333333333332], [1.72847976E12, 18.633333333333333], [1.72848198E12, 19.0], [1.72847652E12, 9.65], [1.72847874E12, 16.3], [1.72848096E12, 17.466666666666665], [1.72847838E12, 16.733333333333334], [1.7284806E12, 18.366666666666667], [1.72847736E12, 16.333333333333332], [1.7284818E12, 19.833333333333332], [1.72847634E12, 9.816666666666666], [1.72847958E12, 18.5], [1.72847856E12, 16.65], [1.72848012E12, 19.083333333333332], [1.7284779E12, 17.083333333333332], [1.72847688E12, 9.366666666666667], [1.72848132E12, 19.933333333333334], [1.72847586E12, 8.916666666666666], [1.7284791E12, 19.416666666666668], [1.72848234E12, 19.45], [1.72847808E12, 15.55], [1.72847772E12, 15.916666666666666], [1.72848114E12, 19.216666666666665], [1.7284755E12, 9.816666666666666], [1.72847994E12, 17.95], [1.72847892E12, 15.833333333333334], [1.72848216E12, 19.2], [1.72847568E12, 9.866666666666667], [1.7284767E12, 9.033333333333333], [1.72847724E12, 16.516666666666666], [1.72847946E12, 17.866666666666667], [1.72847844E12, 17.0], [1.72848168E12, 19.016666666666666], [1.7284752E12, 5.05], [1.72847622E12, 10.483333333333333], [1.72848066E12, 18.7], [1.7284827E12, 15.866666666666667], [1.7284803E12, 18.45], [1.72847706E12, 8.55], [1.72847928E12, 17.7], [1.7284815E12, 18.916666666666668], [1.72848252E12, 18.95], [1.72847604E12, 9.833333333333334], [1.72847826E12, 16.183333333333334], [1.72848048E12, 19.233333333333334], [1.72847658E12, 9.666666666666666], [1.72847982E12, 18.8], [1.7284788E12, 16.1], [1.72848102E12, 9.7], [1.72848204E12, 19.4], [1.72847556E12, 9.9], [1.72847778E12, 16.466666666666665], [1.72848E12, 19.783333333333335], [1.7284764E12, 9.316666666666666], [1.72847742E12, 16.316666666666666], [1.72847964E12, 18.833333333333332], [1.72847538E12, 5.716666666666667], [1.72847862E12, 15.9], [1.72848084E12, 17.866666666666667], [1.72848186E12, 20.233333333333334], [1.7284776E12, 16.8]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72848276E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.7284752E12, "maxY": 20.233333333333334, "series": [{"data": [[1.72847592E12, 9.466666666666667], [1.72848258E12, 18.8], [1.72847694E12, 10.25], [1.72847916E12, 18.75], [1.72847814E12, 16.383333333333333], [1.72848036E12, 18.916666666666668], [1.72848138E12, 19.766666666666666], [1.72847712E12, 15.633333333333333], [1.7284824E12, 19.366666666666667], [1.72847898E12, 15.966666666666667], [1.72847676E12, 9.183333333333334], [1.72847796E12, 15.983333333333333], [1.7284812E12, 19.0], [1.72848018E12, 18.583333333333332], [1.72847574E12, 10.05], [1.72848222E12, 18.633333333333333], [1.72848192E12, 18.833333333333332], [1.72847628E12, 9.966666666666667], [1.7284785E12, 16.15], [1.72848072E12, 18.416666666666668], [1.72847748E12, 16.283333333333335], [1.72847526E12, 5.2], [1.7284797E12, 18.433333333333334], [1.72848174E12, 18.533333333333335], [1.7284761E12, 9.483333333333333], [1.72847934E12, 18.433333333333334], [1.72847832E12, 16.1], [1.72848276E12, 0.11666666666666667], [1.72848054E12, 17.85], [1.72848156E12, 19.216666666666665], [1.7284773E12, 16.416666666666668], [1.72847952E12, 17.983333333333334], [1.72847562E12, 9.15], [1.72847886E12, 16.2], [1.72848228E12, 19.733333333333334], [1.72847784E12, 16.333333333333332], [1.72847682E12, 9.5], [1.72848006E12, 17.483333333333334], [1.72848108E12, 18.333333333333332], [1.72847904E12, 8.833333333333334], [1.72847868E12, 15.75], [1.72847544E12, 10.033333333333333], [1.7284821E12, 17.933333333333334], [1.72847646E12, 9.933333333333334], [1.7284809E12, 17.766666666666666], [1.72847664E12, 9.983333333333333], [1.72847766E12, 15.683333333333334], [1.72847988E12, 17.25], [1.7284782E12, 16.883333333333333], [1.72848162E12, 19.5], [1.72847598E12, 9.916666666666666], [1.72848042E12, 18.283333333333335], [1.72848264E12, 18.85], [1.72847616E12, 9.983333333333333], [1.72847718E12, 16.7], [1.7284794E12, 17.133333333333333], [1.72848144E12, 18.666666666666668], [1.72847802E12, 15.866666666666667], [1.72848024E12, 18.766666666666666], [1.72848246E12, 19.366666666666667], [1.7284758E12, 9.533333333333333], [1.728477E12, 9.933333333333334], [1.72847922E12, 18.483333333333334], [1.72848126E12, 19.85], [1.72848078E12, 19.566666666666666], [1.72847532E12, 5.133333333333334], [1.72847754E12, 16.833333333333332], [1.72847976E12, 18.633333333333333], [1.72848198E12, 19.0], [1.72847652E12, 9.65], [1.72847874E12, 16.3], [1.72848096E12, 17.466666666666665], [1.72847838E12, 16.733333333333334], [1.7284806E12, 18.366666666666667], [1.72847736E12, 16.333333333333332], [1.7284818E12, 19.833333333333332], [1.72847634E12, 9.816666666666666], [1.72847958E12, 18.5], [1.72847856E12, 16.65], [1.72848012E12, 19.083333333333332], [1.7284779E12, 17.083333333333332], [1.72847688E12, 9.366666666666667], [1.72848132E12, 19.933333333333334], [1.72847586E12, 8.916666666666666], [1.7284791E12, 19.416666666666668], [1.72848234E12, 19.45], [1.72847808E12, 15.55], [1.72847772E12, 15.916666666666666], [1.72848114E12, 19.216666666666665], [1.7284755E12, 9.816666666666666], [1.72847994E12, 17.95], [1.72847892E12, 15.833333333333334], [1.72848216E12, 19.2], [1.72847568E12, 9.866666666666667], [1.7284767E12, 9.033333333333333], [1.72847724E12, 16.516666666666666], [1.72847946E12, 17.866666666666667], [1.72847844E12, 17.0], [1.72848168E12, 19.016666666666666], [1.7284752E12, 5.05], [1.72847622E12, 10.483333333333333], [1.72848066E12, 18.7], [1.7284827E12, 15.866666666666667], [1.7284803E12, 18.45], [1.72847706E12, 8.55], [1.72847928E12, 17.7], [1.7284815E12, 18.916666666666668], [1.72848252E12, 18.95], [1.72847604E12, 9.833333333333334], [1.72847826E12, 16.183333333333334], [1.72848048E12, 19.233333333333334], [1.72847658E12, 9.666666666666666], [1.72847982E12, 18.8], [1.7284788E12, 16.1], [1.72848102E12, 9.7], [1.72848204E12, 19.4], [1.72847556E12, 9.9], [1.72847778E12, 16.466666666666665], [1.72848E12, 19.783333333333335], [1.7284764E12, 9.316666666666666], [1.72847742E12, 16.316666666666666], [1.72847964E12, 18.833333333333332], [1.72847538E12, 5.716666666666667], [1.72847862E12, 15.9], [1.72848084E12, 17.866666666666667], [1.72848186E12, 20.233333333333334], [1.7284776E12, 16.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72848276E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

