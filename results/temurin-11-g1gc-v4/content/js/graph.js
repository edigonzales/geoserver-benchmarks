/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 34.0, "minX": 0.0, "maxY": 4068.0, "series": [{"data": [[0.0, 34.0], [0.1, 43.0], [0.2, 46.0], [0.3, 48.0], [0.4, 50.0], [0.5, 51.0], [0.6, 53.0], [0.7, 54.0], [0.8, 55.0], [0.9, 56.0], [1.0, 58.0], [1.1, 59.0], [1.2, 59.0], [1.3, 60.0], [1.4, 61.0], [1.5, 62.0], [1.6, 62.0], [1.7, 63.0], [1.8, 64.0], [1.9, 64.0], [2.0, 65.0], [2.1, 66.0], [2.2, 66.0], [2.3, 67.0], [2.4, 67.0], [2.5, 68.0], [2.6, 69.0], [2.7, 69.0], [2.8, 70.0], [2.9, 70.0], [3.0, 71.0], [3.1, 71.0], [3.2, 72.0], [3.3, 72.0], [3.4, 73.0], [3.5, 73.0], [3.6, 74.0], [3.7, 74.0], [3.8, 75.0], [3.9, 75.0], [4.0, 76.0], [4.1, 76.0], [4.2, 77.0], [4.3, 77.0], [4.4, 78.0], [4.5, 78.0], [4.6, 78.0], [4.7, 79.0], [4.8, 79.0], [4.9, 80.0], [5.0, 80.0], [5.1, 81.0], [5.2, 81.0], [5.3, 81.0], [5.4, 82.0], [5.5, 82.0], [5.6, 83.0], [5.7, 83.0], [5.8, 83.0], [5.9, 84.0], [6.0, 84.0], [6.1, 85.0], [6.2, 85.0], [6.3, 85.0], [6.4, 86.0], [6.5, 86.0], [6.6, 87.0], [6.7, 87.0], [6.8, 87.0], [6.9, 88.0], [7.0, 88.0], [7.1, 89.0], [7.2, 89.0], [7.3, 89.0], [7.4, 90.0], [7.5, 90.0], [7.6, 91.0], [7.7, 91.0], [7.8, 91.0], [7.9, 92.0], [8.0, 92.0], [8.1, 92.0], [8.2, 93.0], [8.3, 93.0], [8.4, 94.0], [8.5, 94.0], [8.6, 94.0], [8.7, 95.0], [8.8, 95.0], [8.9, 95.0], [9.0, 96.0], [9.1, 96.0], [9.2, 96.0], [9.3, 97.0], [9.4, 97.0], [9.5, 98.0], [9.6, 98.0], [9.7, 98.0], [9.8, 99.0], [9.9, 99.0], [10.0, 99.0], [10.1, 100.0], [10.2, 100.0], [10.3, 100.0], [10.4, 101.0], [10.5, 101.0], [10.6, 102.0], [10.7, 102.0], [10.8, 102.0], [10.9, 103.0], [11.0, 103.0], [11.1, 103.0], [11.2, 104.0], [11.3, 104.0], [11.4, 104.0], [11.5, 105.0], [11.6, 105.0], [11.7, 105.0], [11.8, 106.0], [11.9, 106.0], [12.0, 106.0], [12.1, 107.0], [12.2, 107.0], [12.3, 108.0], [12.4, 108.0], [12.5, 108.0], [12.6, 109.0], [12.7, 109.0], [12.8, 109.0], [12.9, 110.0], [13.0, 110.0], [13.1, 110.0], [13.2, 111.0], [13.3, 111.0], [13.4, 112.0], [13.5, 112.0], [13.6, 112.0], [13.7, 113.0], [13.8, 113.0], [13.9, 113.0], [14.0, 114.0], [14.1, 114.0], [14.2, 114.0], [14.3, 115.0], [14.4, 115.0], [14.5, 116.0], [14.6, 116.0], [14.7, 116.0], [14.8, 117.0], [14.9, 117.0], [15.0, 117.0], [15.1, 118.0], [15.2, 118.0], [15.3, 119.0], [15.4, 119.0], [15.5, 119.0], [15.6, 120.0], [15.7, 120.0], [15.8, 120.0], [15.9, 121.0], [16.0, 121.0], [16.1, 122.0], [16.2, 122.0], [16.3, 122.0], [16.4, 123.0], [16.5, 123.0], [16.6, 124.0], [16.7, 124.0], [16.8, 124.0], [16.9, 125.0], [17.0, 125.0], [17.1, 125.0], [17.2, 126.0], [17.3, 126.0], [17.4, 127.0], [17.5, 127.0], [17.6, 127.0], [17.7, 128.0], [17.8, 128.0], [17.9, 128.0], [18.0, 129.0], [18.1, 129.0], [18.2, 129.0], [18.3, 130.0], [18.4, 130.0], [18.5, 131.0], [18.6, 131.0], [18.7, 131.0], [18.8, 132.0], [18.9, 132.0], [19.0, 133.0], [19.1, 133.0], [19.2, 134.0], [19.3, 134.0], [19.4, 134.0], [19.5, 135.0], [19.6, 135.0], [19.7, 136.0], [19.8, 136.0], [19.9, 136.0], [20.0, 137.0], [20.1, 137.0], [20.2, 138.0], [20.3, 138.0], [20.4, 139.0], [20.5, 139.0], [20.6, 139.0], [20.7, 140.0], [20.8, 140.0], [20.9, 141.0], [21.0, 141.0], [21.1, 142.0], [21.2, 142.0], [21.3, 143.0], [21.4, 143.0], [21.5, 143.0], [21.6, 144.0], [21.7, 144.0], [21.8, 145.0], [21.9, 145.0], [22.0, 145.0], [22.1, 146.0], [22.2, 147.0], [22.3, 147.0], [22.4, 148.0], [22.5, 148.0], [22.6, 148.0], [22.7, 149.0], [22.8, 149.0], [22.9, 150.0], [23.0, 150.0], [23.1, 151.0], [23.2, 151.0], [23.3, 152.0], [23.4, 152.0], [23.5, 153.0], [23.6, 153.0], [23.7, 154.0], [23.8, 154.0], [23.9, 155.0], [24.0, 155.0], [24.1, 155.0], [24.2, 156.0], [24.3, 156.0], [24.4, 157.0], [24.5, 157.0], [24.6, 158.0], [24.7, 158.0], [24.8, 159.0], [24.9, 159.0], [25.0, 160.0], [25.1, 160.0], [25.2, 161.0], [25.3, 161.0], [25.4, 162.0], [25.5, 162.0], [25.6, 163.0], [25.7, 163.0], [25.8, 164.0], [25.9, 164.0], [26.0, 165.0], [26.1, 165.0], [26.2, 166.0], [26.3, 166.0], [26.4, 167.0], [26.5, 168.0], [26.6, 168.0], [26.7, 169.0], [26.8, 169.0], [26.9, 170.0], [27.0, 170.0], [27.1, 171.0], [27.2, 172.0], [27.3, 172.0], [27.4, 173.0], [27.5, 173.0], [27.6, 174.0], [27.7, 174.0], [27.8, 175.0], [27.9, 175.0], [28.0, 176.0], [28.1, 177.0], [28.2, 177.0], [28.3, 178.0], [28.4, 178.0], [28.5, 179.0], [28.6, 179.0], [28.7, 180.0], [28.8, 180.0], [28.9, 181.0], [29.0, 182.0], [29.1, 182.0], [29.2, 183.0], [29.3, 183.0], [29.4, 184.0], [29.5, 185.0], [29.6, 185.0], [29.7, 186.0], [29.8, 187.0], [29.9, 187.0], [30.0, 188.0], [30.1, 189.0], [30.2, 189.0], [30.3, 190.0], [30.4, 191.0], [30.5, 191.0], [30.6, 192.0], [30.7, 192.0], [30.8, 193.0], [30.9, 194.0], [31.0, 194.0], [31.1, 195.0], [31.2, 196.0], [31.3, 197.0], [31.4, 197.0], [31.5, 198.0], [31.6, 199.0], [31.7, 200.0], [31.8, 200.0], [31.9, 201.0], [32.0, 202.0], [32.1, 203.0], [32.2, 203.0], [32.3, 204.0], [32.4, 205.0], [32.5, 206.0], [32.6, 206.0], [32.7, 207.0], [32.8, 208.0], [32.9, 209.0], [33.0, 210.0], [33.1, 211.0], [33.2, 211.0], [33.3, 212.0], [33.4, 213.0], [33.5, 214.0], [33.6, 215.0], [33.7, 216.0], [33.8, 217.0], [33.9, 217.0], [34.0, 218.0], [34.1, 219.0], [34.2, 220.0], [34.3, 221.0], [34.4, 222.0], [34.5, 223.0], [34.6, 224.0], [34.7, 225.0], [34.8, 226.0], [34.9, 226.0], [35.0, 227.0], [35.1, 228.0], [35.2, 229.0], [35.3, 230.0], [35.4, 231.0], [35.5, 232.0], [35.6, 233.0], [35.7, 234.0], [35.8, 235.0], [35.9, 236.0], [36.0, 237.0], [36.1, 239.0], [36.2, 240.0], [36.3, 241.0], [36.4, 242.0], [36.5, 243.0], [36.6, 244.0], [36.7, 245.0], [36.8, 246.0], [36.9, 248.0], [37.0, 249.0], [37.1, 250.0], [37.2, 251.0], [37.3, 252.0], [37.4, 254.0], [37.5, 255.0], [37.6, 256.0], [37.7, 258.0], [37.8, 259.0], [37.9, 260.0], [38.0, 262.0], [38.1, 263.0], [38.2, 265.0], [38.3, 266.0], [38.4, 268.0], [38.5, 269.0], [38.6, 271.0], [38.7, 272.0], [38.8, 274.0], [38.9, 275.0], [39.0, 277.0], [39.1, 278.0], [39.2, 280.0], [39.3, 282.0], [39.4, 283.0], [39.5, 285.0], [39.6, 287.0], [39.7, 289.0], [39.8, 290.0], [39.9, 292.0], [40.0, 294.0], [40.1, 296.0], [40.2, 298.0], [40.3, 300.0], [40.4, 302.0], [40.5, 303.0], [40.6, 305.0], [40.7, 307.0], [40.8, 310.0], [40.9, 312.0], [41.0, 314.0], [41.1, 316.0], [41.2, 319.0], [41.3, 321.0], [41.4, 323.0], [41.5, 325.0], [41.6, 328.0], [41.7, 330.0], [41.8, 333.0], [41.9, 335.0], [42.0, 337.0], [42.1, 340.0], [42.2, 342.0], [42.3, 344.0], [42.4, 347.0], [42.5, 350.0], [42.6, 352.0], [42.7, 355.0], [42.8, 358.0], [42.9, 361.0], [43.0, 364.0], [43.1, 367.0], [43.2, 369.0], [43.3, 372.0], [43.4, 375.0], [43.5, 377.0], [43.6, 380.0], [43.7, 382.0], [43.8, 385.0], [43.9, 388.0], [44.0, 391.0], [44.1, 394.0], [44.2, 397.0], [44.3, 400.0], [44.4, 403.0], [44.5, 406.0], [44.6, 409.0], [44.7, 412.0], [44.8, 415.0], [44.9, 418.0], [45.0, 421.0], [45.1, 423.0], [45.2, 427.0], [45.3, 429.0], [45.4, 432.0], [45.5, 435.0], [45.6, 438.0], [45.7, 441.0], [45.8, 445.0], [45.9, 447.0], [46.0, 450.0], [46.1, 452.0], [46.2, 455.0], [46.3, 458.0], [46.4, 460.0], [46.5, 463.0], [46.6, 466.0], [46.7, 468.0], [46.8, 471.0], [46.9, 474.0], [47.0, 477.0], [47.1, 480.0], [47.2, 482.0], [47.3, 485.0], [47.4, 488.0], [47.5, 491.0], [47.6, 493.0], [47.7, 497.0], [47.8, 499.0], [47.9, 502.0], [48.0, 505.0], [48.1, 507.0], [48.2, 510.0], [48.3, 513.0], [48.4, 516.0], [48.5, 518.0], [48.6, 521.0], [48.7, 523.0], [48.8, 526.0], [48.9, 528.0], [49.0, 530.0], [49.1, 533.0], [49.2, 535.0], [49.3, 537.0], [49.4, 540.0], [49.5, 543.0], [49.6, 545.0], [49.7, 547.0], [49.8, 549.0], [49.9, 552.0], [50.0, 554.0], [50.1, 556.0], [50.2, 559.0], [50.3, 561.0], [50.4, 563.0], [50.5, 566.0], [50.6, 568.0], [50.7, 570.0], [50.8, 573.0], [50.9, 575.0], [51.0, 577.0], [51.1, 580.0], [51.2, 582.0], [51.3, 584.0], [51.4, 587.0], [51.5, 589.0], [51.6, 591.0], [51.7, 594.0], [51.8, 596.0], [51.9, 598.0], [52.0, 600.0], [52.1, 603.0], [52.2, 605.0], [52.3, 607.0], [52.4, 610.0], [52.5, 612.0], [52.6, 614.0], [52.7, 616.0], [52.8, 618.0], [52.9, 620.0], [53.0, 623.0], [53.1, 625.0], [53.2, 627.0], [53.3, 629.0], [53.4, 632.0], [53.5, 634.0], [53.6, 637.0], [53.7, 639.0], [53.8, 641.0], [53.9, 643.0], [54.0, 645.0], [54.1, 648.0], [54.2, 649.0], [54.3, 651.0], [54.4, 654.0], [54.5, 656.0], [54.6, 658.0], [54.7, 660.0], [54.8, 662.0], [54.9, 664.0], [55.0, 666.0], [55.1, 668.0], [55.2, 670.0], [55.3, 672.0], [55.4, 674.0], [55.5, 676.0], [55.6, 678.0], [55.7, 680.0], [55.8, 682.0], [55.9, 684.0], [56.0, 686.0], [56.1, 689.0], [56.2, 691.0], [56.3, 693.0], [56.4, 695.0], [56.5, 697.0], [56.6, 699.0], [56.7, 700.0], [56.8, 702.0], [56.9, 704.0], [57.0, 706.0], [57.1, 708.0], [57.2, 710.0], [57.3, 712.0], [57.4, 714.0], [57.5, 716.0], [57.6, 718.0], [57.7, 720.0], [57.8, 722.0], [57.9, 724.0], [58.0, 726.0], [58.1, 728.0], [58.2, 730.0], [58.3, 732.0], [58.4, 734.0], [58.5, 736.0], [58.6, 738.0], [58.7, 740.0], [58.8, 742.0], [58.9, 744.0], [59.0, 746.0], [59.1, 748.0], [59.2, 750.0], [59.3, 752.0], [59.4, 754.0], [59.5, 756.0], [59.6, 758.0], [59.7, 760.0], [59.8, 762.0], [59.9, 764.0], [60.0, 766.0], [60.1, 768.0], [60.2, 770.0], [60.3, 772.0], [60.4, 774.0], [60.5, 776.0], [60.6, 778.0], [60.7, 780.0], [60.8, 782.0], [60.9, 784.0], [61.0, 786.0], [61.1, 788.0], [61.2, 790.0], [61.3, 792.0], [61.4, 794.0], [61.5, 796.0], [61.6, 798.0], [61.7, 800.0], [61.8, 802.0], [61.9, 803.0], [62.0, 805.0], [62.1, 807.0], [62.2, 809.0], [62.3, 811.0], [62.4, 813.0], [62.5, 815.0], [62.6, 817.0], [62.7, 819.0], [62.8, 821.0], [62.9, 823.0], [63.0, 825.0], [63.1, 827.0], [63.2, 829.0], [63.3, 831.0], [63.4, 833.0], [63.5, 835.0], [63.6, 837.0], [63.7, 839.0], [63.8, 841.0], [63.9, 843.0], [64.0, 845.0], [64.1, 847.0], [64.2, 849.0], [64.3, 850.0], [64.4, 852.0], [64.5, 854.0], [64.6, 856.0], [64.7, 859.0], [64.8, 861.0], [64.9, 862.0], [65.0, 865.0], [65.1, 867.0], [65.2, 869.0], [65.3, 871.0], [65.4, 873.0], [65.5, 876.0], [65.6, 877.0], [65.7, 879.0], [65.8, 881.0], [65.9, 884.0], [66.0, 886.0], [66.1, 887.0], [66.2, 889.0], [66.3, 891.0], [66.4, 894.0], [66.5, 896.0], [66.6, 898.0], [66.7, 899.0], [66.8, 901.0], [66.9, 903.0], [67.0, 905.0], [67.1, 907.0], [67.2, 909.0], [67.3, 911.0], [67.4, 912.0], [67.5, 914.0], [67.6, 917.0], [67.7, 919.0], [67.8, 921.0], [67.9, 923.0], [68.0, 925.0], [68.1, 927.0], [68.2, 929.0], [68.3, 931.0], [68.4, 933.0], [68.5, 935.0], [68.6, 937.0], [68.7, 938.0], [68.8, 940.0], [68.9, 943.0], [69.0, 945.0], [69.1, 947.0], [69.2, 949.0], [69.3, 951.0], [69.4, 953.0], [69.5, 955.0], [69.6, 957.0], [69.7, 959.0], [69.8, 961.0], [69.9, 963.0], [70.0, 965.0], [70.1, 967.0], [70.2, 969.0], [70.3, 971.0], [70.4, 974.0], [70.5, 976.0], [70.6, 978.0], [70.7, 980.0], [70.8, 982.0], [70.9, 984.0], [71.0, 987.0], [71.1, 989.0], [71.2, 991.0], [71.3, 993.0], [71.4, 995.0], [71.5, 997.0], [71.6, 1000.0], [71.7, 1002.0], [71.8, 1004.0], [71.9, 1006.0], [72.0, 1008.0], [72.1, 1011.0], [72.2, 1013.0], [72.3, 1015.0], [72.4, 1018.0], [72.5, 1020.0], [72.6, 1022.0], [72.7, 1024.0], [72.8, 1026.0], [72.9, 1029.0], [73.0, 1031.0], [73.1, 1033.0], [73.2, 1036.0], [73.3, 1038.0], [73.4, 1040.0], [73.5, 1042.0], [73.6, 1044.0], [73.7, 1046.0], [73.8, 1048.0], [73.9, 1050.0], [74.0, 1053.0], [74.1, 1055.0], [74.2, 1057.0], [74.3, 1059.0], [74.4, 1061.0], [74.5, 1064.0], [74.6, 1066.0], [74.7, 1068.0], [74.8, 1071.0], [74.9, 1073.0], [75.0, 1075.0], [75.1, 1077.0], [75.2, 1080.0], [75.3, 1082.0], [75.4, 1084.0], [75.5, 1087.0], [75.6, 1089.0], [75.7, 1092.0], [75.8, 1094.0], [75.9, 1097.0], [76.0, 1099.0], [76.1, 1101.0], [76.2, 1104.0], [76.3, 1107.0], [76.4, 1109.0], [76.5, 1112.0], [76.6, 1114.0], [76.7, 1116.0], [76.8, 1119.0], [76.9, 1121.0], [77.0, 1123.0], [77.1, 1126.0], [77.2, 1128.0], [77.3, 1131.0], [77.4, 1133.0], [77.5, 1135.0], [77.6, 1138.0], [77.7, 1141.0], [77.8, 1143.0], [77.9, 1145.0], [78.0, 1148.0], [78.1, 1151.0], [78.2, 1153.0], [78.3, 1156.0], [78.4, 1158.0], [78.5, 1160.0], [78.6, 1163.0], [78.7, 1165.0], [78.8, 1168.0], [78.9, 1171.0], [79.0, 1173.0], [79.1, 1175.0], [79.2, 1178.0], [79.3, 1180.0], [79.4, 1183.0], [79.5, 1186.0], [79.6, 1188.0], [79.7, 1191.0], [79.8, 1193.0], [79.9, 1196.0], [80.0, 1198.0], [80.1, 1201.0], [80.2, 1203.0], [80.3, 1206.0], [80.4, 1208.0], [80.5, 1212.0], [80.6, 1214.0], [80.7, 1217.0], [80.8, 1220.0], [80.9, 1223.0], [81.0, 1226.0], [81.1, 1228.0], [81.2, 1231.0], [81.3, 1234.0], [81.4, 1237.0], [81.5, 1239.0], [81.6, 1242.0], [81.7, 1245.0], [81.8, 1248.0], [81.9, 1252.0], [82.0, 1255.0], [82.1, 1258.0], [82.2, 1261.0], [82.3, 1264.0], [82.4, 1266.0], [82.5, 1269.0], [82.6, 1272.0], [82.7, 1275.0], [82.8, 1279.0], [82.9, 1282.0], [83.0, 1285.0], [83.1, 1288.0], [83.2, 1291.0], [83.3, 1294.0], [83.4, 1298.0], [83.5, 1301.0], [83.6, 1304.0], [83.7, 1308.0], [83.8, 1311.0], [83.9, 1314.0], [84.0, 1317.0], [84.1, 1320.0], [84.2, 1323.0], [84.3, 1326.0], [84.4, 1329.0], [84.5, 1332.0], [84.6, 1335.0], [84.7, 1338.0], [84.8, 1341.0], [84.9, 1345.0], [85.0, 1349.0], [85.1, 1352.0], [85.2, 1356.0], [85.3, 1359.0], [85.4, 1362.0], [85.5, 1366.0], [85.6, 1370.0], [85.7, 1373.0], [85.8, 1376.0], [85.9, 1381.0], [86.0, 1384.0], [86.1, 1388.0], [86.2, 1392.0], [86.3, 1395.0], [86.4, 1399.0], [86.5, 1402.0], [86.6, 1406.0], [86.7, 1409.0], [86.8, 1412.0], [86.9, 1417.0], [87.0, 1421.0], [87.1, 1424.0], [87.2, 1428.0], [87.3, 1432.0], [87.4, 1436.0], [87.5, 1440.0], [87.6, 1444.0], [87.7, 1448.0], [87.8, 1452.0], [87.9, 1456.0], [88.0, 1461.0], [88.1, 1465.0], [88.2, 1469.0], [88.3, 1474.0], [88.4, 1478.0], [88.5, 1482.0], [88.6, 1486.0], [88.7, 1490.0], [88.8, 1495.0], [88.9, 1498.0], [89.0, 1502.0], [89.1, 1507.0], [89.2, 1511.0], [89.3, 1515.0], [89.4, 1520.0], [89.5, 1525.0], [89.6, 1529.0], [89.7, 1533.0], [89.8, 1538.0], [89.9, 1543.0], [90.0, 1548.0], [90.1, 1553.0], [90.2, 1557.0], [90.3, 1562.0], [90.4, 1567.0], [90.5, 1572.0], [90.6, 1577.0], [90.7, 1582.0], [90.8, 1587.0], [90.9, 1592.0], [91.0, 1597.0], [91.1, 1603.0], [91.2, 1608.0], [91.3, 1612.0], [91.4, 1618.0], [91.5, 1623.0], [91.6, 1628.0], [91.7, 1634.0], [91.8, 1639.0], [91.9, 1645.0], [92.0, 1651.0], [92.1, 1656.0], [92.2, 1662.0], [92.3, 1668.0], [92.4, 1673.0], [92.5, 1679.0], [92.6, 1685.0], [92.7, 1690.0], [92.8, 1696.0], [92.9, 1702.0], [93.0, 1708.0], [93.1, 1715.0], [93.2, 1722.0], [93.3, 1729.0], [93.4, 1736.0], [93.5, 1744.0], [93.6, 1751.0], [93.7, 1759.0], [93.8, 1766.0], [93.9, 1774.0], [94.0, 1781.0], [94.1, 1787.0], [94.2, 1794.0], [94.3, 1801.0], [94.4, 1810.0], [94.5, 1817.0], [94.6, 1824.0], [94.7, 1832.0], [94.8, 1840.0], [94.9, 1850.0], [95.0, 1859.0], [95.1, 1867.0], [95.2, 1878.0], [95.3, 1886.0], [95.4, 1895.0], [95.5, 1905.0], [95.6, 1914.0], [95.7, 1924.0], [95.8, 1933.0], [95.9, 1942.0], [96.0, 1952.0], [96.1, 1960.0], [96.2, 1970.0], [96.3, 1982.0], [96.4, 1993.0], [96.5, 2004.0], [96.6, 2015.0], [96.7, 2027.0], [96.8, 2039.0], [96.9, 2051.0], [97.0, 2064.0], [97.1, 2079.0], [97.2, 2094.0], [97.3, 2106.0], [97.4, 2121.0], [97.5, 2137.0], [97.6, 2153.0], [97.7, 2171.0], [97.8, 2187.0], [97.9, 2206.0], [98.0, 2225.0], [98.1, 2241.0], [98.2, 2261.0], [98.3, 2282.0], [98.4, 2306.0], [98.5, 2333.0], [98.6, 2354.0], [98.7, 2379.0], [98.8, 2408.0], [98.9, 2432.0], [99.0, 2465.0], [99.1, 2502.0], [99.2, 2540.0], [99.3, 2587.0], [99.4, 2633.0], [99.5, 2695.0], [99.6, 2755.0], [99.7, 2860.0], [99.8, 3007.0], [99.9, 3164.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 25391.0, "series": [{"data": [[0.0, 11753.0], [600.0, 5505.0], [700.0, 5889.0], [800.0, 5899.0], [900.0, 5734.0], [1000.0, 5181.0], [1100.0, 4728.0], [1200.0, 3978.0], [1300.0, 3477.0], [1400.0, 2944.0], [1500.0, 2474.0], [100.0, 25391.0], [1600.0, 2142.0], [1700.0, 1661.0], [1800.0, 1353.0], [1900.0, 1202.0], [2000.0, 909.0], [2100.0, 740.0], [2200.0, 592.0], [2300.0, 461.0], [2400.0, 383.0], [2500.0, 268.0], [2600.0, 219.0], [2800.0, 93.0], [2700.0, 160.0], [2900.0, 83.0], [3000.0, 79.0], [3100.0, 60.0], [200.0, 10060.0], [3200.0, 31.0], [3300.0, 23.0], [3400.0, 16.0], [3500.0, 7.0], [3700.0, 11.0], [3600.0, 4.0], [3800.0, 4.0], [3900.0, 1.0], [4000.0, 1.0], [300.0, 4714.0], [400.0, 4122.0], [500.0, 4848.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 12950.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 56087.0, "series": [{"data": [[0.0, 56087.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 48163.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 12950.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.7286246E12, "maxY": 16.0, "series": [{"data": [[1.7286294E12, 12.0], [1.72863102E12, 12.0], [1.7286291E12, 12.0], [1.7286297E12, 12.0], [1.72863E12, 12.0], [1.7286303E12, 12.0], [1.7286306E12, 12.0], [1.72862928E12, 12.0], [1.7286309E12, 12.0], [1.72862898E12, 11.902542372881356], [1.7286312E12, 2.2875], [1.72862988E12, 12.0], [1.72862958E12, 12.0], [1.72863018E12, 12.0], [1.72863048E12, 12.0], [1.72862916E12, 12.0], [1.72863078E12, 12.0], [1.72863108E12, 11.921956295525499], [1.72862976E12, 12.0], [1.72862946E12, 12.0], [1.72863006E12, 12.0], [1.72863036E12, 12.0], [1.72862904E12, 12.0], [1.72863066E12, 12.0], [1.72863096E12, 12.0], [1.72862964E12, 12.0], [1.72862934E12, 12.0], [1.72862994E12, 12.0], [1.72863024E12, 12.0], [1.72863054E12, 12.0], [1.72863084E12, 12.0], [1.72862952E12, 12.0], [1.72863114E12, 8.883374689826303], [1.72862922E12, 12.0], [1.72862982E12, 12.0], [1.72863012E12, 12.0], [1.72863042E12, 12.0], [1.72863072E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72862472E12, 2.0], [1.7286249E12, 1.8383838383838385], [1.7286246E12, 2.0], [1.72862478E12, 2.0], [1.72862466E12, 2.0], [1.72862484E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.72862586E12, 4.0], [1.72862616E12, 4.0], [1.72862556E12, 4.0], [1.72862526E12, 4.0], [1.72862544E12, 4.0], [1.72862514E12, 4.0], [1.72862646E12, 4.0], [1.72862676E12, 3.154970760233917], [1.72862634E12, 4.0], [1.72862664E12, 4.0], [1.72862574E12, 4.0], [1.72862604E12, 4.0], [1.72862562E12, 4.0], [1.72862592E12, 4.0], [1.72862532E12, 4.0], [1.72862502E12, 4.0], [1.7286252E12, 4.0], [1.7286249E12, 3.9940476190476186], [1.72862622E12, 4.0], [1.72862652E12, 4.0], [1.7286261E12, 4.0], [1.7286264E12, 4.0], [1.7286255E12, 4.0], [1.7286258E12, 4.0], [1.72862568E12, 4.0], [1.72862538E12, 4.0], [1.72862508E12, 4.0], [1.7286267E12, 4.0], [1.72862496E12, 4.0], [1.72862658E12, 4.0], [1.72862598E12, 4.0], [1.72862628E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72863312E12, 1.0], [1.72863132E12, 16.0], [1.72863282E12, 16.0], [1.72863162E12, 16.0], [1.72863252E12, 16.0], [1.72863192E12, 16.0], [1.72863222E12, 16.0], [1.7286312E12, 15.934687953555882], [1.72863294E12, 16.0], [1.7286315E12, 16.0], [1.7286318E12, 16.0], [1.728633E12, 14.956033676333018], [1.7286327E12, 16.0], [1.7286324E12, 16.0], [1.7286321E12, 16.0], [1.72863138E12, 16.0], [1.72863168E12, 16.0], [1.72863198E12, 16.0], [1.72863216E12, 16.0], [1.72863126E12, 16.0], [1.72863288E12, 16.0], [1.72863156E12, 16.0], [1.72863258E12, 16.0], [1.72863186E12, 16.0], [1.72863228E12, 16.0], [1.72863264E12, 16.0], [1.72863234E12, 16.0], [1.72863144E12, 16.0], [1.72863174E12, 16.0], [1.72863204E12, 16.0], [1.72863306E12, 9.028846153846146], [1.72863276E12, 16.0], [1.72863246E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.72862778E12, 8.0], [1.72862718E12, 8.0], [1.72862808E12, 8.0], [1.72862748E12, 8.0], [1.72862706E12, 8.0], [1.72862868E12, 8.0], [1.72862736E12, 8.0], [1.72862838E12, 8.0], [1.72862898E12, 4.021929824561404], [1.72862676E12, 7.928571428571429], [1.72862796E12, 8.0], [1.72862766E12, 8.0], [1.72862856E12, 8.0], [1.72862826E12, 8.0], [1.72862754E12, 8.0], [1.72862784E12, 8.0], [1.72862886E12, 8.0], [1.72862694E12, 8.0], [1.72862724E12, 8.0], [1.72862682E12, 8.0], [1.72862844E12, 8.0], [1.72862712E12, 8.0], [1.72862814E12, 8.0], [1.72862874E12, 8.0], [1.72862742E12, 8.0], [1.72862832E12, 8.0], [1.72862772E12, 8.0], [1.72862802E12, 8.0], [1.7286273E12, 8.0], [1.72862892E12, 7.622386223862239], [1.7286276E12, 8.0], [1.72862862E12, 8.0], [1.728627E12, 8.0], [1.7286282E12, 8.0], [1.72862688E12, 8.0], [1.7286279E12, 8.0], [1.7286288E12, 8.0], [1.7286285E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72863312E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 456.2127139364303, "minX": 1.0, "maxY": 939.2939178153755, "series": [{"data": [[2.0, 457.25630914826525], [8.0, 544.6111304237866], [9.0, 593.4264705882352], [10.0, 629.6027397260275], [11.0, 661.9918831168832], [3.0, 456.2127139364303], [12.0, 727.5877165533527], [13.0, 719.4524886877831], [14.0, 839.0952380952381], [15.0, 826.962264150944], [1.0, 484.9915966386553], [4.0, 468.56057157309147], [16.0, 939.2939178153755], [5.0, 478.3113207547168], [6.0, 517.0000000000001], [7.0, 508.7522123893808]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.713370307167262, 693.2542491467567]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.7286246E12, "maxY": 5.4147647233333334E7, "series": [{"data": [[1.72862586E12, 2.4874751333333332E7], [1.7286291E12, 4.9554632233333334E7], [1.72863132E12, 5.2973748416666664E7], [1.72862808E12, 4.360732631666667E7], [1.72863252E12, 5.2005617916666664E7], [1.72862706E12, 4.375882135E7], [1.7286303E12, 5.075212406666667E7], [1.72862484E12, 1.24721934E7], [1.72862928E12, 5.242292595E7], [1.7286315E12, 5.245574371666667E7], [1.72862604E12, 2.7304451566666666E7], [1.72862826E12, 4.5114456583333336E7], [1.72863048E12, 5.015711968333333E7], [1.7286327E12, 5.2594742983333334E7], [1.72862502E12, 2.64837322E7], [1.72862724E12, 4.439649965E7], [1.72862946E12, 5.063018178333333E7], [1.72863168E12, 5.3040757916666664E7], [1.72863198E12, 5.3212069333333336E7], [1.72863216E12, 5.162911238333333E7], [1.72862652E12, 2.5185518966666665E7], [1.72862874E12, 4.4936307333333336E7], [1.72863096E12, 5.1346004766666666E7], [1.7286255E12, 2.6481046766666666E7], [1.72862772E12, 4.29696044E7], [1.72862994E12, 4.8531709916666664E7], [1.72862568E12, 2.7230849583333332E7], [1.72862892E12, 4.523232881666667E7], [1.72863234E12, 5.266360128333333E7], [1.72863114E12, 4.196944971666667E7], [1.7286267E12, 2.428072585E7], [1.72862688E12, 4.259172528333333E7], [1.72862466E12, 1.40300028E7], [1.7286279E12, 4.532112615E7], [1.72863012E12, 5.0714934016666666E7], [1.72862778E12, 4.533544586666667E7], [1.72863102E12, 4.981569681666667E7], [1.72862556E12, 2.65506176E7], [1.72863E12, 4.9615928166666664E7], [1.72863222E12, 5.150957606666667E7], [1.72862898E12, 3.373992278333333E7], [1.7286312E12, 3.5895686333333336E7], [1.72862676E12, 2.1348588533333335E7], [1.72862472E12, 1.2762798E7], [1.72862796E12, 4.4627733516666666E7], [1.72863018E12, 4.8191712266666666E7], [1.72862574E12, 2.594211955E7], [1.72862916E12, 5.057585795E7], [1.7286324E12, 5.2877910266666666E7], [1.72862592E12, 2.503243025E7], [1.72862694E12, 4.555731361666667E7], [1.72863138E12, 5.235358085E7], [1.7286252E12, 2.6879787166666668E7], [1.72862844E12, 4.330388031666667E7], [1.72862622E12, 2.6564154966666665E7], [1.72863066E12, 5.040893131666667E7], [1.72862964E12, 4.8693284416666664E7], [1.72863288E12, 5.239711931666667E7], [1.7286264E12, 2.63743391E7], [1.72862742E12, 4.5377146833333336E7], [1.72863186E12, 5.257767268333333E7], [1.72862538E12, 2.6602124816666666E7], [1.7286276E12, 4.5421795483333334E7], [1.72862862E12, 4.526179011666667E7], [1.72863084E12, 4.9681874666666664E7], [1.72862658E12, 2.666854205E7], [1.72862982E12, 5.157788336666667E7], [1.72863204E12, 5.146975605E7], [1.72863306E12, 3.0829945733333334E7], [1.7286288E12, 4.541068421666667E7], [1.72863312E12, 1750128.2], [1.72862526E12, 2.6763741916666668E7], [1.72862748E12, 4.3237673766666666E7], [1.7286297E12, 5.136120896666667E7], [1.72863192E12, 5.181839631666667E7], [1.72862544E12, 2.6763293866666667E7], [1.72862868E12, 4.4114402083333336E7], [1.72862646E12, 2.6446557316666666E7], [1.7286309E12, 4.870479585E7], [1.72863294E12, 5.091146771666667E7], [1.72862988E12, 5.095774511666667E7], [1.72862664E12, 2.5773728283333335E7], [1.72862766E12, 4.42979345E7], [1.72862562E12, 2.6026659866666667E7], [1.72862784E12, 4.50894371E7], [1.72863108E12, 5.032186211666667E7], [1.72862886E12, 4.464414181666667E7], [1.7286321E12, 5.188496336666667E7], [1.7286249E12, 1.9686901483333334E7], [1.72862712E12, 4.4087607983333334E7], [1.72862814E12, 4.457140396666667E7], [1.72863036E12, 4.951837345E7], [1.7286261E12, 2.5791003016666666E7], [1.72862934E12, 5.075053056666667E7], [1.72863156E12, 5.0687809583333336E7], [1.72863258E12, 5.16159009E7], [1.72862832E12, 4.23630219E7], [1.7286273E12, 4.289661596666667E7], [1.72863054E12, 4.7960747166666664E7], [1.72862508E12, 2.519721735E7], [1.72862952E12, 5.171871261666667E7], [1.72863174E12, 5.140802165E7], [1.72863276E12, 5.213846165E7], [1.72862628E12, 2.6258153016666666E7], [1.7286285E12, 4.74930088E7], [1.72863072E12, 5.03754779E7], [1.7286294E12, 5.063956168333333E7], [1.72862616E12, 2.56183536E7], [1.72863282E12, 5.3040502733333334E7], [1.72862718E12, 4.58307727E7], [1.72863162E12, 5.4147647233333334E7], [1.72862514E12, 2.6029154866666667E7], [1.72862736E12, 4.29329605E7], [1.72862838E12, 4.522271705E7], [1.7286306E12, 4.921554138333333E7], [1.72862634E12, 2.7640905416666668E7], [1.72862958E12, 4.9561474833333336E7], [1.7286318E12, 5.155456413333333E7], [1.72862856E12, 4.537334031666667E7], [1.728633E12, 5.1220380666666664E7], [1.72862754E12, 4.54300849E7], [1.72863078E12, 5.110243986666667E7], [1.72862532E12, 2.637167445E7], [1.72862976E12, 4.995555836666667E7], [1.72862682E12, 4.527936005E7], [1.72863006E12, 4.8890620916666664E7], [1.72862904E12, 5.146175618333333E7], [1.7286246E12, 2439520.6166666667], [1.72863126E12, 5.027306811666667E7], [1.72863228E12, 5.35231034E7], [1.7286258E12, 2.6415329916666668E7], [1.72862802E12, 4.3775939016666666E7], [1.72863024E12, 5.22422246E7], [1.72863264E12, 5.031180506666667E7], [1.72862478E12, 1.3756453E7], [1.728627E12, 4.64333303E7], [1.72862922E12, 4.934781921666667E7], [1.72863144E12, 5.133298738333333E7], [1.72862496E12, 2.59347257E7], [1.7286282E12, 4.568690345E7], [1.72862598E12, 2.6102919766666666E7], [1.72863042E12, 5.139200043333333E7], [1.72863246E12, 5.281175715E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72862586E12, 0.0], [1.7286291E12, 0.0], [1.72863132E12, 0.0], [1.72862808E12, 0.0], [1.72863252E12, 0.0], [1.72862706E12, 0.0], [1.7286303E12, 0.0], [1.72862484E12, 0.0], [1.72862928E12, 0.0], [1.7286315E12, 0.0], [1.72862604E12, 0.0], [1.72862826E12, 0.0], [1.72863048E12, 0.0], [1.7286327E12, 0.0], [1.72862502E12, 0.0], [1.72862724E12, 0.0], [1.72862946E12, 0.0], [1.72863168E12, 0.0], [1.72863198E12, 0.0], [1.72863216E12, 0.0], [1.72862652E12, 0.0], [1.72862874E12, 0.0], [1.72863096E12, 0.0], [1.7286255E12, 0.0], [1.72862772E12, 0.0], [1.72862994E12, 0.0], [1.72862568E12, 0.0], [1.72862892E12, 0.0], [1.72863234E12, 0.0], [1.72863114E12, 0.0], [1.7286267E12, 0.0], [1.72862688E12, 0.0], [1.72862466E12, 0.0], [1.7286279E12, 0.0], [1.72863012E12, 0.0], [1.72862778E12, 0.0], [1.72863102E12, 0.0], [1.72862556E12, 0.0], [1.72863E12, 0.0], [1.72863222E12, 0.0], [1.72862898E12, 0.0], [1.7286312E12, 0.0], [1.72862676E12, 0.0], [1.72862472E12, 0.0], [1.72862796E12, 0.0], [1.72863018E12, 0.0], [1.72862574E12, 0.0], [1.72862916E12, 0.0], [1.7286324E12, 0.0], [1.72862592E12, 0.0], [1.72862694E12, 0.0], [1.72863138E12, 0.0], [1.7286252E12, 0.0], [1.72862844E12, 0.0], [1.72862622E12, 0.0], [1.72863066E12, 0.0], [1.72862964E12, 0.0], [1.72863288E12, 0.0], [1.7286264E12, 0.0], [1.72862742E12, 0.0], [1.72863186E12, 0.0], [1.72862538E12, 0.0], [1.7286276E12, 0.0], [1.72862862E12, 0.0], [1.72863084E12, 0.0], [1.72862658E12, 0.0], [1.72862982E12, 0.0], [1.72863204E12, 0.0], [1.72863306E12, 0.0], [1.7286288E12, 0.0], [1.72863312E12, 0.0], [1.72862526E12, 0.0], [1.72862748E12, 0.0], [1.7286297E12, 0.0], [1.72863192E12, 0.0], [1.72862544E12, 0.0], [1.72862868E12, 0.0], [1.72862646E12, 0.0], [1.7286309E12, 0.0], [1.72863294E12, 0.0], [1.72862988E12, 0.0], [1.72862664E12, 0.0], [1.72862766E12, 0.0], [1.72862562E12, 0.0], [1.72862784E12, 0.0], [1.72863108E12, 0.0], [1.72862886E12, 0.0], [1.7286321E12, 0.0], [1.7286249E12, 0.0], [1.72862712E12, 0.0], [1.72862814E12, 0.0], [1.72863036E12, 0.0], [1.7286261E12, 0.0], [1.72862934E12, 0.0], [1.72863156E12, 0.0], [1.72863258E12, 0.0], [1.72862832E12, 0.0], [1.7286273E12, 0.0], [1.72863054E12, 0.0], [1.72862508E12, 0.0], [1.72862952E12, 0.0], [1.72863174E12, 0.0], [1.72863276E12, 0.0], [1.72862628E12, 0.0], [1.7286285E12, 0.0], [1.72863072E12, 0.0], [1.7286294E12, 0.0], [1.72862616E12, 0.0], [1.72863282E12, 0.0], [1.72862718E12, 0.0], [1.72863162E12, 0.0], [1.72862514E12, 0.0], [1.72862736E12, 0.0], [1.72862838E12, 0.0], [1.7286306E12, 0.0], [1.72862634E12, 0.0], [1.72862958E12, 0.0], [1.7286318E12, 0.0], [1.72862856E12, 0.0], [1.728633E12, 0.0], [1.72862754E12, 0.0], [1.72863078E12, 0.0], [1.72862532E12, 0.0], [1.72862976E12, 0.0], [1.72862682E12, 0.0], [1.72863006E12, 0.0], [1.72862904E12, 0.0], [1.7286246E12, 0.0], [1.72863126E12, 0.0], [1.72863228E12, 0.0], [1.7286258E12, 0.0], [1.72862802E12, 0.0], [1.72863024E12, 0.0], [1.72863264E12, 0.0], [1.72862478E12, 0.0], [1.728627E12, 0.0], [1.72862922E12, 0.0], [1.72863144E12, 0.0], [1.72862496E12, 0.0], [1.7286282E12, 0.0], [1.72862598E12, 0.0], [1.72863042E12, 0.0], [1.72863246E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72863312E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 428.3908045977016, "minX": 1.7286246E12, "maxY": 1020.4930777422804, "series": [{"data": [[1.72862586E12, 438.7765567765566], [1.7286291E12, 700.5844660194168], [1.72863132E12, 928.0299516908224], [1.72862808E12, 532.7786429365966], [1.72863252E12, 980.9846782431049], [1.72862706E12, 543.0658342792277], [1.7286303E12, 726.9605662285139], [1.72862484E12, 484.1052631578947], [1.72862928E12, 719.6527363184077], [1.7286315E12, 928.6550387596902], [1.72862604E12, 475.922924901186], [1.72862826E12, 534.9944444444442], [1.72863048E12, 733.0813835198377], [1.7286327E12, 945.7091988130545], [1.72862502E12, 502.6799163179914], [1.72862724E12, 545.2227272727281], [1.72862946E12, 724.0641925777335], [1.72863168E12, 956.4975173783513], [1.72863198E12, 964.9011976047894], [1.72863216E12, 915.4909609895334], [1.72862652E12, 474.9564356435643], [1.72862874E12, 531.2186459489457], [1.72863096E12, 755.1225130890049], [1.7286255E12, 467.49224806201556], [1.72862772E12, 514.4337997847156], [1.72862994E12, 739.548553719008], [1.72862568E12, 499.46458333333334], [1.72862892E12, 558.8757687576878], [1.72863234E12, 932.9913043478257], [1.72863114E12, 618.4813895781631], [1.7286267E12, 443.29834254143645], [1.72862688E12, 527.5302530253024], [1.72862466E12, 437.57818181818186], [1.7286279E12, 565.4056603773585], [1.72863012E12, 754.4863731656185], [1.72862778E12, 562.2903981264634], [1.72863102E12, 749.8660436137068], [1.72862556E12, 460.77087378640783], [1.72863E12, 706.5230166503425], [1.72863222E12, 965.5497487437196], [1.72862898E12, 622.2600000000011], [1.7286312E12, 834.9713914174255], [1.72862676E12, 468.1737089201878], [1.72862472E12, 444.88059701492534], [1.72862796E12, 553.7577497129746], [1.72863018E12, 704.6323529411769], [1.72862574E12, 466.6828793774316], [1.72862916E12, 733.3069105691058], [1.7286324E12, 1020.4930777422804], [1.72862592E12, 470.643137254902], [1.72862694E12, 549.6842105263153], [1.72863138E12, 920.5300859598858], [1.7286252E12, 465.8677042801558], [1.72862844E12, 532.8832035595094], [1.72862622E12, 478.1200000000001], [1.72863066E12, 754.7752341311127], [1.72862964E12, 721.6943887775562], [1.72863288E12, 1003.2240837696343], [1.7286264E12, 492.8401639344262], [1.72862742E12, 579.8657799274489], [1.72863186E12, 942.8242187499999], [1.72862538E12, 485.1825557809334], [1.7286276E12, 545.1045454545447], [1.72862862E12, 553.5416666666662], [1.72863084E12, 720.9002991026922], [1.72862658E12, 492.8668032786885], [1.72862982E12, 708.2145669291339], [1.72863204E12, 905.4924242424244], [1.72863306E12, 627.0769230769239], [1.7286288E12, 544.7287173666296], [1.72863312E12, 651.7826086956521], [1.72862526E12, 464.28076923076907], [1.72862748E12, 547.7645714285721], [1.7286297E12, 726.1606060606056], [1.72863192E12, 948.6825396825395], [1.72862544E12, 515.0493562231759], [1.72862868E12, 550.2305936073062], [1.72862646E12, 466.6400778210117], [1.7286309E12, 686.3524904214547], [1.72863294E12, 952.2180376610504], [1.72862988E12, 777.4595469255661], [1.72862664E12, 441.3149171270721], [1.72862766E12, 525.8633879781422], [1.72862562E12, 469.07558139534893], [1.72862784E12, 554.8553240740742], [1.72863108E12, 744.350676378772], [1.72862886E12, 550.48794489093], [1.7286321E12, 918.711132437619], [1.7286249E12, 428.3908045977016], [1.72862712E12, 550.5917431192659], [1.72862814E12, 546.1666666666662], [1.72863036E12, 722.0510510510499], [1.7286261E12, 459.84644913627614], [1.72862934E12, 765.9023354564749], [1.72863156E12, 920.4642857142862], [1.72863258E12, 904.8127939793038], [1.72862832E12, 511.05442902881487], [1.7286273E12, 527.2387238723871], [1.72863054E12, 692.4075144508679], [1.72862508E12, 446.41977611940285], [1.72862952E12, 745.8101135190914], [1.72863174E12, 936.8352826510721], [1.72863276E12, 931.4966118102612], [1.72862628E12, 441.8029465930021], [1.7286285E12, 565.8215962441321], [1.72863072E12, 736.024640657084], [1.7286294E12, 765.3888888888875], [1.72862616E12, 453.7113207547176], [1.72863282E12, 911.1634980988603], [1.72862718E12, 531.8612652608214], [1.72863162E12, 963.6853707414822], [1.72862514E12, 516.1849462365586], [1.72862736E12, 524.1775599128537], [1.72862838E12, 557.01511627907], [1.7286306E12, 719.3106212424846], [1.72862634E12, 474.1538461538463], [1.72862958E12, 704.5220804710488], [1.7286318E12, 957.0452261306532], [1.72862856E12, 552.5051783659376], [1.728633E12, 842.279700654817], [1.72862754E12, 557.8883720930232], [1.72863078E12, 713.9920556107257], [1.72862532E12, 478.424], [1.72862976E12, 722.4563691073224], [1.72862682E12, 573.8277511961724], [1.72863006E12, 723.3152610441757], [1.72862904E12, 688.5764818355636], [1.7286246E12, 560.8717948717948], [1.72863126E12, 935.0439882697958], [1.72863228E12, 963.0241935483872], [1.7286258E12, 450.6735459662291], [1.72862802E12, 533.1034482758631], [1.72863024E12, 710.3950738916255], [1.72863264E12, 929.8100289296058], [1.72862478E12, 442.5110294117648], [1.728627E12, 532.0408388520979], [1.72862922E12, 761.3272921108738], [1.72863144E12, 895.5959031657355], [1.72862496E12, 462.71953578336564], [1.7286282E12, 545.938356164383], [1.72862598E12, 463.471844660194], [1.72863042E12, 720.5195195195198], [1.72863246E12, 921.1511068334929]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72863312E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 287.52183908045987, "minX": 1.7286246E12, "maxY": 692.2960596379129, "series": [{"data": [[1.72862586E12, 295.5329670329674], [1.7286291E12, 476.9077669902911], [1.72863132E12, 628.283091787439], [1.72862808E12, 361.1468298109006], [1.72863252E12, 668.2512768130749], [1.72862706E12, 367.9716231555051], [1.7286303E12, 489.8584428715874], [1.72862484E12, 331.9716599190285], [1.72862928E12, 483.8626865671635], [1.7286315E12, 632.7616279069763], [1.72862604E12, 316.0533596837943], [1.72862826E12, 358.21555555555545], [1.72863048E12, 496.8148524923701], [1.7286327E12, 641.9297725024728], [1.72862502E12, 337.4414225941425], [1.72862724E12, 367.67386363636354], [1.72862946E12, 491.6820461384157], [1.72863168E12, 647.3138033763647], [1.72863198E12, 651.1676646706583], [1.72863216E12, 623.8363463368222], [1.72862652E12, 321.5881188118812], [1.72862874E12, 357.73584905660374], [1.72863096E12, 509.55183246073267], [1.7286255E12, 310.72480620155034], [1.72862772E12, 349.47578040904204], [1.72862994E12, 506.8667355371905], [1.72862568E12, 330.7375000000001], [1.72862892E12, 373.65682656826544], [1.72863234E12, 633.1314009661844], [1.72863114E12, 416.4962779156328], [1.7286267E12, 300.18600368324155], [1.72862688E12, 360.07590759075913], [1.72862466E12, 287.59272727272764], [1.7286279E12, 380.6981132075467], [1.72863012E12, 511.80607966457137], [1.72862778E12, 376.57845433255324], [1.72863102E12, 512.2585669781931], [1.72862556E12, 305.41165048543684], [1.72863E12, 478.48090107737494], [1.72863222E12, 659.1195979899503], [1.72862898E12, 421.9300000000002], [1.7286312E12, 570.7126137841353], [1.72862676E12, 313.6525821596243], [1.72862472E12, 300.0746268656717], [1.72862796E12, 374.58668197474105], [1.72863018E12, 484.0294117647058], [1.72862574E12, 311.65953307393], [1.72862916E12, 497.63008130081187], [1.7286324E12, 692.2960596379129], [1.72862592E12, 317.978431372549], [1.72862694E12, 369.76659038901556], [1.72863138E12, 623.3113658070678], [1.7286252E12, 308.6750972762647], [1.72862844E12, 359.97330367074494], [1.72862622E12, 318.492], [1.72863066E12, 512.6982310093651], [1.72862964E12, 491.7204408817636], [1.72863288E12, 678.6492146596851], [1.7286264E12, 328.1188524590166], [1.72862742E12, 390.6541717049578], [1.72863186E12, 640.4726562499998], [1.72862538E12, 321.7687626774849], [1.7286276E12, 367.9647727272725], [1.72862862E12, 373.2696759259264], [1.72863084E12, 490.2382851445662], [1.72862658E12, 328.36885245901664], [1.72862982E12, 478.4438976377951], [1.72863204E12, 614.6505681818189], [1.72863306E12, 426.998397435897], [1.7286288E12, 367.0885357548241], [1.72863312E12, 436.30434782608694], [1.72862526E12, 309.7865384615385], [1.72862748E12, 373.6262857142852], [1.7286297E12, 489.20909090909123], [1.72863192E12, 644.0466269841274], [1.72862544E12, 345.1716738197424], [1.72862868E12, 373.18493150684907], [1.72862646E12, 310.53307392996123], [1.7286309E12, 466.6312260536402], [1.72863294E12, 654.3686818632308], [1.72862988E12, 526.3171521035601], [1.72862664E12, 294.5101289134438], [1.72862766E12, 355.55519125683065], [1.72862562E12, 313.9031007751943], [1.72862784E12, 376.460648148148], [1.72863108E12, 504.45577523413107], [1.72862886E12, 372.9896670493684], [1.7286321E12, 621.1928982725525], [1.7286249E12, 287.52183908045987], [1.72862712E12, 372.809633027523], [1.72862814E12, 369.0374149659861], [1.72863036E12, 491.1841841841836], [1.7286261E12, 308.8618042226484], [1.72862934E12, 517.5966029723992], [1.72863156E12, 625.2335907335894], [1.72863258E12, 613.4619002822194], [1.72862832E12, 347.16008537886887], [1.7286273E12, 358.5819581958199], [1.72863054E12, 473.18786127167624], [1.72862508E12, 300.55410447761165], [1.72862952E12, 504.66563467492233], [1.72863174E12, 639.2553606237818], [1.72863276E12, 632.8470474346561], [1.72862628E12, 293.6593001841619], [1.7286285E12, 375.6877934272302], [1.72863072E12, 499.5133470225871], [1.7286294E12, 519.5641025641013], [1.72862616E12, 305.6735849056599], [1.72863282E12, 617.8326996197719], [1.72862718E12, 355.79245283018867], [1.72863162E12, 650.8456913827656], [1.72862514E12, 348.6021505376344], [1.72862736E12, 357.5838779956427], [1.72862838E12, 376.2546511627908], [1.7286306E12, 490.47494989979964], [1.72862634E12, 312.4043392504931], [1.72862958E12, 477.9597644749759], [1.7286318E12, 647.939698492463], [1.72862856E12, 371.88262370540843], [1.728633E12, 571.9476145930776], [1.72862754E12, 375.2], [1.72863078E12, 484.4915590863958], [1.72862532E12, 319.14], [1.72862976E12, 490.8956870611837], [1.72862682E12, 387.95933014354057], [1.72863006E12, 491.54819277108476], [1.72862904E12, 463.16921606118564], [1.7286246E12, 380.4358974358975], [1.72863126E12, 639.2942326490715], [1.72863228E12, 650.9344758064522], [1.7286258E12, 297.1801125703565], [1.72862802E12, 361.1156840934367], [1.72863024E12, 477.57536945812774], [1.72863264E12, 636.8486017357764], [1.72862478E12, 294.9889705882351], [1.728627E12, 356.26048565121397], [1.72862922E12, 518.3646055437096], [1.72863144E12, 611.0540037243941], [1.72862496E12, 308.5299806576408], [1.7286282E12, 365.2488584474883], [1.72862598E12, 309.2543689320387], [1.72863042E12, 482.19719719719706], [1.72863246E12, 622.1414821944179]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72863312E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7286246E12, "maxY": 4.9E-324, "series": [{"data": [[1.72862586E12, 0.0], [1.7286291E12, 0.0], [1.72863132E12, 0.0], [1.72862808E12, 0.0], [1.72863252E12, 0.0], [1.72862706E12, 0.0], [1.7286303E12, 0.0], [1.72862484E12, 0.0], [1.72862928E12, 0.0], [1.7286315E12, 0.0], [1.72862604E12, 0.0], [1.72862826E12, 0.0], [1.72863048E12, 0.0], [1.7286327E12, 0.0], [1.72862502E12, 0.0], [1.72862724E12, 0.0], [1.72862946E12, 0.0], [1.72863168E12, 0.0], [1.72863198E12, 0.0], [1.72863216E12, 0.0], [1.72862652E12, 0.0], [1.72862874E12, 0.0], [1.72863096E12, 0.0], [1.7286255E12, 0.0], [1.72862772E12, 0.0], [1.72862994E12, 0.0], [1.72862568E12, 0.0], [1.72862892E12, 0.0], [1.72863234E12, 0.0], [1.72863114E12, 0.0], [1.7286267E12, 0.0], [1.72862688E12, 0.0], [1.72862466E12, 0.0], [1.7286279E12, 0.0], [1.72863012E12, 0.0], [1.72862778E12, 0.0], [1.72863102E12, 0.0], [1.72862556E12, 0.0], [1.72863E12, 0.0], [1.72863222E12, 0.0], [1.72862898E12, 0.0], [1.7286312E12, 0.0], [1.72862676E12, 0.0], [1.72862472E12, 0.0], [1.72862796E12, 0.0], [1.72863018E12, 0.0], [1.72862574E12, 0.0], [1.72862916E12, 0.0], [1.7286324E12, 0.0], [1.72862592E12, 0.0], [1.72862694E12, 0.0], [1.72863138E12, 0.0], [1.7286252E12, 0.0], [1.72862844E12, 0.0], [1.72862622E12, 0.0], [1.72863066E12, 0.0], [1.72862964E12, 0.0], [1.72863288E12, 0.0], [1.7286264E12, 0.0], [1.72862742E12, 0.0], [1.72863186E12, 0.0], [1.72862538E12, 0.0], [1.7286276E12, 0.0], [1.72862862E12, 0.0], [1.72863084E12, 0.0], [1.72862658E12, 0.0], [1.72862982E12, 0.0], [1.72863204E12, 0.0], [1.72863306E12, 0.0], [1.7286288E12, 0.0], [1.72863312E12, 0.0], [1.72862526E12, 0.0], [1.72862748E12, 0.0], [1.7286297E12, 0.0], [1.72863192E12, 0.0], [1.72862544E12, 0.0], [1.72862868E12, 0.0], [1.72862646E12, 0.0], [1.7286309E12, 0.0], [1.72863294E12, 0.0], [1.72862988E12, 0.0], [1.72862664E12, 0.0], [1.72862766E12, 0.0], [1.72862562E12, 0.0], [1.72862784E12, 0.0], [1.72863108E12, 0.0], [1.72862886E12, 0.0], [1.7286321E12, 0.0], [1.7286249E12, 0.0], [1.72862712E12, 0.0], [1.72862814E12, 0.0], [1.72863036E12, 0.0], [1.7286261E12, 0.0], [1.72862934E12, 0.0], [1.72863156E12, 0.0], [1.72863258E12, 0.0], [1.72862832E12, 0.0], [1.7286273E12, 0.0], [1.72863054E12, 0.0], [1.72862508E12, 0.0], [1.72862952E12, 0.0], [1.72863174E12, 0.0], [1.72863276E12, 0.0], [1.72862628E12, 0.0], [1.7286285E12, 0.0], [1.72863072E12, 0.0], [1.7286294E12, 0.0], [1.72862616E12, 0.0], [1.72863282E12, 0.0], [1.72862718E12, 0.0], [1.72863162E12, 0.0], [1.72862514E12, 0.0], [1.72862736E12, 0.0], [1.72862838E12, 0.0], [1.7286306E12, 0.0], [1.72862634E12, 0.0], [1.72862958E12, 0.0], [1.7286318E12, 0.0], [1.72862856E12, 0.0], [1.728633E12, 0.0], [1.72862754E12, 0.0], [1.72863078E12, 0.0], [1.72862532E12, 0.0], [1.72862976E12, 0.0], [1.72862682E12, 0.0], [1.72863006E12, 0.0], [1.72862904E12, 0.0], [1.7286246E12, 0.0], [1.72863126E12, 0.0], [1.72863228E12, 0.0], [1.7286258E12, 0.0], [1.72862802E12, 0.0], [1.72863024E12, 0.0], [1.72863264E12, 0.0], [1.72862478E12, 0.0], [1.728627E12, 0.0], [1.72862922E12, 0.0], [1.72863144E12, 0.0], [1.72862496E12, 0.0], [1.7286282E12, 0.0], [1.72862598E12, 0.0], [1.72863042E12, 0.0], [1.72863246E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72863312E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 34.0, "minX": 1.7286246E12, "maxY": 4068.0, "series": [{"data": [[1.72862586E12, 1698.0], [1.7286291E12, 2576.0], [1.72863132E12, 3415.0], [1.72862808E12, 2060.0], [1.72863252E12, 3851.0], [1.72862706E12, 2201.0], [1.7286303E12, 2921.0], [1.72862484E12, 1535.0], [1.72862928E12, 3034.0], [1.7286315E12, 3707.0], [1.72862604E12, 1970.0], [1.72862826E12, 2042.0], [1.72863048E12, 2677.0], [1.7286327E12, 3824.0], [1.72862502E12, 1600.0], [1.72862724E12, 2109.0], [1.72862946E12, 3251.0], [1.72863168E12, 3559.0], [1.72863198E12, 4068.0], [1.72863216E12, 3462.0], [1.72862652E12, 1897.0], [1.72862874E12, 2376.0], [1.72863096E12, 2785.0], [1.7286255E12, 1552.0], [1.72862772E12, 2184.0], [1.72862994E12, 3065.0], [1.72862568E12, 1921.0], [1.72862892E12, 2329.0], [1.72863234E12, 3453.0], [1.72863114E12, 2532.0], [1.7286267E12, 1806.0], [1.72862688E12, 2252.0], [1.72862466E12, 1527.0], [1.7286279E12, 2002.0], [1.72863012E12, 3028.0], [1.72862778E12, 2189.0], [1.72863102E12, 2891.0], [1.72862556E12, 1551.0], [1.72863E12, 2791.0], [1.72863222E12, 3118.0], [1.72862898E12, 2534.0], [1.7286312E12, 3558.0], [1.72862676E12, 1653.0], [1.72862472E12, 1779.0], [1.72862796E12, 2078.0], [1.72863018E12, 2633.0], [1.72862574E12, 1952.0], [1.72862916E12, 2432.0], [1.7286324E12, 3750.0], [1.72862592E12, 1596.0], [1.72862694E12, 1954.0], [1.72863138E12, 3512.0], [1.7286252E12, 1676.0], [1.72862844E12, 1996.0], [1.72862622E12, 1545.0], [1.72863066E12, 2665.0], [1.72862964E12, 2943.0], [1.72863288E12, 3964.0], [1.7286264E12, 1770.0], [1.72862742E12, 2176.0], [1.72863186E12, 3875.0], [1.72862538E12, 1835.0], [1.7286276E12, 2096.0], [1.72862862E12, 2059.0], [1.72863084E12, 2687.0], [1.72862658E12, 1695.0], [1.72862982E12, 2770.0], [1.72863204E12, 3387.0], [1.72863306E12, 2941.0], [1.7286288E12, 2191.0], [1.72863312E12, 1148.0], [1.72862526E12, 1852.0], [1.72862748E12, 1885.0], [1.7286297E12, 3027.0], [1.72863192E12, 3601.0], [1.72862544E12, 1549.0], [1.72862868E12, 2299.0], [1.72862646E12, 1790.0], [1.7286309E12, 2432.0], [1.72863294E12, 3739.0], [1.72862988E12, 2886.0], [1.72862664E12, 1696.0], [1.72862766E12, 2086.0], [1.72862562E12, 1924.0], [1.72862784E12, 2024.0], [1.72863108E12, 2556.0], [1.72862886E12, 2038.0], [1.7286321E12, 3769.0], [1.7286249E12, 1607.0], [1.72862712E12, 2051.0], [1.72862814E12, 2010.0], [1.72863036E12, 2650.0], [1.7286261E12, 1587.0], [1.72862934E12, 2999.0], [1.72863156E12, 3273.0], [1.72863258E12, 3644.0], [1.72862832E12, 1874.0], [1.7286273E12, 2127.0], [1.72863054E12, 2951.0], [1.72862508E12, 1828.0], [1.72862952E12, 3040.0], [1.72863174E12, 3731.0], [1.72863276E12, 3498.0], [1.72862628E12, 1534.0], [1.7286285E12, 2413.0], [1.72863072E12, 2746.0], [1.7286294E12, 2679.0], [1.72862616E12, 1636.0], [1.72863282E12, 3148.0], [1.72862718E12, 1935.0], [1.72863162E12, 3749.0], [1.72862514E12, 1599.0], [1.72862736E12, 2034.0], [1.72862838E12, 2199.0], [1.7286306E12, 3043.0], [1.72862634E12, 1887.0], [1.72862958E12, 2859.0], [1.7286318E12, 3416.0], [1.72862856E12, 2138.0], [1.728633E12, 3069.0], [1.72862754E12, 2022.0], [1.72863078E12, 2794.0], [1.72862532E12, 1768.0], [1.72862976E12, 2642.0], [1.72862682E12, 2029.0], [1.72863006E12, 3146.0], [1.72862904E12, 2643.0], [1.7286246E12, 1608.0], [1.72863126E12, 3389.0], [1.72863228E12, 3572.0], [1.7286258E12, 1777.0], [1.72862802E12, 2230.0], [1.72863024E12, 2799.0], [1.72863264E12, 3763.0], [1.72862478E12, 1436.0], [1.728627E12, 2093.0], [1.72862922E12, 2650.0], [1.72863144E12, 3384.0], [1.72862496E12, 1526.0], [1.7286282E12, 1859.0], [1.72862598E12, 1953.0], [1.72863042E12, 2799.0], [1.72863246E12, 3727.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72862586E12, 965.8000000000001], [1.7286291E12, 1532.2999999999997], [1.72863132E12, 1982.0], [1.72862808E12, 1147.0], [1.72863252E12, 2004.0], [1.72862706E12, 1204.0000000000005], [1.7286303E12, 1597.0], [1.72862484E12, 991.2], [1.72862928E12, 1584.0], [1.7286315E12, 1990.2000000000003], [1.72862604E12, 1003.1000000000001], [1.72862826E12, 1112.0], [1.72863048E12, 1567.2], [1.7286327E12, 2048.4], [1.72862502E12, 1008.2], [1.72862724E12, 1151.6], [1.72862946E12, 1588.0], [1.72863168E12, 2026.200000000001], [1.72863198E12, 2069.5], [1.72863216E12, 1965.4], [1.72862652E12, 968.4000000000001], [1.72862874E12, 1136.8000000000002], [1.72863096E12, 1600.8], [1.7286255E12, 1014.3], [1.72862772E12, 1109.0], [1.72862994E12, 1543.3000000000002], [1.72862568E12, 1027.5000000000002], [1.72862892E12, 1177.2], [1.72863234E12, 2032.8], [1.72863114E12, 1378.4000000000005], [1.7286267E12, 960.2000000000002], [1.72862688E12, 1127.0], [1.72862466E12, 922.4], [1.7286279E12, 1193.0000000000002], [1.72863012E12, 1587.5], [1.72862778E12, 1168.0], [1.72863102E12, 1573.2], [1.72862556E12, 1007.4000000000001], [1.72863E12, 1560.4], [1.72863222E12, 2039.1999999999998], [1.72862898E12, 1396.9], [1.7286312E12, 1868.0], [1.72862676E12, 1023.6], [1.72862472E12, 1007.5], [1.72862796E12, 1181.4000000000005], [1.72863018E12, 1563.9], [1.72862574E12, 955.0], [1.72862916E12, 1599.5], [1.7286324E12, 2086.0], [1.72862592E12, 995.5000000000002], [1.72862694E12, 1187.5], [1.72863138E12, 1959.2], [1.7286252E12, 1001.5], [1.72862844E12, 1112.0], [1.72862622E12, 1035.2000000000003], [1.72863066E12, 1613.8000000000002], [1.72862964E12, 1587.3000000000002], [1.72863288E12, 2129.8], [1.7286264E12, 1042.2], [1.72862742E12, 1191.4], [1.72863186E12, 1991.5], [1.72862538E12, 1063.0], [1.7286276E12, 1156.8], [1.72862862E12, 1201.5], [1.72863084E12, 1559.0], [1.72862658E12, 1009.9000000000002], [1.72862982E12, 1527.9], [1.72863204E12, 2016.6000000000001], [1.72863306E12, 1364.5], [1.7286288E12, 1143.4], [1.72863312E12, 1122.4], [1.72862526E12, 1001.9000000000008], [1.72862748E12, 1136.1999999999998], [1.7286297E12, 1555.8], [1.72863192E12, 1991.6000000000001], [1.72862544E12, 1012.2], [1.72862868E12, 1130.3000000000002], [1.72862646E12, 1018.5], [1.7286309E12, 1514.0], [1.72863294E12, 1962.0], [1.72862988E12, 1652.6000000000001], [1.72862664E12, 983.8000000000003], [1.72862766E12, 1123.0], [1.72862562E12, 1013.0], [1.72862784E12, 1159.0], [1.72863108E12, 1582.8000000000002], [1.72862886E12, 1149.6000000000001], [1.7286321E12, 2003.8000000000002], [1.7286249E12, 946.2000000000003], [1.72862712E12, 1136.7], [1.72862814E12, 1140.4], [1.72863036E12, 1524.0], [1.7286261E12, 979.6000000000001], [1.72862934E12, 1696.4], [1.72863156E12, 1948.0], [1.72863258E12, 1988.8000000000002], [1.72862832E12, 1122.4], [1.7286273E12, 1131.0], [1.72863054E12, 1506.2], [1.72862508E12, 987.6], [1.72862952E12, 1555.0], [1.72863174E12, 2011.0], [1.72863276E12, 2023.2000000000003], [1.72862628E12, 948.8000000000001], [1.7286285E12, 1202.0], [1.72863072E12, 1551.5], [1.7286294E12, 1578.2000000000003], [1.72862616E12, 990.6000000000001], [1.72863282E12, 1985.5000000000002], [1.72862718E12, 1177.2000000000003], [1.72863162E12, 2045.1], [1.72862514E12, 1022.6000000000004], [1.72862736E12, 1150.1], [1.72862838E12, 1181.3999999999999], [1.7286306E12, 1527.2], [1.72862634E12, 1015.9999999999999], [1.72862958E12, 1558.0], [1.7286318E12, 2011.8], [1.72862856E12, 1181.0], [1.728633E12, 1872.0], [1.72862754E12, 1186.7999999999997], [1.72863078E12, 1564.0000000000002], [1.72862532E12, 1030.6000000000001], [1.72862976E12, 1575.2], [1.72862682E12, 1226.0], [1.72863006E12, 1583.5000000000005], [1.72862904E12, 1581.8000000000004], [1.7286246E12, 1318.0], [1.72863126E12, 2015.0], [1.72863228E12, 2013.2000000000003], [1.7286258E12, 1007.0000000000001], [1.72862802E12, 1143.0], [1.72863024E12, 1566.0], [1.72863264E12, 1998.2], [1.72862478E12, 953.6000000000001], [1.728627E12, 1129.9], [1.72862922E12, 1580.5], [1.72863144E12, 1916.5], [1.72862496E12, 994.5999999999999], [1.7286282E12, 1175.8000000000004], [1.72862598E12, 1031.8000000000002], [1.72863042E12, 1636.0], [1.72863246E12, 2005.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72862586E12, 1335.3199999999988], [1.7286291E12, 2191.6399999999967], [1.72863132E12, 2861.8800000000065], [1.72862808E12, 1644.0], [1.72863252E12, 3188.0], [1.72862706E12, 1733.239999999999], [1.7286303E12, 2214.900000000003], [1.72862484E12, 1436.7200000000018], [1.72862928E12, 2384.1999999999953], [1.7286315E12, 2771.7899999999986], [1.72862604E12, 1505.0900000000001], [1.72862826E12, 1747.97], [1.72863048E12, 2244.1599999999985], [1.7286327E12, 2914.12], [1.72862502E12, 1387.7799999999997], [1.72862724E12, 1626.2199999999978], [1.72862946E12, 2288.04], [1.72863168E12, 2959.3599999999997], [1.72863198E12, 2933.040000000001], [1.72863216E12, 2716.96], [1.72862652E12, 1343.4], [1.72862874E12, 1797.7800000000002], [1.72863096E12, 2417.7999999999975], [1.7286255E12, 1453.609999999999], [1.72862772E12, 1621.3000000000009], [1.72862994E12, 2342.0299999999993], [1.72862568E12, 1582.1699999999998], [1.72862892E12, 1606.3600000000004], [1.72863234E12, 2834.6400000000026], [1.72863114E12, 2054.58], [1.7286267E12, 1457.9599999999991], [1.72862688E12, 1833.6999999999994], [1.72862466E12, 1426.2800000000009], [1.7286279E12, 1691.02], [1.72863012E12, 2509.9500000000016], [1.72862778E12, 1696.6000000000004], [1.72863102E12, 2498.5200000000004], [1.72862556E12, 1369.1999999999998], [1.72863E12, 2222.68], [1.72863222E12, 2815.7199999999993], [1.72862898E12, 2134.94], [1.7286312E12, 2806.299999999993], [1.72862676E12, 1421.0], [1.72862472E12, 1411.8200000000002], [1.72862796E12, 1695.5599999999993], [1.72863018E12, 2238.37], [1.72862574E12, 1403.1000000000006], [1.72862916E12, 2228.8999999999996], [1.7286324E12, 2820.2000000000003], [1.72862592E12, 1439.4699999999998], [1.72862694E12, 1660.75], [1.72863138E12, 2949.3199999999997], [1.7286252E12, 1361.4], [1.72862844E12, 1645.0], [1.72862622E12, 1489.99], [1.72863066E12, 2224.3599999999997], [1.72862964E12, 2287.18], [1.72863288E12, 2997.1199999999985], [1.7286264E12, 1517.7300000000005], [1.72862742E12, 1706.6000000000008], [1.72863186E12, 2961.75], [1.72862538E12, 1530.8400000000001], [1.7286276E12, 1648.7999999999988], [1.72862862E12, 1663.7], [1.72863084E12, 2195.84], [1.72862658E12, 1510.7600000000002], [1.72862982E12, 2165.670000000002], [1.72863204E12, 2920.0300000000016], [1.72863306E12, 2120.25], [1.7286288E12, 1612.239999999999], [1.72863312E12, 1148.0], [1.72862526E12, 1493.7399999999998], [1.72862748E12, 1602.2400000000002], [1.7286297E12, 2311.1800000000003], [1.72863192E12, 2852.1899999999996], [1.72862544E12, 1364.5199999999993], [1.72862868E12, 1692.4500000000003], [1.72862646E12, 1456.9000000000008], [1.7286309E12, 2182.8999999999983], [1.72863294E12, 2894.6], [1.72862988E12, 2368.4000000000005], [1.72862664E12, 1414.9599999999964], [1.72862766E12, 1634.52], [1.72862562E12, 1590.7899999999997], [1.72862784E12, 1811.8500000000008], [1.72863108E12, 2212.8], [1.72862886E12, 1723.0399999999995], [1.7286321E12, 2888.239999999998], [1.7286249E12, 1315.92], [1.72862712E12, 1621.08], [1.72862814E12, 1671.17], [1.72863036E12, 2290.0], [1.7286261E12, 1348.2399999999998], [1.72862934E12, 2445.0], [1.72863156E12, 2877.149999999988], [1.72863258E12, 2897.07999999999], [1.72862832E12, 1677.24], [1.7286273E12, 1754.9999999999995], [1.72863054E12, 2313.579999999992], [1.72862508E12, 1418.9699999999998], [1.72862952E12, 2305.599999999999], [1.72863174E12, 2938.0600000000004], [1.72863276E12, 2986.66], [1.72862628E12, 1308.9199999999996], [1.7286285E12, 1708.2200000000007], [1.72863072E12, 2386.75], [1.7286294E12, 2148.63], [1.72862616E12, 1490.419999999999], [1.72863282E12, 2716.3500000000004], [1.72862718E12, 1772.3200000000006], [1.72863162E12, 2925.2799999999997], [1.72862514E12, 1508.6599999999987], [1.72862736E12, 1649.6699999999996], [1.72862838E12, 1659.6699999999992], [1.7286306E12, 2223.16], [1.72862634E12, 1395.6800000000005], [1.72862958E12, 2395.1999999999985], [1.7286318E12, 2971.9999999999964], [1.72862856E12, 1727.3], [1.728633E12, 2696.7999999999993], [1.72862754E12, 1768.4299999999994], [1.72863078E12, 2330.679999999999], [1.72862532E12, 1404.9], [1.72862976E12, 2441.3999999999996], [1.72862682E12, 1799.8899999999999], [1.72863006E12, 2258.7199999999993], [1.72862904E12, 2274.669999999999], [1.7286246E12, 1608.0], [1.72863126E12, 2831.0], [1.72863228E12, 3096.239999999998], [1.7286258E12, 1674.2199999999993], [1.72862802E12, 1621.0], [1.72863024E12, 2279.2000000000003], [1.72863264E12, 2896.619999999989], [1.72862478E12, 1391.2399999999998], [1.728627E12, 1693.339999999998], [1.72862922E12, 2327.66], [1.72863144E12, 2908.0], [1.72862496E12, 1391.1400000000012], [1.7286282E12, 1703.9900000000002], [1.72862598E12, 1451.8399999999992], [1.72863042E12, 2488.0], [1.72863246E12, 2760.599999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72862586E12, 1064.3999999999996], [1.7286291E12, 1780.4499999999998], [1.72863132E12, 2358.9999999999995], [1.72862808E12, 1334.0], [1.72863252E12, 2328.0], [1.72862706E12, 1371.6], [1.7286303E12, 1816.5], [1.72862484E12, 1120.6], [1.72862928E12, 1785.1], [1.7286315E12, 2275.2999999999965], [1.72862604E12, 1175.7999999999997], [1.72862826E12, 1281.8999999999999], [1.72863048E12, 1805.8], [1.7286327E12, 2303.8], [1.72862502E12, 1184.05], [1.72862724E12, 1305.0], [1.72862946E12, 1737.1999999999998], [1.72863168E12, 2329.6], [1.72863198E12, 2277.2499999999995], [1.72863216E12, 2238.4], [1.72862652E12, 1158.7999999999997], [1.72862874E12, 1327.3999999999999], [1.72863096E12, 1871.1999999999996], [1.7286255E12, 1163.15], [1.72862772E12, 1269.0], [1.72862994E12, 1844.2499999999993], [1.72862568E12, 1174.95], [1.72862892E12, 1331.3], [1.72863234E12, 2320.2], [1.72863114E12, 1615.3], [1.7286267E12, 1090.5999999999997], [1.72862688E12, 1318.0], [1.72862466E12, 1071.1999999999998], [1.7286279E12, 1402.1499999999994], [1.72863012E12, 1881.75], [1.72862778E12, 1358.75], [1.72863102E12, 1860.9999999999998], [1.72862556E12, 1120.6], [1.72863E12, 1843.7999999999993], [1.72863222E12, 2337.9999999999986], [1.72862898E12, 1676.5999999999995], [1.7286312E12, 2149.0], [1.72862676E12, 1144.6499999999996], [1.72862472E12, 1165.0999999999997], [1.72862796E12, 1366.3999999999996], [1.72863018E12, 1807.249999999999], [1.72862574E12, 1130.25], [1.72862916E12, 1830.75], [1.7286324E12, 2379.0], [1.72862592E12, 1146.5], [1.72862694E12, 1362.75], [1.72863138E12, 2273.999999999999], [1.7286252E12, 1121.75], [1.72862844E12, 1314.0], [1.72862622E12, 1194.6999999999998], [1.72863066E12, 1827.9], [1.72862964E12, 1850.0], [1.72863288E12, 2402.6], [1.7286264E12, 1166.0], [1.72862742E12, 1378.7999999999997], [1.72863186E12, 2286.25], [1.72862538E12, 1226.3], [1.7286276E12, 1379.3999999999992], [1.72862862E12, 1363.0], [1.72863084E12, 1815.0], [1.72862658E12, 1196.1499999999994], [1.72862982E12, 1787.8999999999999], [1.72863204E12, 2337.75], [1.72863306E12, 1591.0], [1.7286288E12, 1304.6], [1.72863312E12, 1146.4], [1.72862526E12, 1159.75], [1.72862748E12, 1285.3999999999999], [1.7286297E12, 1834.4499999999985], [1.72863192E12, 2299.55], [1.72862544E12, 1182.85], [1.72862868E12, 1290.2499999999995], [1.72862646E12, 1193.5], [1.7286309E12, 1760.5], [1.72863294E12, 2288.0], [1.72862988E12, 1879.0], [1.72862664E12, 1159.0], [1.72862766E12, 1323.7999999999997], [1.72862562E12, 1129.4499999999998], [1.72862784E12, 1309.75], [1.72863108E12, 1866.5], [1.72862886E12, 1322.0], [1.7286321E12, 2326.7], [1.7286249E12, 1096.1999999999998], [1.72862712E12, 1351.6999999999998], [1.72862814E12, 1340.9499999999994], [1.72863036E12, 1783.0], [1.7286261E12, 1124.0], [1.72862934E12, 1905.3999999999996], [1.72863156E12, 2239.2], [1.72863258E12, 2292.8], [1.72862832E12, 1346.199999999998], [1.7286273E12, 1275.5], [1.72863054E12, 1747.1499999999999], [1.72862508E12, 1105.3], [1.72862952E12, 1813.5], [1.72863174E12, 2316.8999999999996], [1.72863276E12, 2301.0999999999995], [1.72862628E12, 1098.3999999999996], [1.7286285E12, 1381.35], [1.72863072E12, 1824.75], [1.7286294E12, 1839.0499999999997], [1.72862616E12, 1107.85], [1.72863282E12, 2266.35], [1.72862718E12, 1367.6999999999998], [1.72863162E12, 2353.4999999999995], [1.72862514E12, 1216.3], [1.72862736E12, 1309.1], [1.72862838E12, 1342.4999999999993], [1.7286306E12, 1778.05], [1.72862634E12, 1168.9999999999998], [1.72862958E12, 1800.0], [1.7286318E12, 2290.399999999999], [1.72862856E12, 1372.0], [1.728633E12, 2190.0], [1.72862754E12, 1426.0], [1.72863078E12, 1790.9999999999995], [1.72862532E12, 1150.6], [1.72862976E12, 1860.1], [1.72862682E12, 1425.0999999999997], [1.72863006E12, 1797.15], [1.72862904E12, 1825.6], [1.7286246E12, 1524.0], [1.72863126E12, 2349.8], [1.72863228E12, 2335.4999999999973], [1.7286258E12, 1147.7999999999997], [1.72862802E12, 1294.0], [1.72863024E12, 1824.1999999999996], [1.72863264E12, 2280.6999999999994], [1.72862478E12, 1127.3999999999992], [1.728627E12, 1351.6], [1.72862922E12, 1863.6499999999994], [1.72863144E12, 2368.75], [1.72862496E12, 1138.3999999999999], [1.7286282E12, 1388.9499999999998], [1.72862598E12, 1167.4], [1.72863042E12, 1866.0], [1.72863246E12, 2234.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72862586E12, 41.0], [1.7286291E12, 45.0], [1.72863132E12, 63.0], [1.72862808E12, 37.0], [1.72863252E12, 62.0], [1.72862706E12, 43.0], [1.7286303E12, 53.0], [1.72862484E12, 45.0], [1.72862928E12, 45.0], [1.7286315E12, 80.0], [1.72862604E12, 37.0], [1.72862826E12, 42.0], [1.72863048E12, 37.0], [1.7286327E12, 71.0], [1.72862502E12, 42.0], [1.72862724E12, 39.0], [1.72862946E12, 47.0], [1.72863168E12, 71.0], [1.72863198E12, 77.0], [1.72863216E12, 76.0], [1.72862652E12, 44.0], [1.72862874E12, 44.0], [1.72863096E12, 41.0], [1.7286255E12, 40.0], [1.72862772E12, 41.0], [1.72862994E12, 44.0], [1.72862568E12, 39.0], [1.72862892E12, 42.0], [1.72863234E12, 60.0], [1.72863114E12, 44.0], [1.7286267E12, 39.0], [1.72862688E12, 42.0], [1.72862466E12, 42.0], [1.7286279E12, 43.0], [1.72863012E12, 48.0], [1.72862778E12, 42.0], [1.72863102E12, 46.0], [1.72862556E12, 43.0], [1.72863E12, 51.0], [1.72863222E12, 75.0], [1.72862898E12, 46.0], [1.7286312E12, 38.0], [1.72862676E12, 44.0], [1.72862472E12, 39.0], [1.72862796E12, 41.0], [1.72863018E12, 45.0], [1.72862574E12, 41.0], [1.72862916E12, 46.0], [1.7286324E12, 76.0], [1.72862592E12, 43.0], [1.72862694E12, 41.0], [1.72863138E12, 70.0], [1.7286252E12, 45.0], [1.72862844E12, 36.0], [1.72862622E12, 39.0], [1.72863066E12, 39.0], [1.72862964E12, 47.0], [1.72863288E12, 78.0], [1.7286264E12, 39.0], [1.72862742E12, 41.0], [1.72863186E12, 34.0], [1.72862538E12, 36.0], [1.7286276E12, 46.0], [1.72862862E12, 41.0], [1.72863084E12, 44.0], [1.72862658E12, 34.0], [1.72862982E12, 45.0], [1.72863204E12, 70.0], [1.72863306E12, 43.0], [1.7286288E12, 38.0], [1.72863312E12, 121.0], [1.72862526E12, 39.0], [1.72862748E12, 45.0], [1.7286297E12, 48.0], [1.72863192E12, 75.0], [1.72862544E12, 38.0], [1.72862868E12, 43.0], [1.72862646E12, 40.0], [1.7286309E12, 54.0], [1.72863294E12, 48.0], [1.72862988E12, 40.0], [1.72862664E12, 36.0], [1.72862766E12, 46.0], [1.72862562E12, 36.0], [1.72862784E12, 41.0], [1.72863108E12, 54.0], [1.72862886E12, 37.0], [1.7286321E12, 78.0], [1.7286249E12, 39.0], [1.72862712E12, 47.0], [1.72862814E12, 34.0], [1.72863036E12, 44.0], [1.7286261E12, 40.0], [1.72862934E12, 36.0], [1.72863156E12, 72.0], [1.72863258E12, 65.0], [1.72862832E12, 40.0], [1.7286273E12, 45.0], [1.72863054E12, 49.0], [1.72862508E12, 41.0], [1.72862952E12, 44.0], [1.72863174E12, 71.0], [1.72863276E12, 69.0], [1.72862628E12, 45.0], [1.7286285E12, 46.0], [1.72863072E12, 48.0], [1.7286294E12, 50.0], [1.72862616E12, 47.0], [1.72863282E12, 70.0], [1.72862718E12, 42.0], [1.72863162E12, 76.0], [1.72862514E12, 43.0], [1.72862736E12, 41.0], [1.72862838E12, 37.0], [1.7286306E12, 50.0], [1.72862634E12, 39.0], [1.72862958E12, 48.0], [1.7286318E12, 70.0], [1.72862856E12, 43.0], [1.728633E12, 45.0], [1.72862754E12, 47.0], [1.72863078E12, 49.0], [1.72862532E12, 45.0], [1.72862976E12, 45.0], [1.72862682E12, 40.0], [1.72863006E12, 45.0], [1.72862904E12, 56.0], [1.7286246E12, 56.0], [1.72863126E12, 75.0], [1.72863228E12, 67.0], [1.7286258E12, 38.0], [1.72862802E12, 41.0], [1.72863024E12, 56.0], [1.72863264E12, 67.0], [1.72862478E12, 39.0], [1.728627E12, 42.0], [1.72862922E12, 46.0], [1.72863144E12, 70.0], [1.72862496E12, 46.0], [1.7286282E12, 37.0], [1.72862598E12, 42.0], [1.72863042E12, 45.0], [1.72863246E12, 69.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72862586E12, 377.5], [1.7286291E12, 620.5], [1.72863132E12, 793.0], [1.72862808E12, 461.0], [1.72863252E12, 938.0], [1.72862706E12, 461.0], [1.7286303E12, 626.0], [1.72862484E12, 497.0], [1.72862928E12, 629.0], [1.7286315E12, 828.0], [1.72862604E12, 424.0], [1.72862826E12, 481.5], [1.72863048E12, 656.0], [1.7286327E12, 853.0], [1.72862502E12, 496.0], [1.72862724E12, 516.5], [1.72862946E12, 655.0], [1.72863168E12, 869.0], [1.72863198E12, 864.0], [1.72863216E12, 827.0], [1.72862652E12, 447.0], [1.72862874E12, 454.0], [1.72863096E12, 686.0], [1.7286255E12, 438.0], [1.72862772E12, 422.0], [1.72862994E12, 690.5], [1.72862568E12, 483.5], [1.72862892E12, 506.0], [1.72863234E12, 827.0], [1.72863114E12, 530.0], [1.7286267E12, 381.0], [1.72862688E12, 437.0], [1.72862466E12, 350.0], [1.7286279E12, 558.0], [1.72863012E12, 720.5], [1.72862778E12, 530.0], [1.72863102E12, 699.0], [1.72862556E12, 437.0], [1.72863E12, 566.0], [1.72863222E12, 915.0], [1.72862898E12, 460.5], [1.7286312E12, 593.0], [1.72862676E12, 422.5], [1.72862472E12, 321.5], [1.72862796E12, 490.0], [1.72863018E12, 592.0], [1.72862574E12, 449.0], [1.72862916E12, 685.0], [1.7286324E12, 1002.0], [1.72862592E12, 415.5], [1.72862694E12, 485.0], [1.72863138E12, 811.0], [1.7286252E12, 416.0], [1.72862844E12, 481.0], [1.72862622E12, 448.0], [1.72863066E12, 721.0], [1.72862964E12, 606.5], [1.72863288E12, 939.0], [1.7286264E12, 466.5], [1.72862742E12, 559.0], [1.72863186E12, 873.5], [1.72862538E12, 457.0], [1.7286276E12, 482.0], [1.72862862E12, 469.5], [1.72863084E12, 625.0], [1.72862658E12, 469.5], [1.72862982E12, 606.0], [1.72863204E12, 721.0], [1.72863306E12, 543.5], [1.7286288E12, 508.0], [1.72863312E12, 705.0], [1.72862526E12, 423.0], [1.72862748E12, 520.0], [1.7286297E12, 643.0], [1.72863192E12, 893.5], [1.72862544E12, 542.0], [1.72862868E12, 501.5], [1.72862646E12, 433.0], [1.7286309E12, 536.5], [1.72863294E12, 900.0], [1.72862988E12, 739.0], [1.72862664E12, 341.0], [1.72862766E12, 435.0], [1.72862562E12, 400.0], [1.72862784E12, 514.0], [1.72863108E12, 713.0], [1.72862886E12, 508.0], [1.7286321E12, 777.5], [1.7286249E12, 344.0], [1.72862712E12, 541.5], [1.72862814E12, 479.0], [1.72863036E12, 653.0], [1.7286261E12, 448.0], [1.72862934E12, 692.5], [1.72863156E12, 819.0], [1.72863258E12, 788.0], [1.72862832E12, 404.0], [1.7286273E12, 470.0], [1.72863054E12, 569.0], [1.72862508E12, 368.5], [1.72862952E12, 692.0], [1.72863174E12, 817.5], [1.72863276E12, 811.0], [1.72862628E12, 366.0], [1.7286285E12, 528.5], [1.72863072E12, 653.0], [1.7286294E12, 743.5], [1.72862616E12, 372.5], [1.72863282E12, 814.5], [1.72862718E12, 451.0], [1.72863162E12, 882.5], [1.72862514E12, 494.0], [1.72862736E12, 432.5], [1.72862838E12, 532.5], [1.7286306E12, 643.0], [1.72862634E12, 442.0], [1.72862958E12, 598.0], [1.7286318E12, 849.0], [1.72862856E12, 493.0], [1.728633E12, 663.0], [1.72862754E12, 510.5], [1.72863078E12, 615.0], [1.72862532E12, 438.0], [1.72862976E12, 640.0], [1.72862682E12, 546.5], [1.72863006E12, 612.0], [1.72862904E12, 519.0], [1.7286246E12, 444.0], [1.72863126E12, 806.0], [1.72863228E12, 914.0], [1.7286258E12, 382.0], [1.72862802E12, 459.0], [1.72863024E12, 569.0], [1.72863264E12, 826.0], [1.72862478E12, 377.5], [1.728627E12, 450.0], [1.72862922E12, 728.0], [1.72863144E12, 717.0], [1.72862496E12, 428.0], [1.7286282E12, 483.5], [1.72862598E12, 430.0], [1.72863042E12, 613.0], [1.72863246E12, 830.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72863312E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 211.0, "minX": 1.0, "maxY": 705.0, "series": [{"data": [[2.0, 666.5], [33.0, 283.0], [36.0, 249.0], [3.0, 656.5], [4.0, 621.0], [5.0, 614.0], [6.0, 592.0], [7.0, 560.5], [8.0, 516.0], [9.0, 541.0], [10.0, 564.0], [11.0, 603.0], [12.0, 623.0], [13.0, 656.0], [14.0, 636.5], [15.0, 639.5], [1.0, 705.0], [16.0, 607.0], [17.0, 549.0], [18.0, 498.0], [19.0, 506.0], [20.0, 446.5], [21.0, 397.0], [22.0, 359.0], [23.0, 342.0], [24.0, 300.5], [25.0, 319.0], [26.0, 297.5], [27.0, 262.0], [28.0, 252.5], [29.0, 247.5], [30.0, 211.0], [31.0, 375.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 36.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 128.5, "minX": 1.0, "maxY": 502.0, "series": [{"data": [[2.0, 465.5], [33.0, 194.0], [36.0, 178.5], [3.0, 440.0], [4.0, 427.0], [5.0, 415.0], [6.0, 414.0], [7.0, 397.0], [8.0, 372.0], [9.0, 383.0], [10.0, 404.0], [11.0, 428.0], [12.0, 438.0], [13.0, 464.0], [14.0, 455.0], [15.0, 454.0], [1.0, 502.0], [16.0, 440.0], [17.0, 404.0], [18.0, 366.0], [19.0, 368.5], [20.0, 321.0], [21.0, 272.5], [22.0, 245.0], [23.0, 224.0], [24.0, 186.5], [25.0, 199.0], [26.0, 188.0], [27.0, 166.0], [28.0, 159.0], [29.0, 155.0], [30.0, 128.5], [31.0, 238.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 36.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.7286246E12, "maxY": 17.9, "series": [{"data": [[1.72862586E12, 9.1], [1.7286291E12, 17.166666666666668], [1.72863132E12, 17.25], [1.72862808E12, 14.983333333333333], [1.72863252E12, 16.316666666666666], [1.72862706E12, 14.683333333333334], [1.7286303E12, 16.483333333333334], [1.72862484E12, 4.116666666666666], [1.72862928E12, 16.75], [1.7286315E12, 17.2], [1.72862604E12, 8.433333333333334], [1.72862826E12, 15.0], [1.72863048E12, 16.383333333333333], [1.7286327E12, 16.85], [1.72862502E12, 7.966666666666667], [1.72862724E12, 14.666666666666666], [1.72862946E12, 16.616666666666667], [1.72863168E12, 16.783333333333335], [1.72863198E12, 16.7], [1.72863216E12, 17.516666666666666], [1.72862652E12, 8.416666666666666], [1.72862874E12, 15.016666666666667], [1.72863096E12, 15.916666666666666], [1.7286255E12, 8.6], [1.72862772E12, 15.483333333333333], [1.72862994E12, 16.133333333333333], [1.72862568E12, 8.0], [1.72862892E12, 13.516666666666667], [1.72863234E12, 17.25], [1.72863114E12, 13.3], [1.7286267E12, 9.033333333333333], [1.72862688E12, 15.15], [1.72862466E12, 4.583333333333333], [1.7286279E12, 14.133333333333333], [1.72863012E12, 15.9], [1.72862778E12, 14.233333333333333], [1.72863102E12, 16.05], [1.72862556E12, 8.583333333333334], [1.72863E12, 17.016666666666666], [1.72863222E12, 16.583333333333332], [1.72862898E12, 11.766666666666667], [1.7286312E12, 13.033333333333333], [1.72862676E12, 7.183333333333334], [1.72862472E12, 4.466666666666667], [1.72862796E12, 14.516666666666667], [1.72863018E12, 17.0], [1.72862574E12, 8.566666666666666], [1.72862916E12, 16.4], [1.7286324E12, 15.65], [1.72862592E12, 8.5], [1.72862694E12, 14.566666666666666], [1.72863138E12, 17.45], [1.7286252E12, 8.566666666666666], [1.72862844E12, 14.983333333333333], [1.72862622E12, 8.333333333333334], [1.72863066E12, 16.016666666666666], [1.72862964E12, 16.633333333333333], [1.72863288E12, 15.916666666666666], [1.7286264E12, 8.133333333333333], [1.72862742E12, 13.783333333333333], [1.72863186E12, 17.066666666666666], [1.72862538E12, 8.216666666666667], [1.7286276E12, 14.666666666666666], [1.72862862E12, 14.4], [1.72863084E12, 16.716666666666665], [1.72862658E12, 8.133333333333333], [1.72862982E12, 16.933333333333334], [1.72863204E12, 17.6], [1.72863306E12, 10.2], [1.7286288E12, 14.683333333333334], [1.72863312E12, 0.36666666666666664], [1.72862526E12, 8.666666666666666], [1.72862748E12, 14.583333333333334], [1.7286297E12, 16.5], [1.72863192E12, 16.8], [1.72862544E12, 7.766666666666667], [1.72862868E12, 14.6], [1.72862646E12, 8.566666666666666], [1.7286309E12, 17.4], [1.72863294E12, 16.816666666666666], [1.72862988E12, 15.45], [1.72862664E12, 9.05], [1.72862766E12, 15.25], [1.72862562E12, 8.6], [1.72862784E12, 14.4], [1.72863108E12, 16.0], [1.72862886E12, 14.516666666666667], [1.7286321E12, 17.366666666666667], [1.7286249E12, 7.283333333333333], [1.72862712E12, 14.533333333333333], [1.72862814E12, 14.7], [1.72863036E12, 16.65], [1.7286261E12, 8.683333333333334], [1.72862934E12, 15.7], [1.72863156E12, 17.266666666666666], [1.72863258E12, 17.716666666666665], [1.72862832E12, 15.616666666666667], [1.7286273E12, 15.15], [1.72863054E12, 17.3], [1.72862508E12, 8.933333333333334], [1.72862952E12, 16.15], [1.72863174E12, 17.1], [1.72863276E12, 17.216666666666665], [1.72862628E12, 9.05], [1.7286285E12, 14.2], [1.72863072E12, 16.233333333333334], [1.7286294E12, 15.6], [1.72862616E12, 8.833333333333334], [1.72863282E12, 17.533333333333335], [1.72862718E12, 15.016666666666667], [1.72863162E12, 16.633333333333333], [1.72862514E12, 7.75], [1.72862736E12, 15.3], [1.72862838E12, 14.333333333333334], [1.7286306E12, 16.633333333333333], [1.72862634E12, 8.45], [1.72862958E12, 16.983333333333334], [1.7286318E12, 16.583333333333332], [1.72862856E12, 14.483333333333333], [1.728633E12, 17.766666666666666], [1.72862754E12, 14.333333333333334], [1.72863078E12, 16.783333333333335], [1.72862532E12, 8.333333333333334], [1.72862976E12, 16.616666666666667], [1.72862682E12, 13.933333333333334], [1.72863006E12, 16.6], [1.72862904E12, 17.433333333333334], [1.7286246E12, 0.6833333333333333], [1.72863126E12, 17.05], [1.72863228E12, 16.533333333333335], [1.7286258E12, 8.883333333333333], [1.72862802E12, 14.983333333333333], [1.72863024E12, 16.916666666666668], [1.72863264E12, 17.283333333333335], [1.72862478E12, 4.533333333333333], [1.728627E12, 15.1], [1.72862922E12, 15.633333333333333], [1.72863144E12, 17.9], [1.72862496E12, 8.616666666666667], [1.7286282E12, 14.6], [1.72862598E12, 8.583333333333334], [1.72863042E12, 16.65], [1.72863246E12, 17.316666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72863312E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.7286246E12, "maxY": 17.9, "series": [{"data": [[1.72862586E12, 9.1], [1.7286291E12, 17.166666666666668], [1.72863132E12, 17.25], [1.72862808E12, 14.983333333333333], [1.72863252E12, 16.316666666666666], [1.72862706E12, 14.683333333333334], [1.7286303E12, 16.483333333333334], [1.72862484E12, 4.116666666666666], [1.72862928E12, 16.75], [1.7286315E12, 17.2], [1.72862604E12, 8.433333333333334], [1.72862826E12, 15.0], [1.72863048E12, 16.383333333333333], [1.7286327E12, 16.85], [1.72862502E12, 7.966666666666667], [1.72862724E12, 14.666666666666666], [1.72862946E12, 16.616666666666667], [1.72863168E12, 16.783333333333335], [1.72863198E12, 16.7], [1.72863216E12, 17.516666666666666], [1.72862652E12, 8.416666666666666], [1.72862874E12, 15.016666666666667], [1.72863096E12, 15.916666666666666], [1.7286255E12, 8.6], [1.72862772E12, 15.483333333333333], [1.72862994E12, 16.133333333333333], [1.72862568E12, 8.0], [1.72862892E12, 13.55], [1.72863234E12, 17.25], [1.72863114E12, 13.433333333333334], [1.7286267E12, 9.05], [1.72862688E12, 15.15], [1.72862466E12, 4.583333333333333], [1.7286279E12, 14.133333333333333], [1.72863012E12, 15.9], [1.72862778E12, 14.233333333333333], [1.72863102E12, 16.05], [1.72862556E12, 8.583333333333334], [1.72863E12, 17.016666666666666], [1.72863222E12, 16.583333333333332], [1.72862898E12, 11.666666666666666], [1.7286312E12, 12.816666666666666], [1.72862676E12, 7.1], [1.72862472E12, 4.466666666666667], [1.72862796E12, 14.516666666666667], [1.72863018E12, 17.0], [1.72862574E12, 8.566666666666666], [1.72862916E12, 16.4], [1.7286324E12, 15.65], [1.72862592E12, 8.5], [1.72862694E12, 14.566666666666666], [1.72863138E12, 17.45], [1.7286252E12, 8.566666666666666], [1.72862844E12, 14.983333333333333], [1.72862622E12, 8.333333333333334], [1.72863066E12, 16.016666666666666], [1.72862964E12, 16.633333333333333], [1.72863288E12, 15.916666666666666], [1.7286264E12, 8.133333333333333], [1.72862742E12, 13.783333333333333], [1.72863186E12, 17.066666666666666], [1.72862538E12, 8.216666666666667], [1.7286276E12, 14.666666666666666], [1.72862862E12, 14.4], [1.72863084E12, 16.716666666666665], [1.72862658E12, 8.133333333333333], [1.72862982E12, 16.933333333333334], [1.72863204E12, 17.6], [1.72863306E12, 10.4], [1.7286288E12, 14.683333333333334], [1.72863312E12, 0.38333333333333336], [1.72862526E12, 8.666666666666666], [1.72862748E12, 14.583333333333334], [1.7286297E12, 16.5], [1.72863192E12, 16.8], [1.72862544E12, 7.766666666666667], [1.72862868E12, 14.6], [1.72862646E12, 8.566666666666666], [1.7286309E12, 17.4], [1.72863294E12, 16.816666666666666], [1.72862988E12, 15.45], [1.72862664E12, 9.05], [1.72862766E12, 15.25], [1.72862562E12, 8.6], [1.72862784E12, 14.4], [1.72863108E12, 16.016666666666666], [1.72862886E12, 14.516666666666667], [1.7286321E12, 17.366666666666667], [1.7286249E12, 7.25], [1.72862712E12, 14.533333333333333], [1.72862814E12, 14.7], [1.72863036E12, 16.65], [1.7286261E12, 8.683333333333334], [1.72862934E12, 15.7], [1.72863156E12, 17.266666666666666], [1.72863258E12, 17.716666666666665], [1.72862832E12, 15.616666666666667], [1.7286273E12, 15.15], [1.72863054E12, 17.3], [1.72862508E12, 8.933333333333334], [1.72862952E12, 16.15], [1.72863174E12, 17.1], [1.72863276E12, 17.216666666666665], [1.72862628E12, 9.05], [1.7286285E12, 14.2], [1.72863072E12, 16.233333333333334], [1.7286294E12, 15.6], [1.72862616E12, 8.833333333333334], [1.72863282E12, 17.533333333333335], [1.72862718E12, 15.016666666666667], [1.72863162E12, 16.633333333333333], [1.72862514E12, 7.75], [1.72862736E12, 15.3], [1.72862838E12, 14.333333333333334], [1.7286306E12, 16.633333333333333], [1.72862634E12, 8.45], [1.72862958E12, 16.983333333333334], [1.7286318E12, 16.583333333333332], [1.72862856E12, 14.483333333333333], [1.728633E12, 17.816666666666666], [1.72862754E12, 14.333333333333334], [1.72863078E12, 16.783333333333335], [1.72862532E12, 8.333333333333334], [1.72862976E12, 16.616666666666667], [1.72862682E12, 13.933333333333334], [1.72863006E12, 16.6], [1.72862904E12, 17.433333333333334], [1.7286246E12, 0.65], [1.72863126E12, 17.05], [1.72863228E12, 16.533333333333335], [1.7286258E12, 8.883333333333333], [1.72862802E12, 14.983333333333333], [1.72863024E12, 16.916666666666668], [1.72863264E12, 17.283333333333335], [1.72862478E12, 4.533333333333333], [1.728627E12, 15.1], [1.72862922E12, 15.633333333333333], [1.72863144E12, 17.9], [1.72862496E12, 8.616666666666667], [1.7286282E12, 14.6], [1.72862598E12, 8.583333333333334], [1.72863042E12, 16.65], [1.72863246E12, 17.316666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72863312E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.7286246E12, "maxY": 17.9, "series": [{"data": [[1.72862586E12, 9.1], [1.7286291E12, 17.166666666666668], [1.72863132E12, 17.25], [1.72862808E12, 14.983333333333333], [1.72863252E12, 16.316666666666666], [1.72862706E12, 14.683333333333334], [1.7286303E12, 16.483333333333334], [1.72862484E12, 4.116666666666666], [1.72862928E12, 16.75], [1.7286315E12, 17.2], [1.72862604E12, 8.433333333333334], [1.72862826E12, 15.0], [1.72863048E12, 16.383333333333333], [1.7286327E12, 16.85], [1.72862502E12, 7.966666666666667], [1.72862724E12, 14.666666666666666], [1.72862946E12, 16.616666666666667], [1.72863168E12, 16.783333333333335], [1.72863198E12, 16.7], [1.72863216E12, 17.516666666666666], [1.72862652E12, 8.416666666666666], [1.72862874E12, 15.016666666666667], [1.72863096E12, 15.916666666666666], [1.7286255E12, 8.6], [1.72862772E12, 15.483333333333333], [1.72862994E12, 16.133333333333333], [1.72862568E12, 8.0], [1.72862892E12, 13.55], [1.72863234E12, 17.25], [1.72863114E12, 13.433333333333334], [1.7286267E12, 9.05], [1.72862688E12, 15.15], [1.72862466E12, 4.583333333333333], [1.7286279E12, 14.133333333333333], [1.72863012E12, 15.9], [1.72862778E12, 14.233333333333333], [1.72863102E12, 16.05], [1.72862556E12, 8.583333333333334], [1.72863E12, 17.016666666666666], [1.72863222E12, 16.583333333333332], [1.72862898E12, 11.666666666666666], [1.7286312E12, 12.816666666666666], [1.72862676E12, 7.1], [1.72862472E12, 4.466666666666667], [1.72862796E12, 14.516666666666667], [1.72863018E12, 17.0], [1.72862574E12, 8.566666666666666], [1.72862916E12, 16.4], [1.7286324E12, 15.65], [1.72862592E12, 8.5], [1.72862694E12, 14.566666666666666], [1.72863138E12, 17.45], [1.7286252E12, 8.566666666666666], [1.72862844E12, 14.983333333333333], [1.72862622E12, 8.333333333333334], [1.72863066E12, 16.016666666666666], [1.72862964E12, 16.633333333333333], [1.72863288E12, 15.916666666666666], [1.7286264E12, 8.133333333333333], [1.72862742E12, 13.783333333333333], [1.72863186E12, 17.066666666666666], [1.72862538E12, 8.216666666666667], [1.7286276E12, 14.666666666666666], [1.72862862E12, 14.4], [1.72863084E12, 16.716666666666665], [1.72862658E12, 8.133333333333333], [1.72862982E12, 16.933333333333334], [1.72863204E12, 17.6], [1.72863306E12, 10.4], [1.7286288E12, 14.683333333333334], [1.72863312E12, 0.38333333333333336], [1.72862526E12, 8.666666666666666], [1.72862748E12, 14.583333333333334], [1.7286297E12, 16.5], [1.72863192E12, 16.8], [1.72862544E12, 7.766666666666667], [1.72862868E12, 14.6], [1.72862646E12, 8.566666666666666], [1.7286309E12, 17.4], [1.72863294E12, 16.816666666666666], [1.72862988E12, 15.45], [1.72862664E12, 9.05], [1.72862766E12, 15.25], [1.72862562E12, 8.6], [1.72862784E12, 14.4], [1.72863108E12, 16.016666666666666], [1.72862886E12, 14.516666666666667], [1.7286321E12, 17.366666666666667], [1.7286249E12, 7.25], [1.72862712E12, 14.533333333333333], [1.72862814E12, 14.7], [1.72863036E12, 16.65], [1.7286261E12, 8.683333333333334], [1.72862934E12, 15.7], [1.72863156E12, 17.266666666666666], [1.72863258E12, 17.716666666666665], [1.72862832E12, 15.616666666666667], [1.7286273E12, 15.15], [1.72863054E12, 17.3], [1.72862508E12, 8.933333333333334], [1.72862952E12, 16.15], [1.72863174E12, 17.1], [1.72863276E12, 17.216666666666665], [1.72862628E12, 9.05], [1.7286285E12, 14.2], [1.72863072E12, 16.233333333333334], [1.7286294E12, 15.6], [1.72862616E12, 8.833333333333334], [1.72863282E12, 17.533333333333335], [1.72862718E12, 15.016666666666667], [1.72863162E12, 16.633333333333333], [1.72862514E12, 7.75], [1.72862736E12, 15.3], [1.72862838E12, 14.333333333333334], [1.7286306E12, 16.633333333333333], [1.72862634E12, 8.45], [1.72862958E12, 16.983333333333334], [1.7286318E12, 16.583333333333332], [1.72862856E12, 14.483333333333333], [1.728633E12, 17.816666666666666], [1.72862754E12, 14.333333333333334], [1.72863078E12, 16.783333333333335], [1.72862532E12, 8.333333333333334], [1.72862976E12, 16.616666666666667], [1.72862682E12, 13.933333333333334], [1.72863006E12, 16.6], [1.72862904E12, 17.433333333333334], [1.7286246E12, 0.65], [1.72863126E12, 17.05], [1.72863228E12, 16.533333333333335], [1.7286258E12, 8.883333333333333], [1.72862802E12, 14.983333333333333], [1.72863024E12, 16.916666666666668], [1.72863264E12, 17.283333333333335], [1.72862478E12, 4.533333333333333], [1.728627E12, 15.1], [1.72862922E12, 15.633333333333333], [1.72863144E12, 17.9], [1.72862496E12, 8.616666666666667], [1.7286282E12, 14.6], [1.72862598E12, 8.583333333333334], [1.72863042E12, 16.65], [1.72863246E12, 17.316666666666666]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72863312E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.38333333333333336, "minX": 1.7286246E12, "maxY": 17.9, "series": [{"data": [[1.72862586E12, 9.1], [1.7286291E12, 17.166666666666668], [1.72863132E12, 17.25], [1.72862808E12, 14.983333333333333], [1.72863252E12, 16.316666666666666], [1.72862706E12, 14.683333333333334], [1.7286303E12, 16.483333333333334], [1.72862484E12, 4.116666666666666], [1.72862928E12, 16.75], [1.7286315E12, 17.2], [1.72862604E12, 8.433333333333334], [1.72862826E12, 15.0], [1.72863048E12, 16.383333333333333], [1.7286327E12, 16.85], [1.72862502E12, 7.966666666666667], [1.72862724E12, 14.666666666666666], [1.72862946E12, 16.616666666666667], [1.72863168E12, 16.783333333333335], [1.72863198E12, 16.7], [1.72863216E12, 17.516666666666666], [1.72862652E12, 8.416666666666666], [1.72862874E12, 15.016666666666667], [1.72863096E12, 15.916666666666666], [1.7286255E12, 8.6], [1.72862772E12, 15.483333333333333], [1.72862994E12, 16.133333333333333], [1.72862568E12, 8.0], [1.72862892E12, 13.55], [1.72863234E12, 17.25], [1.72863114E12, 13.433333333333334], [1.7286267E12, 9.05], [1.72862688E12, 15.15], [1.72862466E12, 4.583333333333333], [1.7286279E12, 14.133333333333333], [1.72863012E12, 15.9], [1.72862778E12, 14.233333333333333], [1.72863102E12, 16.05], [1.72862556E12, 8.583333333333334], [1.72863E12, 17.016666666666666], [1.72863222E12, 16.583333333333332], [1.72862898E12, 11.666666666666666], [1.7286312E12, 12.816666666666666], [1.72862676E12, 7.1], [1.72862472E12, 4.466666666666667], [1.72862796E12, 14.516666666666667], [1.72863018E12, 17.0], [1.72862574E12, 8.566666666666666], [1.72862916E12, 16.4], [1.7286324E12, 15.65], [1.72862592E12, 8.5], [1.72862694E12, 14.566666666666666], [1.72863138E12, 17.45], [1.7286252E12, 8.566666666666666], [1.72862844E12, 14.983333333333333], [1.72862622E12, 8.333333333333334], [1.72863066E12, 16.016666666666666], [1.72862964E12, 16.633333333333333], [1.72863288E12, 15.916666666666666], [1.7286264E12, 8.133333333333333], [1.72862742E12, 13.783333333333333], [1.72863186E12, 17.066666666666666], [1.72862538E12, 8.216666666666667], [1.7286276E12, 14.666666666666666], [1.72862862E12, 14.4], [1.72863084E12, 16.716666666666665], [1.72862658E12, 8.133333333333333], [1.72862982E12, 16.933333333333334], [1.72863204E12, 17.6], [1.72863306E12, 10.4], [1.7286288E12, 14.683333333333334], [1.72863312E12, 0.38333333333333336], [1.72862526E12, 8.666666666666666], [1.72862748E12, 14.583333333333334], [1.7286297E12, 16.5], [1.72863192E12, 16.8], [1.72862544E12, 7.766666666666667], [1.72862868E12, 14.6], [1.72862646E12, 8.566666666666666], [1.7286309E12, 17.4], [1.72863294E12, 16.816666666666666], [1.72862988E12, 15.45], [1.72862664E12, 9.05], [1.72862766E12, 15.25], [1.72862562E12, 8.6], [1.72862784E12, 14.4], [1.72863108E12, 16.016666666666666], [1.72862886E12, 14.516666666666667], [1.7286321E12, 17.366666666666667], [1.7286249E12, 7.25], [1.72862712E12, 14.533333333333333], [1.72862814E12, 14.7], [1.72863036E12, 16.65], [1.7286261E12, 8.683333333333334], [1.72862934E12, 15.7], [1.72863156E12, 17.266666666666666], [1.72863258E12, 17.716666666666665], [1.72862832E12, 15.616666666666667], [1.7286273E12, 15.15], [1.72863054E12, 17.3], [1.72862508E12, 8.933333333333334], [1.72862952E12, 16.15], [1.72863174E12, 17.1], [1.72863276E12, 17.216666666666665], [1.72862628E12, 9.05], [1.7286285E12, 14.2], [1.72863072E12, 16.233333333333334], [1.7286294E12, 15.6], [1.72862616E12, 8.833333333333334], [1.72863282E12, 17.533333333333335], [1.72862718E12, 15.016666666666667], [1.72863162E12, 16.633333333333333], [1.72862514E12, 7.75], [1.72862736E12, 15.3], [1.72862838E12, 14.333333333333334], [1.7286306E12, 16.633333333333333], [1.72862634E12, 8.45], [1.72862958E12, 16.983333333333334], [1.7286318E12, 16.583333333333332], [1.72862856E12, 14.483333333333333], [1.728633E12, 17.816666666666666], [1.72862754E12, 14.333333333333334], [1.72863078E12, 16.783333333333335], [1.72862532E12, 8.333333333333334], [1.72862976E12, 16.616666666666667], [1.72862682E12, 13.933333333333334], [1.72863006E12, 16.6], [1.72862904E12, 17.433333333333334], [1.7286246E12, 0.65], [1.72863126E12, 17.05], [1.72863228E12, 16.533333333333335], [1.7286258E12, 8.883333333333333], [1.72862802E12, 14.983333333333333], [1.72863024E12, 16.916666666666668], [1.72863264E12, 17.283333333333335], [1.72862478E12, 4.533333333333333], [1.728627E12, 15.1], [1.72862922E12, 15.633333333333333], [1.72863144E12, 17.9], [1.72862496E12, 8.616666666666667], [1.7286282E12, 14.6], [1.72862598E12, 8.583333333333334], [1.72863042E12, 16.65], [1.72863246E12, 17.316666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72863312E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

