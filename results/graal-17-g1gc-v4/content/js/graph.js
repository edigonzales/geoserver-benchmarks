/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 3616.0, "series": [{"data": [[0.0, 29.0], [0.1, 37.0], [0.2, 39.0], [0.3, 41.0], [0.4, 42.0], [0.5, 44.0], [0.6, 45.0], [0.7, 46.0], [0.8, 47.0], [0.9, 48.0], [1.0, 49.0], [1.1, 50.0], [1.2, 50.0], [1.3, 51.0], [1.4, 52.0], [1.5, 53.0], [1.6, 53.0], [1.7, 54.0], [1.8, 55.0], [1.9, 55.0], [2.0, 56.0], [2.1, 56.0], [2.2, 57.0], [2.3, 57.0], [2.4, 58.0], [2.5, 58.0], [2.6, 59.0], [2.7, 59.0], [2.8, 60.0], [2.9, 60.0], [3.0, 60.0], [3.1, 61.0], [3.2, 61.0], [3.3, 62.0], [3.4, 62.0], [3.5, 63.0], [3.6, 63.0], [3.7, 63.0], [3.8, 64.0], [3.9, 64.0], [4.0, 65.0], [4.1, 65.0], [4.2, 66.0], [4.3, 66.0], [4.4, 66.0], [4.5, 67.0], [4.6, 67.0], [4.7, 68.0], [4.8, 68.0], [4.9, 68.0], [5.0, 69.0], [5.1, 69.0], [5.2, 70.0], [5.3, 70.0], [5.4, 70.0], [5.5, 71.0], [5.6, 71.0], [5.7, 71.0], [5.8, 72.0], [5.9, 72.0], [6.0, 72.0], [6.1, 73.0], [6.2, 73.0], [6.3, 73.0], [6.4, 74.0], [6.5, 74.0], [6.6, 74.0], [6.7, 75.0], [6.8, 75.0], [6.9, 75.0], [7.0, 76.0], [7.1, 76.0], [7.2, 76.0], [7.3, 77.0], [7.4, 77.0], [7.5, 77.0], [7.6, 78.0], [7.7, 78.0], [7.8, 78.0], [7.9, 79.0], [8.0, 79.0], [8.1, 79.0], [8.2, 80.0], [8.3, 80.0], [8.4, 80.0], [8.5, 81.0], [8.6, 81.0], [8.7, 81.0], [8.8, 82.0], [8.9, 82.0], [9.0, 82.0], [9.1, 83.0], [9.2, 83.0], [9.3, 83.0], [9.4, 84.0], [9.5, 84.0], [9.6, 84.0], [9.7, 85.0], [9.8, 85.0], [9.9, 85.0], [10.0, 85.0], [10.1, 86.0], [10.2, 86.0], [10.3, 86.0], [10.4, 87.0], [10.5, 87.0], [10.6, 87.0], [10.7, 88.0], [10.8, 88.0], [10.9, 88.0], [11.0, 89.0], [11.1, 89.0], [11.2, 89.0], [11.3, 89.0], [11.4, 90.0], [11.5, 90.0], [11.6, 90.0], [11.7, 91.0], [11.8, 91.0], [11.9, 91.0], [12.0, 92.0], [12.1, 92.0], [12.2, 92.0], [12.3, 93.0], [12.4, 93.0], [12.5, 93.0], [12.6, 93.0], [12.7, 94.0], [12.8, 94.0], [12.9, 95.0], [13.0, 95.0], [13.1, 95.0], [13.2, 95.0], [13.3, 96.0], [13.4, 96.0], [13.5, 96.0], [13.6, 97.0], [13.7, 97.0], [13.8, 97.0], [13.9, 98.0], [14.0, 98.0], [14.1, 98.0], [14.2, 99.0], [14.3, 99.0], [14.4, 99.0], [14.5, 99.0], [14.6, 100.0], [14.7, 100.0], [14.8, 100.0], [14.9, 101.0], [15.0, 101.0], [15.1, 101.0], [15.2, 102.0], [15.3, 102.0], [15.4, 102.0], [15.5, 103.0], [15.6, 103.0], [15.7, 103.0], [15.8, 104.0], [15.9, 104.0], [16.0, 104.0], [16.1, 105.0], [16.2, 105.0], [16.3, 105.0], [16.4, 106.0], [16.5, 106.0], [16.6, 106.0], [16.7, 107.0], [16.8, 107.0], [16.9, 107.0], [17.0, 107.0], [17.1, 108.0], [17.2, 108.0], [17.3, 108.0], [17.4, 109.0], [17.5, 109.0], [17.6, 109.0], [17.7, 110.0], [17.8, 110.0], [17.9, 110.0], [18.0, 111.0], [18.1, 111.0], [18.2, 111.0], [18.3, 112.0], [18.4, 112.0], [18.5, 112.0], [18.6, 113.0], [18.7, 113.0], [18.8, 113.0], [18.9, 114.0], [19.0, 114.0], [19.1, 114.0], [19.2, 115.0], [19.3, 115.0], [19.4, 116.0], [19.5, 116.0], [19.6, 116.0], [19.7, 117.0], [19.8, 117.0], [19.9, 117.0], [20.0, 118.0], [20.1, 118.0], [20.2, 118.0], [20.3, 119.0], [20.4, 119.0], [20.5, 120.0], [20.6, 120.0], [20.7, 120.0], [20.8, 121.0], [20.9, 121.0], [21.0, 122.0], [21.1, 122.0], [21.2, 122.0], [21.3, 123.0], [21.4, 123.0], [21.5, 124.0], [21.6, 124.0], [21.7, 124.0], [21.8, 125.0], [21.9, 125.0], [22.0, 126.0], [22.1, 126.0], [22.2, 127.0], [22.3, 127.0], [22.4, 127.0], [22.5, 128.0], [22.6, 128.0], [22.7, 128.0], [22.8, 129.0], [22.9, 129.0], [23.0, 130.0], [23.1, 130.0], [23.2, 130.0], [23.3, 131.0], [23.4, 131.0], [23.5, 132.0], [23.6, 132.0], [23.7, 132.0], [23.8, 133.0], [23.9, 133.0], [24.0, 134.0], [24.1, 134.0], [24.2, 134.0], [24.3, 135.0], [24.4, 135.0], [24.5, 136.0], [24.6, 136.0], [24.7, 136.0], [24.8, 137.0], [24.9, 137.0], [25.0, 138.0], [25.1, 138.0], [25.2, 139.0], [25.3, 139.0], [25.4, 140.0], [25.5, 140.0], [25.6, 140.0], [25.7, 141.0], [25.8, 141.0], [25.9, 142.0], [26.0, 142.0], [26.1, 143.0], [26.2, 143.0], [26.3, 144.0], [26.4, 144.0], [26.5, 145.0], [26.6, 145.0], [26.7, 145.0], [26.8, 146.0], [26.9, 146.0], [27.0, 147.0], [27.1, 147.0], [27.2, 148.0], [27.3, 148.0], [27.4, 149.0], [27.5, 149.0], [27.6, 150.0], [27.7, 150.0], [27.8, 150.0], [27.9, 151.0], [28.0, 151.0], [28.1, 152.0], [28.2, 152.0], [28.3, 153.0], [28.4, 154.0], [28.5, 154.0], [28.6, 154.0], [28.7, 155.0], [28.8, 156.0], [28.9, 156.0], [29.0, 156.0], [29.1, 157.0], [29.2, 158.0], [29.3, 158.0], [29.4, 159.0], [29.5, 159.0], [29.6, 160.0], [29.7, 160.0], [29.8, 161.0], [29.9, 161.0], [30.0, 162.0], [30.1, 162.0], [30.2, 163.0], [30.3, 164.0], [30.4, 164.0], [30.5, 165.0], [30.6, 165.0], [30.7, 166.0], [30.8, 167.0], [30.9, 167.0], [31.0, 168.0], [31.1, 168.0], [31.2, 169.0], [31.3, 169.0], [31.4, 170.0], [31.5, 171.0], [31.6, 171.0], [31.7, 172.0], [31.8, 172.0], [31.9, 173.0], [32.0, 174.0], [32.1, 174.0], [32.2, 175.0], [32.3, 176.0], [32.4, 176.0], [32.5, 177.0], [32.6, 178.0], [32.7, 178.0], [32.8, 179.0], [32.9, 180.0], [33.0, 181.0], [33.1, 181.0], [33.2, 182.0], [33.3, 183.0], [33.4, 183.0], [33.5, 184.0], [33.6, 185.0], [33.7, 186.0], [33.8, 186.0], [33.9, 187.0], [34.0, 188.0], [34.1, 189.0], [34.2, 189.0], [34.3, 190.0], [34.4, 191.0], [34.5, 192.0], [34.6, 193.0], [34.7, 193.0], [34.8, 194.0], [34.9, 195.0], [35.0, 196.0], [35.1, 196.0], [35.2, 197.0], [35.3, 198.0], [35.4, 199.0], [35.5, 200.0], [35.6, 201.0], [35.7, 202.0], [35.8, 203.0], [35.9, 204.0], [36.0, 205.0], [36.1, 206.0], [36.2, 207.0], [36.3, 208.0], [36.4, 209.0], [36.5, 210.0], [36.6, 211.0], [36.7, 212.0], [36.8, 213.0], [36.9, 214.0], [37.0, 215.0], [37.1, 216.0], [37.2, 217.0], [37.3, 219.0], [37.4, 220.0], [37.5, 221.0], [37.6, 222.0], [37.7, 223.0], [37.8, 225.0], [37.9, 226.0], [38.0, 227.0], [38.1, 228.0], [38.2, 229.0], [38.3, 231.0], [38.4, 232.0], [38.5, 233.0], [38.6, 235.0], [38.7, 236.0], [38.8, 237.0], [38.9, 239.0], [39.0, 240.0], [39.1, 241.0], [39.2, 243.0], [39.3, 244.0], [39.4, 246.0], [39.5, 247.0], [39.6, 249.0], [39.7, 250.0], [39.8, 251.0], [39.9, 253.0], [40.0, 255.0], [40.1, 256.0], [40.2, 258.0], [40.3, 259.0], [40.4, 261.0], [40.5, 263.0], [40.6, 265.0], [40.7, 266.0], [40.8, 268.0], [40.9, 270.0], [41.0, 272.0], [41.1, 274.0], [41.2, 275.0], [41.3, 277.0], [41.4, 279.0], [41.5, 281.0], [41.6, 283.0], [41.7, 285.0], [41.8, 287.0], [41.9, 288.0], [42.0, 290.0], [42.1, 292.0], [42.2, 294.0], [42.3, 296.0], [42.4, 299.0], [42.5, 301.0], [42.6, 303.0], [42.7, 304.0], [42.8, 306.0], [42.9, 309.0], [43.0, 311.0], [43.1, 313.0], [43.2, 316.0], [43.3, 318.0], [43.4, 320.0], [43.5, 322.0], [43.6, 325.0], [43.7, 327.0], [43.8, 329.0], [43.9, 332.0], [44.0, 334.0], [44.1, 337.0], [44.2, 339.0], [44.3, 342.0], [44.4, 344.0], [44.5, 346.0], [44.6, 348.0], [44.7, 351.0], [44.8, 354.0], [44.9, 356.0], [45.0, 358.0], [45.1, 361.0], [45.2, 364.0], [45.3, 366.0], [45.4, 369.0], [45.5, 371.0], [45.6, 374.0], [45.7, 376.0], [45.8, 379.0], [45.9, 381.0], [46.0, 383.0], [46.1, 385.0], [46.2, 388.0], [46.3, 391.0], [46.4, 393.0], [46.5, 396.0], [46.6, 398.0], [46.7, 401.0], [46.8, 403.0], [46.9, 405.0], [47.0, 407.0], [47.1, 410.0], [47.2, 412.0], [47.3, 414.0], [47.4, 416.0], [47.5, 419.0], [47.6, 421.0], [47.7, 423.0], [47.8, 425.0], [47.9, 427.0], [48.0, 429.0], [48.1, 432.0], [48.2, 434.0], [48.3, 436.0], [48.4, 439.0], [48.5, 441.0], [48.6, 443.0], [48.7, 446.0], [48.8, 448.0], [48.9, 451.0], [49.0, 453.0], [49.1, 455.0], [49.2, 457.0], [49.3, 459.0], [49.4, 461.0], [49.5, 463.0], [49.6, 465.0], [49.7, 467.0], [49.8, 469.0], [49.9, 471.0], [50.0, 473.0], [50.1, 475.0], [50.2, 477.0], [50.3, 479.0], [50.4, 481.0], [50.5, 483.0], [50.6, 485.0], [50.7, 487.0], [50.8, 489.0], [50.9, 491.0], [51.0, 493.0], [51.1, 495.0], [51.2, 497.0], [51.3, 498.0], [51.4, 500.0], [51.5, 502.0], [51.6, 504.0], [51.7, 506.0], [51.8, 509.0], [51.9, 511.0], [52.0, 513.0], [52.1, 515.0], [52.2, 517.0], [52.3, 519.0], [52.4, 521.0], [52.5, 523.0], [52.6, 525.0], [52.7, 526.0], [52.8, 529.0], [52.9, 530.0], [53.0, 533.0], [53.1, 535.0], [53.2, 536.0], [53.3, 538.0], [53.4, 540.0], [53.5, 542.0], [53.6, 544.0], [53.7, 546.0], [53.8, 548.0], [53.9, 550.0], [54.0, 552.0], [54.1, 554.0], [54.2, 556.0], [54.3, 558.0], [54.4, 559.0], [54.5, 561.0], [54.6, 563.0], [54.7, 565.0], [54.8, 567.0], [54.9, 569.0], [55.0, 571.0], [55.1, 573.0], [55.2, 575.0], [55.3, 576.0], [55.4, 578.0], [55.5, 580.0], [55.6, 582.0], [55.7, 584.0], [55.8, 586.0], [55.9, 588.0], [56.0, 590.0], [56.1, 592.0], [56.2, 593.0], [56.3, 595.0], [56.4, 597.0], [56.5, 598.0], [56.6, 600.0], [56.7, 602.0], [56.8, 604.0], [56.9, 606.0], [57.0, 608.0], [57.1, 609.0], [57.2, 611.0], [57.3, 613.0], [57.4, 615.0], [57.5, 617.0], [57.6, 618.0], [57.7, 620.0], [57.8, 622.0], [57.9, 623.0], [58.0, 625.0], [58.1, 627.0], [58.2, 628.0], [58.3, 630.0], [58.4, 632.0], [58.5, 633.0], [58.6, 635.0], [58.7, 637.0], [58.8, 639.0], [58.9, 640.0], [59.0, 642.0], [59.1, 644.0], [59.2, 645.0], [59.3, 647.0], [59.4, 649.0], [59.5, 651.0], [59.6, 653.0], [59.7, 654.0], [59.8, 656.0], [59.9, 658.0], [60.0, 660.0], [60.1, 662.0], [60.2, 664.0], [60.3, 665.0], [60.4, 667.0], [60.5, 669.0], [60.6, 671.0], [60.7, 672.0], [60.8, 674.0], [60.9, 676.0], [61.0, 678.0], [61.1, 680.0], [61.2, 681.0], [61.3, 683.0], [61.4, 685.0], [61.5, 687.0], [61.6, 689.0], [61.7, 690.0], [61.8, 692.0], [61.9, 694.0], [62.0, 696.0], [62.1, 698.0], [62.2, 699.0], [62.3, 701.0], [62.4, 703.0], [62.5, 705.0], [62.6, 707.0], [62.7, 708.0], [62.8, 710.0], [62.9, 712.0], [63.0, 714.0], [63.1, 716.0], [63.2, 717.0], [63.3, 719.0], [63.4, 721.0], [63.5, 722.0], [63.6, 724.0], [63.7, 726.0], [63.8, 728.0], [63.9, 729.0], [64.0, 731.0], [64.1, 732.0], [64.2, 734.0], [64.3, 735.0], [64.4, 737.0], [64.5, 739.0], [64.6, 741.0], [64.7, 743.0], [64.8, 745.0], [64.9, 746.0], [65.0, 748.0], [65.1, 750.0], [65.2, 751.0], [65.3, 753.0], [65.4, 755.0], [65.5, 757.0], [65.6, 758.0], [65.7, 760.0], [65.8, 762.0], [65.9, 763.0], [66.0, 765.0], [66.1, 767.0], [66.2, 768.0], [66.3, 770.0], [66.4, 772.0], [66.5, 774.0], [66.6, 775.0], [66.7, 777.0], [66.8, 779.0], [66.9, 780.0], [67.0, 782.0], [67.1, 784.0], [67.2, 786.0], [67.3, 788.0], [67.4, 790.0], [67.5, 792.0], [67.6, 794.0], [67.7, 795.0], [67.8, 797.0], [67.9, 799.0], [68.0, 801.0], [68.1, 803.0], [68.2, 804.0], [68.3, 806.0], [68.4, 808.0], [68.5, 810.0], [68.6, 812.0], [68.7, 814.0], [68.8, 815.0], [68.9, 817.0], [69.0, 819.0], [69.1, 821.0], [69.2, 823.0], [69.3, 824.0], [69.4, 826.0], [69.5, 828.0], [69.6, 830.0], [69.7, 831.0], [69.8, 833.0], [69.9, 835.0], [70.0, 837.0], [70.1, 839.0], [70.2, 841.0], [70.3, 843.0], [70.4, 845.0], [70.5, 846.0], [70.6, 848.0], [70.7, 850.0], [70.8, 852.0], [70.9, 854.0], [71.0, 856.0], [71.1, 857.0], [71.2, 859.0], [71.3, 861.0], [71.4, 862.0], [71.5, 864.0], [71.6, 866.0], [71.7, 868.0], [71.8, 870.0], [71.9, 872.0], [72.0, 874.0], [72.1, 875.0], [72.2, 877.0], [72.3, 879.0], [72.4, 881.0], [72.5, 883.0], [72.6, 885.0], [72.7, 886.0], [72.8, 888.0], [72.9, 890.0], [73.0, 892.0], [73.1, 894.0], [73.2, 896.0], [73.3, 898.0], [73.4, 900.0], [73.5, 902.0], [73.6, 904.0], [73.7, 906.0], [73.8, 908.0], [73.9, 910.0], [74.0, 912.0], [74.1, 914.0], [74.2, 916.0], [74.3, 918.0], [74.4, 920.0], [74.5, 922.0], [74.6, 924.0], [74.7, 925.0], [74.8, 928.0], [74.9, 930.0], [75.0, 932.0], [75.1, 934.0], [75.2, 936.0], [75.3, 938.0], [75.4, 940.0], [75.5, 942.0], [75.6, 944.0], [75.7, 946.0], [75.8, 948.0], [75.9, 950.0], [76.0, 952.0], [76.1, 954.0], [76.2, 956.0], [76.3, 958.0], [76.4, 959.0], [76.5, 962.0], [76.6, 964.0], [76.7, 967.0], [76.8, 969.0], [76.9, 971.0], [77.0, 973.0], [77.1, 976.0], [77.2, 978.0], [77.3, 980.0], [77.4, 982.0], [77.5, 985.0], [77.6, 987.0], [77.7, 989.0], [77.8, 991.0], [77.9, 993.0], [78.0, 995.0], [78.1, 998.0], [78.2, 1000.0], [78.3, 1002.0], [78.4, 1004.0], [78.5, 1006.0], [78.6, 1009.0], [78.7, 1011.0], [78.8, 1013.0], [78.9, 1015.0], [79.0, 1017.0], [79.1, 1019.0], [79.2, 1022.0], [79.3, 1024.0], [79.4, 1027.0], [79.5, 1029.0], [79.6, 1031.0], [79.7, 1034.0], [79.8, 1036.0], [79.9, 1038.0], [80.0, 1041.0], [80.1, 1043.0], [80.2, 1045.0], [80.3, 1047.0], [80.4, 1049.0], [80.5, 1052.0], [80.6, 1054.0], [80.7, 1057.0], [80.8, 1060.0], [80.9, 1062.0], [81.0, 1064.0], [81.1, 1067.0], [81.2, 1069.0], [81.3, 1072.0], [81.4, 1075.0], [81.5, 1077.0], [81.6, 1080.0], [81.7, 1083.0], [81.8, 1085.0], [81.9, 1088.0], [82.0, 1090.0], [82.1, 1093.0], [82.2, 1095.0], [82.3, 1098.0], [82.4, 1101.0], [82.5, 1103.0], [82.6, 1106.0], [82.7, 1108.0], [82.8, 1111.0], [82.9, 1113.0], [83.0, 1115.0], [83.1, 1118.0], [83.2, 1121.0], [83.3, 1124.0], [83.4, 1126.0], [83.5, 1129.0], [83.6, 1131.0], [83.7, 1134.0], [83.8, 1136.0], [83.9, 1140.0], [84.0, 1143.0], [84.1, 1145.0], [84.2, 1149.0], [84.3, 1151.0], [84.4, 1154.0], [84.5, 1157.0], [84.6, 1160.0], [84.7, 1163.0], [84.8, 1165.0], [84.9, 1168.0], [85.0, 1171.0], [85.1, 1174.0], [85.2, 1176.0], [85.3, 1179.0], [85.4, 1182.0], [85.5, 1185.0], [85.6, 1188.0], [85.7, 1191.0], [85.8, 1194.0], [85.9, 1197.0], [86.0, 1200.0], [86.1, 1203.0], [86.2, 1206.0], [86.3, 1209.0], [86.4, 1212.0], [86.5, 1215.0], [86.6, 1218.0], [86.7, 1221.0], [86.8, 1224.0], [86.9, 1228.0], [87.0, 1231.0], [87.1, 1234.0], [87.2, 1237.0], [87.3, 1240.0], [87.4, 1244.0], [87.5, 1247.0], [87.6, 1251.0], [87.7, 1255.0], [87.8, 1258.0], [87.9, 1261.0], [88.0, 1265.0], [88.1, 1268.0], [88.2, 1272.0], [88.3, 1276.0], [88.4, 1279.0], [88.5, 1283.0], [88.6, 1286.0], [88.7, 1290.0], [88.8, 1294.0], [88.9, 1298.0], [89.0, 1302.0], [89.1, 1306.0], [89.2, 1309.0], [89.3, 1314.0], [89.4, 1318.0], [89.5, 1322.0], [89.6, 1325.0], [89.7, 1329.0], [89.8, 1333.0], [89.9, 1337.0], [90.0, 1341.0], [90.1, 1344.0], [90.2, 1349.0], [90.3, 1353.0], [90.4, 1357.0], [90.5, 1361.0], [90.6, 1366.0], [90.7, 1370.0], [90.8, 1375.0], [90.9, 1379.0], [91.0, 1383.0], [91.1, 1388.0], [91.2, 1392.0], [91.3, 1397.0], [91.4, 1402.0], [91.5, 1407.0], [91.6, 1412.0], [91.7, 1416.0], [91.8, 1421.0], [91.9, 1426.0], [92.0, 1430.0], [92.1, 1436.0], [92.2, 1440.0], [92.3, 1446.0], [92.4, 1450.0], [92.5, 1456.0], [92.6, 1461.0], [92.7, 1467.0], [92.8, 1472.0], [92.9, 1477.0], [93.0, 1483.0], [93.1, 1489.0], [93.2, 1495.0], [93.3, 1500.0], [93.4, 1506.0], [93.5, 1512.0], [93.6, 1519.0], [93.7, 1525.0], [93.8, 1530.0], [93.9, 1536.0], [94.0, 1543.0], [94.1, 1550.0], [94.2, 1557.0], [94.3, 1564.0], [94.4, 1570.0], [94.5, 1578.0], [94.6, 1585.0], [94.7, 1592.0], [94.8, 1599.0], [94.9, 1607.0], [95.0, 1614.0], [95.1, 1622.0], [95.2, 1629.0], [95.3, 1638.0], [95.4, 1646.0], [95.5, 1655.0], [95.6, 1663.0], [95.7, 1672.0], [95.8, 1681.0], [95.9, 1689.0], [96.0, 1696.0], [96.1, 1705.0], [96.2, 1713.0], [96.3, 1721.0], [96.4, 1732.0], [96.5, 1741.0], [96.6, 1750.0], [96.7, 1761.0], [96.8, 1771.0], [96.9, 1783.0], [97.0, 1793.0], [97.1, 1805.0], [97.2, 1818.0], [97.3, 1831.0], [97.4, 1845.0], [97.5, 1859.0], [97.6, 1872.0], [97.7, 1887.0], [97.8, 1901.0], [97.9, 1916.0], [98.0, 1930.0], [98.1, 1949.0], [98.2, 1965.0], [98.3, 1986.0], [98.4, 2006.0], [98.5, 2028.0], [98.6, 2049.0], [98.7, 2073.0], [98.8, 2098.0], [98.9, 2126.0], [99.0, 2158.0], [99.1, 2186.0], [99.2, 2222.0], [99.3, 2258.0], [99.4, 2304.0], [99.5, 2356.0], [99.6, 2411.0], [99.7, 2489.0], [99.8, 2598.0], [99.9, 2783.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 24541.0, "series": [{"data": [[0.0, 16996.0], [600.0, 6641.0], [700.0, 6697.0], [800.0, 6367.0], [900.0, 5655.0], [1000.0, 4895.0], [1100.0, 4240.0], [1200.0, 3463.0], [1300.0, 2832.0], [1400.0, 2262.0], [1500.0, 1775.0], [100.0, 24541.0], [1600.0, 1445.0], [1700.0, 1203.0], [1800.0, 856.0], [1900.0, 667.0], [2000.0, 527.0], [2100.0, 379.0], [2300.0, 225.0], [2200.0, 301.0], [2400.0, 154.0], [2500.0, 104.0], [2600.0, 65.0], [2700.0, 61.0], [2800.0, 40.0], [2900.0, 27.0], [3000.0, 15.0], [3100.0, 9.0], [200.0, 8187.0], [3200.0, 4.0], [3300.0, 7.0], [3400.0, 2.0], [3500.0, 2.0], [3600.0, 1.0], [300.0, 4960.0], [400.0, 5504.0], [500.0, 6091.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7847.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 60259.0, "series": [{"data": [[0.0, 60259.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 49094.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7847.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.530612244897959, "minX": 1.72853862E12, "maxY": 16.0, "series": [{"data": [[1.72854282E12, 12.0], [1.72854312E12, 12.0], [1.72854414E12, 12.0], [1.72854252E12, 12.0], [1.7285424E12, 11.305555555555555], [1.72854342E12, 12.0], [1.72854432E12, 6.730526315789477], [1.72854372E12, 12.0], [1.72854402E12, 12.0], [1.72854264E12, 12.0], [1.72854366E12, 12.0], [1.72854396E12, 12.0], [1.72854426E12, 11.447368421052612], [1.72854354E12, 12.0], [1.72854384E12, 12.0], [1.72854294E12, 12.0], [1.72854324E12, 12.0], [1.72854378E12, 12.0], [1.72854318E12, 12.0], [1.72854408E12, 12.0], [1.72854348E12, 12.0], [1.72854306E12, 12.0], [1.72854336E12, 12.0], [1.72854246E12, 12.0], [1.72854276E12, 12.0], [1.7285433E12, 12.0], [1.7285436E12, 12.0], [1.7285427E12, 12.0], [1.728543E12, 12.0], [1.72854258E12, 12.0], [1.7285442E12, 12.0], [1.72854288E12, 12.0], [1.7285439E12, 12.0]], "isOverall": false, "label": "12", "isController": false}, {"data": [[1.72853862E12, 2.0], [1.72853874E12, 2.0], [1.72853886E12, 1.530612244897959], [1.72853868E12, 2.0], [1.7285388E12, 2.0]], "isOverall": false, "label": "2", "isController": false}, {"data": [[1.7285391E12, 4.0], [1.7285394E12, 4.0], [1.7285397E12, 4.0], [1.7285403E12, 4.0], [1.72854048E12, 3.3933933933933913], [1.72854018E12, 4.0], [1.72853988E12, 4.0], [1.72853958E12, 4.0], [1.72854042E12, 4.0], [1.72854012E12, 4.0], [1.72853982E12, 4.0], [1.72854E12, 4.0], [1.72853898E12, 4.0], [1.72853928E12, 4.0], [1.72854024E12, 4.0], [1.72853994E12, 4.0], [1.72853904E12, 4.0], [1.72853886E12, 3.9940944881889764], [1.72853916E12, 4.0], [1.72853946E12, 4.0], [1.72853976E12, 4.0], [1.72853892E12, 4.0], [1.72853922E12, 4.0], [1.72853952E12, 4.0], [1.72853934E12, 4.0], [1.72853964E12, 4.0], [1.72854036E12, 4.0], [1.72854006E12, 4.0]], "isOverall": false, "label": "4", "isController": false}, {"data": [[1.72854444E12, 16.0], [1.72854504E12, 16.0], [1.72854474E12, 16.0], [1.72854564E12, 16.0], [1.72854534E12, 16.0], [1.72854432E12, 15.883720930232547], [1.72854594E12, 7.840077071290957], [1.72854588E12, 15.388071895424833], [1.72854558E12, 16.0], [1.72854456E12, 16.0], [1.72854516E12, 16.0], [1.72854486E12, 16.0], [1.72854576E12, 16.0], [1.72854546E12, 16.0], [1.7285454E12, 16.0], [1.7285451E12, 16.0], [1.7285457E12, 16.0], [1.72854468E12, 16.0], [1.72854438E12, 16.0], [1.72854528E12, 16.0], [1.72854498E12, 16.0], [1.72854492E12, 16.0], [1.72854462E12, 16.0], [1.72854552E12, 16.0], [1.72854522E12, 16.0], [1.72854582E12, 16.0], [1.7285448E12, 16.0], [1.7285445E12, 16.0]], "isOverall": false, "label": "16", "isController": false}, {"data": [[1.7285412E12, 8.0], [1.7285409E12, 8.0], [1.7285406E12, 8.0], [1.72854222E12, 8.0], [1.72854048E12, 7.948453608247424], [1.7285421E12, 8.0], [1.7285424E12, 5.244863013698624], [1.7285418E12, 8.0], [1.7285415E12, 8.0], [1.72854072E12, 8.0], [1.72854234E12, 7.646687697160879], [1.72854174E12, 8.0], [1.72854204E12, 8.0], [1.72854162E12, 8.0], [1.72854192E12, 8.0], [1.72854132E12, 8.0], [1.72854102E12, 8.0], [1.72854186E12, 8.0], [1.72854216E12, 8.0], [1.72854156E12, 8.0], [1.72854126E12, 8.0], [1.72854144E12, 8.0], [1.72854114E12, 8.0], [1.72854084E12, 8.0], [1.72854054E12, 8.0], [1.72854168E12, 8.0], [1.72854138E12, 8.0], [1.72854108E12, 8.0], [1.72854078E12, 8.0], [1.72854096E12, 8.0], [1.72854066E12, 8.0], [1.72854198E12, 8.0], [1.72854228E12, 8.0]], "isOverall": false, "label": "8", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72854594E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 386.91752577319613, "minX": 1.0, "maxY": 803.6150885296382, "series": [{"data": [[2.0, 404.3421461897356], [8.0, 475.60797971367793], [9.0, 438.5263157894737], [10.0, 623.7831325301205], [11.0, 575.9595185995619], [3.0, 386.91752577319613], [12.0, 629.1042511856481], [13.0, 689.9444444444446], [14.0, 496.8888888888889], [15.0, 674.689075630252], [1.0, 436.3299999999999], [4.0, 410.5046130672175], [16.0, 803.6150885296382], [5.0, 414.6909090909094], [6.0, 445.37113402061846], [7.0, 466.79795021961934]], "isOverall": false, "label": "getmap", "isController": false}, {"data": [[10.7169027303754, 599.8455631399338]], "isOverall": false, "label": "getmap-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 16.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.72853862E12, "maxY": 6.240128656666667E7, "series": [{"data": [[1.7285391E12, 3.06756689E7], [1.7285403E12, 2.983460475E7], [1.72854252E12, 5.735843135E7], [1.72854474E12, 6.178444645E7], [1.72854048E12, 2.6521502983333334E7], [1.7285415E12, 5.246321388333333E7], [1.72854372E12, 5.797864305E7], [1.72854594E12, 2.5839939383333333E7], [1.72854234E12, 5.050677475E7], [1.72854558E12, 5.979259978333333E7], [1.72854012E12, 3.0858595616666667E7], [1.72854456E12, 6.0089322266666666E7], [1.72854354E12, 6.08465455E7], [1.72854132E12, 5.1036918333333336E7], [1.72854576E12, 6.0986058083333336E7], [1.72853928E12, 3.0230187183333334E7], [1.72854186E12, 5.064469815E7], [1.7285451E12, 6.1833890333333336E7], [1.72854408E12, 5.6722032083333336E7], [1.72854306E12, 5.895749461666667E7], [1.72853946E12, 2.9355169166666668E7], [1.72854084E12, 5.2624439583333336E7], [1.72854528E12, 6.138493585E7], [1.72854168E12, 5.045328968333333E7], [1.72853862E12, 1.3381883833333334E7], [1.72854492E12, 6.155918471666667E7], [1.7285427E12, 5.8568295166666664E7], [1.72853964E12, 3.0145396E7], [1.72854066E12, 5.322851031666667E7], [1.72854288E12, 5.791403028333333E7], [1.7285439E12, 5.796681075E7], [1.72854282E12, 5.947186003333333E7], [1.7285394E12, 2.9927908333333332E7], [1.72854504E12, 6.0115238483333334E7], [1.7285406E12, 4.906005046666667E7], [1.7285418E12, 4.9793998333333336E7], [1.72854402E12, 5.78898631E7], [1.72853958E12, 3.00746377E7], [1.72854588E12, 5.947705405E7], [1.72854042E12, 2.7330454316666666E7], [1.72854264E12, 5.899832093333333E7], [1.72854366E12, 5.850924938333333E7], [1.72854162E12, 4.985650603333333E7], [1.72854384E12, 5.695529736666667E7], [1.72854486E12, 6.0604850233333334E7], [1.7285454E12, 6.1722104733333334E7], [1.72853994E12, 2.9106547316666666E7], [1.72854216E12, 5.068475025E7], [1.72853874E12, 1.5658072116666667E7], [1.72854318E12, 5.881766218333333E7], [1.72854114E12, 5.175137678333333E7], [1.72854336E12, 5.6406169583333336E7], [1.72854438E12, 5.8370432016666666E7], [1.72853976E12, 2.875159435E7], [1.72853892E12, 2.945573165E7], [1.728543E12, 5.64826266E7], [1.72854522E12, 6.075427753333333E7], [1.72854078E12, 4.980486681666667E7], [1.72854096E12, 4.945362156666667E7], [1.7285442E12, 5.7582963483333334E7], [1.72854198E12, 5.246341861666667E7], [1.7285409E12, 5.072204113333333E7], [1.72854312E12, 5.80476527E7], [1.72854414E12, 5.920426278333333E7], [1.7285397E12, 2.8507024133333333E7], [1.7285421E12, 5.1831280416666664E7], [1.72854534E12, 6.240128656666667E7], [1.72853988E12, 3.006132965E7], [1.72854432E12, 4.586588643333333E7], [1.72854072E12, 5.178317668333333E7], [1.72854174E12, 5.3177800416666664E7], [1.72854396E12, 5.938918545E7], [1.72854516E12, 5.9830592733333334E7], [1.72853868E12, 1.5122939166666666E7], [1.72854192E12, 4.9788271333333336E7], [1.72854294E12, 5.8092673983333334E7], [1.72854024E12, 2.8359600133333333E7], [1.72853904E12, 2.9377895033333335E7], [1.72854126E12, 5.063955988333333E7], [1.72854348E12, 5.722789213333333E7], [1.7285457E12, 6.096813256666667E7], [1.72853886E12, 2.521174405E7], [1.72854144E12, 5.006951395E7], [1.72854468E12, 6.234984285E7], [1.72854246E12, 5.787560765E7], [1.7285433E12, 5.772563121666667E7], [1.72853922E12, 3.008103875E7], [1.72854108E12, 5.170370285E7], [1.72854552E12, 5.9596730733333334E7], [1.72854006E12, 3.054249845E7], [1.72854228E12, 5.163693213333333E7], [1.7285445E12, 6.085779278333333E7], [1.7285412E12, 5.125186068333333E7], [1.72854444E12, 6.126478306666667E7], [1.72854222E12, 5.147953638333333E7], [1.72854564E12, 6.189351221666667E7], [1.72854018E12, 3.032549335E7], [1.7285424E12, 3.2951968583333332E7], [1.72854342E12, 5.826987721666667E7], [1.7285388E12, 1.4593744133333333E7], [1.72853982E12, 3.08315329E7], [1.72854204E12, 5.191042161666667E7], [1.72854426E12, 5.747382806666667E7], [1.72854E12, 3.0551143016666666E7], [1.72853898E12, 3.008034545E7], [1.72854102E12, 4.962169995E7], [1.72854324E12, 5.769619735E7], [1.72854546E12, 6.0728273983333334E7], [1.72854378E12, 5.6279386766666666E7], [1.72854156E12, 5.017098935E7], [1.72853916E12, 3.0635307266666666E7], [1.72854054E12, 5.1961870766666666E7], [1.72854276E12, 5.973555386666667E7], [1.72854498E12, 6.1148054016666666E7], [1.72854138E12, 5.141733305E7], [1.7285436E12, 5.61930316E7], [1.72854462E12, 6.021321975E7], [1.72853952E12, 3.102274045E7], [1.72853934E12, 3.041522005E7], [1.72854258E12, 5.857685496666667E7], [1.72854582E12, 6.042831906666667E7], [1.72854036E12, 3.03579135E7], [1.7285448E12, 5.963966703333333E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7285391E12, 0.0], [1.7285403E12, 0.0], [1.72854252E12, 0.0], [1.72854474E12, 0.0], [1.72854048E12, 0.0], [1.7285415E12, 0.0], [1.72854372E12, 0.0], [1.72854594E12, 0.0], [1.72854234E12, 0.0], [1.72854558E12, 0.0], [1.72854012E12, 0.0], [1.72854456E12, 0.0], [1.72854354E12, 0.0], [1.72854132E12, 0.0], [1.72854576E12, 0.0], [1.72853928E12, 0.0], [1.72854186E12, 0.0], [1.7285451E12, 0.0], [1.72854408E12, 0.0], [1.72854306E12, 0.0], [1.72853946E12, 0.0], [1.72854084E12, 0.0], [1.72854528E12, 0.0], [1.72854168E12, 0.0], [1.72853862E12, 0.0], [1.72854492E12, 0.0], [1.7285427E12, 0.0], [1.72853964E12, 0.0], [1.72854066E12, 0.0], [1.72854288E12, 0.0], [1.7285439E12, 0.0], [1.72854282E12, 0.0], [1.7285394E12, 0.0], [1.72854504E12, 0.0], [1.7285406E12, 0.0], [1.7285418E12, 0.0], [1.72854402E12, 0.0], [1.72853958E12, 0.0], [1.72854588E12, 0.0], [1.72854042E12, 0.0], [1.72854264E12, 0.0], [1.72854366E12, 0.0], [1.72854162E12, 0.0], [1.72854384E12, 0.0], [1.72854486E12, 0.0], [1.7285454E12, 0.0], [1.72853994E12, 0.0], [1.72854216E12, 0.0], [1.72853874E12, 0.0], [1.72854318E12, 0.0], [1.72854114E12, 0.0], [1.72854336E12, 0.0], [1.72854438E12, 0.0], [1.72853976E12, 0.0], [1.72853892E12, 0.0], [1.728543E12, 0.0], [1.72854522E12, 0.0], [1.72854078E12, 0.0], [1.72854096E12, 0.0], [1.7285442E12, 0.0], [1.72854198E12, 0.0], [1.7285409E12, 0.0], [1.72854312E12, 0.0], [1.72854414E12, 0.0], [1.7285397E12, 0.0], [1.7285421E12, 0.0], [1.72854534E12, 0.0], [1.72853988E12, 0.0], [1.72854432E12, 0.0], [1.72854072E12, 0.0], [1.72854174E12, 0.0], [1.72854396E12, 0.0], [1.72854516E12, 0.0], [1.72853868E12, 0.0], [1.72854192E12, 0.0], [1.72854294E12, 0.0], [1.72854024E12, 0.0], [1.72853904E12, 0.0], [1.72854126E12, 0.0], [1.72854348E12, 0.0], [1.7285457E12, 0.0], [1.72853886E12, 0.0], [1.72854144E12, 0.0], [1.72854468E12, 0.0], [1.72854246E12, 0.0], [1.7285433E12, 0.0], [1.72853922E12, 0.0], [1.72854108E12, 0.0], [1.72854552E12, 0.0], [1.72854006E12, 0.0], [1.72854228E12, 0.0], [1.7285445E12, 0.0], [1.7285412E12, 0.0], [1.72854444E12, 0.0], [1.72854222E12, 0.0], [1.72854564E12, 0.0], [1.72854018E12, 0.0], [1.7285424E12, 0.0], [1.72854342E12, 0.0], [1.7285388E12, 0.0], [1.72853982E12, 0.0], [1.72854204E12, 0.0], [1.72854426E12, 0.0], [1.72854E12, 0.0], [1.72853898E12, 0.0], [1.72854102E12, 0.0], [1.72854324E12, 0.0], [1.72854546E12, 0.0], [1.72854378E12, 0.0], [1.72854156E12, 0.0], [1.72853916E12, 0.0], [1.72854054E12, 0.0], [1.72854276E12, 0.0], [1.72854498E12, 0.0], [1.72854138E12, 0.0], [1.7285436E12, 0.0], [1.72854462E12, 0.0], [1.72853952E12, 0.0], [1.72853934E12, 0.0], [1.72854258E12, 0.0], [1.72854582E12, 0.0], [1.72854036E12, 0.0], [1.7285448E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72854594E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 377.31554160125586, "minX": 1.72853862E12, "maxY": 866.0170250896061, "series": [{"data": [[1.7285391E12, 406.18675721561954], [1.7285403E12, 438.8196721311478], [1.72854252E12, 614.5132365499572], [1.72854474E12, 812.9258635214825], [1.72854048E12, 422.67362428842523], [1.7285415E12, 490.85918367346915], [1.72854372E12, 629.4356955380575], [1.72854594E12, 502.487475915222], [1.72854234E12, 481.3690851735019], [1.72854558E12, 793.3759274525971], [1.72854012E12, 420.39153439153426], [1.72854456E12, 760.770387965162], [1.72854354E12, 612.7404580152679], [1.72854132E12, 460.6367112810706], [1.72854576E12, 846.747349823321], [1.72853928E12, 442.4436229205175], [1.72854186E12, 464.34778420038543], [1.7285451E12, 785.0170454545455], [1.72854408E12, 594.8509933774823], [1.72854306E12, 630.2673093777379], [1.72853946E12, 402.77983193277345], [1.72854084E12, 472.8128078817736], [1.72854528E12, 792.4646716541974], [1.72854168E12, 472.5461689587425], [1.72853862E12, 408.35658914728697], [1.72854492E12, 811.3285229202041], [1.7285427E12, 631.736842105264], [1.72853964E12, 396.4859504132233], [1.72854066E12, 469.4667318982387], [1.72854288E12, 649.2805429864258], [1.7285439E12, 643.73487544484], [1.72854282E12, 625.3261058109291], [1.7285394E12, 409.68313458262355], [1.72854504E12, 777.6193181818176], [1.7285406E12, 458.0142585551329], [1.7285418E12, 463.6323957322989], [1.72854402E12, 624.0597402597407], [1.72853958E12, 411.8456260720411], [1.72854588E12, 755.6977124182993], [1.72854042E12, 377.31554160125586], [1.72854264E12, 656.0946314831665], [1.72854366E12, 631.09649122807], [1.72854162E12, 463.53140096618347], [1.72854384E12, 632.7837599293915], [1.72854486E12, 810.5215553677091], [1.7285454E12, 818.2502134927406], [1.72853994E12, 404.5962837837842], [1.72854216E12, 473.8321816386967], [1.72853874E12, 389.98045602605856], [1.72854318E12, 639.5743544078356], [1.72854114E12, 479.53639082751755], [1.72854336E12, 619.5150992234697], [1.72854438E12, 780.9115259740265], [1.72853976E12, 415.1542461005196], [1.72853892E12, 406.3711864406784], [1.728543E12, 629.6637401229143], [1.72854522E12, 831.8637931034477], [1.72854078E12, 473.19625246548316], [1.72854096E12, 450.014939309057], [1.7285442E12, 650.1597472924188], [1.72854198E12, 485.89393939393983], [1.7285409E12, 478.62574850299427], [1.72854312E12, 616.4833475661835], [1.72854414E12, 645.9381165919281], [1.7285397E12, 385.52648475120407], [1.7285421E12, 486.08787878787905], [1.72854534E12, 866.0170250896061], [1.72853988E12, 399.14666666666653], [1.72854432E12, 613.4839779005531], [1.72854072E12, 476.7745779543196], [1.72854174E12, 487.16142131979706], [1.72854396E12, 632.8396475770919], [1.72854516E12, 789.6072908036463], [1.72853868E12, 391.81229773462763], [1.72854192E12, 468.9872549019607], [1.72854294E12, 605.8878661087864], [1.72854024E12, 403.9696969696968], [1.72853904E12, 436.47101449275397], [1.72854126E12, 460.6862367661215], [1.72854348E12, 612.5771526001705], [1.7285457E12, 771.477947072974], [1.72853886E12, 379.51885098743287], [1.72854144E12, 494.4257731958763], [1.72854468E12, 819.3878942881493], [1.72854246E12, 606.5929054054053], [1.7285433E12, 617.2985457656112], [1.72853922E12, 416.79130434782616], [1.72854108E12, 492.8869475847898], [1.72854552E12, 785.4037674037664], [1.72854006E12, 380.59587955625983], [1.72854228E12, 481.5075376884422], [1.7285445E12, 781.8104149715214], [1.7285412E12, 480.5120481927714], [1.72854444E12, 814.5293617021272], [1.72854222E12, 482.30753768844227], [1.72854564E12, 800.907268170426], [1.72854018E12, 446.35185185185196], [1.7285424E12, 437.40701219512175], [1.72854342E12, 645.7275985663086], [1.7285388E12, 432.23465703971135], [1.72853982E12, 414.42413793103447], [1.72854204E12, 480.7625754527166], [1.72854426E12, 622.9292196007256], [1.72854E12, 409.95726495726507], [1.72853898E12, 417.4469565217392], [1.72854102E12, 472.26554787759153], [1.72854324E12, 654.8898999090081], [1.72854546E12, 823.3879828326179], [1.72854378E12, 598.5510373443974], [1.72854156E12, 471.5408866995074], [1.72853916E12, 409.49914529914537], [1.72854054E12, 495.9616580310876], [1.72854276E12, 670.1407269338301], [1.72854498E12, 829.1217616580312], [1.72854138E12, 487.0457317073174], [1.7285436E12, 631.7150395778358], [1.72854462E12, 804.4685666387255], [1.72853952E12, 433.1963963963965], [1.72853934E12, 436.62363636363614], [1.72854258E12, 621.7963761863668], [1.72854582E12, 820.1356655290105], [1.72854036E12, 397.563122923588], [1.7285448E12, 804.5126262626262]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72854594E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 247.94294770206037, "minX": 1.72853862E12, "maxY": 579.0958781361999, "series": [{"data": [[1.7285391E12, 264.1850594227503], [1.7285403E12, 289.3916211293259], [1.72854252E12, 411.7685738684888], [1.72854474E12, 543.4069081718626], [1.72854048E12, 277.27893738140403], [1.7285415E12, 322.5734693877553], [1.72854372E12, 419.1347331583553], [1.72854594E12, 335.0057803468204], [1.72854234E12, 317.6982124079916], [1.72854558E12, 534.4567188788134], [1.72854012E12, 272.9294532627866], [1.72854456E12, 513.4623911322248], [1.72854354E12, 405.44783715012665], [1.72854132E12, 305.06500956022956], [1.72854576E12, 565.9929328621897], [1.72853928E12, 289.8391866913124], [1.72854186E12, 310.3169556840083], [1.7285451E12, 524.0462662337665], [1.72854408E12, 395.88741721854285], [1.72854306E12, 420.1183172655563], [1.72853946E12, 264.73109243697473], [1.72854084E12, 311.25418719211865], [1.72854528E12, 529.2693266832908], [1.72854168E12, 314.3909626719058], [1.72853862E12, 269.8837209302326], [1.72854492E12, 541.9049235993202], [1.7285427E12, 420.473684210526], [1.72853964E12, 258.28760330578547], [1.72854066E12, 306.9794520547942], [1.72854288E12, 432.8714932126693], [1.7285439E12, 430.9395017793594], [1.72854282E12, 415.7059843885514], [1.7285394E12, 268.8773424190801], [1.72854504E12, 521.7637987012998], [1.7285406E12, 307.28992395437314], [1.7285418E12, 308.7827352085359], [1.72854402E12, 417.9948051948044], [1.72853958E12, 270.1183533447684], [1.72854588E12, 507.14297385620927], [1.72854042E12, 251.99372056514912], [1.72854264E12, 438.4858962693361], [1.72854366E12, 420.0929824561413], [1.72854162E12, 310.4541062801933], [1.72854384E12, 424.43777581641694], [1.72854486E12, 542.6889264581567], [1.7285454E12, 545.7122117847996], [1.72853994E12, 268.14527027027026], [1.72854216E12, 315.45607107601165], [1.72853874E12, 254.30944625407182], [1.72854318E12, 425.2039180765806], [1.72854114E12, 318.99501495513454], [1.72854336E12, 416.50992234685106], [1.72854438E12, 530.4675324675329], [1.72853976E12, 275.72790294627407], [1.72853892E12, 267.84406779661015], [1.728543E12, 422.37313432835845], [1.72854522E12, 559.5862068965519], [1.72854078E12, 316.0384615384615], [1.72854096E12, 300.421101774043], [1.7285442E12, 436.5370036101086], [1.72854198E12, 321.5606060606066], [1.7285409E12, 318.1626746506982], [1.72854312E12, 411.9777967549108], [1.72854414E12, 429.2905829596409], [1.7285397E12, 255.3354735152489], [1.7285421E12, 322.35858585858557], [1.72854534E12, 579.0958781361999], [1.72853988E12, 263.1233333333331], [1.72854432E12, 409.41657458563554], [1.72854072E12, 314.22939424031733], [1.72854174E12, 320.971573604061], [1.72854396E12, 419.5621145374447], [1.72854516E12, 531.7945318972664], [1.72853868E12, 257.57605177993526], [1.72854192E12, 311.89313725490206], [1.72854294E12, 403.16234309623394], [1.72854024E12, 269.83164983164977], [1.72853904E12, 289.6702898550728], [1.72854126E12, 305.87680461982706], [1.72854348E12, 408.93094629156093], [1.7285457E12, 518.0384923817168], [1.72853886E12, 250.79533213644518], [1.72854144E12, 330.4010309278351], [1.72854468E12, 544.4901960784315], [1.72854246E12, 402.6680743243244], [1.7285433E12, 412.6381522668946], [1.72853922E12, 272.7530434782605], [1.72854108E12, 328.08735868448116], [1.72854552E12, 525.9082719082711], [1.72854006E12, 247.94294770206037], [1.72854228E12, 320.2080402010052], [1.7285445E12, 521.485760781123], [1.7285412E12, 318.907630522088], [1.72854444E12, 542.9753191489353], [1.72854222E12, 319.710552763819], [1.72854564E12, 536.6165413533838], [1.72854018E12, 292.64444444444456], [1.7285424E12, 285.9878048780491], [1.72854342E12, 433.9166666666668], [1.7285388E12, 290.8014440433213], [1.72853982E12, 270.93620689655177], [1.72854204E12, 316.78370221327975], [1.72854426E12, 415.2577132486389], [1.72854E12, 267.53504273504296], [1.72853898E12, 273.98434782608655], [1.72854102E12, 316.576505429418], [1.72854324E12, 438.6151046405823], [1.72854546E12, 552.9390557939914], [1.72854378E12, 402.61161825726106], [1.72854156E12, 313.54384236453257], [1.72853916E12, 267.54017094017064], [1.72854054E12, 329.80103626943014], [1.72854276E12, 446.4529356943148], [1.72854498E12, 554.0276338514673], [1.72854138E12, 321.32418699186957], [1.7285436E12, 424.8029903254182], [1.72854462E12, 543.1383067896063], [1.72853952E12, 281.87927927927905], [1.72853934E12, 286.25272727272704], [1.72854258E12, 414.51509922346855], [1.72854582E12, 552.8771331058016], [1.72854036E12, 259.3687707641195], [1.7285448E12, 543.2861952861955]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72854594E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72853862E12, "maxY": 4.9E-324, "series": [{"data": [[1.7285391E12, 0.0], [1.7285403E12, 0.0], [1.72854252E12, 0.0], [1.72854474E12, 0.0], [1.72854048E12, 0.0], [1.7285415E12, 0.0], [1.72854372E12, 0.0], [1.72854594E12, 0.0], [1.72854234E12, 0.0], [1.72854558E12, 0.0], [1.72854012E12, 0.0], [1.72854456E12, 0.0], [1.72854354E12, 0.0], [1.72854132E12, 0.0], [1.72854576E12, 0.0], [1.72853928E12, 0.0], [1.72854186E12, 0.0], [1.7285451E12, 0.0], [1.72854408E12, 0.0], [1.72854306E12, 0.0], [1.72853946E12, 0.0], [1.72854084E12, 0.0], [1.72854528E12, 0.0], [1.72854168E12, 0.0], [1.72853862E12, 0.0], [1.72854492E12, 0.0], [1.7285427E12, 0.0], [1.72853964E12, 0.0], [1.72854066E12, 0.0], [1.72854288E12, 0.0], [1.7285439E12, 0.0], [1.72854282E12, 0.0], [1.7285394E12, 0.0], [1.72854504E12, 0.0], [1.7285406E12, 0.0], [1.7285418E12, 0.0], [1.72854402E12, 0.0], [1.72853958E12, 0.0], [1.72854588E12, 0.0], [1.72854042E12, 0.0], [1.72854264E12, 0.0], [1.72854366E12, 0.0], [1.72854162E12, 0.0], [1.72854384E12, 0.0], [1.72854486E12, 0.0], [1.7285454E12, 0.0], [1.72853994E12, 0.0], [1.72854216E12, 0.0], [1.72853874E12, 0.0], [1.72854318E12, 0.0], [1.72854114E12, 0.0], [1.72854336E12, 0.0], [1.72854438E12, 0.0], [1.72853976E12, 0.0], [1.72853892E12, 0.0], [1.728543E12, 0.0], [1.72854522E12, 0.0], [1.72854078E12, 0.0], [1.72854096E12, 0.0], [1.7285442E12, 0.0], [1.72854198E12, 0.0], [1.7285409E12, 0.0], [1.72854312E12, 0.0], [1.72854414E12, 0.0], [1.7285397E12, 0.0], [1.7285421E12, 0.0], [1.72854534E12, 0.0], [1.72853988E12, 0.0], [1.72854432E12, 0.0], [1.72854072E12, 0.0], [1.72854174E12, 0.0], [1.72854396E12, 0.0], [1.72854516E12, 0.0], [1.72853868E12, 0.0], [1.72854192E12, 0.0], [1.72854294E12, 0.0], [1.72854024E12, 0.0], [1.72853904E12, 0.0], [1.72854126E12, 0.0], [1.72854348E12, 0.0], [1.7285457E12, 0.0], [1.72853886E12, 0.0], [1.72854144E12, 0.0], [1.72854468E12, 0.0], [1.72854246E12, 0.0], [1.7285433E12, 0.0], [1.72853922E12, 0.0], [1.72854108E12, 0.0], [1.72854552E12, 0.0], [1.72854006E12, 0.0], [1.72854228E12, 0.0], [1.7285445E12, 0.0], [1.7285412E12, 0.0], [1.72854444E12, 0.0], [1.72854222E12, 0.0], [1.72854564E12, 0.0], [1.72854018E12, 0.0], [1.7285424E12, 0.0], [1.72854342E12, 0.0], [1.7285388E12, 0.0], [1.72853982E12, 0.0], [1.72854204E12, 0.0], [1.72854426E12, 0.0], [1.72854E12, 0.0], [1.72853898E12, 0.0], [1.72854102E12, 0.0], [1.72854324E12, 0.0], [1.72854546E12, 0.0], [1.72854378E12, 0.0], [1.72854156E12, 0.0], [1.72853916E12, 0.0], [1.72854054E12, 0.0], [1.72854276E12, 0.0], [1.72854498E12, 0.0], [1.72854138E12, 0.0], [1.7285436E12, 0.0], [1.72854462E12, 0.0], [1.72853952E12, 0.0], [1.72853934E12, 0.0], [1.72854258E12, 0.0], [1.72854582E12, 0.0], [1.72854036E12, 0.0], [1.7285448E12, 0.0]], "isOverall": false, "label": "getmap", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72854594E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.72853862E12, "maxY": 3616.0, "series": [{"data": [[1.7285391E12, 1541.0], [1.7285403E12, 1407.0], [1.72854252E12, 2450.0], [1.72854474E12, 3234.0], [1.72854048E12, 1505.0], [1.7285415E12, 1794.0], [1.72854372E12, 2696.0], [1.72854594E12, 1898.0], [1.72854234E12, 1922.0], [1.72854558E12, 3193.0], [1.72854012E12, 1672.0], [1.72854456E12, 3055.0], [1.72854354E12, 2298.0], [1.72854132E12, 1772.0], [1.72854576E12, 3598.0], [1.72853928E12, 1628.0], [1.72854186E12, 1832.0], [1.7285451E12, 3391.0], [1.72854408E12, 2223.0], [1.72854306E12, 2364.0], [1.72853946E12, 1713.0], [1.72854084E12, 1776.0], [1.72854528E12, 3442.0], [1.72854168E12, 1928.0], [1.72853862E12, 1568.0], [1.72854492E12, 3190.0], [1.7285427E12, 2659.0], [1.72853964E12, 1577.0], [1.72854066E12, 1783.0], [1.72854288E12, 2857.0], [1.7285439E12, 2468.0], [1.72854282E12, 2720.0], [1.7285394E12, 1436.0], [1.72854504E12, 3203.0], [1.7285406E12, 1930.0], [1.7285418E12, 1699.0], [1.72854402E12, 2523.0], [1.72853958E12, 1762.0], [1.72854588E12, 3036.0], [1.72854042E12, 1605.0], [1.72854264E12, 2631.0], [1.72854366E12, 2636.0], [1.72854162E12, 2060.0], [1.72854384E12, 2765.0], [1.72854486E12, 3520.0], [1.7285454E12, 3387.0], [1.72853994E12, 1488.0], [1.72854216E12, 2088.0], [1.72853874E12, 1596.0], [1.72854318E12, 2700.0], [1.72854114E12, 1690.0], [1.72854336E12, 2345.0], [1.72854438E12, 2988.0], [1.72853976E12, 1342.0], [1.72853892E12, 1476.0], [1.728543E12, 2581.0], [1.72854522E12, 2867.0], [1.72854078E12, 1801.0], [1.72854096E12, 1796.0], [1.7285442E12, 2589.0], [1.72854198E12, 1999.0], [1.7285409E12, 1986.0], [1.72854312E12, 2423.0], [1.72854414E12, 2550.0], [1.7285397E12, 1517.0], [1.7285421E12, 1830.0], [1.72854534E12, 3216.0], [1.72853988E12, 1454.0], [1.72854432E12, 2759.0], [1.72854072E12, 1804.0], [1.72854174E12, 1785.0], [1.72854396E12, 2511.0], [1.72854516E12, 2757.0], [1.72853868E12, 1307.0], [1.72854192E12, 1745.0], [1.72854294E12, 2540.0], [1.72854024E12, 1878.0], [1.72853904E12, 1336.0], [1.72854126E12, 1748.0], [1.72854348E12, 2516.0], [1.7285457E12, 2871.0], [1.72853886E12, 1507.0], [1.72854144E12, 1827.0], [1.72854468E12, 2976.0], [1.72854246E12, 2379.0], [1.7285433E12, 2390.0], [1.72853922E12, 1515.0], [1.72854108E12, 1888.0], [1.72854552E12, 3430.0], [1.72854006E12, 1414.0], [1.72854228E12, 1864.0], [1.7285445E12, 3014.0], [1.7285412E12, 1897.0], [1.72854444E12, 3154.0], [1.72854222E12, 2186.0], [1.72854564E12, 2845.0], [1.72854018E12, 1394.0], [1.7285424E12, 1830.0], [1.72854342E12, 2659.0], [1.7285388E12, 1449.0], [1.72853982E12, 1705.0], [1.72854204E12, 1951.0], [1.72854426E12, 2183.0], [1.72854E12, 1378.0], [1.72853898E12, 1376.0], [1.72854102E12, 1982.0], [1.72854324E12, 2975.0], [1.72854546E12, 3376.0], [1.72854378E12, 2581.0], [1.72854156E12, 1821.0], [1.72853916E12, 1704.0], [1.72854054E12, 2087.0], [1.72854276E12, 2553.0], [1.72854498E12, 3616.0], [1.72854138E12, 1893.0], [1.7285436E12, 2532.0], [1.72854462E12, 3141.0], [1.72853952E12, 1798.0], [1.72853934E12, 1378.0], [1.72854258E12, 2315.0], [1.72854582E12, 3328.0], [1.72854036E12, 1468.0], [1.7285448E12, 3325.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7285391E12, 869.0], [1.7285403E12, 880.0], [1.72854252E12, 1360.0], [1.72854474E12, 1757.2000000000003], [1.72854048E12, 945.2], [1.7285415E12, 1032.3999999999999], [1.72854372E12, 1359.6000000000001], [1.72854594E12, 1098.0], [1.72854234E12, 1021.8000000000001], [1.72854558E12, 1730.0000000000007], [1.72854012E12, 911.0], [1.72854456E12, 1662.0], [1.72854354E12, 1359.0], [1.72854132E12, 1000.2000000000003], [1.72854576E12, 1794.6000000000004], [1.72853928E12, 938.8], [1.72854186E12, 1033.3000000000002], [1.7285451E12, 1733.1000000000006], [1.72854408E12, 1314.1000000000001], [1.72854306E12, 1396.7999999999997], [1.72853946E12, 862.8], [1.72854084E12, 1072.6], [1.72854528E12, 1704.6000000000001], [1.72854168E12, 1002.7000000000002], [1.72853862E12, 880.4], [1.72854492E12, 1686.1000000000001], [1.7285427E12, 1383.2000000000007], [1.72853964E12, 876.7999999999997], [1.72854066E12, 1038.5000000000002], [1.72854288E12, 1364.6], [1.7285439E12, 1340.0], [1.72854282E12, 1385.4000000000005], [1.7285394E12, 911.2000000000005], [1.72854504E12, 1734.7], [1.7285406E12, 1012.1000000000001], [1.7285418E12, 991.4000000000002], [1.72854402E12, 1356.8000000000006], [1.72853958E12, 836.6000000000001], [1.72854588E12, 1659.5], [1.72854042E12, 831.8000000000002], [1.72854264E12, 1358.0], [1.72854366E12, 1389.6000000000004], [1.72854162E12, 1017.8], [1.72854384E12, 1350.2], [1.72854486E12, 1732.8000000000004], [1.7285454E12, 1763.3999999999996], [1.72853994E12, 864.8000000000006], [1.72854216E12, 1002.8000000000001], [1.72853874E12, 856.5999999999999], [1.72854318E12, 1371.6], [1.72854114E12, 1022.6], [1.72854336E12, 1358.0], [1.72854438E12, 1717.7], [1.72853976E12, 896.8000000000002], [1.72853892E12, 867.6999999999999], [1.728543E12, 1384.0], [1.72854522E12, 1736.8000000000002], [1.72854078E12, 988.5], [1.72854096E12, 988.0], [1.7285442E12, 1410.2], [1.72854198E12, 1032.6], [1.7285409E12, 1022.4000000000001], [1.72854312E12, 1368.8], [1.72854414E12, 1351.0], [1.7285397E12, 853.8000000000001], [1.7285421E12, 1041.5], [1.72854534E12, 1835.6000000000001], [1.72853988E12, 875.5999999999999], [1.72854432E12, 1379.4], [1.72854072E12, 1029.0], [1.72854174E12, 1055.0], [1.72854396E12, 1370.9999999999998], [1.72854516E12, 1684.8000000000002], [1.72853868E12, 880.0], [1.72854192E12, 1021.4999999999999], [1.72854294E12, 1352.2000000000003], [1.72854024E12, 861.5], [1.72853904E12, 895.0999999999999], [1.72854126E12, 1020.0], [1.72854348E12, 1333.2000000000003], [1.7285457E12, 1675.2], [1.72853886E12, 850.1999999999998], [1.72854144E12, 1036.6999999999998], [1.72854468E12, 1726.4000000000005], [1.72854246E12, 1344.0], [1.7285433E12, 1365.0], [1.72853922E12, 909.8], [1.72854108E12, 1035.4], [1.72854552E12, 1722.0], [1.72854006E12, 834.0], [1.72854228E12, 1007.9999999999998], [1.7285445E12, 1675.0], [1.7285412E12, 1033.6000000000001], [1.72854444E12, 1747.000000000001], [1.72854222E12, 1046.3999999999999], [1.72854564E12, 1733.0], [1.72854018E12, 954.3000000000002], [1.7285424E12, 949.3000000000001], [1.72854342E12, 1363.0], [1.7285388E12, 875.6000000000003], [1.72853982E12, 881.9], [1.72854204E12, 1037.0], [1.72854426E12, 1331.4], [1.72854E12, 877.1999999999999], [1.72853898E12, 898.0], [1.72854102E12, 998.8000000000002], [1.72854324E12, 1414.0], [1.72854546E12, 1716.6000000000013], [1.72854378E12, 1304.800000000001], [1.72854156E12, 1005.8], [1.72853916E12, 881.4], [1.72854054E12, 1041.8], [1.72854276E12, 1401.6000000000001], [1.72854498E12, 1776.1000000000001], [1.72854138E12, 1013.5], [1.7285436E12, 1387.4], [1.72854462E12, 1720.4000000000012], [1.72853952E12, 896.4000000000001], [1.72853934E12, 916.4000000000002], [1.72854258E12, 1342.0], [1.72854582E12, 1722.6000000000004], [1.72854036E12, 878.7], [1.7285448E12, 1722.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7285391E12, 1379.3000000000006], [1.7285403E12, 1299.0], [1.72854252E12, 1959.3999999999999], [1.72854474E12, 2501.039999999998], [1.72854048E12, 1273.44], [1.7285415E12, 1529.3299999999995], [1.72854372E12, 2048.9999999999986], [1.72854594E12, 1642.199999999999], [1.72854234E12, 1357.88], [1.72854558E12, 2455.3599999999974], [1.72854012E12, 1342.6000000000054], [1.72854456E12, 2448.72], [1.72854354E12, 1983.8000000000018], [1.72854132E12, 1443.669999999999], [1.72854576E12, 2557.7000000000007], [1.72853928E12, 1312.4800000000023], [1.72854186E12, 1492.8299999999997], [1.7285451E12, 2491.4000000000015], [1.72854408E12, 1871.5500000000004], [1.72854306E12, 1997.3199999999997], [1.72853946E12, 1302.8399999999983], [1.72854084E12, 1571.2000000000003], [1.72854528E12, 2549.4400000000005], [1.72854168E12, 1521.7199999999993], [1.72853862E12, 1536.8400000000006], [1.72854492E12, 2484.710000000002], [1.7285427E12, 1962.3599999999997], [1.72853964E12, 1464.3199999999983], [1.72854066E12, 1473.9299999999998], [1.72854288E12, 2126.5800000000004], [1.7285439E12, 1926.75], [1.72854282E12, 1970.2800000000007], [1.7285394E12, 1148.92], [1.72854504E12, 2516.370000000001], [1.7285406E12, 1442.1100000000004], [1.7285418E12, 1459.199999999998], [1.72854402E12, 2045.280000000002], [1.72853958E12, 1288.32], [1.72854588E12, 2393.0], [1.72854042E12, 1266.68], [1.72854264E12, 2050.0], [1.72854366E12, 2090.029999999999], [1.72854162E12, 1508.1200000000058], [1.72854384E12, 1986.680000000004], [1.72854486E12, 2709.440000000003], [1.7285454E12, 2475.1599999999994], [1.72853994E12, 1385.9100000000008], [1.72854216E12, 1520.8600000000001], [1.72853874E12, 1267.880000000002], [1.72854318E12, 2013.4399999999996], [1.72854114E12, 1548.8400000000001], [1.72854336E12, 1893.4000000000005], [1.72854438E12, 2450.0300000000007], [1.72853976E12, 1239.0800000000004], [1.72853892E12, 1221.3600000000001], [1.728543E12, 2068.799999999999], [1.72854522E12, 2503.6500000000033], [1.72854078E12, 1493.8000000000006], [1.72854096E12, 1462.3999999999999], [1.7285442E12, 2105.010000000001], [1.72854198E12, 1518.5300000000007], [1.7285409E12, 1449.7700000000011], [1.72854312E12, 2030.12], [1.72854414E12, 2126.839999999998], [1.7285397E12, 1243.5199999999998], [1.7285421E12, 1497.880000000001], [1.72854534E12, 2502.199999999997], [1.72853988E12, 1178.0], [1.72854432E12, 2273.959999999998], [1.72854072E12, 1469.1999999999996], [1.72854174E12, 1518.8199999999997], [1.72854396E12, 2015.2800000000002], [1.72854516E12, 2333.000000000002], [1.72853868E12, 1242.5999999999988], [1.72854192E12, 1427.8499999999995], [1.72854294E12, 1917.9599999999973], [1.72854024E12, 1308.1499999999999], [1.72853904E12, 1258.3500000000001], [1.72854126E12, 1461.3999999999992], [1.72854348E12, 1930.3599999999997], [1.7285457E12, 2558.6], [1.72853886E12, 1186.84], [1.72854144E12, 1509.58], [1.72854468E12, 2648.46], [1.72854246E12, 2092.150000000002], [1.7285433E12, 2030.8999999999994], [1.72853922E12, 1280.8400000000004], [1.72854108E12, 1465.78], [1.72854552E12, 2511.7199999999993], [1.72854006E12, 1210.0399999999986], [1.72854228E12, 1540.7599999999993], [1.7285445E12, 2551.100000000004], [1.7285412E12, 1460.2999999999997], [1.72854444E12, 2535.92], [1.72854222E12, 1536.4799999999996], [1.72854564E12, 2468.999999999999], [1.72854018E12, 1229.1400000000015], [1.7285424E12, 1600.4799999999982], [1.72854342E12, 2151.7299999999977], [1.7285388E12, 1299.1], [1.72853982E12, 1294.499999999997], [1.72854204E12, 1656.099999999998], [1.72854426E12, 1985.3400000000006], [1.72854E12, 1310.2599999999998], [1.72853898E12, 1286.0000000000002], [1.72854102E12, 1481.4800000000002], [1.72854324E12, 1974.0], [1.72854546E12, 2732.239999999997], [1.72854378E12, 1956.6400000000003], [1.72854156E12, 1504.68], [1.72853916E12, 1353.12], [1.72854054E12, 1618.4400000000005], [1.72854276E12, 2102.52], [1.72854498E12, 2430.9900000000034], [1.72854138E12, 1617.0499999999997], [1.7285436E12, 2034.7599999999948], [1.72854462E12, 2516.259999999999], [1.72853952E12, 1446.3599999999974], [1.72853934E12, 1200.1900000000003], [1.72854258E12, 1915.800000000002], [1.72854582E12, 2460.4499999999994], [1.72854036E12, 1275.1400000000017], [1.7285448E12, 2573.5499999999993]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7285391E12, 1008.5], [1.7285403E12, 1049.5], [1.72854252E12, 1557.0], [1.72854474E12, 2030.7999999999997], [1.72854048E12, 1069.6], [1.7285415E12, 1203.0], [1.72854372E12, 1541.1999999999998], [1.72854594E12, 1226.0], [1.72854234E12, 1163.1999999999998], [1.72854558E12, 1974.0999999999997], [1.72854012E12, 1051.4], [1.72854456E12, 1981.1999999999998], [1.72854354E12, 1536.0], [1.72854132E12, 1144.0999999999997], [1.72854576E12, 2050.3999999999996], [1.72853928E12, 1073.8], [1.72854186E12, 1196.1999999999998], [1.7285451E12, 2011.7999999999993], [1.72854408E12, 1571.55], [1.72854306E12, 1584.0], [1.72853946E12, 987.1999999999999], [1.72854084E12, 1216.0], [1.72854528E12, 1988.999999999999], [1.72854168E12, 1196.05], [1.72853862E12, 1003.1999999999999], [1.72854492E12, 1957.4499999999996], [1.7285427E12, 1593.7000000000003], [1.72853964E12, 1022.6999999999999], [1.72854066E12, 1197.0], [1.72854288E12, 1592.7], [1.7285439E12, 1565.0], [1.72854282E12, 1573.4999999999993], [1.7285394E12, 1004.8000000000001], [1.72854504E12, 1993.849999999999], [1.7285406E12, 1177.4499999999994], [1.7285418E12, 1180.0], [1.72854402E12, 1584.6000000000004], [1.72853958E12, 1006.1999999999996], [1.72854588E12, 1967.25], [1.72854042E12, 935.0], [1.72854264E12, 1643.0], [1.72854366E12, 1657.9], [1.72854162E12, 1166.0], [1.72854384E12, 1558.6], [1.72854486E12, 2017.1999999999998], [1.7285454E12, 1996.3999999999999], [1.72853994E12, 1004.4500000000002], [1.72854216E12, 1150.9999999999995], [1.72853874E12, 1012.3999999999994], [1.72854318E12, 1586.199999999999], [1.72854114E12, 1209.6], [1.72854336E12, 1587.0], [1.72854438E12, 1973.7499999999995], [1.72853976E12, 1012.3000000000001], [1.72853892E12, 1004.0], [1.728543E12, 1557.0], [1.72854522E12, 2034.6500000000012], [1.72854078E12, 1165.5], [1.72854096E12, 1146.6], [1.7285442E12, 1653.5999999999995], [1.72854198E12, 1176.6999999999996], [1.7285409E12, 1179.9999999999982], [1.72854312E12, 1611.3999999999992], [1.72854414E12, 1624.8000000000002], [1.7285397E12, 977.9999999999998], [1.7285421E12, 1204.2499999999995], [1.72854534E12, 2052.1499999999996], [1.72853988E12, 1020.7999999999997], [1.72854432E12, 1666.3999999999999], [1.72854072E12, 1172.3999999999992], [1.72854174E12, 1216.7999999999997], [1.72854396E12, 1653.2], [1.72854516E12, 1940.599999999999], [1.72853868E12, 1036.5], [1.72854192E12, 1185.8999999999999], [1.72854294E12, 1554.4000000000005], [1.72854024E12, 1034.0], [1.72853904E12, 1020.7], [1.72854126E12, 1218.0], [1.72854348E12, 1572.3], [1.7285457E12, 1982.6], [1.72853886E12, 964.0], [1.72854144E12, 1246.5999999999995], [1.72854468E12, 2045.0], [1.72854246E12, 1600.5], [1.7285433E12, 1566.0], [1.72853922E12, 1031.3999999999999], [1.72854108E12, 1194.4999999999998], [1.72854552E12, 1994.6999999999996], [1.72854006E12, 978.0], [1.72854228E12, 1170.7999999999997], [1.7285445E12, 1929.5], [1.7285412E12, 1219.4999999999998], [1.72854444E12, 2061.6000000000004], [1.72854222E12, 1215.5999999999995], [1.72854564E12, 1975.1999999999998], [1.72854018E12, 1068.4999999999993], [1.7285424E12, 1075.75], [1.72854342E12, 1635.1499999999999], [1.7285388E12, 1033.0999999999992], [1.72853982E12, 1006.3999999999992], [1.72854204E12, 1223.0], [1.72854426E12, 1548.85], [1.72854E12, 1044.7999999999997], [1.72853898E12, 998.1999999999999], [1.72854102E12, 1161.0999999999997], [1.72854324E12, 1662.0], [1.72854546E12, 1955.2000000000003], [1.72854378E12, 1542.6000000000004], [1.72854156E12, 1203.1999999999998], [1.72853916E12, 1014.3999999999999], [1.72854054E12, 1202.6999999999998], [1.72854276E12, 1643.6], [1.72854498E12, 2013.1], [1.72854138E12, 1192.25], [1.7285436E12, 1641.099999999999], [1.72854462E12, 1980.1999999999998], [1.72853952E12, 1041.7999999999997], [1.72853934E12, 1059.7999999999997], [1.72854258E12, 1554.0], [1.72854582E12, 2028.35], [1.72854036E12, 1045.85], [1.7285448E12, 2004.0499999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7285391E12, 31.0], [1.7285403E12, 32.0], [1.72854252E12, 38.0], [1.72854474E12, 56.0], [1.72854048E12, 38.0], [1.7285415E12, 31.0], [1.72854372E12, 32.0], [1.72854594E12, 38.0], [1.72854234E12, 35.0], [1.72854558E12, 61.0], [1.72854012E12, 37.0], [1.72854456E12, 64.0], [1.72854354E12, 41.0], [1.72854132E12, 37.0], [1.72854576E12, 55.0], [1.72853928E12, 31.0], [1.72854186E12, 36.0], [1.7285451E12, 57.0], [1.72854408E12, 41.0], [1.72854306E12, 46.0], [1.72853946E12, 36.0], [1.72854084E12, 31.0], [1.72854528E12, 59.0], [1.72854168E12, 32.0], [1.72853862E12, 43.0], [1.72854492E12, 56.0], [1.7285427E12, 39.0], [1.72853964E12, 34.0], [1.72854066E12, 38.0], [1.72854288E12, 37.0], [1.7285439E12, 32.0], [1.72854282E12, 38.0], [1.7285394E12, 38.0], [1.72854504E12, 62.0], [1.7285406E12, 39.0], [1.7285418E12, 35.0], [1.72854402E12, 38.0], [1.72853958E12, 31.0], [1.72854588E12, 57.0], [1.72854042E12, 34.0], [1.72854264E12, 33.0], [1.72854366E12, 45.0], [1.72854162E12, 32.0], [1.72854384E12, 44.0], [1.72854486E12, 57.0], [1.7285454E12, 58.0], [1.72853994E12, 40.0], [1.72854216E12, 32.0], [1.72853874E12, 35.0], [1.72854318E12, 36.0], [1.72854114E12, 38.0], [1.72854336E12, 46.0], [1.72854438E12, 55.0], [1.72853976E12, 34.0], [1.72853892E12, 38.0], [1.728543E12, 36.0], [1.72854522E12, 56.0], [1.72854078E12, 36.0], [1.72854096E12, 36.0], [1.7285442E12, 37.0], [1.72854198E12, 36.0], [1.7285409E12, 32.0], [1.72854312E12, 37.0], [1.72854414E12, 42.0], [1.7285397E12, 34.0], [1.7285421E12, 33.0], [1.72854534E12, 56.0], [1.72853988E12, 34.0], [1.72854432E12, 38.0], [1.72854072E12, 32.0], [1.72854174E12, 33.0], [1.72854396E12, 42.0], [1.72854516E12, 61.0], [1.72853868E12, 35.0], [1.72854192E12, 34.0], [1.72854294E12, 40.0], [1.72854024E12, 34.0], [1.72853904E12, 38.0], [1.72854126E12, 38.0], [1.72854348E12, 43.0], [1.7285457E12, 61.0], [1.72853886E12, 33.0], [1.72854144E12, 36.0], [1.72854468E12, 64.0], [1.72854246E12, 42.0], [1.7285433E12, 36.0], [1.72853922E12, 34.0], [1.72854108E12, 37.0], [1.72854552E12, 60.0], [1.72854006E12, 35.0], [1.72854228E12, 32.0], [1.7285445E12, 59.0], [1.7285412E12, 37.0], [1.72854444E12, 67.0], [1.72854222E12, 34.0], [1.72854564E12, 70.0], [1.72854018E12, 36.0], [1.7285424E12, 36.0], [1.72854342E12, 36.0], [1.7285388E12, 39.0], [1.72853982E12, 29.0], [1.72854204E12, 34.0], [1.72854426E12, 45.0], [1.72854E12, 34.0], [1.72853898E12, 35.0], [1.72854102E12, 36.0], [1.72854324E12, 42.0], [1.72854546E12, 63.0], [1.72854378E12, 38.0], [1.72854156E12, 32.0], [1.72853916E12, 34.0], [1.72854054E12, 35.0], [1.72854276E12, 34.0], [1.72854498E12, 63.0], [1.72854138E12, 30.0], [1.7285436E12, 49.0], [1.72854462E12, 63.0], [1.72853952E12, 34.0], [1.72853934E12, 35.0], [1.72854258E12, 34.0], [1.72854582E12, 52.0], [1.72854036E12, 29.0], [1.7285448E12, 47.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7285391E12, 352.0], [1.7285403E12, 420.0], [1.72854252E12, 514.0], [1.72854474E12, 710.0], [1.72854048E12, 353.0], [1.7285415E12, 462.5], [1.72854372E12, 548.0], [1.72854594E12, 424.0], [1.72854234E12, 443.0], [1.72854558E12, 696.0], [1.72854012E12, 380.0], [1.72854456E12, 610.0], [1.72854354E12, 490.0], [1.72854132E12, 391.5], [1.72854576E12, 785.0], [1.72853928E12, 411.0], [1.72854186E12, 399.5], [1.7285451E12, 623.5], [1.72854408E12, 477.0], [1.72854306E12, 547.0], [1.72853946E12, 354.0], [1.72854084E12, 391.0], [1.72854528E12, 674.0], [1.72854168E12, 406.0], [1.72853862E12, 311.5], [1.72854492E12, 747.0], [1.7285427E12, 521.5], [1.72853964E12, 351.0], [1.72854066E12, 394.5], [1.72854288E12, 571.0], [1.7285439E12, 600.5], [1.72854282E12, 551.0], [1.7285394E12, 360.0], [1.72854504E12, 632.0], [1.7285406E12, 396.5], [1.7285418E12, 392.0], [1.72854402E12, 523.0], [1.72853958E12, 381.0], [1.72854588E12, 610.0], [1.72854042E12, 271.0], [1.72854264E12, 606.0], [1.72854366E12, 516.0], [1.72854162E12, 370.0], [1.72854384E12, 550.0], [1.72854486E12, 705.0], [1.7285454E12, 758.0], [1.72853994E12, 346.0], [1.72854216E12, 422.0], [1.72853874E12, 314.0], [1.72854318E12, 576.0], [1.72854114E12, 428.0], [1.72854336E12, 520.0], [1.72854438E12, 629.5], [1.72853976E12, 384.0], [1.72853892E12, 370.0], [1.728543E12, 552.0], [1.72854522E12, 781.5], [1.72854078E12, 438.0], [1.72854096E12, 366.0], [1.7285442E12, 575.5], [1.72854198E12, 452.5], [1.7285409E12, 436.5], [1.72854312E12, 511.0], [1.72854414E12, 579.0], [1.7285397E12, 305.0], [1.7285421E12, 420.0], [1.72854534E12, 804.5], [1.72853988E12, 338.5], [1.72854432E12, 472.0], [1.72854072E12, 421.0], [1.72854174E12, 433.0], [1.72854396E12, 526.0], [1.72854516E12, 717.0], [1.72853868E12, 282.0], [1.72854192E12, 420.5], [1.72854294E12, 500.0], [1.72854024E12, 362.5], [1.72853904E12, 410.5], [1.72854126E12, 379.0], [1.72854348E12, 487.0], [1.7285457E12, 633.0], [1.72853886E12, 306.0], [1.72854144E12, 459.5], [1.72854468E12, 732.0], [1.72854246E12, 455.5], [1.7285433E12, 497.0], [1.72853922E12, 364.0], [1.72854108E12, 453.0], [1.72854552E12, 663.0], [1.72854006E12, 274.0], [1.72854228E12, 435.0], [1.7285445E12, 667.0], [1.7285412E12, 425.5], [1.72854444E12, 680.0], [1.72854222E12, 422.0], [1.72854564E12, 720.0], [1.72854018E12, 425.0], [1.7285424E12, 347.0], [1.72854342E12, 597.0], [1.7285388E12, 435.0], [1.72853982E12, 368.5], [1.72854204E12, 404.5], [1.72854426E12, 576.5], [1.72854E12, 374.0], [1.72853898E12, 387.0], [1.72854102E12, 425.0], [1.72854324E12, 596.0], [1.72854546E12, 743.0], [1.72854378E12, 492.0], [1.72854156E12, 397.0], [1.72853916E12, 367.0], [1.72854054E12, 462.0], [1.72854276E12, 632.0], [1.72854498E12, 759.5], [1.72854138E12, 431.0], [1.7285436E12, 576.0], [1.72854462E12, 739.0], [1.72853952E12, 405.0], [1.72853934E12, 423.5], [1.72854258E12, 548.0], [1.72854582E12, 764.0], [1.72854036E12, 329.0], [1.7285448E12, 708.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72854594E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 198.0, "minX": 1.0, "maxY": 830.0, "series": [{"data": [[2.0, 639.0], [32.0, 250.5], [33.0, 280.0], [35.0, 198.0], [34.0, 293.5], [40.0, 224.0], [3.0, 533.5], [4.0, 549.0], [5.0, 514.0], [6.0, 548.5], [7.0, 508.0], [8.0, 470.0], [9.0, 432.5], [10.0, 424.0], [11.0, 413.0], [12.0, 485.0], [13.0, 537.0], [14.0, 538.5], [15.0, 567.0], [1.0, 830.0], [16.0, 565.0], [17.0, 541.0], [18.0, 517.0], [19.0, 489.0], [20.0, 481.0], [21.0, 435.0], [22.0, 406.5], [23.0, 391.5], [24.0, 329.0], [25.0, 325.5], [26.0, 311.0], [27.0, 278.0], [28.0, 263.0], [29.0, 240.0], [30.0, 254.0], [31.0, 233.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 128.0, "minX": 1.0, "maxY": 580.0, "series": [{"data": [[2.0, 424.5], [32.0, 158.0], [33.0, 181.0], [35.0, 128.0], [34.0, 193.5], [40.0, 135.0], [3.0, 382.5], [4.0, 358.0], [5.0, 357.0], [6.0, 361.5], [7.0, 351.5], [8.0, 331.5], [9.0, 308.0], [10.0, 304.0], [11.0, 293.0], [12.0, 341.0], [13.0, 376.0], [14.0, 380.0], [15.0, 404.0], [1.0, 580.0], [16.0, 402.0], [17.0, 381.0], [18.0, 373.0], [19.0, 357.0], [20.0, 351.5], [21.0, 315.0], [22.0, 289.0], [23.0, 277.0], [24.0, 220.5], [25.0, 213.0], [26.0, 203.0], [27.0, 170.0], [28.0, 163.0], [29.0, 151.0], [30.0, 152.0], [31.0, 135.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.333333333333333, "minX": 1.72853862E12, "maxY": 21.05, "series": [{"data": [[1.7285391E12, 9.816666666666666], [1.7285403E12, 9.15], [1.72854252E12, 19.516666666666666], [1.72854474E12, 19.783333333333335], [1.72854048E12, 8.85], [1.7285415E12, 16.333333333333332], [1.72854372E12, 19.05], [1.72854594E12, 8.466666666666667], [1.72854234E12, 15.833333333333334], [1.72854558E12, 20.216666666666665], [1.72854012E12, 9.45], [1.72854456E12, 21.05], [1.72854354E12, 19.65], [1.72854132E12, 17.433333333333334], [1.72854576E12, 18.866666666666667], [1.72853928E12, 9.016666666666667], [1.72854186E12, 17.3], [1.7285451E12, 20.533333333333335], [1.72854408E12, 20.133333333333333], [1.72854306E12, 19.016666666666666], [1.72853946E12, 9.916666666666666], [1.72854084E12, 16.916666666666668], [1.72854528E12, 20.05], [1.72854168E12, 16.966666666666665], [1.72853862E12, 4.333333333333333], [1.72854492E12, 19.633333333333333], [1.7285427E12, 19.0], [1.72853964E12, 10.083333333333334], [1.72854066E12, 17.033333333333335], [1.72854288E12, 18.416666666666668], [1.7285439E12, 18.733333333333334], [1.72854282E12, 19.216666666666665], [1.7285394E12, 9.783333333333333], [1.72854504E12, 20.533333333333335], [1.7285406E12, 17.533333333333335], [1.7285418E12, 17.183333333333334], [1.72854402E12, 19.25], [1.72853958E12, 9.716666666666667], [1.72854588E12, 20.316666666666666], [1.72854042E12, 10.616666666666667], [1.72854264E12, 18.316666666666666], [1.72854366E12, 19.0], [1.72854162E12, 17.25], [1.72854384E12, 18.883333333333333], [1.72854486E12, 19.716666666666665], [1.7285454E12, 19.516666666666666], [1.72853994E12, 9.866666666666667], [1.72854216E12, 16.883333333333333], [1.72853874E12, 5.116666666666666], [1.72854318E12, 18.716666666666665], [1.72854114E12, 16.716666666666665], [1.72854336E12, 19.316666666666666], [1.72854438E12, 20.516666666666666], [1.72853976E12, 9.616666666666667], [1.72853892E12, 9.833333333333334], [1.728543E12, 18.983333333333334], [1.72854522E12, 19.333333333333332], [1.72854078E12, 16.9], [1.72854096E12, 17.85], [1.7285442E12, 18.466666666666665], [1.72854198E12, 16.5], [1.7285409E12, 16.7], [1.72854312E12, 19.516666666666666], [1.72854414E12, 18.583333333333332], [1.7285397E12, 10.383333333333333], [1.7285421E12, 16.5], [1.72854534E12, 18.6], [1.72853988E12, 10.0], [1.72854432E12, 15.166666666666666], [1.72854072E12, 16.783333333333335], [1.72854174E12, 16.416666666666668], [1.72854396E12, 18.916666666666668], [1.72854516E12, 20.116666666666667], [1.72853868E12, 5.15], [1.72854192E12, 17.0], [1.72854294E12, 19.916666666666668], [1.72854024E12, 9.9], [1.72853904E12, 9.2], [1.72854126E12, 17.316666666666666], [1.72854348E12, 19.55], [1.7285457E12, 20.783333333333335], [1.72853886E12, 9.316666666666666], [1.72854144E12, 16.166666666666668], [1.72854468E12, 19.55], [1.72854246E12, 19.733333333333334], [1.7285433E12, 19.483333333333334], [1.72853922E12, 9.583333333333334], [1.72854108E12, 16.216666666666665], [1.72854552E12, 20.35], [1.72854006E12, 10.516666666666667], [1.72854228E12, 16.583333333333332], [1.7285445E12, 20.483333333333334], [1.7285412E12, 16.6], [1.72854444E12, 19.6], [1.72854222E12, 16.583333333333332], [1.72854564E12, 19.95], [1.72854018E12, 9.0], [1.7285424E12, 11.016666666666667], [1.72854342E12, 18.6], [1.7285388E12, 4.616666666666666], [1.72853982E12, 9.666666666666666], [1.72854204E12, 16.566666666666666], [1.72854426E12, 18.35], [1.72854E12, 9.75], [1.72853898E12, 9.583333333333334], [1.72854102E12, 16.883333333333333], [1.72854324E12, 18.316666666666666], [1.72854546E12, 19.416666666666668], [1.72854378E12, 20.083333333333332], [1.72854156E12, 16.916666666666668], [1.72853916E12, 9.75], [1.72854054E12, 16.083333333333332], [1.72854276E12, 17.883333333333333], [1.72854498E12, 19.3], [1.72854138E12, 16.4], [1.7285436E12, 18.95], [1.72854462E12, 19.883333333333333], [1.72853952E12, 9.25], [1.72853934E12, 9.166666666666666], [1.72854258E12, 19.316666666666666], [1.72854582E12, 19.533333333333335], [1.72854036E12, 10.033333333333333], [1.7285448E12, 19.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72854594E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.3, "minX": 1.72853862E12, "maxY": 21.05, "series": [{"data": [[1.7285391E12, 9.816666666666666], [1.7285403E12, 9.15], [1.72854252E12, 19.516666666666666], [1.72854474E12, 19.783333333333335], [1.72854048E12, 8.783333333333333], [1.7285415E12, 16.333333333333332], [1.72854372E12, 19.05], [1.72854594E12, 8.65], [1.72854234E12, 15.85], [1.72854558E12, 20.216666666666665], [1.72854012E12, 9.45], [1.72854456E12, 21.05], [1.72854354E12, 19.65], [1.72854132E12, 17.433333333333334], [1.72854576E12, 18.866666666666667], [1.72853928E12, 9.016666666666667], [1.72854186E12, 17.3], [1.7285451E12, 20.533333333333335], [1.72854408E12, 20.133333333333333], [1.72854306E12, 19.016666666666666], [1.72853946E12, 9.916666666666666], [1.72854084E12, 16.916666666666668], [1.72854528E12, 20.05], [1.72854168E12, 16.966666666666665], [1.72853862E12, 4.3], [1.72854492E12, 19.633333333333333], [1.7285427E12, 19.0], [1.72853964E12, 10.083333333333334], [1.72854066E12, 17.033333333333335], [1.72854288E12, 18.416666666666668], [1.7285439E12, 18.733333333333334], [1.72854282E12, 19.216666666666665], [1.7285394E12, 9.783333333333333], [1.72854504E12, 20.533333333333335], [1.7285406E12, 17.533333333333335], [1.7285418E12, 17.183333333333334], [1.72854402E12, 19.25], [1.72853958E12, 9.716666666666667], [1.72854588E12, 20.4], [1.72854042E12, 10.616666666666667], [1.72854264E12, 18.316666666666666], [1.72854366E12, 19.0], [1.72854162E12, 17.25], [1.72854384E12, 18.883333333333333], [1.72854486E12, 19.716666666666665], [1.7285454E12, 19.516666666666666], [1.72853994E12, 9.866666666666667], [1.72854216E12, 16.883333333333333], [1.72853874E12, 5.116666666666666], [1.72854318E12, 18.716666666666665], [1.72854114E12, 16.716666666666665], [1.72854336E12, 19.316666666666666], [1.72854438E12, 20.533333333333335], [1.72853976E12, 9.616666666666667], [1.72853892E12, 9.833333333333334], [1.728543E12, 18.983333333333334], [1.72854522E12, 19.333333333333332], [1.72854078E12, 16.9], [1.72854096E12, 17.85], [1.7285442E12, 18.466666666666665], [1.72854198E12, 16.5], [1.7285409E12, 16.7], [1.72854312E12, 19.516666666666666], [1.72854414E12, 18.583333333333332], [1.7285397E12, 10.383333333333333], [1.7285421E12, 16.5], [1.72854534E12, 18.6], [1.72853988E12, 10.0], [1.72854432E12, 15.083333333333334], [1.72854072E12, 16.783333333333335], [1.72854174E12, 16.416666666666668], [1.72854396E12, 18.916666666666668], [1.72854516E12, 20.116666666666667], [1.72853868E12, 5.15], [1.72854192E12, 17.0], [1.72854294E12, 19.916666666666668], [1.72854024E12, 9.9], [1.72853904E12, 9.2], [1.72854126E12, 17.316666666666666], [1.72854348E12, 19.55], [1.7285457E12, 20.783333333333335], [1.72853886E12, 9.283333333333333], [1.72854144E12, 16.166666666666668], [1.72854468E12, 19.55], [1.72854246E12, 19.733333333333334], [1.7285433E12, 19.483333333333334], [1.72853922E12, 9.583333333333334], [1.72854108E12, 16.216666666666665], [1.72854552E12, 20.35], [1.72854006E12, 10.516666666666667], [1.72854228E12, 16.583333333333332], [1.7285445E12, 20.483333333333334], [1.7285412E12, 16.6], [1.72854444E12, 19.583333333333332], [1.72854222E12, 16.583333333333332], [1.72854564E12, 19.95], [1.72854018E12, 9.0], [1.7285424E12, 10.933333333333334], [1.72854342E12, 18.6], [1.7285388E12, 4.616666666666666], [1.72853982E12, 9.666666666666666], [1.72854204E12, 16.566666666666666], [1.72854426E12, 18.366666666666667], [1.72854E12, 9.75], [1.72853898E12, 9.583333333333334], [1.72854102E12, 16.883333333333333], [1.72854324E12, 18.316666666666666], [1.72854546E12, 19.416666666666668], [1.72854378E12, 20.083333333333332], [1.72854156E12, 16.916666666666668], [1.72853916E12, 9.75], [1.72854054E12, 16.083333333333332], [1.72854276E12, 17.883333333333333], [1.72854498E12, 19.3], [1.72854138E12, 16.4], [1.7285436E12, 18.95], [1.72854462E12, 19.883333333333333], [1.72853952E12, 9.25], [1.72853934E12, 9.166666666666666], [1.72854258E12, 19.316666666666666], [1.72854582E12, 19.533333333333335], [1.72854036E12, 10.033333333333333], [1.7285448E12, 19.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72854594E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.3, "minX": 1.72853862E12, "maxY": 21.05, "series": [{"data": [[1.7285391E12, 9.816666666666666], [1.7285403E12, 9.15], [1.72854252E12, 19.516666666666666], [1.72854474E12, 19.783333333333335], [1.72854048E12, 8.783333333333333], [1.7285415E12, 16.333333333333332], [1.72854372E12, 19.05], [1.72854594E12, 8.65], [1.72854234E12, 15.85], [1.72854558E12, 20.216666666666665], [1.72854012E12, 9.45], [1.72854456E12, 21.05], [1.72854354E12, 19.65], [1.72854132E12, 17.433333333333334], [1.72854576E12, 18.866666666666667], [1.72853928E12, 9.016666666666667], [1.72854186E12, 17.3], [1.7285451E12, 20.533333333333335], [1.72854408E12, 20.133333333333333], [1.72854306E12, 19.016666666666666], [1.72853946E12, 9.916666666666666], [1.72854084E12, 16.916666666666668], [1.72854528E12, 20.05], [1.72854168E12, 16.966666666666665], [1.72853862E12, 4.3], [1.72854492E12, 19.633333333333333], [1.7285427E12, 19.0], [1.72853964E12, 10.083333333333334], [1.72854066E12, 17.033333333333335], [1.72854288E12, 18.416666666666668], [1.7285439E12, 18.733333333333334], [1.72854282E12, 19.216666666666665], [1.7285394E12, 9.783333333333333], [1.72854504E12, 20.533333333333335], [1.7285406E12, 17.533333333333335], [1.7285418E12, 17.183333333333334], [1.72854402E12, 19.25], [1.72853958E12, 9.716666666666667], [1.72854588E12, 20.4], [1.72854042E12, 10.616666666666667], [1.72854264E12, 18.316666666666666], [1.72854366E12, 19.0], [1.72854162E12, 17.25], [1.72854384E12, 18.883333333333333], [1.72854486E12, 19.716666666666665], [1.7285454E12, 19.516666666666666], [1.72853994E12, 9.866666666666667], [1.72854216E12, 16.883333333333333], [1.72853874E12, 5.116666666666666], [1.72854318E12, 18.716666666666665], [1.72854114E12, 16.716666666666665], [1.72854336E12, 19.316666666666666], [1.72854438E12, 20.533333333333335], [1.72853976E12, 9.616666666666667], [1.72853892E12, 9.833333333333334], [1.728543E12, 18.983333333333334], [1.72854522E12, 19.333333333333332], [1.72854078E12, 16.9], [1.72854096E12, 17.85], [1.7285442E12, 18.466666666666665], [1.72854198E12, 16.5], [1.7285409E12, 16.7], [1.72854312E12, 19.516666666666666], [1.72854414E12, 18.583333333333332], [1.7285397E12, 10.383333333333333], [1.7285421E12, 16.5], [1.72854534E12, 18.6], [1.72853988E12, 10.0], [1.72854432E12, 15.083333333333334], [1.72854072E12, 16.783333333333335], [1.72854174E12, 16.416666666666668], [1.72854396E12, 18.916666666666668], [1.72854516E12, 20.116666666666667], [1.72853868E12, 5.15], [1.72854192E12, 17.0], [1.72854294E12, 19.916666666666668], [1.72854024E12, 9.9], [1.72853904E12, 9.2], [1.72854126E12, 17.316666666666666], [1.72854348E12, 19.55], [1.7285457E12, 20.783333333333335], [1.72853886E12, 9.283333333333333], [1.72854144E12, 16.166666666666668], [1.72854468E12, 19.55], [1.72854246E12, 19.733333333333334], [1.7285433E12, 19.483333333333334], [1.72853922E12, 9.583333333333334], [1.72854108E12, 16.216666666666665], [1.72854552E12, 20.35], [1.72854006E12, 10.516666666666667], [1.72854228E12, 16.583333333333332], [1.7285445E12, 20.483333333333334], [1.7285412E12, 16.6], [1.72854444E12, 19.583333333333332], [1.72854222E12, 16.583333333333332], [1.72854564E12, 19.95], [1.72854018E12, 9.0], [1.7285424E12, 10.933333333333334], [1.72854342E12, 18.6], [1.7285388E12, 4.616666666666666], [1.72853982E12, 9.666666666666666], [1.72854204E12, 16.566666666666666], [1.72854426E12, 18.366666666666667], [1.72854E12, 9.75], [1.72853898E12, 9.583333333333334], [1.72854102E12, 16.883333333333333], [1.72854324E12, 18.316666666666666], [1.72854546E12, 19.416666666666668], [1.72854378E12, 20.083333333333332], [1.72854156E12, 16.916666666666668], [1.72853916E12, 9.75], [1.72854054E12, 16.083333333333332], [1.72854276E12, 17.883333333333333], [1.72854498E12, 19.3], [1.72854138E12, 16.4], [1.7285436E12, 18.95], [1.72854462E12, 19.883333333333333], [1.72853952E12, 9.25], [1.72853934E12, 9.166666666666666], [1.72854258E12, 19.316666666666666], [1.72854582E12, 19.533333333333335], [1.72854036E12, 10.033333333333333], [1.7285448E12, 19.8]], "isOverall": false, "label": "getmap-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72854594E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.3, "minX": 1.72853862E12, "maxY": 21.05, "series": [{"data": [[1.7285391E12, 9.816666666666666], [1.7285403E12, 9.15], [1.72854252E12, 19.516666666666666], [1.72854474E12, 19.783333333333335], [1.72854048E12, 8.783333333333333], [1.7285415E12, 16.333333333333332], [1.72854372E12, 19.05], [1.72854594E12, 8.65], [1.72854234E12, 15.85], [1.72854558E12, 20.216666666666665], [1.72854012E12, 9.45], [1.72854456E12, 21.05], [1.72854354E12, 19.65], [1.72854132E12, 17.433333333333334], [1.72854576E12, 18.866666666666667], [1.72853928E12, 9.016666666666667], [1.72854186E12, 17.3], [1.7285451E12, 20.533333333333335], [1.72854408E12, 20.133333333333333], [1.72854306E12, 19.016666666666666], [1.72853946E12, 9.916666666666666], [1.72854084E12, 16.916666666666668], [1.72854528E12, 20.05], [1.72854168E12, 16.966666666666665], [1.72853862E12, 4.3], [1.72854492E12, 19.633333333333333], [1.7285427E12, 19.0], [1.72853964E12, 10.083333333333334], [1.72854066E12, 17.033333333333335], [1.72854288E12, 18.416666666666668], [1.7285439E12, 18.733333333333334], [1.72854282E12, 19.216666666666665], [1.7285394E12, 9.783333333333333], [1.72854504E12, 20.533333333333335], [1.7285406E12, 17.533333333333335], [1.7285418E12, 17.183333333333334], [1.72854402E12, 19.25], [1.72853958E12, 9.716666666666667], [1.72854588E12, 20.4], [1.72854042E12, 10.616666666666667], [1.72854264E12, 18.316666666666666], [1.72854366E12, 19.0], [1.72854162E12, 17.25], [1.72854384E12, 18.883333333333333], [1.72854486E12, 19.716666666666665], [1.7285454E12, 19.516666666666666], [1.72853994E12, 9.866666666666667], [1.72854216E12, 16.883333333333333], [1.72853874E12, 5.116666666666666], [1.72854318E12, 18.716666666666665], [1.72854114E12, 16.716666666666665], [1.72854336E12, 19.316666666666666], [1.72854438E12, 20.533333333333335], [1.72853976E12, 9.616666666666667], [1.72853892E12, 9.833333333333334], [1.728543E12, 18.983333333333334], [1.72854522E12, 19.333333333333332], [1.72854078E12, 16.9], [1.72854096E12, 17.85], [1.7285442E12, 18.466666666666665], [1.72854198E12, 16.5], [1.7285409E12, 16.7], [1.72854312E12, 19.516666666666666], [1.72854414E12, 18.583333333333332], [1.7285397E12, 10.383333333333333], [1.7285421E12, 16.5], [1.72854534E12, 18.6], [1.72853988E12, 10.0], [1.72854432E12, 15.083333333333334], [1.72854072E12, 16.783333333333335], [1.72854174E12, 16.416666666666668], [1.72854396E12, 18.916666666666668], [1.72854516E12, 20.116666666666667], [1.72853868E12, 5.15], [1.72854192E12, 17.0], [1.72854294E12, 19.916666666666668], [1.72854024E12, 9.9], [1.72853904E12, 9.2], [1.72854126E12, 17.316666666666666], [1.72854348E12, 19.55], [1.7285457E12, 20.783333333333335], [1.72853886E12, 9.283333333333333], [1.72854144E12, 16.166666666666668], [1.72854468E12, 19.55], [1.72854246E12, 19.733333333333334], [1.7285433E12, 19.483333333333334], [1.72853922E12, 9.583333333333334], [1.72854108E12, 16.216666666666665], [1.72854552E12, 20.35], [1.72854006E12, 10.516666666666667], [1.72854228E12, 16.583333333333332], [1.7285445E12, 20.483333333333334], [1.7285412E12, 16.6], [1.72854444E12, 19.583333333333332], [1.72854222E12, 16.583333333333332], [1.72854564E12, 19.95], [1.72854018E12, 9.0], [1.7285424E12, 10.933333333333334], [1.72854342E12, 18.6], [1.7285388E12, 4.616666666666666], [1.72853982E12, 9.666666666666666], [1.72854204E12, 16.566666666666666], [1.72854426E12, 18.366666666666667], [1.72854E12, 9.75], [1.72853898E12, 9.583333333333334], [1.72854102E12, 16.883333333333333], [1.72854324E12, 18.316666666666666], [1.72854546E12, 19.416666666666668], [1.72854378E12, 20.083333333333332], [1.72854156E12, 16.916666666666668], [1.72853916E12, 9.75], [1.72854054E12, 16.083333333333332], [1.72854276E12, 17.883333333333333], [1.72854498E12, 19.3], [1.72854138E12, 16.4], [1.7285436E12, 18.95], [1.72854462E12, 19.883333333333333], [1.72853952E12, 9.25], [1.72853934E12, 9.166666666666666], [1.72854258E12, 19.316666666666666], [1.72854582E12, 19.533333333333335], [1.72854036E12, 10.033333333333333], [1.7285448E12, 19.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72854594E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

